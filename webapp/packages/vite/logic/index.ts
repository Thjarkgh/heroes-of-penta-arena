
/* Autogenerated file, do not edit! */

/* eslint-disable */

import { Noir, InputMap, CompiledCircuit, ForeignCallHandler } from "@noir-lang/noir_js"



export type u8 = string;


export type get_action_actorInputType = {
  action: u8[];
}

export type get_action_actorReturnType = u8;
export const get_action_actor_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"action","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/62QQQqEMAxFbXVgjpM0iU12XsVivf8RVIxQxJ0+CD88QhY/dCfDPj/fwz6958H/5sKDiw+ud9cSPSdPgpG55lSRcIZkRQVYyqioKCpLUqKqrNmKZTBkqriK0QonofkF78Dhu19wddo1nUbvpHX3u4sNdLeouZgBAAA="};

export async function get_action_actor(action: u8[], foreignCallHandler?: ForeignCallHandler): Promise<u8> {
  const program = new Noir(get_action_actor_circuit);
  const args: InputMap = { action };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as u8;
}
export type get_action_target_xInputType = {
  action: u8[];
}

export type get_action_target_xReturnType = u8;
export const get_action_target_x_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"action","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/62QQQqEMAxFbXVgjpM0iU12XsVivf8RVIxQxJ0+CD88QhY/dCfDPj/fwz6958H/5sKDiw+ud9cSPSdPgpG55lSRcIZkRQVYyqioKCpLUqKqrNmKZTBkqriK0QonsfkF78Dhu19wddo1nUbvpHX3u4sN8j1ZYZgBAAA="};

export async function get_action_target_x(action: u8[], foreignCallHandler?: ForeignCallHandler): Promise<u8> {
  const program = new Noir(get_action_target_x_circuit);
  const args: InputMap = { action };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as u8;
}
export type get_action_target_yInputType = {
  action: u8[];
}

export type get_action_target_yReturnType = u8;
export const get_action_target_y_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"action","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/62QQQqEMAxFbevAHCdpEpvs5ipTrPc/gooRirjTB+GHR8jih+Fg3Obje9gmee58Ly7cuHjjkrue6PnzJJiYW8kNCf+QraoAS50UFUVlzkrUlLVYtQKGTA0XMVrgIHW/4Bk4vvcLzk6HrtPonfTueneyAk9G2Z+YAQAA"};

export async function get_action_target_y(action: u8[], foreignCallHandler?: ForeignCallHandler): Promise<u8> {
  const program = new Noir(get_action_target_y_circuit);
  const args: InputMap = { action };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as u8;
}
export type get_action_typeInputType = {
  action: u8[];
}

export type get_action_typeReturnType = u8;
export const get_action_type_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"action","type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/62QQQqEMAxFbXVgjpM0iU12XsVivf8RVIxQxJ0+CD88QhY/dCfDPj/fwz6958H/5sKDiw+ud9cSPSdPgpG55lSRcIZkRQVYyqioKCpLUqKqrNmKZTBkqriK0Qon7S94Bw7f/YKr067pNHonrbvfXWzJzChHmAEAAA=="};

export async function get_action_type(action: u8[], foreignCallHandler?: ForeignCallHandler): Promise<u8> {
  const program = new Noir(get_action_type_circuit);
  const args: InputMap = { action };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as u8;
}
export type new_actionInputType = {
  action_type: u8;
  actor: u8;
  target_x: u8;
  target_y: u8;
}

export type new_actionReturnType = u8[];
export const new_action_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"action_type","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"actor","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"target_x","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"target_y","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/9WTSw7DIAxE+bX0ODaGYHa9SlHJ/Y/QRCGSpWYXsshI1qBZjPSQrdUmv8yrv/Uytrvqucz0QWYOMis6d5nu7+4EU4wth4aEHwilcoKY6sTImDh9AxM1jpxLLRkKRmo4p0IzbJJdcE7oxnXBlcx6IPPjJsxmIPPzJsx2ILMfzOwE937/VmRO+Lpj65979a8f4fChE4AEAAA="};

export async function new_action(action_type: u8, actor: u8, target_x: u8, target_y: u8, foreignCallHandler?: ForeignCallHandler): Promise<u8[]> {
  const program = new Noir(new_action_circuit);
  const args: InputMap = { action_type, actor, target_x, target_y };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as u8[];
}
