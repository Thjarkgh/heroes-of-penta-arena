
/* Autogenerated file, do not edit! */

/* eslint-disable */

import { Noir } from "@noir-lang/noir_js"
import { UltraHonkBackend } from '@aztec/bb.js';
import fs from 'fs';

const turn_circuit = JSON.parse(fs.readFileSync('./circuits/skpl/export/turn.json', 'utf8'));

export async function turn(secret, my_chars, my_obstacles, actions, move, enemy_advance, enemy_objects, events, my_advance, my_result_events, my_result_objects, gamestate_before_hash, gamestate_after_hash, foreignCallHandler) {
  const program = new Noir(turn_circuit);
  const args = { secret, my_chars, my_obstacles, actions, move, enemy_advance, enemy_objects, events, my_advance, my_result_events, my_result_objects, gamestate_before_hash, gamestate_after_hash };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue;
}

const noir = new Noir(turn_circuit);
const backend = new UltraHonkBackend(turn_circuit.bytecode);
                // My Secret State
                const secret = "0x075bcd15";
                const my_chars = "0x2912640000004b03190000006c04142000008a0464000000aa27640b040a";
                const my_obstacles = ["0x0563c80564c80565c80567c8000000000000", "0x0760c80761c80762c80763c8000000000000", "0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000"];
                const actions = ["0x07040b04000204090700000400000000040000000000000000000000000000"];
                // Common Inputs
                const move = "0x08";
                // Enemy Inputs
                const enemy_advance = "0x05";
                const enemy_objects = ["0x00", "0x00", "0x00", "0x0d52640e36001023141016640b441e000000000000000000000000000000"];
                const events = ["0x0a030b03320100030310050000000303100600000000030000000000000000"]; //MAX_EVENTS],
                // My Results
                const my_advance = "0x12"; // 1 bit win, 1 bit lose, 1 bit reserved, 5 bits advance
                const my_result_events = ["0x0a040b046e0200030409070000000004000000000000040000000000000000"];
                const my_result_objects = ["0x0563c80564c80565c80567c8000000000000", "0x0760c80761c80762c80763c8000000000000", "0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000", "0x0912640b23000c34000a442d095764000000000000000000000000000000"];
                // Gamestate Hashes
                const gamestate_before_hash = "0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84";
                const gamestate_after_hash = "0x236966a235f77feb27363197794c38467e0955e0ffb23fb8b1a3b0206080868f";
turn(
  secret, my_chars, my_obstacles, actions, move, enemy_advance, enemy_objects, events, my_advance, my_result_events, my_result_objects, gamestate_before_hash, gamestate_after_hash
).then((x) => console.log(x))
.then(() =>{
  console.log("Generating witness... ⏳");
  return noir.execute( {secret, my_chars, my_obstacles, actions, move, enemy_advance, enemy_objects, events, my_advance, my_result_events, my_result_objects, gamestate_before_hash, gamestate_after_hash}
  );
}).then((witness) => {
console.log("Generated witness... ✅");
console.log("Generating proof... ⏳");
return backend.generateProof(witness);
}).then((proof) => {
console.log("Generated proof... ✅");
console.log(proof.proof);
})