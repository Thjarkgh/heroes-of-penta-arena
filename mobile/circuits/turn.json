{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":5623400269443160030,"abi":{"parameters":[{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"my_chars_input","type":{"kind":"field"},"visibility":"private"},{"name":"my_char_actions","type":{"kind":"array","length":30,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_obstacles_input","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"},{"name":"actions","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"move","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"enemy_advance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"enemy_objects","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"enemy_events","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_result_advance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"my_result_events","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_result_objects","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"gamestate_before_hash","type":{"kind":"field"},"visibility":"private"},{"name":"gamestate_after_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11167361122731473993":{"error_kind":"fmtstring","length":27,"item_types":[]},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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e3WG5mF3WM5vr87QPOwOy/nt1Rmah91hOb+9OkPzsDss57dXZ2gedofl/Pbq0HnYLq/V5bW6vFZ3HR7fG/f9VZfvpctrjbn9xu03YReX16rqwLrdfuP2m64Xl9eq6sC63X7j9puuF5fXqurAut1+4/abrheX16rqwLrdfuP2m64Xl9eq6sC63X7j8lqT5UWS11rdZvv7lcycj6W6zfL8QdVtGdqvlucPqs7MPOzqNsv57dWZmYdd3WY5v70mM/Owq9ss57fXZGYednW75fz2mszMw65ut5zfXpOZedjV7Zbz22syMw+7ut1yfntNZuZhV7dbzm+vycw87Op2y/ntNZmZh13dbjm/vSYz87Cr2y3nt9eEzsN2ea0ur9Xltbrr8PjeuO+vunwvXV5rzO03br8Ju7i8VlUH1u32G7ffdL24vFZVB9bt9hu333S9uLxWVQfW7fYbt990vbi8VlUH1u32G7ffdL24vFZVB9bt9huX15osL5K81ppW29+vZOZ8LDWtlucPqsnM38WsabU8f1BNZuZh17Razm+vycw87JpWy/ntNZmZh13Tajm/vSYz87BrWi3ntycyMw+7ptVyfnsiM/Owa1ot57cnMjMPu6bNcn57IjPzsGvaLOe3JzIzD7umzXJ+eyIz87Br2izntycyMw+7ps1yfnsidB62y2t1ea0ur9Vdh8f3xn1/1eV76fJaY26/cftN2MXltao6sG6337j9puvF5bWqOrBut9+4/abrxeW1qjqwbrffuP2m68Xltao6sG6337j9puvF5bWqOrBut9+4vNZkeZHktSZabH+/kpnzsSRaLM8flMjM38VMtFiePyiRmXnYiRbL+e2JzMzDTrRYzm9PZGYedqLFcn57IjPzsBMtlvPbE5mZh51osZzfnsjMPOxEi+X89trMzMNOtFjOb6/NzDzsRIvl/PbazMzDTrRYzm+vzcw87ESr5fz22szMw060Ws5vrw2dh+3yWl1eq8trddfh8b1x3191+V66vNaY22/cfhN2cXmtqg6s2+03br/penF5raoOrNvtN26/6Xpxea2qDqzb7Tduv+l6cXmtqg6s2+03br/penF5raoOrNvtNy6vNVkugfYnH+N3EbnQ/lkFfvlpr1wIbVDPkXrvGuuqUzlF/SzETy5VhvZjXcklvzMW6Nv//x/+pt5v1acF6LV1hbAupzNY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","debug_symbols":"","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"// use crate::{ HEIGHT, WIDTH };\nuse arenalib::{ NO_EVENT, WAIT, SEE_MOVE, WIDTH };\nuse arenalib::{ MAX_ACTIONS, MAX_OBSTACLES };\nuse arenalib::{ SERIALIZED_ACTION_BYTE_SIZE, SERIALIZED_ACTIONS_ARRAY_SIZE, SERIALIZED_ACTIONS_PER_FIELD, VIEW_DISTANCE };\nuse skplg::{softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD};\nuse arenalib::{Action, get_action_actor, get_action_target_x, get_action_target_y, get_action_type, new_action};\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\nuse crate::character::Character;\nuse crate::event::Event;\nuse crate::event::{ build_subtype_value_event }; // , build_value_event\nuse crate::map::{ is_visible, get_distance, can_move_to };\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::{ get_default_obstacles };\nuse arenalib::{MAGE};\nuse arenalib::{MAX_ACTIONS_PER_CHARACTER, MAX_ENEMY_OBSTACLES};\n// use crate::ResolvedAction::ResolvedAction;\n// use crate::actionDefinition::{ build_move_action };\nuse arenalib::{apply_action_result_effects, apply_action_pre_calc_effects, validate_action_requirements, build_result_event};\nuse arenalib::arena_action_def_builder;\nuse super::obstacle::new_obstacle;\n\n// use crate::{ACTION_RESULT_COORDINATES_IDX_SELF, ACTION_RESULT_COORDINATES_IDX_TARGET, ACTION_RESULT_COORDINATES_IDX_INVISIBLE};\n// use crate::{SEE_CAST, SEE_DRAW, SEE_RITUAL, SEE_SEARCH_TRAP, RECEIVE_ATTACK, DISARMED_TRAP, ADD_OBSTACLE, WIN};\n// use crate::action_builder;\n\n\n\n// global ACTION_TYPE: u8 = 0;\n// global ACTION_ACTOR: u8 = 1;\n// global ACTION_TARGET_X: u8 = 2;\n// global ACTION_TARGET_Y: u8 = 3;\n\nglobal SEEN_EVENT_IDX: u32 = 1;\nglobal UNSEEN_EVENT_IDX: u32 = 0;\nglobal WORLD_EVENT_IDX: u32 = 2;\nglobal SELF_EVENT_IDX: u32 = 3;\n\npub fn execute_action(\n    action: Action,\n    enemy_advance: u8,\n    actor: Character,\n    mut energy: u8,\n    my_obstacles: [Obstacle; MAX_OBSTACLES],\n    their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]\n) -> (bool, Event, Event, Event, Character, u8) /*where T: ResolvedAction */{\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    //let action_def = c.resolve_action(action.register[action.base_index + ACTION_TYPE]);\n        //let mut result_event: Event = build_std_event(NO_EVENT, c.id, 0, 0);\n        //let mut result_char = c;\n        //let mut required_energy = 0;\n        let mut is_valid = true;\n        //let action_def = c.resolve_action(get_action_type(action));\n        // let mut result_valid = true;\n\n        // let need_sneak = get_action_type(action) == SNEAK;\n        //let can_sneak = c.can_sneak();\n        // let need_move = get_action_type(action) == MOVE | get_action_type(action) == SNEAK;\n        // let can_move = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles);\n        // let need_target_is_neighbor = get_action_type(action) == SNEAK | get_action_type(action) == MOVE | get_action_type(action) == ATTACK | get_action_type(action) == SEARCH | get_action_type(action) == DISARM_TRAP;\n        //let target_is_neighbor = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        // let need_target_is_not_self = get_action_type(action) == ATTACK | get_action_type(action) == SHOOT;\n        // let target_is_not_self = (c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action));\n        // let need_ritual = get_action_type(action) == RITUAL;\n        //let can_ritual = c.can_ritual();\n        // let need_search = get_action_type(action) == SEARCH;\n        //let can_search = c.can_search();\n        //let can_attack = is_neighbor & not_self;\n        // let need_can_cast_fireball = get_action_type(action) == CAST_FIREBALL;\n        // let min_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if get_action_type(action) == SHOOT {\n        //     MIN_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let max_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if (get_action_type(action) == DRAW) | (get_action_type(action) == SHOOT) {\n        //     MAX_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let need_check_status = get_action_type(action) == CAST_FIREBALL | get_action_type(action) == RITUAL | get_action_type(action) == DRAW | get_action_type(action) == SHOOT;\n        // let can_cast_fireball = c.can_cast_fireball(); // & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        // let can_draw = c.can_shoot(); // & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_shoot = c.can_shoot(); // & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_disarm = c.can_disarm();\n        // let is_valid =\n        //     (get_action_type(action) == WAIT) |\n        //     ((get_action_type(action) == SNEAK) & can_sneak & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == MOVE) & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == RITUAL) & can_ritual) |\n        //     ((get_action_type(action) == SEARCH) & can_search & target_is_neighbor) |\n        //     ((get_action_type(action) == ATTACK) & target_is_neighbor & target_is_not_self) |\n        //     ((get_action_type(action) == CAST_FIREBALL) & can_cast_fireball & result_char.status <= max_rounds_to_finish) |\n        //     ((get_action_type(action) == DRAW) & can_draw) |\n        //     ((get_action_type(action) == SHOOT) & can_shoot & target_is_not_self) |\n        //     ((get_action_type(action) == DISARM_TRAP) & can_disarm & target_is_neighbor);\n\n\n\n\n        // need to adapt status first in case of action interruption!\n\n    //let action_type = action.get_action_type(action);\n    //let action_def = c.resolve_action(action_type);\n    let action_type = get_action_type(action);\n\n    let actor_id = actor.get_id();\n    let actor_x = actor.get_x();\n    let actor_y = actor.get_y();\n    let actor_target_x = actor.get_target_x();\n    let actor_target_y = actor.get_target_y();\n    let actor_last_action = actor.get_last_action();\n    let (action_def_valid, action_def) = actor.get_action(action_type);\n    softassert!(quote { is_valid }, quote { action_def_valid }, quote { f\"Failed to fetch action def of {action_type}\" });\n\n    let action_target_x = get_action_target_x(action);\n    let action_target_y = get_action_target_y(action);\n    let distance = get_distance(actor_x, actor_y, action_target_x, action_target_y);\n\n    // let is_continuous = action.get_action_is_continuous();\n    // let is_not_interrupted = (\n    //     ((!is_continuous) & (action.get_action_result_status_multiplier() != 0)) | // that's the ID of the wait action => leave status, but not continuous\n    //     ((is_continuous) & (action.get_action_req_previous_action() == c.last_action) & (action_target_x == c.get_target_x()) & (action_target_y == c.get_target_y()))\n    // );\n\n\n    let mut actor_progress = actor.get_progress();\n    let mut actor_is_hidden = actor.get_is_hidden() == 1;\n    let actor_is_in_view_range = is_visible(enemy_advance, actor_x);\n    // let max_range_part = get_action_req_max_range(action) as u16;\n    // let mut actor_max_range = max_range_part * max_range_part;\n    let mut is_not_interrupted = true;\n    let mut actor_damage_mod = actor.get_damage_mod();\n    let mut actor_status = actor.get_status();\n    // ~200 gates\n    apply_action_pre_calc_effects!(quote { action_def });\n\n\n///////////////////////////\n    // ~4000 gates\n    validate_action_requirements!(quote { is_valid }, quote { action_def });\n    // // pub global ACTION_NEEDS_TARGET_FREE_SPACE: u8 = 0;  // u1\n    // let target_is_free_space_valid = !action.get_action_req_target_free_space() | can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles);\n    // softassert!(quote { is_valid }, quote { target_is_free_space_valid }, quote { f\"Target space ({action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" });\n    \n    // // pub global ACTION_NEEDS_TARGET_IS_NOT_SELF: u8 = 1; // u1\n    // let target_is_not_self_valid = !action.get_action_req_target_is_not_self() | (c_x != action_target_x) | (c_y != action_target_y);\n    // softassert!(quote { is_valid }, quote { target_is_not_self_valid }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" });\n\n    // // pub global ACTION_NEEDS_STATUS_HIDDEN: u8 = 4; // u1\n    // let char_is_hidden = c.is_hidden == 1;\n    // let char_is_hidden_valid = !action.get_action_req_status_hidden() | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_is_hidden_valid }, quote { f\"Character needs to be hidden to perform action {action_type}\" });\n    \n    // // pub global ACTION_NEEDS_STATUS_VISIBLE: u8 = 2; // u1\n    // let char_is_in_view_range = is_visible(enemy_advance, c_x);\n    // let char_is_fully_visible = char_is_in_view_range & !char_is_hidden;\n    // let char_is_fully_visible_valid = !action.get_action_req_status_visible() | char_is_fully_visible;\n    // softassert!(quote { is_valid }, quote { char_is_fully_visible_valid }, quote { f\"Character must be fully visible for action {action_type}: in_view_range: {char_is_in_view_range} & !hidden {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_NEEDS_STATUS_INVISIBLE: u8 = 3; // u1\n    // let char_invisible_valid = !action.get_action_req_status_invisible() | !char_is_in_view_range | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_invisible_valid }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {char_is_in_view_range} || hidden: {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_MAX_RANGE: u8 = 7; // u6 // TODO: max_range!\n    // let max_range_part = action.get_action_req_max_range() as u16;\n    // let max_range = max_range_part * max_range_part;\n    // let max_range_valid  = distance <= max_range;\n    // softassert!(quote { is_valid }, quote { max_range_valid }, quote { f\"Character is out of range! Distance: {distance} > {max_range}: {{{c_x},{c_y}}} - {{{action_target_x},{action_target_y}}} with {max_range_part}\" });\n\n    // // pub global ACTION_NEEDS_MIN_STATUS: u8 = 8; // u4\n    // let min_status = action.get_action_req_min_status();\n    // let min_status_valid = min_status <= status;\n    // softassert!(quote { is_valid }, quote { min_status_valid }, quote { f\"Character needs min status {min_status} to perform action {action_type}, but only has {status}\" });\n\n    // // pub global ACTION_NEEDS_MAX_STATUS: u8 = 9; // u4\n    // let max_status = action.get_action_req_max_status();\n    // let max_status_valid = max_status >= status;\n    // softassert!(quote { is_valid }, quote { max_status_valid }, quote { f\"Character cannot have a higher status than {max_status} to perform action {action_type}: got {status}\" });\n\n    // // pub global ACTION_NEEDED_ENERGY: u8 = 10;    // u4\n    // let required_energy = action.get_action_req_energy();\n    // let energy_valid = required_energy <= energy;\n    // softassert!(quote { is_valid }, quote { energy_valid }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {required_energy}\" });\n    //////////////////////\n    \n\n        let coords = [\n            (actor_x, actor_y),\n            (action_target_x, action_target_y),\n            (NOWHERE, NOWHERE),\n        ];\n\n    // pub global ACTION_RESULT_STATUS_MULTIPLIER: u8 =     ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT;     // u1\n    // pub global ACTION_RESULT_STATUS_FIXED_ADDITION: u8 = ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 1; // u4\n    // pub global ACTION_MOVE_TO_TARGET: u8 =               ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 2; // u1\n    // pub global ACTION_SETS_STATUS_HIDDEN: u8 = 5; // u1\n    // pub global ACTION_REMOVES_STATUS_HIDDEN: u8 = 6; // u1\n\n        // CALCULATE EVENTS\n        comptime {\n          assert(SEEN_EVENT_IDX == 1);\n          assert(UNSEEN_EVENT_IDX == 0);\n        }\n        //let result_event_idx = is_visible as u32;\n        let mut events: BoundedVec<Event, 4> = BoundedVec::new();\n        // 19000 gates\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        build_result_event!(0 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(1 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(2 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(3 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        assert(events.len() == 4);\n\n        // let seen_event_value = status as u32 * action.get_action_result_event_seen_value_status_multiplier() as u32 + action.get_action_result_event_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { seen_event_value <= 255 as u32 }, quote { f\"Invalid event value (seen): {seen_event_value} does not fit in u8!\" });\n\n        // let unseen_event_value = status as u32 * action.get_action_result_event_not_seen_value_status_multiplier() as u32 + action.get_action_result_event_not_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { unseen_event_value <= 255 as u32 }, quote { f\"Invalid event value (unseen): {unseen_event_value} does not fit in u8!\" });\n\n        // let seen_event_coords_idx = action.get_action_result_event_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { seen_event_coords_idx < 4 }, quote { f\"Invalid seen event coord idx: {seen_event_coords_idx} > 3\" });\n\n        // let seen_event_coords = coords[seen_event_coords_idx & 3];\n\n        // let unseen_event_coords_idx = action.get_action_result_event_not_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { unseen_event_coords_idx < 4 }, quote { f\"Invalid unseen event coord idx: {unseen_event_coords_idx} > 3\" });\n\n        // let unseen_event_coords = coords[unseen_event_coords_idx & 3];\n\n        // //let events = [\n        // let dummy_event =    build_subtype_value_event(NO_EVENT, c.get_id(), coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].0, coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].1, 0 as u8, 0 as u8, 0 as u8);\n        // let unseen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_not_seen_type(),\n        //         c.get_id(), \n        //         unseen_event_coords.0,\n        //         unseen_event_coords.1,\n        //         unseen_event_value as u8,\n        //         action.get_action_result_event_not_seen_subtype(),\n        //         action.get_action_result_event_not_seen_radius()\n        //     );\n        // let seen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_seen_type(),\n        //         c.get_id(), \n        //         seen_event_coords.0,\n        //         seen_event_coords.1,\n        //         seen_event_value as u8,\n        //         action.get_action_result_event_seen_subtype(),\n        //         action.get_action_result_event_seen_radius()\n        //     );\n        //];\n\n\n        // APPLY EFFECTS ON SELF\n        let mut result_energy = energy;\n        let mut result_coords = coords[0];\n        let mut result_progress = actor_progress;\n        let mut result_is_hidden = actor_is_hidden;\n        let mut result_is_visible = actor_is_in_view_range;\n        let mut result_damage_mod = actor_damage_mod;\n        let mut result_health = actor.get_health();\n        let mut result_status = actor_status;\n\n\n        // let energy = std::wrapping_sub(energy, action.get_action_req_energy());\n        // let status = actor_progress as u32 * action.get_action_result_status_multiplier() as u32 + action.get_action_result_status_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { status <= MAX_STATUS as u32 }, quote { f\"Invalid result status: {status} > {MAX_STATUS}\" });\n\n        // let final_coords = coords[action.get_action_move_to_target() as u8];\n        // // debug!(quote { println(f\"final_coords:{final_coords}\"); });\n        // let is_hidden = ((c.is_hidden == 1) & !action.get_action_result_effect_removes_status_hidden()) | action.get_action_result_effect_sets_status_hidden();\n        // let is_visible = !is_hidden & is_visible(enemy_advance, final_coords.0);\n        // 200 gates\n        apply_action_result_effects!(quote { action_def });\n\n// let result_coord_src = action_def[6] as u8;\n// let result_coord_src_fixed = result_coord_src & 4 as u8;\n// let result_coord = result_coord_src_fixed != 0 as u8;\n// let result_coord_cast = result_coord as u8;\n// println(f\"result coords: {result_coord_src} {result_coord_src_fixed} {result_coord} {result_coord_cast}\");\n// result_coords = coords[((action_def[6]as u8 / 4 as u8) == 1 as u8)as u8];\n        // let target_coords = [\n        //     (target_x, target_y),\n        //     (c.get_target_x(), c.get_target_y())\n        // ];\n\n        (\n            is_valid,\n            if result_is_visible { events.get_unchecked(SEEN_EVENT_IDX) } else { events.get_unchecked(UNSEEN_EVENT_IDX) },//events[1 + (is_visible as u8)],\n            events.get_unchecked(WORLD_EVENT_IDX),\n            events.get_unchecked(SELF_EVENT_IDX),//events[get_action_unseen_event_is_internal(action_def) as u8],\n            Character {\n                id: actor_id,\n                x: result_coords.0,\n                y: result_coords.1,\n                progress: result_progress, // status as u8,\n                is_hidden: result_is_hidden as u1, //is_hidden as u1,\n                has_been_seen: result_is_visible, //is_visible,\n                last_action: is_not_interrupted as u8 * actor.get_last_action() + (!is_not_interrupted) as u8 * action_type,\n                target_x: is_not_interrupted as u8 * actor.get_target_x() + (!is_not_interrupted) as u8 * action_target_x, // if is_not_interrupted { c.get_target_x() } else { get_action_target_x(action) };\n                target_y: is_not_interrupted as u8 * actor.get_target_y() + (!is_not_interrupted) as u8 * action_target_y,\n                class: actor.class,\n                damage_mod: result_damage_mod,\n                health: result_health,\n                status: result_status,\n                actions: actor.actions,\n            },\n            result_energy\n        )\n\n        // if get_action_type(action) == SNEAK {\n        //     //assert(c.can_sneak());\n        //     if !can_sneak { let actor_id = c.id; println(f\"Failed to execute action: Character {actor_id} cannot sneak\"); }\n        //     //assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     //assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_sneak() & can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);  \n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_sneak();\n        // }\n        // if get_action_type(action) == MOVE {\n        //     // assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);\n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_move();\n        //     result_char.has_been_seen = is_visible(enemy_advance, result_char.x);\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_MOVE, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        // }\n        // if get_action_type(action) == RITUAL {\n        //     //assert(c.can_ritual());\n        //     // result_valid = c.can_ritual();\n        //     result_char.status += 1;\n        //     if result_char.status >= RITUAL_ROUNDS_FOR_WIN {\n        //         result_event = build_std_event(WIN, c.id, 0, 0);\n        //     } else {\n        //         result_event = build_std_event(SEE_RITUAL, c.id, 0, 0);\n        //     }\n        //     required_energy = c.get_energy_per_ritual();\n        // }\n        // if get_action_type(action) == SEARCH {\n        //     // assert(c.can_search());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_search() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(SEE_SEARCH_TRAP, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_search();\n        // }\n        // if get_action_type(action) == ATTACK {\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_MELEE), ATTACK_MELEE);\n        //     required_energy = c.get_energy_per_attack();\n        // }\n        // // TODO: global SET_TRAP = 6 as u8;\n        // if get_action_type(action) == CAST_FIREBALL {\n        //     // assert(c.can_cast_fireball());\n        //     result_char.status += 1;\n        //     // assert(result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     // result_valid = c.can_cast_fireball() & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     if result_char.status >= FIREBALL_ROUNDS_FOR_CAST {\n        //         // TODO: handle friendly fire and destruction of own walls and own traps\n        //         result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_FIREBALL), ATTACK_FIREBALL);\n        //     } else {\n        //         if c.get_has_been_seen() {\n        //             result_event = build_subtype_value_event(SEE_CAST, c.id, get_action_target_x(action), get_action_target_y(action), 0, ATTACK_FIREBALL);\n        //         }\n        //     }\n        //     required_energy = c.get_energy_per_cast();\n        // }\n        // if get_action_type(action) == DRAW {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     // result_valid = c.can_shoot() & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     result_char.status += 1;\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_DRAW, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        //     required_energy = c.get_energy_per_draw();\n        // }\n        // if get_action_type(action) == SHOOT {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = c.can_shoot() & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     // TODO: check distance! abs(c.x - get_action_target_x(action)) + abs(c.y - get_action_target_y(action)) <= c.get_shoot_range()\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_RANGED), ATTACK_RANGED);\n        //     required_energy = c.get_energy_per_shoot();\n\n        // }\n        // // TODO: SET_TRAP\n        // if get_action_type(action) == DISARM_TRAP {\n        //     // assert(c.can_disarm());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_disarm() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(DESTROY, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_disarm();\n        // }\n        \n        // // assert(energy >= required_energy);\n        // let result_valid = is_valid & (energy >= required_energy);\n        // if result_valid {\n        //     energy -= required_energy;\n        // }\n        // // energy -= required_energy;\n        // (result_valid, result_event, result_char, energy)\n    }\n//}\n\n//global test_actions: [TestActionDefinition; 1] = [\n    // build_test_action_def!(build_wait_action_def(), quote { 0, 1, 3, 4 }),\n    //TestActionDefinition { register: build_test_action_def!(build_wait_action_def()), action: new_action(0, 1, 3, 4) },\n    // build_move_action(class_energy_per_move[ARCHER]),\n    //     build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n    //     build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n    //     build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n    //     build_wait_action_def(),\n    //     ,\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[RITUALIST]),\n    //     build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n    //     build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n    //     build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[ROGUE]),\n    //     build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n    //     build_sneak_action(class_energy_per_sneak[ROGUE]),\n    //     build_search_action(class_energy_per_search[ROGUE], 1),\n    //     build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n    //     build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[KNIGHT]),\n    //     build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[MAGE]),\n    //     build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n    //     build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n    //     build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n    //     build_wait_action_def(),\n    //     build_wait_action_def()\n    // ]\n// ]\n\n// pub fn create_test_action(action: Action) -> TestActionDefinition {\n//     TestActionDefinition {\n//         register: \n//     }\n// }\n\n// pub struct TestActionDefinition {\n//     pub register: [u8; ACTION_DEFINITION_SIZE],\n//     pub action: Action,\n// }\n\n// impl ResolvedAction for TestActionDefinition {\n//     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n//     }\n//     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n//     }\n//     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n//     }\n//     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n//     }\n//     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_MAX_RANGE]\n//     }\n//     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MIN_STATUS]\n//     }\n//     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MAX_STATUS]\n//     }\n//     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDED_ENERGY]\n//     }\n//     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_EVENT_IS_TRAP] == 1\n//     }\n//     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n//     }\n//     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n//         self.register[ACTION_MOVE_TO_TARGET] as u1\n//     }\n//     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_IS_CONTINUOUS] == 1\n//     }\n//     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n//     }\n\n//     fn get_action_target_x(self) -> u8 {\n//         get_action_target_x(self.action)\n//     }\n//     fn get_action_target_y(self) -> u8 {\n//         get_action_target_y(self.action)\n//     }\n//     fn get_action_type(self) -> u8 {\n//         get_action_type(self.action)\n//     }\n// }\n\n#[test]\nfn test_execute_action() {\n  // global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder = get_arena_action_def_builder();\n    let action_def = arena_action_def_builder.build_move_action(4); //, quote { 1, 2, 3, 4 }; //new_action(1, 2, 3, 4);\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let action = new_action(1, 2, 3, 4);\n    let their_advance = 30;\n    let mut actions = [[0; 32]; MAX_ACTIONS_PER_CHARACTER + 1];\n    actions[1] = action_def;\n    let actor = Character {\n        id: 2,\n        x: 2,\n        y: 4,\n        target_x: 0,\n        target_y: 0,\n        health: 255,\n        damage_mod: 1,\n        last_action: WAIT,\n        class: MAGE,\n        is_hidden: 0 as u1,\n        has_been_seen: true,\n        progress: 0,\n        status: 0,\n        actions: actions\n    };\n    let energy = 15;\n    let my_obstacles = get_default_obstacles(0);\n    let (no_obstacle_valid, no_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n    assert(no_obstacle_valid);\n    let their_obstacles = get_default_obstacles(1).as_slice().push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle);\n    let (valid, event, _, internal_event, c, result_energy) = execute_action(\n        action,\n        their_advance,\n        actor,\n        energy,\n        my_obstacles,\n        their_obstacles.as_array()\n    );\n    assert(valid, \"valid\");\n    assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n    assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n    assert(event.x == get_action_target_x(action), f\"{event}.target_x is not action target x\");\n    assert(event.y == get_action_target_y(action), f\"{event}.target_y is not action target y\");\n    assert(c.x == event.x, f\"{c}.x is not event {event}.x\");\n    assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n    assert(result_energy == 11, f\"{result_energy} != 11\");\n}\n\n\n\npub fn parse_actions(fields: [Field; SERIALIZED_ACTIONS_ARRAY_SIZE]) -> [Action; MAX_ACTIONS] {\n    comptime {\n        assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n        assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n        assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n    }\n\n    let mut actions: [Action] = &[];\n    for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n        let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n        //assert(split.len() == 32);\n        for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n            let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n            actions = actions.push_back(new_action(\n                split[offset],\n                split[offset + 1],\n                split[offset + 2],\n                split[offset + 3],\n            ));\n            /*Action {\n                action: split[offset],\n                actor: split[offset + 1],\n                target_x: split[offset + 2],\n                target_y: split[offset + 3],\n            }*/\n        }\n    }\n    actions.as_array()\n}\n\n/**\n* Warning: This function can throw!!!\n*/\n// pub fn serialize_actions(actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n//     comptime {\n//         assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n//         assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n//         assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n//     }\n\n//     assert(actions.len() <= MAX_ACTIONS);\n\n//     let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, 0, 0, 0); MAX_ACTIONS];\n//     for i in 0..actions.len() {\n//         actions_stuffed[i] = actions[i];\n//     }\n\n//     let mut fields: [Field] = &[];\n//     for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n//         let mut data: [u8; 32] = [0; 32];\n//         for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n//             let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n//             let action = actions_stuffed[index];\n//             let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n//             data[offset] = get_action_type(action);\n//             data[offset + 1] = get_action_actor(action);\n//             data[offset + 2] = get_action_target_x(action);\n//             data[offset + 3] = get_action_target_y(action);\n//         }\n//         fields = fields.push_back(std::field::bytes32_to_field(data));\n//     }\n//     fields.as_array()\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/action.nr"},"72":{"source":"\nuse arenalib::ARCHER;\nuse arenalib::KNIGHT;\nuse arenalib::MAGE;\nuse arenalib::RITUALIST;\nuse arenalib::ROGUE;\nuse arenalib::WIDTH;\nuse arenalib::HEIGHT;\nuse arenalib::{ CLASS_COUNT, PROGRESS_COUNT };\nuse arenalib::{ WAIT }; //, ATTACK_MELEE, ATTACK_FIREBALL, ATTACK_RANGED, MAX_FIREBALL_ROUNDS_FOR_CAST, MIN_FIREBALL_ROUNDS_FOR_CAST, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES, MAX_ACTIONS_PER_CHARACTER };\nuse arenalib::{ WIDTH_MASK, HEIGHT_MASK, CLASS_MASK, PROGRESS_MASK };\nuse arenalib::{ WIDTH_BITS, HEIGHT_BITS, CLASS_BITS, PROGRESS_BITS };\nuse crate::event::Event;\nuse crate::map::is_visible;\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::new_obstacle;\nuse skplg::{NOWHERE, debug, softassert};\nuse arenalib::{ActionDefinition};\nuse arenalib::{SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, SerializedArenaCharacterActionDefinitions, SerializedArenaCharacterActionDefinition};\n// use arenalib::{TRAP, ADD_OBSTACLE, WIN_BY_RITUAL, RITUAL_ROUNDS_FOR_WIN};\nuse arenalib::get_test_action_register;\nuse crate::event::{build_subtype_value_event, serialize_events};\nuse arenalib::NO_EVENT;\nuse arenalib::get_wait_action_def;\n\n\npub global SERIALIZED_CHARACTER_BYTES: u32 = 6;\npub type SerializedCharacter = [u8; SERIALIZED_CHARACTER_BYTES];\n\n// use skplam::{build_wait_action_def, build_shoot_action, build_draw_action, build_move_action, build_attack_action, build_cast_action, build_evocation_action, build_search_action, build_set_trap_action, build_sneak_action, build_ritual_action, build_disarm_trap_action};\n\n// this should be more efficient: for all the following: order is: UNKNOWN_CLASS, ARCHER, RITUALIST, ROGUE, KNIGHT, MAGE\nglobal class_damage_melee: [u8; 6] = [ 0, 32, 8, 24, 40, 16 ];\nglobal class_damage_ranged: [u8; 6] = [ 0, 24, 40, 16, 32, 8 ];\nglobal class_damage_fireball: [u8; 6] = [ 0, 0, 100, 50, 0, 100 ];\nglobal class_damage: [[u8; 6]; 3] = [ class_damage_melee, class_damage_ranged, class_damage_fireball ];\nglobal class_energy_per_attack: [u8; 6] = [ 0, 7, 7, 7, 6, 7 ];\nglobal class_energy_per_cast: [u8; 6] = [ 0, 255, 12, 255, 255, 6 ];\nglobal class_energy_per_disarm: [u8; 6] = [ 0, 255, 255, 12, 255, 255 ];\nglobal class_energy_per_move: [u8; 6] = [ 0, 3, 4, 3, 4, 4 ];\nglobal class_energy_per_ritual: [u8; 6] = [ 0, 255, 12, 255, 255, 255 ];\nglobal class_energy_per_search: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_sneak: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_draw: [u8; 6] = [ 0, 9, 255, 255, 255, 255 ];\nglobal class_energy_per_shoot: [u8; 6] = [ 0, 6, 255, 255, 255, 255 ];\nglobal resistances: [u16; 8 * 3] = [\n     0,  75, 100, 85,  50, 100, 20,  0, //,  255, 255, 0, 0, 0, 255, 255, 255 ], // Melee vs dummy, archer, ritualist, thief, knight, mage, wall, water, unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n     0,  80, 100, 90,  25, 100,  5,  0, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Ranged vs dummy, archer, ritualist, thief, knight, mage, wall, water\n     0,  80, 100, 90, 100,  90, 60, 50, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Fireball vs dummy, archer, ritualist, thief, knight, mage, wall, water\n];\n\nglobal trap_resistances: [u16; 8] = [ 0,  75, 100, 50,  75, 90, 5, 0]; //,  255, 255, 255, 255, 255, 255, 255, 255 ]; // Trap vs dummy, archer, ritualist, thief, knight, mage\n\n\n//global x: ActionDefinition = build_set_trap_action(1 as u8, 1 as u8);\n// TODO: move to character!\n// global ARCHER: u8 = 1;    WAIT, MOVE, ATTACK, DRAW, SHOOT\n// global RITUALIST: u8 = 2; WAIT, MOVE, ATTACK, CAST, RITUAL\n// global ROGUE: u8 = 3;     WAIT, MOVE, ATTACK, SNEAK, SEARCH, DISARM_TRAP, SET_TRAP\n// global KNIGHT: u8 = 4;    WAIT, MOVE, ATTACK\n// global MAGE: u8 = 5;      WAIT, MOVE, ATTACK, CAST, CAST_FIREBALL\n// global ACTION_DEFINITIONS: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER * CLASS_COUNT] = [\n//     // [[0 as u8; ACTION_DEFINITION_SIZE]; MAX_ACTIONS_PER_CHARACTER], // 0 for no action\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n    \n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ARCHER]),\n//         build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//         build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//         build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[RITUALIST]),\n//         build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//         build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//         build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ROGUE]),\n//         build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//         build_sneak_action(class_energy_per_sneak[ROGUE]),\n//         build_search_action(class_energy_per_search[ROGUE], 1),\n//         build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[KNIGHT]),\n//         build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[MAGE]),\n//         build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//         build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//         build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n//         WAIT_ACTION,\n//         WAIT_ACTION\n//     // ]\n// ];\n// global \n// pub fn get_test_action_register() -> [u8; ACTION_DEFINITION_REGISTER_SIZE] {\n//     build_action_def_reg!([\n//         [\n//             build_move_action(class_energy_per_move[ARCHER]),\n//             build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//             build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//             build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[RITUALIST]),\n//             build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//             build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//             build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[ROGUE]),\n//             build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//             build_sneak_action(class_energy_per_sneak[ROGUE]),\n//             build_search_action(class_energy_per_search[ROGUE], 1),\n//             build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//             build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[KNIGHT]),\n//             build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[MAGE]),\n//             build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//             build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//             build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST),\n//             build_wait_action_def(),\n//             build_wait_action_def()\n//         ]\n//     ])\n// }\n// pub fn get_test_action_register() -> SerializedArenaActionDefinitions {\n//   let action_builder = arena_action_def_builder;\n//      [\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER)),\n//             std::field::bytes32_to_field(action_builder.build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT)), // arche),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n            \n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST, 255)),\n//             std::field::bytes32_to_field(action_builder.build_ritual_action(3, class_energy_per_ritual[RITUALIST], RITUAL_ROUNDS_FOR_WIN, WIN_BY_RITUAL)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_sneak_action(class_energy_per_sneak[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_search_action(class_energy_per_search[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_set_trap_action(class_energy_per_disarm[ROGUE], 1, ADD_OBSTACLE, TRAP)),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[KNIGHT])),\n//            std::field::bytes32_to_field( action_builder.build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT])),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[MAGE], MAGE, 7)),\n//             std::field::bytes32_to_field(action_builder.build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def())\n//         ]\n// }\n\n// struct CharacterClass {\n//     class: u8,\n//     damage: u8,\n//     energy_per_attack: u8,\n//     energy_per_cast: u8,\n//     energy_per_disarm: u8,\n//     energy_per_move: u8,\n//     energy_per_ritual: u8,\n//     energy_per_search: u8,\n//     energy_per_sneak: u8,\n// }\n\npub struct Character {\n    pub id: u8,\n    pub x: u8, // 5 bit\n    pub y: u8, // 4 bit\n    pub class: u8, // 3 bit\n    pub progress: u8, // 0 = idle, 1-15 = continuing action => 4 bit\n    pub health: u8,\n    pub has_been_seen: bool,\n    pub is_hidden: u1,\n    pub target_x: u8,\n    pub target_y: u8,\n    pub damage_mod: u8,\n    pub last_action: u8,\n    pub status: u8,\n    // pub wait_action: ActionDefinition,\n    pub actions: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1], // BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER>,\n}\n\n// pub fn resolve_action(action: u8, class: u8) -> ActionDefinition {\n//     let mut idx = class as u32 * MAX_ACTIONS_PER_CHARACTER + action as u32;\n//     if idx >= (ACTION_DEFINITIONS.len()) {\n//         idx = 0;\n//     }\n//     // assert(action as u32 < MAX_ACTIONS_PER_CHARACTER);\n//     // assert(class as u32 < CLASS_COUNT);\n//     ACTION_DEFINITIONS[idx]\n// }\n//     pub fn resolve_action(action: Action) -> ActionDefinition {\n//         // let idx = get_action_base_index(self.get_id(), action);\n//         ActionDefinition::new(action, ACTION_DEFINITIONS)\n// //        (idx, ACTION_DEFINITIONS)\n//         //resolve_action(action, self.class)\n//         // let mut a = action as u32;\n//         // if a >= self.actions.len() { a = 0; }\n//         // self.actions[a] //.get_unchecked(a)\n//     }\n//global wait_action: ActionDefinition = buld_wait_action_def();\n\n// global wait_action: ActionDefinition = action_builder.build_wait_action_def();\n\nimpl Character {\n    // pub fn new(id: u8 x: u8, y: u8, class: u8, status: u8, health: u8, has_been_seen: u8)\n    /// May throw\n\n\n    pub fn get_id(self) -> u8 {\n        self.id\n    }\n\n    pub fn get_x(self) -> u8 {\n        self.x\n    }\n\n    pub fn get_y(self) -> u8 {\n        self.y\n    }\n\n    pub fn get_class(self) -> u8 {\n        self.class\n    }\n\n    pub fn get_progress(self) -> u8 {\n        self.progress\n    }\n\n    pub fn get_status(self) -> u8 {\n        self.status\n    }\n\n    pub fn get_health(self) -> u8 {\n        self.health\n    }\n\n    pub fn get_has_been_seen(self) -> bool {\n        self.has_been_seen\n    }\n\n    pub fn get_target_x(self) -> u8 {\n        self.target_x\n    }\n\n    pub fn get_target_y(self) -> u8 {\n        self.target_y\n    }\n\n    pub fn get_is_hidden(self) -> u1 {\n      self.is_hidden\n    }\n\n    pub fn get_damage_mod(self) -> u8 {\n      self.damage_mod\n    }\n\n    pub fn get_action(self, action_idx: u8) -> (bool, ActionDefinition) {\n      /*if action_idx == 0 {\n        (true, self.wait_action)\n      } else */if action_idx <= MAX_ACTIONS_PER_CHARACTER as u8 {\n        (true, self.actions[action_idx])\n      } else {\n        (false, self.actions[0])\n      }\n    }\n\n    // pub fn get_energy_per_attack(self) -> u8 {\n    //     class_energy_per_attack[self.class]\n    // }\n\n    // pub fn get_energy_per_cast(self) -> u8 {\n    //     class_energy_per_cast[self.class]\n    // }\n\n    // pub fn get_energy_per_disarm(self) -> u8 {\n    //     class_energy_per_disarm[self.class]\n    // }\n\n    // pub fn get_energy_per_move(self) -> u8 {\n    //     class_energy_per_move[self.class]\n    // }\n\n    // pub fn get_energy_per_ritual(self) -> u8 {\n    //     class_energy_per_ritual[self.class]\n    // }\n\n    // pub fn get_energy_per_search(self) -> u8 {\n    //     class_energy_per_search[self.class]\n    // }\n\n    // pub fn get_energy_per_sneak(self) -> u8 {\n    //     class_energy_per_sneak[self.class]\n    // }\n\n    // pub fn get_energy_per_draw(self) -> u8 {\n    //     class_energy_per_draw[self.class]\n    // }\n\n    // pub fn get_energy_per_shoot(self) -> u8 {\n    //     class_energy_per_shoot[self.class]\n    // }\n\n    // pub fn get_damage(self, attack_type: u8) -> u8 {\n    //     self.damage_mod + class_damage[attack_type][self.class]\n    // }\n\n    pub fn get_last_action(self) -> u8 {\n      self.last_action\n    }\n\n    // pub fn can_sneak(self) -> bool {\n    //     class_energy_per_sneak[self.class] != 255\n    // }\n\n    // pub fn can_ritual(self) -> bool {\n    //     class_energy_per_ritual[self.class] != 255\n    // }\n\n    // pub fn can_cast_fireball(self) -> bool {\n    //     class_energy_per_cast[self.class] != 255\n    // }\n\n    pub fn can_shoot(self) -> bool {\n        self.class == ARCHER\n    }\n    // pub fn can_disarm(self) -> bool {\n    //     class_energy_per_disarm[self.class] != 255\n    // }\n\n    // pub fn can_search(self) -> bool {\n    //     class_energy_per_search[self.class] != 255\n    // }\n\n    fn is_pos_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_target_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_class_valid(class: u8) -> bool { class as u32 <= CLASS_COUNT }\n    fn is_status_valid(status: u8) -> bool { status < PROGRESS_COUNT }\n\n    pub fn is_valid(self) -> bool {\n        Character::is_pos_valid(self.x, self.y) &\n        Character::is_target_valid(self.target_x, self.target_y) &\n        Character::is_class_valid(self.class) &\n        Character::is_status_valid(self.progress)\n    }\n\n    pub fn serialize(self) -> (SerializedCharacter, SerializedArenaCharacterActionDefinitions) {\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n        assert(self.is_valid());\n        let packed_x = self.x + (self.class << WIDTH_BITS);\n        let packed_y = self.y + (self.progress << HEIGHT_BITS);\n        let packed_target_x = (self.target_x & WIDTH_MASK) + ((self.is_hidden as u8) << WIDTH_BITS);\n        let packed_target_y = (self.target_y & HEIGHT_MASK) + ((self.last_action as u8) << HEIGHT_BITS);\n\n        // let serialized_action_defs = self.actions.map(|a|std::field::bytes32_to_field(a));\n        let serialized_action_defs = [\n          std::field::bytes32_to_field(self.actions[1]),\n          std::field::bytes32_to_field(self.actions[2]),\n          std::field::bytes32_to_field(self.actions[3]),\n          std::field::bytes32_to_field(self.actions[4]),\n          std::field::bytes32_to_field(self.actions[5]),\n          std::field::bytes32_to_field(self.actions[6])\n        ];\n        \n        ([packed_x, packed_y, self.health, packed_target_x, packed_target_y, self.damage_mod], serialized_action_defs)\n    }\n\n    pub fn to_obstacle(self) -> (bool, Obstacle) {\n        comptime {\n            assert(MAX_CHARACTERS < (255 - MAX_OBSTACLES));\n        }\n        assert(self.is_valid());\n        new_obstacle(self.id + (MAX_OBSTACLES as u8), self.x, self.y, self.health, self.class)\n        // Obstacle {\n        //     id: self.id + (MAX_CHARACTERS as u8),\n        //     x: self.x,\n        //     y: self.y,\n        //     obstacle_type: self.class,\n        //     health: self.health,\n        //     //was_alive: \n        // }\n    }\n\n    pub fn move(self, x: u8, y: u8) -> Character {\n        let mut c = self;\n        c.x = x;\n        c.y = y;\n        c\n    }\n\n    pub fn take_damage(self, attack_type: u8, dmg: u8) -> Character {\n        let damage_after_resistances = get_attack_damage_to_tile(attack_type, dmg as u32, self.class);\n        let mut c = self;\n        if damage_after_resistances > (c.health as u32) {\n            c.health = 0;\n        } else {\n            c.health -= (damage_after_resistances as u8);\n        }\n        c\n    }\n\n    pub fn set_status(self, status: u8) -> Character {\n        assert(status < PROGRESS_COUNT);\n        let mut c = self;\n        c.progress = status;\n        c\n    }\n\n    pub fn create_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n        // let mut actions: BoundedVec<ActionDefinition, 6> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..6 {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions.push(ACTION_DEFINITIONS[idx + i]);\n        //     }\n        // }\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: 0,\n            health: 0,\n            has_been_seen: false,\n            is_hidden: 0,\n            target_x: 255,\n            target_y: 255,\n            damage_mod: 0,//: class_damage[class],\n            last_action: WAIT,\n            status: 0, // TODO: status\n            actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1]// BoundedVec::new()\n        };\n        assert(c.is_valid());\n        c\n    }\n\n    pub fn parse(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool, Character) {\n        // these asserts could be disabled for production\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n\n      let (is_valid, c) = parse_unconstrained(id, data, actions_data, wait_action, events, enemy_advance);\n      // assert(c.)\n\n        assert(c.is_valid());\n        (is_valid, c)\n    }\n}\n\nfn parse_unconstrained(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool,Character) {\n          let mut is_valid = true;\n\n        let split: [u8; 32] = data.to_be_bytes::<32>();\n        assert(split.len() == 32);\n        let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n        let y_packed = split[2 + id * 6 + 1]; // 4 bit y, 4 bit status\n        let mut health = split[2 + id * 6 + 2] as u16;\n        let target_x_packed = split[2 + id * 6 + 3]; // 5 bit target x, 1 bit hidden, 1 bit has target, 1 bit unused\n        let target_y_packed = split[2 + id * 6 + 4]; // 4 bit target y, 4 bit last action\n        let damage_mod = split[2 + id * 6 + 5]; // last byte: for the moment, use to save damage_mod (buffs, etc)\n\n        let x = x_packed & WIDTH_MASK;\n        let y = y_packed & HEIGHT_MASK;\n        let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n        if !Character::is_class_valid(class) {\n            debug!(quote { println(f\"Invalid class {class}\"); });\n            class = 0;\n            is_valid = false;\n        }\n\n        let progress = (y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n        softassert!(quote { is_valid }, quote { Character::is_status_valid(progress) }, quote { f\"Invalid status {progress} during character parsing {id}\" });\n\n        let target_x = target_x_packed & WIDTH_MASK;\n        let target_y = target_y_packed & HEIGHT_MASK;\n        let last_action = (target_y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n\n        let is_visible = is_visible(enemy_advance, x); //((target_x_packed >> 5) & 1) as u1;\n        let is_hidden = ((target_x_packed >> WIDTH_BITS) & 1) as u1;\n\n        let mut damage: u16 = 0;\n        for i in 0..MAX_EVENTS {\n            let event = events[i];\n            damage += event.get_applied_damage_to_my_asset(x, y, class);\n            // if events[i].actor_id == id {\n            //     let event = events[i];\n            //     if event.actor_id == id {\n            //         damage += event.get_applied_damage_to_my_asset(x, y, class);\n            //     }\n            // }\n        }\n        if damage > health {\n            health = 0;\n        } else {\n            health -= damage;\n        }\n\n        // let mut actions = [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]; //: BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..MAX_ACTIONS_PER_CHARACTER {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions[i] = ACTION_DEFINITIONS[idx + i];\n        //     }\n        // }\n\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: progress,\n            health: health as u8,\n            has_been_seen: is_visible, // TODO \n            is_hidden: is_hidden,\n            target_x: target_x,\n            target_y: target_y,\n            damage_mod: damage_mod,\n            last_action: last_action,\n            actions: [\n              wait_action,\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 1].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 2].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 3].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 4].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 5].to_be_bytes::<32>()\n            ],\n            status: 0 // TODO: status\n        };\n        (is_valid, c)\n}\n\n// unconstrained fn create_character_unconstrained(\n//   id: u8,\n//   x: u8,\n//   y: u8,\n//   class: u8,\n//   progress: u8,\n//   health: u8,\n//   has_been_seen: u8\n// )\n\nfn select_action_defs_of_character(actions: SerializedArenaActionDefinitions, char_id: u32) -> [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1] {\n  let mut result: [SerializedArenaCharacterActionDefinition] = &[std::field::bytes32_to_field(get_wait_action_def())];\n  let offset = char_id * MAX_ACTIONS_PER_CHARACTER;\n  for i in 0..MAX_ACTIONS_PER_CHARACTER {\n    result = result.push_back(actions[offset + i]);\n  }\n  result.as_array().map(|f|f.to_be_bytes())\n}\n\npub fn get_default_characters(side: u8) -> [Character; MAX_CHARACTERS] {\n    assert(side < 2, f\"Side is too large {side}\");\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let default_actions = get_test_action_register();\n\n    let x = |x| x * ((side + 1) % 2) + (WIDTH - 1 - x) * side;\n    [\n        Character { id: 0, x: x(2), y: 2, class: ARCHER, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 1), status: 0 },\n        Character { id: 1, x: x(2), y: 3, class: RITUALIST, health: 60, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 2), status: 0 },\n        Character { id: 2, x: x(2), y: 4, class: ROGUE, health: 80, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 3), status: 0 },\n        Character { id: 3, x: x(2), y: 5, class: KNIGHT, health: 120, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 4), status: 0 },\n        Character { id: 4, x: x(2), y: 6, class: MAGE, health: 40, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 5), status: 0 },\n    ]\n}\n\n#[export]\npub fn parse_characters(data: SerializedArenaCharacterRoster, actions_data: SerializedArenaActionDefinitions, events: [Event; MAX_EVENTS], enemy_advance: u8) -> pub (bool, [Character; MAX_CHARACTERS]) {\n    comptime { assert(MAX_CHARACTERS == 5); }\n\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut is_valid = true;\n\n    let wait_action = get_wait_action_def();\n\n    // no need to optimize, compiler automatically rolls this out\n    // let mut result: [Character; MAX_CHARACTERS] = [Character::create_character(0, 0, 0, 0), Character::create_character(1, 0, 0, 0), Character::create_character(2, 0, 0, 0), Character::create_character(3, 0, 0, 0), Character::create_character(4, 0, 0, 0)];\n    // for i in 0..(MAX_CHARACTERS as u8) {\n    //     let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action, events, enemy_advance);\n    //     is_valid &= curr_valid;\n    //     result[i] = curr_c;\n    // }\n\n        let (curr_valid, curr_c0) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[0] = curr_c0;\n        let (curr_valid, curr_c1) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[1] = curr_c1;\n        let (curr_valid, curr_c2) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[2] = curr_c2;\n        let (curr_valid, curr_c3) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[3] = curr_c3;\n        let (curr_valid, curr_c4) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[4] = curr_c4;\n    let result = [curr_c0, curr_c1, curr_c2, curr_c3, curr_c4];\n    (is_valid, result)\n}\n\npub fn get_test_my_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 100,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\npub fn get_test_their_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 255,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\n#[test]\nfn test_serialize_character() {\n    let mut character = Character {\n        id: 4,\n        x: 21,\n        y: 9,\n        class: 5,\n        progress: 9,\n        health: 129,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 31,\n        target_y: 9,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    };\n    let (field, _) = character.serialize();\n    assert(field[0] == (21 | (5 << 5)));\n    assert(field[1] == (9 | (9 << 4)));\n    assert(field[2] == 129);\n    assert(field[3] == 31); // TODO: why?\n    assert(field[4] == 9);\n    assert(field[5] == 0);\n}\n\n#[test]\nfn test_parse_character() {\n    let dummy_events = Event::get_test_dummy_events();\n    let data_array: [u8; 32] = [\n        0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        191 as u8, 249 as u8, 255 as u8, 255 as u8, 9 as u8, 255 as u8,\n        181 as u8, 153 as u8, 129 as u8, 127 as u8, 9 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n    ];\n    let data: Field = std::field::bytes32_to_field(data_array);\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    println(data);\n    assert(data == 0xbff9ffff09ffb599817f0900000000000000, f\"Failed assumption: data: {data} != 0xbff9ffff09ffb599817f0900000000000000\");\n    let (character_valid, character) = Character::parse(3, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_valid);\n    assert(character.get_id() == 3);\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 9);\n    assert(character.get_class() == 5);\n    assert(character.get_progress() == 9);\n    assert(character.get_health() == 129);\n    assert(character.get_has_been_seen());\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n\n    let (character_max_valid, character_max) = Character::parse(2, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_max_valid);\n    assert(character_max.get_id() == 2);\n    assert(character_max.get_x() == 31);\n    assert(character_max.get_y() == 9);\n    assert(character_max.get_class() == 5);\n    assert(character_max.get_progress() == 15);\n    assert(character_max.get_health() == 255);\n    assert(character_max.get_has_been_seen());\n    assert(character_max.get_target_x() == 31);\n    assert(character_max.get_target_y() == 9);\n\n    let (character_min_valid, character_min) = Character::parse(0, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_min_valid);\n    assert(character_min.get_id() == 0);\n    assert(character_min.get_x() == 0);\n    assert(character_min.get_y() == 0);\n    assert(character_min.get_class() == 0);\n    assert(character_min.get_progress() == 0);\n    assert(character_min.get_health() == 0);\n    assert(character_min.get_has_been_seen() == false);\n    assert(character_min.get_target_x() == 0);\n    assert(character_min.get_target_y() == 0);\n}\n\n#[test]\nfn test_parse_character_as_in_game() {\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    let data: Field = 0x1602ff1f09001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00;\n    let (character_valid, character) = Character::parse(0, data, dummy_actions, wait_action, Event::get_test_dummy_events(), 20);\n    assert(character_valid);\n    assert(character.get_id() == 0);\n    assert(character.get_x() == 22, character.get_x());\n    assert(character.get_y() == 2, character.get_y());\n    assert(character.get_class() == 0, character.get_class());\n    assert(character.get_progress() == 0, character.get_progress());\n    assert(character.get_health() == 255);\n    assert(character.get_has_been_seen() == true);\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n}\n\n#[export]\npub fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> pub (Field, SerializedArenaActionDefinitions) {\n    let mut result: [u8; 32] = [0; 32];\n    let mut actions: SerializedArenaActionDefinitions = [0; 30]; //&[].as_array();\n    for i in 0..MAX_CHARACTERS {\n        let (serialized_char_bytes, serialized_actions) = chars[i].serialize();\n        for j in 0..6 {\n            result[2 + i * 6 + j] = serialized_char_bytes[j];\n        }\n        for k in 0..MAX_ACTIONS_PER_CHARACTER {\n          actions[i * MAX_ACTIONS_PER_CHARACTER + k] = serialized_actions[k];\n        }\n    }\n    \n    (std::field::bytes32_to_field(result), actions)\n}\n\n/**\n* For now we will only take class into account.\n*/\npub fn get_attack_damage_to_tile(attack_type: u8, damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * resistances[attack_type * 8 + (class & 7)] as u32 / 100) as u32\n}\n\npub fn get_trap_damage_to_tile(damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * trap_resistances[class & 7] as u32 / 100) as u32\n}\n\n#[test]\nfn test_parse_character_round0() {\n  // let actions_data = .map(|f|f.to_be_bytes::<32>()).map(|f|std::field::bytes32_to_field(f));\n  let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let enemy_advance = 0x00;\n  let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0)\n  ];\n  let serialized_events = serialize_events(events);\n   println(f\"events: {serialized_events}\");\n\n  let parsed = parse_characters(data, [\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071020100a000020100a00000020000000002000000000000000,\n    0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n    0x023100081b161118120a010018120a01000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071008100a000008100a00000020000000002000000000000000,\n    0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n    0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071018100a000018100a00000020000000002000000000000000,\n    0x09f0000130060c002000000000200000000020000000002000000000000000,\n    0xf00001100610001005000100100500010020000000002000000000000000,\n    0xf00001301c0100100d000000100d00000020000000002000000000000000,\n    0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110061028100a000028100a00000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071010100a000010100a00000020000000002000000000000000,\n    0xf000071b1611002000000000000705000020000000002000000000000000,\n    0x6300061b161164150a020164150a02010020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000\n], events, enemy_advance);\n\n  assert(parsed.0);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/character.nr"},"74":{"source":"use arenalib::{ NO_EVENT, SEE_MOVE, RECEIVE_ATTACK, TRIGGERED_TRAP }; //, SEE_RITUAL, SEE_CAST, SEE_DRAW, SEE_SEARCH_TRAP, FOUND_TRAP\n// use crate::{ EMPTY, WALL };\nuse arenalib::{ EVENT_COUNT };\nuse arenalib::{ ATTACK_FIREBALL };\nuse arenalib::{ SERIALIZED_EVENT_BYTE_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD };\nuse arenalib::{ WIDTH };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS }; //, MAX_TRAPS\nuse arenalib::SerializedArenaEvents;\n// use crate::TRAPS_BUFFER_MASK;\nuse crate::map::get_distance;\n// use crate::character::Character;\nuse crate::character::{ get_attack_damage_to_tile, get_trap_damage_to_tile };\nuse crate::map::their_x_to_mine;\nuse skplg::{ debug, softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD };\n\npub struct Event {\n    pub event: u8,\n    pub actor_id: u8,\n    pub subtype: u8,\n    pub x: u8,\n    pub y: u8,\n    pub value: u8,\n    pub radius: u8,\n}\n\n\n    #[export]\n    pub fn parse_their_events(fields: SerializedArenaEvents) -> pub (bool, [Event; MAX_EVENTS]) {\n        comptime {\n            assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENT_BYTE_SIZE <= 32);\n            assert(SERIALIZED_EVENTS_ARRAY_SIZE * SERIALIZED_EVENTS_PER_FIELD == MAX_EVENTS);\n            assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n        }\n\n        let mut valid = true;\n        let mut events: [Event; MAX_EVENTS] = [Event::empty(0); MAX_EVENTS];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let split: [u8; 32] = fields[i].to_be_bytes::<32>(); //.to_be_bytes<32>();\n            //assert(split.len() == 32);\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                let raw_x = split[offset + 2];\n                let (x_parsed_valid, x_parsed) = their_x_to_mine(raw_x);\n                softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to calculate their_x_to_mine: {raw_x}\" });\n                events[i * SERIALIZED_EVENTS_PER_FIELD + j] = Event {\n                    event: split[offset],\n                    actor_id: split[offset + 1],\n                    x: x_parsed,\n                    y: split[offset + 3],\n                    value: split[offset + 4],\n                    subtype: split[offset + 5],\n                    radius: split[offset + 6],\n                };\n            }\n        }\n        (valid, events)\n    }\n    \n    #[export]\n    pub fn serialize_events(events: [Event; MAX_EVENTS]) -> pub SerializedArenaEvents {\n        assert(events.len() == MAX_EVENTS);\n        assert(MAX_EVENTS % SERIALIZED_EVENTS_PER_FIELD == 0);\n        assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n\n        let mut fields: [Field] = &[];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let mut data: [u8; 32] = [0; 32];\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let index = i * SERIALIZED_EVENTS_PER_FIELD + j;\n                let event = events[index];\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                data[offset] = event.event;\n                data[offset + 1] = event.actor_id;\n                data[offset + 2] = event.x;\n                data[offset + 3] = event.y;\n                data[offset + 4] = event.value;\n                data[offset + 5] = event.subtype;\n                data[offset + 6] = event.radius;\n            }\n            fields = fields.push_back(std::field::bytes32_to_field(data));\n        }\n        fields.as_array()\n    }\n    \n#[test]\nfn test_event_serde() {\n    let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 5, NO_EVENT, 1),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 6, NO_EVENT, 2),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 7, NO_EVENT, 3),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 8, NO_EVENT, 4)\n  ];\n\n  let serialized = serialize_events(events);\n  let (result_valid, result) = parse_their_events(serialized);\n  assert(result_valid);\n  assert(result[0].event == events[0].event);\n  assert(result[1].event == events[1].event);\n  assert(result[2].event == events[2].event);\n  assert(result[3].event == events[3].event);\n  assert(result[0].actor_id == events[0].actor_id);\n  assert(result[1].actor_id == events[1].actor_id);\n  assert(result[2].actor_id == events[2].actor_id);\n  assert(result[3].actor_id == events[3].actor_id);\n  assert(result[0].x == events[0].x);\n  assert(result[1].x == events[1].x);\n  assert(result[2].x == events[2].x);\n  assert(result[3].x == events[3].x);\n  assert(result[0].y == events[0].y);\n  assert(result[1].y == events[1].y);\n  assert(result[2].y == events[2].y);\n  assert(result[3].y == events[3].y);\n  assert(result[0].value == events[0].value);\n  assert(result[1].value == events[1].value);\n  assert(result[2].value == events[2].value);\n  assert(result[3].value == events[3].value);\n  assert(result[0].subtype == events[0].subtype);\n  assert(result[1].subtype == events[1].subtype);\n  assert(result[2].subtype == events[2].subtype);\n  assert(result[3].subtype == events[3].subtype);\n  assert(result[0].radius == events[0].radius);\n  assert(result[1].radius == events[1].radius);\n  assert(result[2].radius == events[2].radius);\n  assert(result[3].radius == events[3].radius);\n}\n    // fn affects_my_character(self, x: u8, y: u8) -> bool {\n    //     let distance = get_distance(self.x, self.y, x, y);\n    //     ((self.x == x) & (self.y == y)) | ((self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y))\n    // }\nimpl Event {\n    fn affects_my_obstacle(self, x: u8, y: u8) -> bool {\n        (self.x == x) & (self.y == y)\n    }\n\n    fn may_affect_my_other_characters(self) -> bool {\n        (self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL)\n    }\n\n    fn may_affect_my_obstacles(self) -> bool {\n        self.event == RECEIVE_ATTACK\n    }\n\n    /**\n    * For now we will only take class into account.\n    */\n    pub fn get_applied_damage_to_my_asset(self, x: u8, y: u8, tile: u8) -> u16 {\n        let mut damage = 0;\n        let radius = self.radius as u32;\n        let radius = radius * radius;\n    \n        if self.event == RECEIVE_ATTACK {\n            let distance = get_distance(self.x, self.y, x, y) as u32;\n            debug!(quote {\n                        // let event = self.event;\n                        // let actor = self.actor_id;\n                        // let self_x = self.x;\n                        // let self_y = self.y;\n                        // let val = self.value;\n                        // println(f\"GetAppliedDamageToMyAsset: Event({event}:{val} from {actor}@{self_x}|{self_y})@{x}|{y}: {distance} <= {radius}\");\n                    });\n            if distance <= radius {\n                let damage_raw = get_attack_damage_to_tile(self.subtype, self.value as u32, tile) as u32;\n                damage = damage_raw * (1 + radius - distance) / (radius + 1) as u32;\n                debug!(quote { println(f\"Deal damage: {damage_raw} * (1 + {radius} - {distance}) / ({radius} + 1) = {damage}\"); });\n            }\n            // if (self.x == x) & (self.y == y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile);\n            // } else if (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile) / 2;\n            // }\n        }\n        if self.event == TRIGGERED_TRAP {\n            damage = get_trap_damage_to_tile(self.value as u32, tile);\n        }\n        damage as u16\n    }\n\n    pub fn empty(actor_id: u8) -> Event {\n        Event {\n            event: NO_EVENT,\n            actor_id: actor_id,\n            x: 0,\n            y: 0,\n            value: 0,\n            subtype: 0,radius: 0\n        }\n    }\n\n    pub fn get_dummy_events() -> [Field; MAX_EVENTS] {\n        [0; MAX_EVENTS]\n    }\n\n    pub fn get_test_dummy_events() -> [Event; MAX_EVENTS] {\n        [Event::empty(0); MAX_EVENTS]\n    }\n}\n\npub fn build_std_event(event: u8, actor_id: u8, x: u8, y: u8) -> Event {\n    assert(event < EVENT_COUNT);\n    assert((actor_id as u32) < MAX_CHARACTERS);\n    assert((x < WIDTH) | (x == NOWHERE));\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: 0,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\n#[test]\nfn test_build_std_event() {\n    let event = build_std_event(SEE_MOVE, 1, 2, 3);\n    assert(event.event == SEE_MOVE);\n    assert(event.actor_id == 1);\n    assert(event.x == 2);\n    assert(event.y == 3);\n}\n\n#[test(should_fail)]\nfn test_build_std_event_fail() {\n    let event = build_std_event(EVENT_COUNT, 1, 2, 3);\n    assert(event.event == EVENT_COUNT);\n}\n\npub fn build_value_event(event: u8, actor_id: u8, x: u8, y: u8, value: u8) -> Event {\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\npub fn build_subtype_value_event(event_type: u8, actor_id: u8, x: u8, y: u8, value: u8, event_subtype: u8, radius: u8) -> Event {\n    Event {\n        event: event_type,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: event_subtype,\n        radius: radius,\n    }\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/event.nr"},"75":{"source":"mod common;\n// mod actionPreCalcEffect;\n// mod actionResultEvent;\n// mod actionResultEffect;\n// mod actionRequirements;\nmod action;\n// mod actionDefinitionRegister;\nmod bugs;\nuse arenalib::{ new_action };\npub use action::execute_action;\n// mod actionDefinition;\nmod character;\nuse character::{ Character };\nuse character::parse_characters;\nmod event;\nuse event::Event;\npub use event::{serialize_events, parse_their_events};\nmod obstacle;\nuse obstacle::Obstacle;\npub use obstacle::{ new_obstacle, parse_my_obstacles, parse_their_obstacles, get_obstacle_x, get_obstacle_y, get_obstacle_id, get_obstacle_type, get_obstacle_health, serialize_my_obstacles, get_default_obstacles };\nmod map;\nuse dep::std;\nuse obstacle::serialize_obstacle;\nuse obstacle::serialize_their_obstacles;\n// use action::ACTION_TARGET_X;\n// use action::ACTION_TARGET_Y;\n// use action::ACTION_TYPE;\nuse arenalib::{get_action_target_y, get_action_target_x, get_action_type};\nuse obstacle::serialize_my_obstacles_for_me;\nuse map::is_visible;\npub use arenalib::{SerializedArenaActionDefinitions, SerializedArenaActions, SerializedArenaCharacterRoster, SerializedArenaEnemyObstacles, SerializedArenaEvents, SerializedArenaObstacles};\nuse arenalib::arena_test_action_def_register;\nuse character::serialize_chars;\nuse skplg::{softassert, debug};\nuse arenalib::{serialize_actions, parse_actions};\n\nuse arenalib::{SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLE_BYTE_SIZE};\nuse arenalib::{WIDTH};\nuse arenalib::{MAX_ACTIONS, MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES};\nuse arenalib::{VIEW_DISTANCE};\nuse arenalib::{ARCHER, KNIGHT, ROGUE, MAGE, RITUALIST};\nuse arenalib::{MIN_FIREBALL_ROUNDS_FOR_CAST};\nuse arenalib::{SEE_MOVE, RECEIVE_ATTACK, NO_EVENT};\nuse arenalib::{ATTACK_FIREBALL, ATTACK_RANGED};\nuse arenalib::{WAIT};\nuse arenalib::get_wait_action_def;\nuse arenalib::get_test_action_register;\n\n// mod ResolvedAction;\n\n\n\n// #[export]\n// pub fn ext_can_move_to(x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle]) -> bool {\n//     assert(MAX_OBSTACLES == 24);\n//     let mut my_obstacles_parsed = Obstacle::parse_my_obstacles(my_obstacles, events).as_array();\n//     // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n//     // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n//     let enemy_objects_parsed = Obstacle::parse_their_obstacles(enemy_objects);\n\n//     let mut can = true;\n//     for i in 0..MAX_OBSTACLES {\n//         if !obstacles[i].is_traversible() & (obstacles[i].x == x) & (obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     for i in 0..their_obstacles.len() {\n//         if !their_obstacles[i].is_traversible() & (their_obstacles[i].x == x) & (their_obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     can\n// }\n\n// pub comptime global DEBUG: bool = false;\n// pub comptime fn debug(stmt: Quoted) -> Quoted {\n//     let debug_result = if DEBUG {\n//         stmt\n//     } else { quote {} };\n//     debug_result\n// }\n// pub comptime fn debugmsg<T>(msg: T) -> Quoted {\n//     debug!(quote { println($msg); })\n// }\n// pub comptime fn softassert(varname: Quoted, check: Quoted, msg: Quoted) -> Quoted {\n//     let result = if DEBUG {\n//         quote {\n//             $varname &= $check;\n//             if !($check) {\n//                 println($msg);\n//             }\n//         }\n//     } else {\n//         quote {\n//             $varname &= $check;\n//         }\n//     };\n//     result\n// }\n\n// // MAP\n// global WIDTH_BITS: u8 = 5;\n// global WIDTH_MASK: u8 = (1 << WIDTH_BITS) - 1;\n// global WIDTH: u8 = 1 << WIDTH_BITS;\n// global HEIGHT_BITS: u8 = 4;\n// global HEIGHT_MASK: u8 = (1 << HEIGHT_BITS) - 1;\n// global HEIGHT: u8 = 10;\n// // global NOWHERE: u8 = 255;\n\n// // CLASSES\n// //global UNKNOWN_CLASS: u8 = 0;\n// global ARCHER: u8 = 1;\n// global RITUALIST: u8 = 2;\n// global ROGUE: u8 = 3;\n// global KNIGHT: u8 = 4;\n// global MAGE: u8 = 5;\n// global CLASS_BITS: u8 = 3;\n// global CLASS_MASK: u8 = (1 << CLASS_BITS) - 1;\n// global CLASS_COUNT: u32 = 6;\n// global MAX_ACTIONS_PER_CHARACTER: u32 = 6;\n\n// // ACTIONS\n// global WAIT: u8 = 0;\n// //global SNEAK: u8 = 1;\n// //global MOVE: u8 = 2;          // => SEE_COLUMN (depr: MOVE)\n// //global RITUAL: u8 = 3;        // => SEE_RITUAL | WIN\n// //global SEARCH: u8 = 4;        // => SEE_SEARCH_TRAP\n// //global ATTACK: u8 = 5;        // => RECEIVE_ATTACK | DESTROY // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST: u8 = 6;          // => SEE_CAST // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST_FIREBALL: u8 = 7; // => RECEIVE_ATTACK // affects other characters if status == FIREBALL_ROUNDS_FOR_CAST\n// //global DRAW: u8 = 8;          // => SEE_DRAW\n// //global SHOOT: u8 = 9;         // => RECEIVE_ATTACK\n// //global TRIGGER_TRAP = 9;  // => TRIGGERED_TRAP ?????????\n// //global DISARM_TRAP: u8 = 10;  // => DESTROY\n// //global SET_TRAP: u8 = 11;\n// global ACTION_COUNT: u32 = 12;\n// pub global ACTION_RESULT_EVENT_COUNT: u32 = 4;\n// global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0;\n// global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1;\n// global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2;\n\n// // EVENTS\n// global NO_EVENT: u8 = 0 ;\n// // global DESTROY: u8 = 1;          // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //use coordinates to determine tile or trap that got destroyed and update map\n// //global DISCOVER = 2;         // actor_id = their_char or their_object when receive - handle to update enemy positions, got health & class (this is for all chars, not just the active one)\n// //global SEE_COLUMN = 2 ;      // y = the column the player sees => update objects list\n// global SEE_MOVE: u8 = 3 ;        // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //handle to update enemy positions => DISCOVER\n// //global SEE_SPELL = 4 ;       // actor_id = their_char when receive - need to handle effect via coordinates, => RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle my obstacles\n// global SEE_SEARCH_TRAP: u8 = 5 ; // actor_id = their_char when receive - need to create found trap event if there is a trap nearby => FOUND_TRAP\n// global SEE_RITUAL: u8 = 6 ;      // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_CAST: u8 = 7;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_DRAW: u8 = 8;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// //global RECEIVE_DAMAGE = 9;   // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client\n// global RECEIVE_ATTACK: u8 = 10;  // actor_id = 0 when receive - need to handle damage => // no need to events ... health of visible assets gets sent anyway and invisible ones will be updated during discovery //RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle in my obstacles\n// global TRIGGERED_TRAP: u8 = 11;  // actor_id = my_char when receive - need to handle damage (for now, later on we might want to handle other effects as well) => RECEIVE_DAMAGE\n// // global FOUND_TRAP: u8 = 12;      // actor_id = my_char when receive - no need to handle, only important to have on-chain for the client\n// global DISARMED_TRAP: u8 = 13;      // actor_id = their-char when receive - need to remove my trap from the map\n// global WIN: u8 = 14;\n// // global LOSE: u8 = 15;\n// global ADD_OBSTACLE: u8 = 4;\n// global EVENT_COUNT: u8 = 16;\n\n// // SUBTYPES:\n// global WIN_BY_RITUAL: u8 = 1;\n\n// // ATTACKS\n// global ATTACK_MELEE: u8 = 0;\n// global ATTACK_RANGED: u8 = 1;\n// global ATTACK_FIREBALL: u8 = 2;\n// // global ATTACK_COUNT: u8 = 3;\n// // TODO: instead of enum, use a global array of structs with damage, range, etc.\n\n\n// // TILES\n// global EMPTY: u8 = 0;\n// global WALL: u8 = 6;\n// global WATER: u8 = 7;\n// // global UNKNOWN_CLASS_TILE: u8 = 8;\n// global NON_EMPTY_WALKABLE_TILE_MIN: u8 = 9;\n// // global FLAG: u8 = 9;\n// global TRAP: u8 = 10;\n// // global TRAP_USED: u8 = 11;\n// // global TRAP_FOUND: u8 = 12;\n// // global BODY: u8 = 13;\n// // global BODY_LOOTED: u8 = 14;\n// // global FOG: u8 = 15;\n// global MAX_OBSTACLE_TYPE: u8 = 0x0f;\n// // global TILE_COUNT: u8 = 16;\n// // unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n// // STATUS\n// global RITUAL_ROUNDS_FOR_WIN: u8 = 15;\n// global MIN_FIREBALL_ROUNDS_FOR_CAST: u8 = 3;\n// global MAX_FIREBALL_ROUNDS_FOR_CAST: u8 = 6;\n// // global DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MIN_DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MAX_DRAW_ROUNDS_FOR_SHOOT: u8 = 3;\n// global PROGRESS_BITS: u8 = 4;\n// global PROGRESS_MASK: u8 = (1 << PROGRESS_BITS) - 1;\n// global PROGRESS_COUNT: u8 = 16 ; // just to be more in line with the other constants, actually used as a counter\n// global MAX_HEALTH: u8 = 255;\n\n// // GAMEPLAY\n// global VIEW_DISTANCE: u8 = 6;\n// // global MAX_TRAPS: u32 = 8; // note: only lowest bit of first byte of field is usable! => ! Field = 1 bit + 31 bytes!\n// // global TRAPS_BUFFER_SIZE: Field = 16;\n// // global TRAPS_BUFFER_MASK: Field = 15; // has to be 2^n - 1\n// global MAX_ACTIONS: u32 = 4;\n// global MAX_EVENTS: u32 = 4; // = MAX_ACTIONS // NO! handle traps in a different way (by passing as argument!)+ 4 (2 FOUND_TRAP + WIN/LOSE + 1 reserved)\n// global MAX_OBSTACLES: u32 = 24; // leave traps for now + MAX_TRAPS; // 24 + 8 player placeables\n// pub global MAX_CHARACTERS: u32 = 5;\n// global MIN_PROGRESS: u8 = 0;\n// pub global MAX_PROGRESS: u8 = PROGRESS_COUNT - 1;\n// global SERIALIZED_OBSTACLE_BYTE_SIZE: u32 = 3;//3\n// pub global SERIALIZED_OBSTACLES_ARRAY_SIZE: u32 = 3;//3 // TODO: we take 3 because 3 x 8 = MAX_OBSTACLES ... should assert on this (MAX_OBSTACLES + MAX_CHARACTERS + 7) / 8;\n// pub global SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE: u32 = SERIALIZED_OBSTACLES_ARRAY_SIZE + 1; // +1 because enemy characters are also serialized as obstacles\n// global SERIALIZED_OBSTACLES_PER_FIELD: u32 = 8;//8 // TODO: need to verify that SERIALIZED_OBSTACLES_ARRAY_SIZE * SERIALIZED_OBSTACLES_PER_FIELD = MAX_OBSTACLES!\n// global SERIALIZED_EVENT_BYTE_SIZE: u32 = 7;\n// pub global SERIALIZED_EVENTS_ARRAY_SIZE: u32 = 1; // MAX_EVENTS / SERIALIZED_EVENTS_PER_FIELD => 4 / 4 = 1\n// global SERIALIZED_EVENTS_PER_FIELD: u32 = 4; // 31 / 7 = 4\n// global SERIALIZED_ACTION_BYTE_SIZE: u32 = 5;\n// pub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n// global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4; // could be up to 6, but we only use 4\n\n\n// pub type SerializedArenaActionDefinitions = SerializedRosterActionDefinitions<MAX_ACTIONS_PER_CHARACTER, MAX_CHARACTERS>;\n// pub type SerializedArenaCharacterActionDefinitions = SerializedCharacterActionDefinitions<MAX_ACTIONS_PER_CHARACTER>;\n// pub type SerializedArenaCharacterActionDefinition = SerializedCharacterActionDefinition;\n// #[export]\n// fn tf(x: Field) -> (u32, [u8;32]) {\n//     let mut result: [u8;32] = [0;32];\n//     let bts = x.to_be_bytes::<32>();\n//     for j in 0..31 {\n//         result[j] = 2*j;//bts[j];\n//     }\n//     (32 , result)\n// }\n// i,\n// 20, 0 -> 25,\n// 25 -> 0, \n// x, 0, 0, d0,\n// x, 0, 0, 9d, 1, 0,\n// x, 0, 0, 1, 0, b4, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 91, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 23, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, d4, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, 66, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 50, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b9, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, c5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 55, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b2, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, e8, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2a, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, cb, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 9b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 5c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, a6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 86, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, d5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 38, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8e, 1, 0, 0, 1,\n// 0, 32, 1, 0, 1, 1, x, 0, 0, 1,\n// x, 0, 0, 1, x, 0, 0, 1, 0, 1, 1\n\n// i,\n// 20, 0, 1e -> 0, 0 -> 1e, 0\n// x, 0, 0, d0,\n// x, 0, 0, ba, 1, 0,\n// x, 0, 0, 1, 0, cf, 1, 0, 1, 1,\n\nfn get_actor_from_move(mut move: u32) -> u8 {\n    if (move % 2) == 1 {\n        move -= 1; //((move % 10) - 1) >> 1 // actually not needed ... but clearer this way\n    }\n    let single_digit: u32 = (move % 10 as u32) >> 1;\n    single_digit as u8\n}\n// 3, 1, 1, 1, 0, 1, 2, 0, 2, 8, 1, 0, 0, 1\n// 4, 2, 2, 0, x, 0, 0, 0, 4, a, 2, 0, 0, 2\n\n#[export]\npub fn hash_serialized_private_state(my_chars: SerializedArenaCharacterRoster, my_char_actions: SerializedArenaActionDefinitions, my_obstacles: SerializedArenaObstacles, secret: Field) -> pub Field {\n    // let my_chars_be_bytes: [u8; 32] = my_chars.to_be_bytes::<32>();\n    // assert(my_chars_be_bytes.len() == 32);\n    let gamestate_before_hash_calculated = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n    //let gamestate_before_hash_calculated_field = std::field::bytes32_to_field(gamestate_before_hash_calculated);\n    gamestate_before_hash_calculated\n}\n\n#[test]\nfn test_hash_match() {\n  let my_chars = 12345678901234567890;\n  let my_char_actions = [\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890\n  ];\n  let my_obstacles = [\n    12345678901234567890, 12345678901234567890, 12345678901234567890\n  ];\n  let secret = 12345678901234567890;\n\n  let hash1 = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n  let valid = hash_serialized_private_state(my_chars, my_char_actions, my_obstacles, secret);\n\n  assert(hash1 == valid, f\"{hash1} != {valid}\");\n}\n\n#[export]\nfn get_serialized_obstacle(id: u8, x: u8, y: u8, obstacle_type: u8) -> pub Field {\n    let mut result: [u8; 32] = [0; 32];\n    result[0] = id;\n    result[1] = x;\n    result[2] = y;\n    result[3] = obstacle_type;\n    std::field::bytes32_to_field(result)\n}\n\n// global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// global action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n\n\n#[export]\npub fn calculate_turn(\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions_input: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //mut my_obstacles_parsed: [[u8; 5]; 24],\n    actions_input: SerializedArenaActions,\n    // Common Inputs\n    move_input: u32, //pub\n    // Enemy Inputs\n    enemy_advance_input: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects_input: SerializedArenaEnemyObstacles, // pub\n    enemy_events_input: SerializedArenaEvents, // pub //MAX_EVENTS],\n\n) -> pub (bool, SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, [Obstacle; 24], u8, SerializedArenaEvents, SerializedArenaEnemyObstacles) {\n    let mut success = true;\n    \n// let action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n    //let actionRegister = ActionDefinitionRegister::new(my_char_actions_input);\n    // calculate enemy advance in our coordinates and shadow\n    // let (enemy_advance_valid, enemy_advance) = their_x_to_mine(enemy_advance);\n\n    // // more efficient to do this here, BUT leads to bad side effects for frontend (and it is not THAT costly)\n    // let enemy_advance = if enemy_advance_input >= WIDTH { 0 } else { WIDTH - enemy_advance_input - 1 };\n\n\n    // TODO: Validate map => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    let (events_valid, events) = parse_their_events(enemy_events_input);\n    softassert!(quote { success }, quote { events_valid }, quote { f\"Failed to parse their events {events}\" });\n\n    // let side = move as u1;\n    let (my_chars_valid, mut my_chars) = parse_characters(my_chars_input, my_char_actions_input, events, enemy_advance_input);\n    softassert!(quote { success }, quote { my_chars_valid }, quote { f\"Failed to parse my characters {my_chars}\" });\n\n    let actor_id = get_actor_from_move(move_input);\n    let mut actor = my_chars[actor_id]; //Character::parse(actor_id, my_chars, events);\n    \n    comptime {\n        assert(MAX_OBSTACLES == 24);\n    }\n\n    let (valid, my_obstacles_parsed) = parse_my_obstacles(my_obstacles_input, events);\n    softassert!(quote { success }, quote { valid }, quote { f\"Failed to parse my obstacles {my_obstacles_input}\" });\n    let mut my_obstacles_parsed: [Obstacle; MAX_OBSTACLES] = my_obstacles_parsed;\n\n    let (actions_valid, actions) = parse_actions(MAX_CHARACTERS as u8, actions_input); // actions.map(|action| Action::from_field(action));\n    softassert!(quote { success }, quote { actions_valid }, quote { f\"Failed to parse actions {actions_input}\" });\n    // let mut my_obstacles_parsed = my_obstacles_parsed.as_array();\n//    let (valid, mut my_obstacles_parsed) = parse_my_obstacles(my_obstacles, events).as_array();\n    // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n    let (enemy_objects_parsed_valid, enemy_objects_parsed) = parse_their_obstacles(enemy_objects_input);\n    softassert!(quote { success }, quote { enemy_objects_parsed_valid }, quote { f\"Failed to parse their obstacles {enemy_objects_input}\" });\n\n    let mut energy: u8 = 12;\n    let mut result_events_calculated: [Event] = &[];\n    for i in 0..MAX_ACTIONS {\n        // TODO: ensure that if actor committed suicide, it is not allowed to do any more actions\n        let action = actions[i];\n        //let resolved_action = actionRegister.resolve_action(action); //resolve_action(action);\n        let result = execute_action(action, enemy_advance_input, actor, energy, my_obstacles_parsed, enemy_objects_parsed);\n        //assert(result.0);\n        success &= result.0;\n        let result_event = result.1;\n        let internal_event = result.2;\n        actor = result.4;\n        energy = result.5;\n        \n        // 4461 / 5 = 892,2\n        my_chars = my_chars.map(|c| wb_apply_damage_to_char(c, result_event, actor));\n        // 16800 / 24 = 700\n        my_obstacles_parsed = my_obstacles_parsed.map(|obstacle| {\n            let (updated_obstacle_valid, updated_obstacle) = update_my_obstacle(obstacle, result_event);\n            //success = success & updated_obstacle_valid;\n            softassert!(quote { success }, quote { updated_obstacle_valid }, quote { f\"Failed to update my obstacle {obstacle}, {result_event}\" });\n            updated_obstacle\n        });\n\n        result_events_calculated = result_events_calculated.push_back(result_event);\n    }\n    let result_events_calculated = serialize_events(result_events_calculated.as_array());\n    assert(result_events_calculated.len() == SERIALIZED_EVENTS_ARRAY_SIZE);\n\n    // send death events => no need\n\n    // determine view range\n    let mut my_advance_calculated = 0;\n    for i in 0..MAX_CHARACTERS {\n        if my_chars[i].x > my_advance_calculated {\n            my_advance_calculated = my_chars[i].x;\n        }\n    }\n    my_advance_calculated += VIEW_DISTANCE;\n\n    let (serialized_characters, serialized_action_defs) = serialize_chars(my_chars);\n    let serialized_obstacles: [Field] = serialize_my_obstacles(enemy_advance_input, my_obstacles_parsed);\n    let (serialized_chars_as_obstacles_valid, serialized_chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance_input, my_chars);\n    // success = success & serialized_chars_as_obstacles_valid;\n    softassert!(quote { success }, quote { serialized_chars_as_obstacles_valid }, quote { f\"Failed to serialize chars as obstacles: {my_chars}\" });\n    let serialized_obstacles_for_enemy: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE] = serialized_obstacles.push_back(serialized_chars_as_obstacles).as_array();\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles_parsed);\n\n    (success, serialized_characters, serialized_action_defs, my_obstacles_parsed, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy)\n}\n\n\n\n#[export]\npub fn turn(\n    // verification_key: pub [Field; 114],\n    // proof: pub [Field; 93],\n    // public_inputs: pub [Field; 1 ],//+ 2 * SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE + 2 * SERIALIZED_EVENTS_ARRAY_SIZE],\n    // key_hash: pub Field,\n    // last_move: pub u32,\n    // last_enemy_advance: pub u8,\n    // last_enemy_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // last_events: pub [Field, SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_advance: pub u8,\n    // last_my_result_events: pub [Field; SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_result_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // Gamestate Hashes\n    // gamestate_before_hash: pub Field,\n    // gamestate_after_hash: pub Field,\n    // My Secret State\n    secret: Field,\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //my_obstacles: [[u8; 5]; 24],\n    actions: SerializedArenaActions,\n    // Common Inputs\n    move: u32, //pub\n    // Enemy Inputs\n    enemy_advance: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects: SerializedArenaEnemyObstacles, // pub\n    enemy_events: SerializedArenaEvents, // pub //MAX_EVENTS],\n    // My Results\n    my_result_advance: u8, // pub // 1 bit win, 1 bit lose, 1 bit reserved, 5 bits advance\n    my_result_events: SerializedArenaEvents, // pub\n    my_result_objects: SerializedArenaEnemyObstacles, // pub\n    // Gamestate Hashes\n    gamestate_before_hash: Field, // pub\n    gamestate_after_hash: Field, // pub\n) -> pub bool {\n    // Validate global constants (to make sure one didn't change one without updating dependet ones)\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    //let my_char_actions = arena_test_action_def_register;// get_test_action_register();\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(my_chars_input, my_char_actions, my_obstacles_input, secret);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    softassert!(quote { success }, quote { gamestate_before_hash == gamestate_before_hash_calculated_field }, quote { f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\" });\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        my_chars_input,\n        my_char_actions,\n        my_obstacles_input,\n        actions,\n        move,\n        enemy_advance,\n        enemy_objects,\n        enemy_events\n    );\n    softassert!(quote { success }, quote { turn_calc_valid }, quote { f\"Tun calculation failed\" });\n\n    // if side == 0 {\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x > my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated += VIEW_DISTANCE;\n    // } else {\n    //     my_advance_calculated = WIDTH - 1;\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x < my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated -= VIEW_DISTANCE;\n    // }\n    softassert!(quote { success }, quote { my_result_advance == my_advance_calculated }, quote { f\"Invalid result advance: {my_result_advance} != {my_advance_calculated}\" });\n\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        softassert!(quote { success }, quote { result_event_should == result_event_calculated }, quote { f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\" });\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    assert(my_result_objects.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE {\n        let my_result_object = my_result_objects[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        softassert!(quote { success }, quote { my_result_object == serialized_obstacle }, quote { f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\" });\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secret, serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    softassert!(quote { success }, quote { new_hash_bytes == gamestate_after_hash }, quote { f\"Invalid result hash: {new_hash_bytes} != {gamestate_after_hash}\" });\n    success\n}\n\nfn wb_apply_damage_to_char(mut c: Character, event: Event, actor: Character) -> Character {\n    if c.id == actor.id {\n        c = actor;\n    }\n    apply_damage_to_char(c, event)\n}\n\nfn apply_damage_to_char(c: Character, event: Event) -> Character {\n    let dmg = event.get_applied_damage_to_my_asset(c.x, c.y, c.class);\n    Character {\n        id: c.id,\n        x: c.x,\n        y: c.y,\n        class: c.class,\n        health: safe_subtract_dmg(c.health, dmg),\n        progress: c.progress,\n        target_x: c.target_x,\n        target_y: c.target_y,\n        has_been_seen: c.has_been_seen,\n        is_hidden: c.is_hidden,\n        damage_mod: c.damage_mod,\n        last_action: c.last_action,\n        actions: c.actions,\n        status: 0\n    }\n}\nfn update_my_obstacle(obstacle: Obstacle, event: Event) -> (bool, Obstacle) {\n    let dmg =\n        // event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle)) +\n        event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle));\n    new_obstacle(get_obstacle_id(obstacle), get_obstacle_x(obstacle), get_obstacle_y(obstacle), safe_subtract_dmg(get_obstacle_health(obstacle), dmg), get_obstacle_type(obstacle))\n    // Obstacle {\n    //     health: safe_subtract_dmg(obstacle.health, dmg),\n    //     id: obstacle.id,\n    //     x: obstacle.x,\n    //     y: obstacle.y,\n    //     obstacle_type: obstacle.obstacle_type,\n    // }\n}\n\nfn get_data_hash(secret: Field, characters: Field, character_actions: SerializedArenaActionDefinitions, obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> Field {\n  assert(character_actions.len() == 30);\n  assert(obstacles.len() == 3);\n  std::hash::poseidon2::Poseidon2::hash([\n    secret,\n    characters,\n    character_actions[0],\n    character_actions[1],\n    character_actions[2],\n    character_actions[3],\n    character_actions[4],\n    character_actions[5],\n    character_actions[6],\n    character_actions[7],\n    character_actions[8],\n    character_actions[9],\n    character_actions[10],\n    character_actions[11],\n    character_actions[12],\n    character_actions[13],\n    character_actions[14],\n    character_actions[15],\n    character_actions[16],\n    character_actions[17],\n    character_actions[18],\n    character_actions[19],\n    character_actions[20],\n    character_actions[21],\n    character_actions[22],\n    character_actions[23],\n    character_actions[24],\n    character_actions[25],\n    character_actions[26],\n    character_actions[27],\n    character_actions[28],\n    character_actions[29],\n    obstacles[0],\n    obstacles[1],\n    obstacles[2]\n  ], 2 + 30 + 3)\n}\n// fn get_data_hash(secret: [u8], characters: [u8], character_actions: [u8; ACTION_DEFINITION_REGISTER_SIZE], obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> [u8; 32] {\n//     assert(secret.len() == 32);\n//     assert(characters.len() == 32);\n\n//     let mut data: [u8; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE] = [0; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE];\n//     for i in 0..32 {\n//         data[i] = secret[i];\n//         data[i + 32] = characters[i];\n//     }\n//     let offset = 32 + 32;\n//     for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//         let obstacle: [u8; 32] = obstacles[i].to_be_bytes::<32>();\n//         assert(obstacle.len() == 32);\n//         for j in 0..32 {\n//             data[offset + i * 32 + j] = obstacle[j];\n//         }\n//     }\n//     let offset = 32 + 32 + 32 * SERIALIZED_OBSTACLES_ARRAY_SIZE;\n//     for i in 0..ACTION_DEFINITION_REGISTER_SIZE {\n//         data[offset + i] = character_actions[i];\n//     }\n//     // let offset = WIDTH * HEIGHT + 32 * 3;\n//     // for i in 0..10 {\n//     //     data[offset + i * 4] = (searched_traps[i] & 255) as u8;\n//     //     data[offset + i * 4 + 1] = ((searched_traps[i] >> 8) & 255) as u8;\n//     //     data[offset + i * 4 + 2] = ((searched_traps[i] >> 16) & 255) as u8;\n//     //     data[offset + i * 4 + 3] = ((searched_traps[i] >> 24) & 255) as u8;\n//     // }\n//     std::hash::blake3(data)\n// }\n\n// fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> Field {\n//     comptime {\n//         assert(MAX_CHARACTERS <= 5);\n//     }\n//     let mut result: [u8; 32] = [0; 32];\n//     for i in 0..MAX_CHARACTERS {\n//         let serialized = chars[i].serialize();\n//         for j in 0..6 {\n//             result[2 + i * 6 + j] = serialized[j];\n//         }\n//     }\n//     std::field::bytes32_to_field(result)\n// }\n\nfn serialize_chars_as_obstacles(enemy_advance: u8, chars: [Character; MAX_CHARACTERS]) -> (bool, Field) {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut result: [u8; 32] = [0; 32];\n    let mut valid_result = true;\n    for i in 0..MAX_CHARACTERS {\n        if (chars[i].is_hidden == 0) & is_visible(enemy_advance, chars[i].get_x()) {\n            let (valid, char_as_obstacle) = chars[i].to_obstacle();\n            let serialized = serialize_obstacle(char_as_obstacle);\n            valid_result = valid_result & valid;\n            result[2 + i * 3] = serialized[0];\n            result[2 + i * 3 + 1] = serialized[1];\n            result[2 + i * 3 + 2] = serialized[2];\n        }\n    }\n    (valid_result, std::field::bytes32_to_field(result))\n}\n\nfn safe_subtract_dmg(a: u8, b: u16) -> u8 {\n    let mut result = 0;\n    if (a as u16) > b {\n        result = a - (b as u8);\n    }\n    result\n}\n\nfn test_result_object_builder(enemy_advance: u8, chars: [Character; MAX_CHARACTERS], obs: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1]) {\n    let mut result: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        result[i] = obs[i];\n    }\n    let (valid, chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance, chars);\n    result[SERIALIZED_OBSTACLES_ARRAY_SIZE] = chars_as_obstacles;\n    (valid, result)\n}\n\n// fn test_helper_roster(actor: Character, mut chars: [Character; MAX_CHARACTERS]) -> [Character; MAX_CHARACTERS] {\n//     chars[actor.id] = actor;\n//     chars\n// }\n\n// fn test_helper_execute_move(move: u32, actor: Character, advances: [u8; 2], secret: [Field; 2], last_hashes: [Field; 2], chars: [[Character; MAX_CHARACTERS]; 2], obs: [[Obstacle; MAX_OBSTACLES]; 2], actions: [Action], my_events: [Event], their_events: [Event]) -> (u32, [Character; MAX_CHARACTERS], Field) {\n//     let side = move as u1;\n//     let other_side = (side as u8 + 1) as u1;\n//     let chars_after = test_helper_roster(actor, chars[side]);\n//     let my_obstacles_serialized = serialize_obstacles(advances[other_side], obs[side]);\n//     let secret_be_bytes: [u8; 32] = secret[side].to_be_bytes();\n//     assert(secret_be_bytes.len() == 32);\n//     let serialized_chars_after = serialize_chars(chars_after);\n//     let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes();\n//     assert(serialized_chars_after_be_bytes.len() == 32);\n//     let current_hash = std::field::bytes32_to_field(get_data_hash(secret_be_bytes, serialized_chars_after_be_bytes, my_obstacles_serialized)); \n\n//     let (enemy_objects_valid, enemy_objects) = test_result_object_builder(chars[other_side], serialize_obstacles(other_side, advances[side], obs[other_side]));\n//     assert(enemy_objects_valid, \"Invalid enemy objects\");\n//     let (my_result_objects_valid, my_result_objects) = test_result_object_builder(chars_after, my_obstacles_serialized);\n//     assert(my_result_objects_valid, \"Invalid my result objects\");\n\n//     let result = turn(\n//         secret[side],\n//         character::serialize_chars(chars[side]),\n//         my_obstacles_serialized,\n//         serialize_actions(actions),\n//         move,\n//         advances[other_side],\n//         enemy_objects,\n//         Event::serialize_events(their_events).as_array(),\n//         advances[side],\n//         Event::serialize_events(my_events).as_array(),\n//         my_result_objects,\n//         last_hashes[side],\n//         current_hash\n//     );\n//     assert(result, \"Invalid result\");\n\n//     (move + 1, chars_after, current_hash)\n// }\n\n// #[test]\n// fn test_main() {\n//     let secrets = [123456789, 9876543210];\n//     let mut chars = [ character::get_default_characters(0), character::get_default_characters(1) ];\n//     let mut obs = [ Obstacle::get_default_obstacles(0), Obstacle::get_default_obstacles(1) ];\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 2, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 3, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 4, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 5, target_y: 1 },\n//     ];\n//     let their_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let mut move = 0;\n//     let mut actor = chars[0][0].move(5, 1);\n//     let mut last_hashes = [ 0x12b8f97907a05ec6a77da3f70368fa3b02e166c74edab8ea0695d6f406146559, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n//     let mut advances = [2 + VIEW_DISTANCE, 29 - VIEW_DISTANCE];\n//     advances[0] = 5 + VIEW_DISTANCE;\n\n//     let mut side = move % 2;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 0 },\n//         Action { action: MOVE, actor: 0, target_x: 27, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(27, 0);\n//     advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 1, target_y: 3 },\n//         Action { action: MOVE, actor: 1, target_x: 0, target_y: 3 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(0, 3);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 2 },\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 1, target_x: 28, target_y: 1 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(28, 1);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n// }\n\n#[test]\nfn test_main_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions = arena_test_action_def_register.map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    println(secrets[side]);\n    println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    println(my_obstacles_serialized_for_me);\n    println(serialize_actions(actor.id, actions));\n    println(move);\n    println(advances[other_side]);\n    println(test_result_object_other_chars);\n    println(serialize_events(their_events));\n    println(advances[side]);\n    println(serialize_events(my_events));\n    println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let result = turn(\n        secrets[side],\n        serialized_chars_input,\n        serialized_char_actions_input,\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events),\n        advances[side],\n        serialize_events(my_events),\n        test_result_object_chars_after,\n        last_hashes[side],\n        current_hash\n    );\n    assert(result, \"Turn failed\");\n}\n\n\n#[test]\nfn test_calc_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions_raw = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000];\n    let test_actions = test_actions_raw.map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    // println(secrets[side]);\n    // println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    // println(my_obstacles_serialized_for_me);\n    // println(serialize_actions(actor.id, actions));\n    // println(move);\n    // println(advances[other_side]);\n    // println(test_result_object_other_chars);\n    // println(serialize_events(their_events));\n    // println(advances[side]);\n    // println(serialize_events(my_events));\n    // println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n\n\n\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    let my_char_actions = arena_test_action_def_register; //get_test_action_register();\n    println(\"my_char_actions\");\n    println(my_char_actions);\n    println(\"serialized_char_actions_input\");\n    println(serialized_char_actions_input);\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    let gamestate_before_hash = last_hashes[side];\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(serialized_chars_input, my_char_actions, my_obstacles_serialized_for_me, secrets[side]);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        serialized_chars_input,\n        arena_test_action_def_register, //serialized_char_actions_input,\n        // get_test_action_register(),\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events)\n    );\n    assert(turn_calc_valid, f\"Tun calculation failed\");\n    assert(advances[side] == my_advance_calculated, f\"Invalid result advance:  != {my_advance_calculated}\");\n\nlet my_result_events: [Field; SERIALIZED_EVENTS_ARRAY_SIZE] = serialize_events(my_events);\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        assert(result_event_should == result_event_calculated, f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\");\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    for i in 0..test_result_object_chars_after.len() {\n        let my_result_object = test_result_object_chars_after[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        assert(my_result_object == serialized_obstacle, f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\");\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secrets[side], serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    assert(new_hash_bytes == current_hash, f\"Invalid result hash: {new_hash_bytes} != {current_hash}\");\n}\n\n// #[export]\n// pub fn setup_obstacles(\n    \n// )\n\n#[test]\nfn test_calc_turn_0() {\n  let my_chars = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0, 0, 0, 0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n\n  let result = calculate_turn(my_chars, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events);\n\n  assert(result.0);\n}\n\nfn test_turn_0() {\n  let secret = 0x075bcd15;\n  let my_chars_input = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0,0,0,0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n  let my_result_advance = 0x12;\n  let my_result_objects = [0,0,0,0];\n  let my_result_events = [0xffff0000000000ffff0000000000ffff0000000000ffff000000000000];\n  let initial_hash = 0x07a86579c9d2236bd1c02ced0660e9280e1d9a73146a0c9c8e4d8e27d64d6565;\n  let final_hash = 0x2c7492b9fc2adae465ec974b512f12b29b486e7c268cca2c304330eac57dd680;\n\n  let result = turn(secret, my_chars_input, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events, my_result_advance, my_result_events, my_result_objects, initial_hash, final_hash);\n\n  assert(result);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/lib.nr"},"76":{"source":"use arenalib::{ WIDTH, WIDTH_MASK, VIEW_DISTANCE, MAX_OBSTACLES, MAX_ENEMY_OBSTACLES };\nuse crate::obstacle::{ Obstacle, get_obstacle_y, get_obstacle_x, is_obstacle_traversible };\nuse skplg::NOWHERE;\n\n// pub fn is_neighbor(curr_x: u8, curr_y: u8, x: u8, y: u8) -> bool {\n//     // assert(curr_x < WIDTH);\n//     // assert(curr_y < HEIGHT);\n//     // assert(x < WIDTH);\n//     // assert(y < HEIGHT);\n//     // validating coordinates is not the job of this function\n//     // only avoid overflows!\n\n\n//     let shifted_curr_x = std::wrapping_add(curr_x, 1);\n//     let shifted_curr_y = std::wrapping_add(curr_y, 1);\n//     let shifted_x = std::wrapping_add(x, 1);\n//     let shifted_y = std::wrapping_add(y, 1);\n\n//     ((shifted_curr_x == shifted_x) & (std::wrapping_add(shifted_curr_y, 1) >= shifted_y) & (shifted_curr_y <= std::wrapping_add(shifted_y, 1))) |\n//     ((shifted_curr_y == shifted_y) & (std::wrapping_add(shifted_curr_x, 1) >= shifted_x) & (shifted_curr_x <= std::wrapping_add(shifted_x, 1)))\n// }\n\n// global DISTANCE_TABLE_HEIGHT: u32 = HEIGHT as u32;\n// global DISTANCE_TABLE_WIDTH: u32 = WIDTH as u32;\n\n// unconstrained fn distance_sqrt(x: u32) -> u32 {\n//     let mut result: u32 = 0;\n//     for i in 0..DISTANCE_TABLE_WIDTH {\n//         if i * i == x {\n//             result = i;\n//             break;\n//         }\n//     }\n//     result\n// }\n\n// fn d(a: u8, b: u8) -> u8 {\n//     let d = a as i32 - b as i32;\n//     let d2 = d * d;\n//     assert(d2 >= 0);\n//     let d2u = d2 as u32;\n//     let result = unsafe {\n//         let sq = distance_sqrt(d2u);\n//         assert(sq * sq == d2u);\n//         sq\n//     };\n//     assert(result < DISTANCE_TABLE_WIDTH);\n//     comptime { assert(DISTANCE_TABLE_WIDTH <= 256) };\n//     result as u8\n// }\n// global DISTANCE_TABLE: [[u8; DISTANCE_TABLE_WIDTH]; DISTANCE_TABLE_HEIGHT] = [\n//     [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 2,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ],\n//     [ 3,  3,  3,  4,  4,  5,  6,  7,  8,  9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ],\n// ]\n\nglobal MAX_DISTANCE: u32 = 0xff * 0xff;\n\npub fn get_distance(curr_x: u8, curr_y: u8, x: u8, y: u8) -> u16 {\n    // assert(curr_x < WIDTH);\n    // assert(curr_y < HEIGHT);\n    // assert(x < WIDTH);\n    // assert(y < HEIGHT);\n    // validating coordinates is not the job of this function\n    // only avoid overflows!\n\n    // let dx = unsafe {\n    //     let diff_\n    //     distance_sqrt(x)\n    // }\n\n    let dx = if curr_x > x { curr_x - x } else { x - curr_x } as u32;\n    let dy = if curr_y > y { curr_y - y } else { y - curr_y } as u32;\n\n    // let dx = curr_x as i16 - x as i16;\n    // let dy = curr_y as i16 - y as i16;\n\n    let distance = (dx * dx + dy * dy) as u32;\n    if distance > MAX_DISTANCE {\n      MAX_DISTANCE as u16\n    } else {\n      distance as u16\n    }\n}\n\n\npub fn is_visible(enemy_advance: u8, x: u8) -> bool {\n    //(x >= enemy_advance) == (side == 0)\n    x >= enemy_advance\n}\n\n// TODO: This is for the future - fireballs, etc. only if we have line of sight\n// pub fn is_visible(curr_x: u8, curr_y: u8, x: u8, y: u8, map: &Map) -> bool {\n//     assert(curr_x < WIDTH);\n//     assert(curr_y < HEIGHT);\n//     assert(x < WIDTH);\n//     assert(y < HEIGHT);\n\n//     let mut x = curr_x as f32;\n//     let mut y = curr_y as f32;\n//     let x2 = x + 0.5;\n//     let y2 = y + 0.5;\n//     let dx = x2 - x;\n//     let dy = y2 - y;\n//     let mut t = 0.0;\n//     let mut max_t = 1.0;\n//     let mut x = x;\n//     let mut y = y;\n\n//     while t < max_t {\n//         let x = x + dx * t;\n//         let y = y + dy * t;\n//         let x = x as u8;\n//         let y = y as u8;\n\n//         if map.is_wall(x, y) {\n//             return false;\n//         }\n\n//         t += 0.1;\n//     }\n\n//     true\n// }\n\npub fn their_x_to_mine(x: u8) -> (bool, u8) {\n    if x == NOWHERE {\n        (true, NOWHERE)\n    } else {\n        (x < WIDTH, std::wrapping_sub(WIDTH - 1, x) & WIDTH_MASK)\n    }\n}\n\npub fn can_move_to(distance: u16, x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> bool {\n    let mut can = distance <= (VIEW_DISTANCE as u16 * VIEW_DISTANCE as u16); //x <= advance;\n\n    for i in 0..MAX_OBSTACLES {\n        if !is_obstacle_traversible(obstacles[i]) & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    for i in 0..MAX_ENEMY_OBSTACLES {\n        if !is_obstacle_traversible(their_obstacles[i]) & (get_obstacle_x(their_obstacles[i]) == x) & (get_obstacle_y(their_obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    can\n}\n// pub fn their_x_to_mine(side: u1, x: i8) -> i8 {\n//     let mul = side as i8;\n//     mul * 31 + 16 + x\n// }\n\n// x * s -16 + y = 0 if s == 0 => y = 16\n// x * s -16 + y = 31 if s == 1 => x = 31\n// y = 31 * s + 16 + x\n// s = 0:\n// x = -16 => y = 0\n// x = 15 => y = 31\n// s = 1:\n// x = -16 => y = 31\n// x = 15 => y = 0\n\n// pub fn serialize_x(x: i8) -> (bool, u8) {\n//     let valid = (x >= -(WIDTH / 2) as i8) & (x < (WIDTH / 2) as i8);\n//     (valid, (x + (WIDTH / 2) as i8) as u8)\n// }\n\n// pub fn deserialize_x(x: u8) -> (bool, i8) {\n//     let valid = x < WIDTH;\n//     (valid, x as i8 - (WIDTH / 2) as i8)\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/map.nr"},"77":{"source":"// use crate::MAX_OBSTACLES;\n// use crate::{ HEIGHT, WIDTH };\n// use crate::{ EMPTY, WALL, WATER };\n// use crate::{ MAX_EVENTS }; // MAX_CHARACTERS\n// // use crate::{ RECEIVE_ATTACK };\n// // use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\n// use crate::{ SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\n// use crate::event::Event;\n// use crate::map::{ is_visible }; //is_neighbor\n// use dep::std;\n\n// pub struct Obstacle {\n//     pub id: u8,\n//     pub x: u8,             // 5 bit\n//     pub y: u8,             // 4 bit\n//     pub health: u8,        // 8 bit\n//     pub obstacle_type: u8, // 4 bit\n// }\n\n// pub impl Obstacle {\n//     pub fn serialize(self) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         assert(self.y < 0x10, f\"Obstacle y is too large\");\n//         assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n\n//         let packed_y = self.obstacle_type * 0x10 + self.y;\n//         [ self.x, packed_y, self.health]\n//     }\n\n//     pub fn is_obstacle_traversible(self) -> bool {\n//         (self.obstacle_type >= NON_EMPTY_WALKABLE_TILE_MIN) | (self.obstacle_type == EMPTY)\n//     }\n\n//     pub fn parse_their_obstacles(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let health = field[2];\n//         let o = Obstacle {\n//             id: id,\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn parse_obstacle(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let mut health = field[2];\n//         if (obstacle_type == WALL) | (obstacle_type == WATER) {\n//             let mut damage = 0;\n//             for i in 0..MAX_EVENTS {\n//                 damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n//             }\n//             if damage > (health as u16) {\n//                 health = 0;\n//             } else {\n//                 health -= (damage as u8);\n//             }\n//         }\n//         let o = Obstacle {\n//             id: id, // + (MAX_CHARACTERS as u8),\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//             //was_alive: was_alive,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn is_valid(self) -> bool {\n//         (self.x < WIDTH) & (self.y < HEIGHT)\n//     }\n\n//     pub fn parse_their_obstacles(serialized_obstacles: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_their_obstacles(id, serialized_obstacle));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn parse_my_obstacles(serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE], events: [Event; MAX_EVENTS]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_obstacle(id, serialized_obstacle, events));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn serialize_obstacles(side: u1, enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n//         let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n//         for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//             let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n//                 if is_visible(side, enemy_advance, obstacle.x) {\n//                     let serialized_obstacle = obstacle.serialize();\n//                     for k in 0..3 {\n//                         serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n//                     }\n//                 }\n//             }\n//             serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n//         }\n//         serialized_obstacles\n//     }\n\n//     pub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n//         // assert(side < 2, f\"Side is too large {side}\");\n//         let x = |x| x * (((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n//         [\n//             new_obstacle( 0, x(0), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 1, x(1), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 2, x(3), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 3, x(4), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 4, x(5), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle( 5, x(5), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle( 6, x(5), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle( 7, x(5), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 8, x(4), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 9, x(3), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(10, x(1), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(11, x(0), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(12, x(7), y: 0, obstacle_type: 200, WALL),\n//             new_obstacle(13, x(7), y: 1, obstacle_type: 200, WALL),\n//             new_obstacle(14, x(7), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle(15, x(7), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle(16, x(7), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle(17, x(7), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle(18, x(6), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(19, x(7), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(20, x(5), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(21, x(6), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(22, x(7), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(23, x(8), y: 9, obstacle_type: 255, WATER),\n//         ]\n//     }\n// }\n\n\nuse arenalib::MAX_OBSTACLES;\nuse arenalib::{ HEIGHT, WIDTH };\nuse arenalib::{ EMPTY, WALL, WATER };\nuse arenalib::{ MAX_EVENTS, MAX_HEALTH, MAX_OBSTACLE_TYPE, MAX_ENEMY_OBSTACLES }; // MAX_CHARACTERS\n// use crate::{ RECEIVE_ATTACK };\n// use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\nuse arenalib::{ SerializedArenaEnemyObstacles, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\nuse arenalib::NON_EMPTY_WALKABLE_TILE_MIN;\nuse arenalib::SerializedArenaObstacles;\nuse crate::event::Event;\nuse crate::map::{ is_visible, their_x_to_mine }; //is_neighbor\nuse dep::std;\nuse skplg::{softassert, NOWHERE};\nuse arenalib::SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE;\nuse arenalib::MAX_CHARACTERS;\n\n// pub type Obstacle = [u8; 5];\npub struct Obstacle {\n    pub id: u8,\n    pub x: u8,             // 5 bit\n    pub y: u8,             // 4 bit\n    pub health: u8,        // 8 bit\n    pub obstacle_type: u8, // 4 bit\n}\npub fn get_obstacle_id(obstacle: Obstacle) -> u8 {\n    obstacle.id //obstacle[0]\n}\npub fn get_obstacle_x(obstacle: Obstacle) -> u8 {\n    obstacle.x //[1]\n}\npub fn get_obstacle_y(obstacle: Obstacle) -> u8 {\n    obstacle.y //[2]\n}\npub fn get_obstacle_health(obstacle: Obstacle) -> u8 {\n    obstacle.health //[3]\n}\npub fn get_obstacle_type(obstacle: Obstacle) -> u8 {\n    obstacle.obstacle_type //[4]\n}\n\n#[export]\npub fn new_obstacle(id: u8, x: u8, y: u8, health: u8, obstacle_type: u8) -> pub (bool, Obstacle) {\n  let valid = ((x < WIDTH) | (x == NOWHERE)) & ((y < HEIGHT) | (y == NOWHERE)) & (health <= MAX_HEALTH) & (obstacle_type <= MAX_OBSTACLE_TYPE) & (id as u32 < (MAX_OBSTACLES + MAX_CHARACTERS));\n    // let mut valid = true;\n    // softassert!(quote { valid }, quote { (x < WIDTH) | (x == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid x: {x} >= {WIDTH}\" });\n    // softassert!(quote { valid }, quote { (y < HEIGHT) | (y == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid y: {y} >= {HEIGHT}\" });\n    // softassert!(quote { valid }, quote { health <= MAX_HEALTH }, quote { f\"Cannot create Obstacle: Invalid health: {health} > {MAX_HEALTH}\" });\n    // softassert!(quote { valid }, quote { obstacle_type <= MAX_OBSTACLE_TYPE }, quote { f\"Cannot create Obstacle: Invalid obstacle type: {obstacle_type} > {MAX_OBSTACLE_TYPE}\" }); //TODO: not sure if this or is_valid???\n    // (valid, [ id, x, y, health, obstacle_type ])\n    (valid, Obstacle { id: id, x: x, y: y, health: health, obstacle_type: obstacle_type })\n}\n\n#[test]\nfn test_new_obstacle() {\n  let (val, o) = new_obstacle(0, 0, 2, 0xc8, 0x06);\n  assert(val);\n  assert(o.id == 0);\n}\n\n// #[export]\n// pub struct FrontendObstacle {\n//   pub id: u8,\n//   pub x: u8,\n//   pub y: u8,\n\n// }\n\npub fn serialize_obstacle(obstacle: Obstacle) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n    // we could assert here, since obstacles can only be create with new_obstacle?!\n    // assert(self.y < 0x10, f\"Obstacle y is too large\");\n    // assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n    comptime {\n        let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let packed_y = get_obstacle_type(obstacle) * 0x10 + get_obstacle_y(obstacle);\n                [ get_obstacle_x(obstacle), packed_y, get_obstacle_health(obstacle)]\n            }\n        } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n                [ get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_health(obstacle), get_obstacle_type(obstacle)]\n            }\n        } else {\n            quote {\n                assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n            }\n        };\n        q\n    }\n}\n\npub fn is_obstacle_traversible(obstacle: Obstacle) -> bool {\n    (get_obstacle_type(obstacle) >= NON_EMPTY_WALKABLE_TILE_MIN) | (get_obstacle_type(obstacle) == EMPTY)\n}\n\npub fn parse_their_obstacle(id: u8, fld: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> (bool, Obstacle) {\n    comptime {\n        assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n    }\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let mut valid = true;\n    let x_raw = fld[0];\n    let (x_parsed_valid, x_parsed) = their_x_to_mine(x_raw);\n    softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to convert their x to mine of their obstacle {id}: {x_raw}\" });\n    let y = fld[1] & 0x0F;\n    let obstacle_type = (fld[1]) / 0x10;\n    let health = fld[2];\n    let (obstacle_valid, obstacle) = new_obstacle(id, x_parsed, y, health, obstacle_type);\n    softassert!(quote { valid }, quote { obstacle_valid }, quote { f\"Failed to create new obstacle {id}, {x_parsed}, {y}, {health}, {obstacle_type}\" });\n    (valid, obstacle)\n    // let o = Obstacle {\n    //     id: id,\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn parse_obstacle(id: u8, f: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> (bool, Obstacle) {\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let x = f[0];\n    // let mut y = f[1];\n    // let mut obstacle_type = f[1];\n    // comptime {\n    //     let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n    //         quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let y = f[1] & 0x0F;\n                let obstacle_type = (f[1]) / 0x10;\n    //         }\n    //     } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n    //         quote {\n    //             assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n    //             y = f[1];\n    //             obstacle_type = f[3];\n    //         }\n    //     } else {\n    //         quote {\n    //             assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n    //         }\n    //     };\n    //     q\n    // }\n    // let y = f[1]; // & 0x0F;\n    // let obstacle_type = f[3]; //f[1] / 0x10;// (f[1] & 0xF0) / 0x10;\n    let mut health = f[2];\n    //if (obstacle_type == WALL) | (obstacle_type == WATER) {\n        let mut damage = 0;\n        for i in 0..MAX_EVENTS {\n            damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n        }\n        if damage > (health as u16) {\n            health = 0;\n        } else {\n            health -= (damage as u8);\n        }\n    //}\n    new_obstacle(id, x, y, health, obstacle_type)\n    // let o = Obstacle {\n    //     id: id, // + (MAX_CHARACTERS as u8),\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    //     //was_alive: was_alive,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn is_obstacle_valid(obstacle: Obstacle) -> bool {\n    (get_obstacle_x(obstacle) < WIDTH) & (get_obstacle_y(obstacle) < HEIGHT)\n}\n\npub fn parse_their_obstacles(serialized_obstacles: SerializedArenaEnemyObstacles) -> (bool, [Obstacle; MAX_ENEMY_OBSTACLES]) {\n  let (dummy_obstacle_valid, dummy_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n  assert(dummy_obstacle_valid);\n    let mut obstacles: [Obstacle; MAX_ENEMY_OBSTACLES] = [dummy_obstacle; MAX_ENEMY_OBSTACLES];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n            obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j] = obstacle; //s.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    let serialized_obstacle_field = serialized_obstacles[SERIALIZED_OBSTACLES_ARRAY_SIZE].to_be_bytes::<32>();\n    assert(serialized_obstacle_field.len() == 32);\n    for j in 0..MAX_CHARACTERS {\n      let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n      // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n      let id = (MAX_OBSTACLES + j) as u8;\n      let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n      obstacles[MAX_OBSTACLES + j] = obstacle; //s.push_back(obstacle);\n      valid_result = valid_result & valid;\n    }\n    (valid_result, obstacles)\n}\n\npub fn parse_my_obstacles(serialized_obstacles: SerializedArenaObstacles, events: [Event; MAX_EVENTS]) -> (bool, [Obstacle; MAX_OBSTACLES]) {\n    let mut obstacles: [Obstacle] = &[];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    for i in 0..serialized_obstacles.len() {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            //let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_obstacle(id, serialized_obstacle, events);\n            obstacles = obstacles.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    (valid_result, obstacles.as_array())\n}\n\n#[export]\npub fn serialize_my_obstacles_for_me(obstacles: [Obstacle; MAX_OBSTACLES]) -> pub [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            let serialized_obstacle = serialize_obstacle(obstacle);\n            for k in 0..3 {\n                serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\n\npub fn serialize_my_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let serialized_obstacle = serialize_obstacle(obstacle);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\npub fn serialize_their_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) {\n    let mut valid_result = true;\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let parsed_x = their_x_to_mine(get_obstacle_x(obstacle));\n                valid_result = valid_result & parsed_x.0;\n                let mirrored_obstacle = new_obstacle(\n                    get_obstacle_id(obstacle),\n                    parsed_x.1,\n                    get_obstacle_y(obstacle),\n                    get_obstacle_health(obstacle),\n                    get_obstacle_type(obstacle)\n                );\n                valid_result = valid_result & mirrored_obstacle.0;\n                let serialized_obstacle = serialize_obstacle(mirrored_obstacle.1);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    (valid_result, serialized_obstacles)\n}\n\nfn get_x_of_side(side: u1, x: u8) -> u8 {\n    x * ((side as u8 + 1) as u1) as u8 + side as u8 * (WIDTH - 1 - x)\n}\n\n#[test]\nfn test_x() {\n    let x8s0 = get_x_of_side(0, 8);\n    assert(x8s0 == 8, f\"{x8s0} != 8\");\n    let x8s1 = get_x_of_side(1, 8);\n    assert(x8s1 == 23, f\"{x8s1} != 23\");\n}\n\npub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n    // assert(side < 2, f\"Side is too large {side}\");\n    let x = |x| get_x_of_side(side, x); //(((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n    [\n        new_obstacle( 0, x(0), 2, 200, WALL).1,\n        new_obstacle( 1, x(1), 2, 200, WALL).1,\n        new_obstacle( 2, x(3), 2, 200, WALL).1,\n        new_obstacle( 3, x(4), 2, 200, WALL).1,\n        new_obstacle( 4, x(5), 3, 200, WALL).1,\n        new_obstacle( 5, x(5), 4, 200, WALL).1,\n        new_obstacle( 6, x(5), 5, 200, WALL).1,\n        new_obstacle( 7, x(5), 7, 200, WALL).1,\n        new_obstacle( 8, x(4), 7, 200, WALL).1,\n        new_obstacle( 9, x(3), 7, 200, WALL).1,\n        new_obstacle(10, x(1), 7, 200, WALL).1,\n        new_obstacle(11, x(0), 7, 200, WALL).1,\n        new_obstacle(12, x(7), 0, 200, WALL).1,\n        new_obstacle(13, x(7), 1, 200, WALL).1,\n        new_obstacle(14, x(7), 2, 200, WALL).1,\n        new_obstacle(15, x(7), 3, 200, WALL).1,\n        new_obstacle(16, x(7), 4, 200, WALL).1,\n        new_obstacle(17, x(7), 5, 200, WALL).1,\n        new_obstacle(18, x(6), 8, 255, WATER).1,\n        new_obstacle(19, x(7), 8, 255, WATER).1,\n        new_obstacle(20, x(5), 9, 255, WATER).1,\n        new_obstacle(21, x(6), 9, 255, WATER).1,\n        new_obstacle(22, x(7), 9, 255, WATER).1,\n        new_obstacle(23, x(8), 9, 255, WATER).1,\n        // new_obstacle(24, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(25, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(26, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(27, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(28, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(29, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(30, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(31, x(0), 0, 255, EMPTY).1,\n    ]\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/obstacle.nr"},"78":{"source":"use skplg::{softassert, UNREADABLE_BYTES_PER_FIELD, NOWHERE};\nuse skpla::{ACTION_BYTE_SIZE, Action, new_action, get_action_actor, get_action_type, get_action_target_x, get_action_target_y};\nuse crate::SerializedArenaActions;\nuse crate::{MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER};\nuse crate::{WIDTH, HEIGHT};\nuse crate::WAIT;\n\npub global SERIALIZED_ACTION_BYTE_SIZE: u32 = ACTION_BYTE_SIZE;\npub global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4;\npub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n\n// comptime fn get_serialized_actions_array_size() -> u32 {\n//   let needed_usable_bytes = MAX_ACTIONS * ACTION_BYTE_SIZE;\n//   let usable_bytes_per_field = 32 - UNREADABLE_BYTES_PER_FIELD;\n//   let field_count = needed_usable_bytes / usable_bytes_per_field;\n//   if field_count * usable_bytes_per_field == needed_usable_bytes {\n//     field_count\n//   } else {\n//     field_count + 1\n//   }\n// }\n\n\n  pub fn parse_actions(max_actor_id: u8, fields: SerializedArenaActions) -> (bool, [Action; MAX_ACTIONS]) {\n    let mut valid = true;\n    softassert!(quote { valid }, quote { fields.len() == SERIALIZED_ACTIONS_ARRAY_SIZE }, quote { f\"{fields} does not have size {SERIALIZED_ACTIONS_ARRAY_SIZE}\" });\n    comptime {\n      assert(SERIALIZED_ACTION_BYTE_SIZE == 4);\n    }\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n\n      let mut actions: [Action] = &[];\n      assert(fields.len() == 1);\n      // for i in 0..1 {\n      let i = 0;\n          let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n          assert(split.len() == 32);\n          let mut serialized_actions_per_field = SERIALIZED_ACTIONS_PER_FIELD;\n          if serialized_actions_per_field * (i + 1) > MAX_ACTIONS {\n            serialized_actions_per_field = MAX_ACTIONS - serialized_actions_per_field * i;\n          }\n          assert(serialized_actions_per_field == SERIALIZED_ACTIONS_PER_FIELD);\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              let action_type = split[offset];\n              let actor = split[offset + 1];\n              let target_x = split[offset + 2];\n              let target_y = split[offset + 3];\n\n              softassert!(quote { valid }, quote { action_type as u32 <= MAX_ACTIONS_PER_CHARACTER }, quote { f\"Invalid action: action type {action_type} > {MAX_ACTIONS_PER_CHARACTER}\" });\n              softassert!(quote { valid }, quote { actor <= max_actor_id }, quote { f\"Invalid action: action actor {actor} > {max_actor_id}\" });\n              softassert!(quote { valid }, quote { (target_x < WIDTH) | (target_x == NOWHERE) }, quote { f\"Invalid action: action type {target_x} >= {WIDTH} and not {NOWHERE}\" });\n              softassert!(quote { valid }, quote { (target_y < HEIGHT) | (target_y == NOWHERE) }, quote { f\"Invalid action: action type {target_y} >= {HEIGHT} and not {NOWHERE}\" });\n\n              actions = actions.push_back(new_action(\n                  action_type,\n                  actor,\n                  target_x,\n                  target_y\n              ));\n              /*Action {\n                  action: split[offset],\n                  actor: split[offset + 1],\n                  target_x: split[offset + 2],\n                  target_y: split[offset + 3],\n              }*/\n          }\n      // }\n      // println(actions);\n      (valid, actions.as_array())\n  }\n\n  /**\n  * Warning: This function can throw!!!\n  */\n  pub fn serialize_actions(actor_id: u8, actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n      assert(actions.len() <= MAX_ACTIONS);\n\n      let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, actor_id, NOWHERE, NOWHERE); MAX_ACTIONS];\n      for i in 0..actions.len() {\n          actions_stuffed[i] = actions[i];\n      }\n\n      let mut fields: [Field] = &[];\n      for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n          let mut data: [u8; 32] = [0; 32];\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n              let action = actions_stuffed[index];\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              data[offset] = get_action_type(action);\n              data[offset + 1] = get_action_actor(action);\n              data[offset + 2] = get_action_target_x(action);\n              data[offset + 3] = get_action_target_y(action);\n          }\n          fields = fields.push_back(std::field::bytes32_to_field(data));\n      }\n      fields.as_array()\n  }\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/arenalib/src/actionSerDe.nr"},"90":{"source":"use dep::std::{append::Append};\nuse skplg::UNREADABLE_BYTES_PER_FIELD;\n\npub trait ActionDefinitionPartBuilder<T> { fn new() -> T; }\npub type DEF_ROW<T> = (Quoted, u8, T);\npub comptime fn get_def_register_value(register: Quoted, bytes: u32, bits: u8, bitsize: u8) -> Quoted {\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    if bitsize == 8 {\n      quote { $register[$bytes] }\n      // quote { ($register / $multiplier) as u8 }\n    } else {\n      let divisor = 1 << bits;\n      let mask = std::wrapping_sub(1 << bitsize, 1);\n      if bitsize == 1 {\n        // quote { (($register / $multiplier) as u1) == 1 }\n        quote { (($register[$bytes] as u8 & $divisor as u8) != 0 as u8) }\n      } else {\n        quote { (($register[$bytes] as u8 / $divisor as u8) & $mask as u8) }\n        // quote { (($register / $multiplier) as u8) & $mask as u8 }\n      }\n    }\n}\npub comptime fn build_over_def_array<Env, T>(array: [DEF_ROW<T>], base_index: u32, builder: fn[Env] (u32, u8, Quoted, u8, T) -> Quoted) -> Quoted {\n  let mut result = quote {};\n  \n  let mut bits: u8 = 0;\n  let mut bytes: u32 = base_index;\n\n  for i in 0..array.len() {\n    let (varname, bitsize, args) = array[i];\n    assert(bitsize <= 8, f\"Invalid bit size: {bitsize}\");\n    if (bits + bitsize) > 8 {\n      bytes += 1;\n      bits = 0;\n    }\n    assert(bits < 8, f\"bits must not reach 8 or higher: {bits}\");\n\n    let new_result = builder(bytes, bits, varname, bitsize, args);\n    result = quote { $result $new_result };\n\n    bits += bitsize;\n  }\n  result\n}\npub comptime fn derive_action_def_def_builder<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let mut params: [(Quoted, Type)] = &[];\n  let mut last_byte: u32 = 0;\n  let mut result: Quoted = build_over_def_array(array, 0, |bytes, bits, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { u8 }.as_type() } else { quote { u8 }.as_type() };\n    params = params.push_back((varname, t));\n    let mut r = quote {};\n    if bytes != last_byte {\n      r = r.append(quote { , });\n    } else if (bytes + bits as u32) != 0 {\n      r = r.append(quote { + });\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = r.append(quote { $varname  });\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = r.append(quote { $varname as u8 * $multiplier });\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = r.append(quote { (( $varname & $mask ) * $multiplier) });\n      }\n    }\n    last_byte = bytes;\n    r\n  });\n  f.set_parameters(params);\n\n  let return_type = f.return_type();\n\n  f.set_body(quote { $return_type { register: [ $result ] } }.as_expr().unwrap());\n  // println(f.body());\n}\npub comptime fn get_action_def_def_register_size<T>(array: [DEF_ROW<T>]) -> u32 {\n  let mut size = 0;\n  let _ = build_over_def_array(array, 0, |bytes, _, _, _, _|{\n    size = bytes;\n    quote {}\n  });\n  size + 1\n}\npub comptime fn get_action_def_def_register_element_type() -> Type {\n  quote { u8 }.as_type()\n}\npub comptime fn get_action_def_def_register_type<T>(array: [DEF_ROW<T>]) -> Type {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  quote { [$et; $size] }.as_type()\n}\npub comptime fn derive_action_def_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  // let size = get_action_def_requirements_register_size();\n  let fields = s.fields([]);\n  assert(fields.len() == 1);\n  s.set_fields([(fields[0].0, get_action_def_def_register_type(array))]);\n}\npub comptime fn derive_action_def_def_struct_new<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  let t = get_action_def_def_register_type(array);\n  f.set_return_type(t);\n  f.set_body(quote { ActionRequirement { [0 as $et; $size] } }.as_expr().unwrap());\n}\npub comptime fn derive_frontend_action_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  let mut fields: [(Quoted, Type)] = &[];\n  let _ = build_over_def_array(array, UNREADABLE_BYTES_PER_FIELD, |_, _, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    fields = fields.push_back((varname, t));\n    quote {}\n  });\n  s.set_fields(fields);\n}\npub comptime fn derive_frontend_action_def_struct_builder<T>(param_name: Quoted, base_index: u32, array: [DEF_ROW<T>]) -> Quoted {\n  // let mut params: [(Quoted, Type)] = &[];\n  let mut first = true;\n  let mut result: Quoted = build_over_def_array(array, base_index, |bytes, bits, varname, bitsize, _|{\n    // let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    // params = params.push_back((varname, t));\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    let mut r = quote {};\n    if !first {\n      r = quote { , };\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = quote { $r $varname: $param_name[$bytes] };\n      // r = quote { $r $varname: ($param_name / $multiplier) as u8 };\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = quote { $r $varname: ($param_name[$bytes] & $multiplier) != 0 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u1) == 1 };\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = quote { $r $varname: (( $param_name[$bytes] / $multiplier) & $mask ) as u8 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u8) & $mask as u8 };\n      }\n    }\n    first = false;\n    r\n  });\n  // f.set_parameters(params);\n\n  // let return_type = f.return_type();\n  // // f.set_return_type(return_type.as_type());\n  // f.set_return_data();\n  // f.set_return_public(true);\n  // // println(result);\n  // f.\nresult\n  // quote {  $result } };\n}\n\n// pub global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2; // u2\n\n// global YES: u8 = 1;\n// global NO: u8 = 0;\n// global MIN_STATUS: u8 = 0;\n// global MAX_STATUS: u8 = 15;\n\n// // pub type ActionDefinitionRegister = \n// pub fn build_action_def_requirements_none() -> ActionRequirement {\n//   build_action_def_requirements(\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     MIN_STATUS,\n//     MAX_STATUS,\n//     0 as u8,\n//     255 as u8)\n// }\n// pub fn build_action_def_pre_calc_effects_idle() -> ActionPreCalcEffect {\n//   build_action_def_pre_calc_effect(\n//     WAIT,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1)\n// }\n// // comptime fn no_requirements() -> CtString {\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1, \n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         0 as u8,\n// //         NO as u1)\n// // }\n// pub fn build_action_def_result_event_none() -> ActionResultEvent {\n//   build_action_def_result_event(\n//     0,\n//     0,\n//     ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//     NO_EVENT,\n//     NO_EVENT,\n//     0 as u8\n//   )\n// }\n// // comptime fn no_event() -> CtString {\n// //     build_action_event_def(NO_EVENT, NO_EVENT, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 0 as u8)\n// // }\n// pub fn build_wait_action_def() -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements_none(),\n//     build_action_def_pre_calc_effects_idle(),\n//     build_action_def_result_effects(\n//       0 as u8,\n//       0 as u8,\n//       1 as u8,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_wait_action_def() -> CtString {\n// //     build_action_def(\n// //         no_requirements(),\n// //         no_event(),\n// //         no_event(),\n// //         1 as u8,\n// //         0 as u8,\n// //         ACTION_RESULT_COORDINATES_IDX_SELF,\n// //         NO as u1,\n// //         WAIT\n// //     )\n// // }\n// // pub global WAIT_ACTION: ActionDefinition = comptime { let x = build_wait_action_def(); f\"[{x}]\".quoted_contents() };\n// pub fn build_sneak_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0 as u8,\n//       1 as u8),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0 as u8,\n//       0 as u8,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       YES as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_sneak_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     no_event(), // TODO: not sure if on-seen we should not send a move event instead - that way one could sneak and stay hidden, but not sneak while visible\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_move_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       1),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_MOVE,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_move_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_MOVE, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_cast_action(this_action_id: u8, energy: u8, class: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_CAST,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_cast_action(this_action_id: u8, energy: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_CAST, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_ritual_action(cast_action_id: u8, energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       RITUAL_ROUNDS_FOR_WIN,\n//       MAX_STATUS,\n//       0,\n//       255),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_ritual_action(this_action_id: u8, energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         RITUAL_ROUNDS_FOR_WIN,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 255 as u8),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 255 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1), // TODO: Maybe set this to handle friendly fire???\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     cast_action_id)\n// // }\n// pub fn build_search_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_search_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS, // should be max of shoot\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_DRAW,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_DRAW, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       draw_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     draw_action_id)\n// // }\n// pub fn build_disarm_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_disarm_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_set_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         ADD_OBSTACLE,\n//         TRAP,\n//         0),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_set_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         YES as u1),\n// //     no_event(),\n// //     build_action_event_def(ADD_OBSTACLE, TRAP, 0 as u8, 50 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n\n// // pub fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // fn get_action_needs_target_free_space(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// // }\n// // fn get_action_needs_target_is_not_self(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// // }\n// // fn get_action_needs_status_visible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// // }\n// // fn get_action_needs_status_invisible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// // }\n// // fn get_action_needs_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_sets_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_removes_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_max_range(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_MAX_RANGE]\n// // }\n// // fn get_action_needs_min_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MIN_STATUS]\n// // }\n// // fn get_action_needs_max_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MAX_STATUS]\n// // }\n// // fn get_action_needed_energy(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDED_ENERGY]\n// // }\n// // fn get_action_unseen_event_is_internal(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_EVENT_IS_TRAP] == 1\n// // }\n// // fn get_action_result_event_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_event_not_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_not_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_not_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_not_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_not_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_not_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_status_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// // }\n// // fn get_action_move_to_target(action: ActionDefinition) -> u1 {\n// //     action.register[action.base_index + ACTION_MOVE_TO_TARGET] as u1\n// // }\n// // fn get_action_is_continuous(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_IS_CONTINUOUS] == 1\n// // }\n// // fn get_action_needs_previous_action(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_PREVIOUS_ACTION] as u8\n// // }\n\n// // pub global ACTION_DEFINITION_SIZE: u32 = (ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 5) as u32; // 2 bytes for move_to_target and status_multiplier\n// // pub global ACTION_DEFINITION_REGISTER_SIZE: u32 = ACTION_DEFINITION_SIZE * (1 + (MAX_ACTIONS_PER_CHARACTER - 1) * (CLASS_COUNT - 1));\n\n// // fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // pub struct ActionDefinitionRegister {\n// //   register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinitionRegister {\n// //   pub fn new(register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinitionRegister {\n// //     ActionDefinitionRegister {\n// //       register: register\n// //     }\n// //   }\n\n// //   pub fn resolve_action(self, action: Action) -> ActionDefinition {\n// //     ActionDefinition {\n// //       base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //       action: action,\n// //       register: self.register\n// //     }\n// //   }\n// // }\n\n// // pub struct ActionDefinition {\n// //     base_index: u16,\n// //     action: Action,\n// //     register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinition {\n// //     pub fn new(action: Action, register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinition {\n// //         ActionDefinition {\n// //             base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //             action: action,\n// //             register: register\n// //         }\n// //     }\n// // }\n\n// // impl ResolvedAction for ActionDefinition {\n// //     fn get_action_needs_target_free_space(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: ActionDefinition) -> u1 {\n// //         self.register[self.base_index + ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n\n// // pub struct TestActionDefinition {\n// //     pub register: [u8; ACTION_DEFINITION_SIZE],\n// //     pub action: Action,\n// // }\n\n// // impl ResolvedAction for TestActionDefinition {\n// //     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n// //         self.register[ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n// // #[test]\n// // fn test_execute_action() {\n// //     let action = build_test_action_def!(build_move_action(4), quote { 1, 2, 3, 4 }); //new_action(1, 2, 3, 4);\n// //     let my_advance = 10;\n// //     let their_advance = 1;\n// //     let actor = Character {\n// //         id: 2,\n// //         x: 2,\n// //         y: 4,\n// //         target_x: 0,\n// //         target_y: 0,\n// //         health: 255,\n// //         damage_mod: 1,\n// //         last_action: WAIT,\n// //         class: MAGE,\n// //         is_hidden: 0 as u1,\n// //         has_been_seen: true,\n// //         status: 0,\n// //         actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]\n// //     };\n// //     let energy = 15;\n// //     let my_obstacles = get_default_obstacles(0);\n// //     let their_obstacles = get_default_obstacles(1);\n// //     let (valid, event, internal_event, c, result_energy) = execute_action(\n// //         action,\n// //         my_advance,\n// //         their_advance,\n// //         actor,\n// //         energy,\n// //         my_obstacles,\n// //         their_obstacles\n// //     );\n// //     assert(valid, \"valid\");\n// //     assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n// //     assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n// //     assert(event.x == action.get_action_target_x(), f\"{event}.target_x is not action target x\");\n// //     assert(event.y == action.get_action_target_y(), f\"{event}.target_y is not action target y\");\n// //     assert(c.x == event.x, f\"{c}.x is not action target x\");\n// //     assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n// //     assert(result_energy == 11, f\"{result_energy} != 11\");\n// // }\n\n// // #[export]\n// // pub fn build_action_register(actions: [])\n\npub type CharacterActionDefinition = [u8; 32];\npub type CharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [CharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedCharacterActionDefinition = Field;\npub type SerializedCharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedRosterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32, let MAX_CHARACTERS: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS];","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionDefinition.nr"},"91":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionRequirements::{get_action_def_requirements_base_index, get_action_def_requirements_byte_size};\nuse std::append::Append;\n\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_PRE_CALC_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { pre_calc_effect_continues_action }, 3, |continued_action|quote { let continues_action: bool = $continued_action as u8 == actor_last_action; }),\n    action_def_def(quote { pre_calc_effect_is_continuous }, 1, |is_continuous|quote { let is_continuous: bool = $is_continuous as bool; }),\n    action_def_def(quote { pre_calc_effect_interrupts }, 1, |is_interrupting|quote { let is_interrupting: bool = $is_interrupting as bool; }),\n    action_def_def(quote { pre_calc_effect_allow_retargeting }, 1, |allows_retargetting|quote { let not_interrupted_through_retargeting: bool = $allows_retargetting as bool | ((action_target_x == actor_target_x) & (action_target_y == actor_target_y)); })\n];\npub comptime fn get_action_def_pre_calc_base_index() -> u32 {\n  get_action_def_requirements_byte_size()+get_action_def_requirements_base_index()\n}\n\npub comptime fn get_action_def_pre_calc_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_PRE_CALC_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_pre_calc_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n// }\n#[derive_action_def_def_pre_calc_event_struct]\npub struct ActionPreCalcEffect {\n  pub register: [u8; 32]\n}\nimpl ActionPreCalcEffect {\n  #[derive_action_def_pre_calc_effect_struct_new]\n  pub fn new() -> ActionPreCalcEffect {\n    ActionPreCalcEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_pre_calc_effect_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_pre_calc_effect_builder]\npub fn build_action_def_pre_calc_effect() -> pub ActionPreCalcEffect { ActionPreCalcEffect::new() }\n\npub comptime fn apply_action_pre_calc_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_pre_calc_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_PRE_CALC_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  quote {\n    $result\n    is_not_interrupted = (\n      ((!is_continuous) as u8 * (!is_interrupting) as u8) + // that's the ID of the wait action => leave status, but not continuous\n      ((is_continuous) as u8 * continues_action as u8 * not_interrupted_through_retargeting as u8)\n    ) > 0;\n\n    actor_progress *= is_not_interrupted as u8;\n  }\n}\n\npub comptime fn set_action_def_pre_calc_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_pre_calc_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_pre_calc_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_pre_calc_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[derive_frontend_action_def_pre_calc_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefPreCalcEffects {}\n\n\npub comptime fn derive_frontend_action_def_pre_calc_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_pre_calc_base_index(), ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n  quote { FrontendActionDefPreCalcEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionPreCalcEffect.nr"},"92":{"source":"use skplg::{UNREADABLE_BYTES_PER_FIELD, softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse std::append::Append;\nuse crate::{actionDefinition::derive_frontend_action_def_struct, actionDefinition::derive_frontend_action_def_struct_builder};\n\n    // fn get_action_req_target_free_space(self) -> bool;\n    // fn get_action_req_target_is_not_self(self) -> bool;\n    // fn get_action_req_status_visible(self) -> bool;\n    // fn get_action_req_status_invisible(self) -> bool;\n    // fn get_action_req_status_hidden(self) -> bool;\n    // fn get_action_req_max_range(self) -> u8;\n    // fn get_action_req_min_status(self) -> u8;\n    // fn get_action_req_max_status(self) -> u8;\n    // fn get_action_req_energy(self) -> u8;\n    // fn get_action_req_previous_action(self) -> u8;\npub type ActionDefDefRequirementCheck = (Quoted, Quoted);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, expr: Quoted, msg: Quoted) -> DEF_ROW<ActionDefDefRequirementCheck> {\n    (varname, bit_size, (expr, msg))\n}\n// comptime global ACTION_DEF_DEF_FIELD_COUNT: u32 = 11;\nglobal ACTION_DEF_DEF_REQUIREMENTS: [DEF_ROW<ActionDefDefRequirementCheck>] = [\n    action_def_def(quote { action_req_target_free_space }, 1, quote { can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles) }, quote { f\"Target space cannot be moved to {action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" }),\n    action_def_def(quote { action_req_target_is_not_self }, 1, quote { (actor_x != action_target_x) | (actor_y != action_target_y) }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" }),\n    action_def_def(quote { action_req_status_visible }, 1, quote { actor_is_in_view_range & !actor_is_hidden },  quote { f\"Character must be fully visible for action {action_type}: in_view_range: {actor_is_in_view_range} & !hidden {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_invisible }, 1, quote { !actor_is_in_view_range | actor_is_hidden }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {actor_is_in_view_range} || hidden: {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_hidden }, 1, quote { actor_is_hidden }, quote { f\"Character needs to be hidden to perform action {action_type}\" }),\n    // action_def_def(quote { action_req_previous_action }, 3, quote { true }, quote { f\"\" }),\n    action_def_def(quote { action_req_min_progress }, 4, quote { action_req_min_progress as u8 <= actor_progress as u8 }, quote { f\"Character needs min progress {action_req_min_progress} to perform action {action_type}, but only has {actor_progress}\" }),\n    action_def_def(quote { action_req_max_progress }, 4, quote { action_req_max_progress as u8 >= actor_progress as u8 }, quote { f\"Character cannot have a higher progress than {action_req_max_progress} to perform action {action_type}: got {actor_progress}\" }),\n    action_def_def(quote { action_req_status }, 4, quote { (action_req_status as u8 == 0 as u8) | (action_req_status as u8 == actor_progress as u8) }, quote { f\"Character can only perform action {action_type} while having status {action_req_status}. Invalid status {actor_status}\" }),\n    // action_def_def(quote { action_req_required_energy }, 4, quote { action_req_required_energy <= energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_req_required_energy}\" }),\n    action_def_def(quote { action_req_max_range }, 8, quote { distance as u16 <= (action_req_max_range as u16) * (action_req_max_range as u16) }, quote { f\"Character is out of range! Distance: {distance} > {action_req_max_range}: {{{actor_x},{actor_y}}} - {{{action_target_x},{action_target_y}}} with {action_req_max_range}\" }),\n];\npub comptime fn get_action_def_requirements_base_index() -> u32 {\n  UNREADABLE_BYTES_PER_FIELD as u32\n}\n\npub comptime fn get_action_def_requirements_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_REQUIREMENTS)\n}\n\ncomptime fn derive_action_def_def_req_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n// comptime fn derive_action_def_requirements_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_REQUIREMENTS);\n// }\n\n#[derive_action_def_def_req_struct]\npub struct ActionRequirement {\n  pub register: [u8; 32]\n}\nimpl ActionRequirement {\n  #[derive_action_def_requirements_struct_new()]\n  pub fn new() -> ActionRequirement {\n    ActionRequirement { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_req_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[export]\n#[derive_action_def_def_req_builder]\npub fn build_action_def_requirements() -> pub ActionRequirement { ActionRequirement::new() }\n\npub comptime fn validate_action_requirements(valid_varname: Quoted, register: Quoted) -> Quoted {\n  let mut result = build_over_def_array(ACTION_DEF_DEF_REQUIREMENTS, get_action_def_requirements_base_index(), |bytes, bits, varname, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    // let varname = f\"action_requirement_{i}_is_valid\".quoted_contents();\n    let (checkexpr, msg) = args;\n    let check = if bitsize == 1 { quote { !($varname as bool) | ($checkexpr) } } else { quote { $checkexpr } };\n    let sa = softassert(valid_varname, check, msg);\n    quote {\n      let $varname = $expr;\n      $sa\n    }\n  });\n  // println(result);\n  // quote { assert(1==1); }\n  result\n}\n\npub comptime fn set_action_def_requirements_in_action_def(requirements: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_requirements_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_requirements_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $requirements.register[$i]; });\n    // result = quote { $result $action_def += $requirements.register[$i] as Field * $multiplier; };\n    // multiplier *= 2.pow_32(8);\n  }\n  // println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_requirements_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[derive_frontend_action_def_requirements_struct]\n#[derive(Default)]\npub struct FrontendActionDefRequirements {}\n\n\npub comptime fn derive_frontend_action_def_requirements_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_requirements_base_index(), ACTION_DEF_DEF_REQUIREMENTS);\n  // println(content);\n  quote { FrontendActionDefRequirements { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionRequirements.nr"},"93":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse skplg::softassert;\nuse crate::actionPreCalcEffect::{get_action_def_pre_calc_base_index, get_action_def_pre_calc_effects_byte_size};\nuse std::append::Append;\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { action_result_required_energy }, 4, |action_required_energy|{\n      let check = softassert(quote { is_valid }, quote { action_required_energy <= result_energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_required_energy}\" });\n      quote {\n        let action_required_energy = $action_required_energy;\n        $check\n        result_energy = std::wrapping_sub(result_energy, action_required_energy);\n      }\n    }),\n    action_def_def(quote { action_result_progress_increment }, 4, |progress_increment|quote { let action_result_effect_progress_increment: u32 = $progress_increment as u32; }),\n    action_def_def(quote { action_result_progress_multiplier }, 2, |progress_multiplier|quote { let action_result_effect_progress_multiplier: u32 = $progress_multiplier as u32; }),\n    action_def_def(quote { action_result_move_to_target }, 1, |move_to_target|quote { result_coords = coords[$move_to_target as u8]; }),\n    action_def_def(quote { action_result_hide }, 1, |hide|quote { let action_result_effect_hide: bool = $hide as bool; }),\n    action_def_def(quote { action_result_reveal }, 1, |leave_shadows|quote { let action_result_effect_leave_shadows: bool = $leave_shadows as bool; })\n];\npub comptime fn get_action_def_result_effect_base_index() -> u32 {\n  get_action_def_pre_calc_base_index() + get_action_def_pre_calc_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_result_effect_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n// }\n#[derive_action_def_def_result_effect_struct]\npub struct ActionResultEffect {\n  pub register: [u8; 32]\n}\nimpl ActionResultEffect {\n  //#[derive_action_def_result_effects_struct_new]\n  pub fn new() -> ActionResultEffect {\n    ActionResultEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_effects_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_result_effects_builder]\npub fn build_action_def_result_effects() -> pub ActionResultEffect { ActionResultEffect::new() }\n\npub comptime fn apply_action_result_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_effect_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n// println(result);\n  quote {\n    $result\n\n    let result_progress_raw = actor_progress as u32 * action_result_effect_progress_multiplier + action_result_effect_progress_increment;\n    //softassert!(quote { is_valid }, quote { result_progress_raw <= MAX_PROGRESS as u32 }, quote { f\"Invalid result progress: {result_progress_raw} > {MAX_PROGRESS}\" });\n    result_progress = result_progress_raw as u8;\n\n    result_is_hidden = (result_is_hidden & !action_result_effect_leave_shadows) | action_result_effect_hide;\n    result_is_visible = !result_is_hidden & is_visible(enemy_advance, result_coords.0);\n  }\n}\n\npub comptime fn set_action_def_result_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_result_effect_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_result_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[derive_frontend_action_def_result_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEffects {}\n\n\npub comptime fn derive_frontend_action_def_result_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_result_effect_base_index(), ACTION_DEF_DEF_RESULT_EFFECTS);\n  quote { FrontendActionDefResultEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEffect.nr"},"94":{"source":"// pub global ACTION_RESULT_EVENT_TYPE: u8 = 0;\n// pub global ACTION_RESULT_EVENT_SUBTYPE: u8 = 1;\n// pub global ACTION_RESULT_EVENT_VALUE_MULTIPLIER: u8 = 2;\n// pub global ACTION_RESULT_EVENT_VALUE_FIXED_ADDITION: u8 = 3;\n// pub global ACTION_RESULT_EVENT_COORD_IDX: u8 = 4;\n// pub global ACTION_RESULT_EVENT_RADIUS: u8 = 5;\n// pub comptime fn to_action_result_event(event_type: Quoted, subtype: Quoted, val_mul: Quoted, val_add: Quoted, coord_idx: Quoted, radius: Quoted) -> Quoted {\n//     quote { ($event_type, $subtype, $val_mul, $val_add, $coord_idx, $radius)}\n// }\n// pub comptime fn get_type_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_subtype_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_value_multiplier_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_value_addition_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n// pub comptime fn get_coord_idx_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.4 }\n// }\n// pub comptime fn get_radius_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.5 }\n// }\n// pub type ActionResultEventDefinition = (u8, u8, u8, u8, u8, u8);\n\nuse skplg::{softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionResultEffect::{get_action_def_result_effect_base_index, get_action_def_result_effects_byte_size};\n\npub type ActionDefDefResultEventRow = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefResultEventRow> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EVENTS: [DEF_ROW<ActionDefDefResultEventRow>] = [\n    action_def_def(quote { result_event_value_fixed_addition }, 8, |fixed_addition|quote { result_event_value += $fixed_addition as u32; }),\n    action_def_def(quote { result_event_value_scaled_by_progress }, 4, |factor|quote { result_event_value += ($factor as u32) * (actor_progress as u32); }),\n    action_def_def(quote { result_event_coords_idx }, 2, |coords_idx|{\n     let check = softassert(quote { is_valid }, quote { $coords_idx < 3 }, quote { f\"Invalid event coord idx: {result_event_coords_idx} does not fit in u8!\" });\n      quote {\n        let result_event_coords_idx: u8 = $coords_idx;\n        $check\n        result_event_coords = coords[result_event_coords_idx & 3];\n      }\n    }),\n    action_def_def(quote { result_event_type }, 4, |event_type|quote { result_event_type = $event_type; }),\n    action_def_def(quote { result_event_subtype }, 8, |event_subtype|quote { result_event_subtype = $event_subtype; }),\n    action_def_def(quote { result_event_radius }, 6, |event_radius|quote { result_event_radius = $event_radius; })\n];\ncomptime fn get_action_def_result_event_base_index() -> u32 {\n  get_action_def_result_effect_base_index() + get_action_def_result_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_event_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EVENTS)\n}\n\n\ncomptime fn derive_action_def_def_result_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EVENTS);\n// }\n#[derive_action_def_def_result_event_struct]\npub struct ActionResultEvent {\n  pub register: [u8; 32]\n}\nimpl ActionResultEvent {\n  #[derive_action_def_result_event_struct_new]\n  pub fn new() -> ActionResultEvent {\n    ActionResultEvent { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_event_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[export]\n#[derive_action_def_def_result_event_builder]\npub fn build_action_def_result_event() -> pub ActionResultEvent { ActionResultEvent::new() }\n\npub comptime fn build_result_event(event_idx: u32, events_collection_varname: Quoted, valid_varname: Quoted, register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_event_base_index();\n  let event_data_start_idx = base_index + event_idx * get_action_def_result_event_byte_size();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EVENTS, event_data_start_idx, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  //let value_valid_msg = f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\";\n  // let value_valid = softassert(valid_varname, quote { result_event_value <= 255 as u32 }, quote { f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\" });\n  let full_result = quote {\n    let event_idx = $event_idx as u8;\n    let mut result_event_type: u8 = 0;\n    let mut result_event_subtype: u8 = 0;\n    let mut result_event_coords: (u8,u8) = (NOWHERE, NOWHERE);\n    let mut result_event_value: u32 = 0;\n    let mut result_event_radius: u8 = 0;\n    $result\n    // $value_valid\n    if (result_event_value > 255) {\n      result_event_value = 255;\n    }\n\n    $events_collection_varname.push(build_subtype_value_event(\n      result_event_type,\n      actor_id,\n      result_event_coords.0,\n      result_event_coords.1,\n      result_event_value as u8,\n      result_event_subtype,\n      result_event_radius\n    ));\n  };\n  // println(full_result);\n  full_result\n}\n\npub comptime fn set_action_def_result_event_in_action_def(event: Quoted, event_count: u32, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let mut base_index = get_action_def_result_event_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  // println(\"start\");\n  for event_idx in 0..event_count {\n    let idx = event_idx * get_action_def_result_event_byte_size();\n    for i in 0..get_action_def_result_event_byte_size() {\n      let destination_idx = base_index + idx + i;\n      result = quote { $result $action_def[$destination_idx] = $event[$event_idx].register[$i]; };\n      // result = quote { $result $action_def += $event[$event_idx].register[$i] as Field * $multiplier; };\n      // multiplier *= 2;\n    }\n  }\n  //println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_event_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[derive_frontend_action_def_result_event_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEvent {}\n\n\npub comptime fn derive_frontend_action_def_result_event_struct_builder(param_name: Quoted, event_idx: u32) -> Quoted {\n  let idx = get_action_def_result_event_base_index() + event_idx * get_action_def_result_event_byte_size();\n  let content = derive_frontend_action_def_struct_builder(param_name, idx, ACTION_DEF_DEF_RESULT_EVENTS);\n  quote { FrontendActionDefResultEvent { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEvent.nr"},"96":{"source":"pub global NOWHERE: u8 = 255;\npub global UNREADABLE_BYTES_PER_FIELD: u32 = 1;\npub comptime global DEBUG: bool = true;\npub comptime fn debug(stmt: Quoted) -> Quoted {\n    let debug_result = if DEBUG { stmt } else { quote {} };\n    debug_result\n}\npub comptime fn debugmsg<T>(msg: T) -> Quoted {\n    debug!(quote { println($msg); })\n}\npub comptime fn softassert(varname: Quoted, check: Quoted, msg: Quoted) -> Quoted {\n    let result = if DEBUG {\n        quote {\n            $varname &= $check;\n            if !($check) {\n                println($msg);\n            }\n        }\n    } else {\n        quote {\n            $varname &= $check;\n        }\n    };\n    result\n}\n\n////////////////////\n\n// global WIDTH_MASK: u8 = 31;\n// global CLASS_MASK: u8 = 7;\n// global WIDTH_BITS: u8 = 5;\n// global MAX_CHARACTERS: u32 = 5;\n// struct Character {\n//     pub x: u8, // 5 bit\n//     pub class: u8, // 3 bit\n//     pub actions: [[u8; 32]; 7],\n// }\n// impl Character {\n//     fn is_class_valid(class: u8) -> bool {\n//         class as u32 <= 5\n//     }\n\n//     pub fn is_valid(self) -> bool {\n//         let mut valid = true;\n//         let x = self.x;\n//         let class = self.class;\n//         println(x);\n//         valid &= Character::is_class_valid(class);\n//         valid\n//     }\n\n//     fn parse(\n//         id: u8,\n//         data: Field,\n//         actions_data: [Field; 30],\n//         wait_action: [u8; 32],\n//     ) -> (bool, Character) {\n//         let mut is_valid = true;\n\n//         let split: [u8; 32] = data.to_be_bytes::<32>();\n//         assert(split.len() == 32);\n//         let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n\n//         let x = x_packed & WIDTH_MASK;\n//         let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n//         if !Character::is_class_valid(class) {\n//             class = 0;\n//             is_valid = false;\n//         }\n\n//         let c = Character {\n//             x: x,\n//             class: class,\n//             actions: [\n//                 wait_action,\n//                 actions_data[id * 6 as u8].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 1].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 2].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 3].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 4].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 5].to_be_bytes::<32>(),\n//             ],\n//         };\n//         (is_valid, c)\n//     }\n// }\n\n// fn create_character(x: u8, class: u8) -> Character {\n//     let c = Character { x: x, class: class, actions: [[0 as u8; 32]; 7] };\n//     assert(c.is_valid());\n//     c\n// }\n// fn parse_characters(data: Field, actions_data: [Field; 30]) -> (bool, [Character; MAX_CHARACTERS]) {\n//     let mut is_valid = true;\n\n//     let wait_action = [\n//         0 as u8, 0 as u8, 240 as u8, 0 as u8, 63 as u8, 0 as u8, 0 as u8, 1 as u8, 0 as u8,\n//         32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n//         32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n//         0 as u8, 0 as u8, 0 as u8,\n//     ];\n\n//     // no need to optimize, compiler automatically rolls this out\n//     let mut result: [Character; MAX_CHARACTERS] = [\n//         create_character(0, 0),\n//         create_character(0, 0),\n//         create_character(0, 0),\n//         create_character(0, 0),\n//         create_character(0, 0),\n//     ];\n//     for i in 0..(MAX_CHARACTERS as u8) {\n//         let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action);\n//         is_valid &= curr_valid;\n//         result[i] = curr_c;\n//     }\n\n//     // let (curr_valid, curr_c) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[0] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[1] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[2] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[3] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[4] = curr_c;\n//     (is_valid, result)\n// }\n\n// #[test]\n// fn test_parse_character_round0() {\n//     let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n\n//     let parsed = parse_characters(\n//         data,\n//         [\n//             0x03f00001300314002000000000100300000020000000002000000000000000,\n//             0x02f0000110071020100a000020100a00000020000000002000000000000000,\n//             0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n//             0x023100081b161118120a010018120a01000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0x03f00001300414002000000000100300000020000000002000000000000000,\n//             0x02f0000110071008100a000008100a00000020000000002000000000000000,\n//             0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n//             0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0x03f00001300314002000000000100300000020000000002000000000000000,\n//             0x02f0000110071018100a000018100a00000020000000002000000000000000,\n//             0x09f0000130060c002000000000200000000020000000002000000000000000,\n//             0xf00001100610001005000100100500010020000000002000000000000000,\n//             0xf00001301c0100100d000000100d00000020000000002000000000000000,\n//             0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n//             0x03f00001300414002000000000100300000020000000002000000000000000,\n//             0x02f0000110061028100a000028100a00000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0x03f00001300414002000000000100300000020000000002000000000000000,\n//             0x02f0000110071010100a000010100a00000020000000002000000000000000,\n//             0xf000071b1611002000000000000705000020000000002000000000000000,\n//             0x6300061b161164150a020164150a02010020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//         ],\n//     );\n//     assert(parsed.0);\n// }\n\n// // #[test]\n// // fn test_create_character_0() {\n// //   let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n// //   let enemy_advance = 0x08;\n// //   let events = [0 as u8, 0 as u8, 0 as u8, 0 as u8];\n// //   println(events);\n\n// //   let actions_data = [\n// //     0x03f00001300314002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071020100a000020100a00000020000000002000000000000000,\n// //     0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n// //     0x023100081b161118120a010018120a01000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0x03f00001300414002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071008100a000008100a00000020000000002000000000000000,\n// //     0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n// //     0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0x03f00001300314002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071018100a000018100a00000020000000002000000000000000,\n// //     0x09f0000130060c002000000000200000000020000000002000000000000000,\n// //     0xf00001100610001005000100100500010020000000002000000000000000,\n// //     0xf00001301c0100100d000000100d00000020000000002000000000000000,\n// //     0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n// //     0x03f00001300414002000000000100300000020000000002000000000000000,\n// //     0x02f0000110061028100a000028100a00000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0x03f00001300414002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071010100a000010100a00000020000000002000000000000000,\n// //     0xf000071b1611002000000000000705000020000000002000000000000000,\n// //     0x6300061b161164150a020164150a02010020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000\n// // ];\n// //   comptime { assert(5 <= 5); }\n\n// //     let enemy_advance = if enemy_advance >= 32 { 0 } else { 32 - enemy_advance - 1 };\n// //     let mut is_valid = true;\n\n// //     let wait_action = [0 as u8, 0 as u8, 240 as u8, 0 as u8, 63 as u8, 0 as u8, 0 as u8, 1 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8];\n\n// // let mut result: [Character; 5] = [create_character(0, 0, 0, 0), create_character(1, 0, 0, 0), create_character(2, 0, 0, 0), create_character(3, 0, 0, 0), create_character(4, 0, 0, 0)];\n// //     //for i in 0..(5 as u8) {\n// //         let (curr_valid, curr_c) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[0] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[1] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[2] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[3] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[4] = curr_c;\n// //    // }\n// //     assert(is_valid);\n// //     // assert(result[0].x == 0);\n// // }\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplg/src/lib.nr"}},"names":["turn"],"brillig_names":["print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","directive_invert","directive_to_radix","directive_integer_quotient"]}