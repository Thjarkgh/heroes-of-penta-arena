{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":14695453468662975450,"abi":{"parameters":[{"name":"my_chars_input","type":{"kind":"field"},"visibility":"private"},{"name":"my_char_actions_input","type":{"kind":"array","length":30,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_obstacles_input","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"},{"name":"actions_input","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"move_input","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"enemy_advance_input","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"enemy_objects_input","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"enemy_events_input","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"boolean"},{"kind":"field"},{"kind":"array","length":30,"type":{"kind":"field"}},{"kind":"array","length":24,"type":{"kind":"struct","path":"obstacle::Obstacle","fields":[{"name":"id","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"y","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"health","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"obstacle_type","type":{"kind":"integer","sign":"unsigned","width":8}}]}},{"kind":"integer","sign":"unsigned","width":8},{"kind":"array","length":1,"type":{"kind":"field"}},{"kind":"array","length":4,"type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11167361122731473993":{"error_kind":"fmtstring","length":27,"item_types":[]},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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9NALYtzdIs5D33Ae+ubooY/PakcPvSDGdS6ch77hPPQN56FvOA99w3noG85D3xw99HHncvTQC2Lc3SLOQ99wHvrm6KEXZzWuc+E89A3noW84D33DeegbzkPfcB76hvPQN0cPfdy5HD30ghh3t4jz0Dech745eujjs9rRQy+IcZ0L56FvOA99w3noG85D33Ae+obz0DdHD33cuRw99CFxx3noO85D33Ee+u7ooQ/P6v6qOGJa5+o4D33Heeg7zkPfcR76jvPQd5yHvjt66OPO5eihF8QVR0y7W+w4D3139NCLsxrXuXAe+o7z0Hech77jPPQd56HvOA99x3nou6OHPu5cjh56QUy7W+w4D33Heei7o4c+PqsdPfSCGNe5cB76jvPQd5yHvuM89B3noe84D3139NDHncvRQy+IcXeLOA99x3nou6OHXpzVuM6F89B3nIe+4zz0Heeh7zgPfcd56DvOQ98dPfRx53L00Ati3N0izkPfcR767uihj89qRw+9IMZ1LpyHvuM89B3noe84D33Heeg7zkPfHT30cedy9NDHxDgPfcd56DvOQ98dPfTxWe3ooRfEuM6F89B3nIe+4zz0Heeh7zgPfcd56Lujhz7uXI4eekFcccS4u0Wch747eujFWY3rXDgPfcd56DvOQ99xHvqO89B3nIe+4zz03dFDH3cuRw+9IMbdLeI89APnoR+OHvrwrB6OHnpBTOtc41VxxLTONXAe+oHz0A+ch37gPPTD0UMfdy5HD70gpt0tDpyHfuA89MPRQy/OalznwnnoB85DP3Ae+oHz0A+ch37gPPQD56Efjh76uHM5eugFMe1uceA89APnoR+OHvr4rHb00AtiXOfCeegHzkM/cB76gfPQD5yHfuA89MPRQx93LkcPfUyM89APnId+4Dz0w9FDH5/Vjh56QYzrXDgP/cB56AfOQz9wHvqB89APnId+OHro487l6KEXxBVHjLtbxHnoh6OHXpzVuM6F89APnId+4Dz0A+ehHzgP/cB56AfOQz8cPfRx53L00Ati3N0izkM/cB764eihj89qRw+9IMZ1LpyHfuA89APnoR84D/3AeegHzkM/HD30cedy9NALYtzdIs5DP3Ae+uHooRdnNa5z4Tz0A+ehHzgP/cB56AfOQz9wHvqB89APRw993LkcPfSCGHe3iPPQD5yHfjh66MOzejp6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nQvnob9wHvoL56G/cB76C+ehv3Ae+gvnob8cPfRx53L00Ati3N0izkN/4Tz0l6OHPj6rHT30ghjXuXAe+gvnob9wHvoL56G/cB76C+ehvxw99HHncvTQx8Q4D/2F89BfOA/95eihj89qRw+9IMZ1LpyH/sJ56C+ch/7CeegbzkPfcB765uihDztXc/TQC+KKI6bdLTach745eujFWU3rXA3noW84D33DeegbzkPfcB76hvPQN5yHvjl66OPO5eihF8S0u8WG89A3nIe+OXro47Pa0UMviHGdC+ehbzgPfcN56BvOQ99wHvqG89A3Rw993LkcPfSCGHe3iPPQN5yHvjl66MVZjetcOA99w3noG85D33Ae+obz0Dech77hPPTN0UMfdy5HD70gxt0t4jz0Deehb44e+visdvTQC2Jc58J56BvOQ99wHvqG89A3nIe+4Tz0zdFDH3cuRw99TIzz0Dech77hPPTN0UMfn9WOHnpBjOtcOA99w3noG85D33Ae+obz0Dech745eujjzuXooRfEFUeMu1vEeeibo4denNW4zoXz0Dech77hPPQN56FvOA99w3noG85D3xw99HHncvTQC2Lc3SLOQ99wHvrm6KGPz2pHD70gxnUunIe+4Tz0DeehbzgPfcN56BvOQ98dPfRh5+qOHnpBTLtb7DgPfX9VHDGtc3VHD70gpnWujvPQd5yHvuM89B3noe84D33Heei7o4c+7lyOHnpBTLtb7DgPfcd56Lujhz4+qx099IIY17lwHvqO89B3nIe+4zz0Heeh7zgPfXf00Medy9FDHxPjPPQd56HvOA99d/TQx2e1o4deEOM6F85D33Ee+o7z0Hech77jPPQd56Hvjh76uHM5eugFccUR4+4WcR767uihF2c1rnPhPPQd56HvOA99x3noO85D33Ee+o7z0HdHD33cuRw99IIYd7eI89B3nIe+O3ro47Pa0UMviHGdC+eh7zgPfcd56DvOQ99xHvqO89B3Rw993LkcPfSCGHe3iPPQd5yHvjt66MVZjetcOA99x3noO85D33Ee+o7z0Hech77jPPTd0UMfdy5HD70gxt0t4jz0Heeh744e+visdvTQC2Jc58J56DvOQ99xHvqO89B3nIe+4zz03dFDH3cuRw99SDxwHvqB89APnId+OHrow7N6vCqOmNa5Bs5DP3Ae+oHz0A+c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xnUunIc+4Tz0CeehTzgPfcJ56BPOQ58cPfRx53L00AviiiPG3S3iPPTJ0UMvzmpc58J56DPOQ59xHvqM89BnnIc+vyqOmPacKzt66MPOlR099IKYdreYcR76jPPQZ0cPfXxWO3roBTGuc+E89Bnnoc84D33GeegzzkOfcR767OihjzuXo4deENPuFjPOQ59xHvrs6KEXZzWuc+E89Bnnoc84D33GeegzzkOfcR76jPPQZ0cPfdy5HD30ghh3t4jz0Gechz47eujjs9rRQy+IcZ0L56HPOA99xnnoM85Dn3Ee+ozz0GdHD33cuRw99DExzkOfcR76jPPQZ0cPfXxWO3roBTGuc+E89Bnnoc84D33GeegzzkOfcR767OihjzuXo4deEFccMe5uEeehz44eenFW4zoXzkOfcR76jPPQZ5yHPuM89Bnnoc84D3129NDHncvRQy+IcXeLOA99xnnos6OHPj6rHT30ghjXuXAe+ozz0Gechz7jPPQZ56HPOA99dvTQx53L0UMviHF3izgPfcZ56LOjh16c1bjOhfPQZ5yHPuM89AXnoS84D33BeegLzkNfXhXWuYqjh14Q0+4WC85DX3Ae+uLooY/PakcPvSDGdS6ch77gPPQF56EvOA99wXnoC85DXxw99HHncvTQx8Q4D33BeegLzkNfHD308Vnt6KEXxLjOhfPQF5yHvuA89AXnoS84D33BeeiLo4c+7lyOHnpBXHHEuLtFnIe+OHroxVmN61w4D33BeegLzkNfcB76gvPQF5yHvuA89MXRQx93LkcPvSDG3S3iPPQF56Evjh76+Kx29NALYlznwnnoC85DX3Ae+oLz0Bech77gPPTF0UMfdy5HD70gxt0t4jz0BeehL44eenFW455zOXroBTHuOZejhz4mdvTQC2Lccy5HD7343xjXuRw99IIY9/tcOA99cfTQi7Ma95zL0UMfEzt66AWxX+eq+eOb33/sP4k36FztVdoncXoJ4jZfH5+lzfQX4p9fPHKtf37xH9uTP+PZoKC9M5564oni2aD6vTOeDXriO+PZoFS+M54NGug749mgrr4xnh18/++MZ4Mi/M54TmsO4zmtOYynnniieE5rDuM5rTmM57TmMJ7TmsN4TmsO4qk7LDa8M57TmsN4TmsO4zmtOYynnniieE5rDuM5rTmM57TmMJ7TmsN4TmuO4tlhc+Od8ZzWHMZzWnMYz2nNYTz1xBPFc1pzGI9daxa/yVt3WCBZTGzXbSWxXV0Vv9dad1ggWUxsVyolsV1PlMR21U8SV9pZvcMCyWJiXOfaYYFk8d9jw84liHGda4cFksXEuM61wwLJYmJc59phgWTtz+MdFkgWE+M61w4LJIuJcc+5dlggWXtW77BAspgY17l2WCBZTIzrXDsskCwmNuxcgtiwcwli3HOuHRZI1nauHRZI1hLvsECymNiwcwliw84liHGda4cFksXEuM61wwLJYmJc59phgWQxMe451w4LJIuJcc+5dlggWdu5dlggWUxcccS4u8UdFkgWE+M61w4LJIuJcZ1rhwWSxcS4zrXDAsliYtxzrh0WSBYT455z7bBAsrZz7bBAspgYd7e4wwLJWuIdFkgWE+M6l98CiSTGdS6/nRBJjOtcfmsekhj3nMtvc0MS455z+S1jqM7lN3YhiXF3i36TFJK44ohxnctvC0IS4zqX32KDJKZ1rstvV0ES055zXX7rB5KY9pzrelVY57r8ZgckMe1u8fIbB5DEtLvFy0/hr85qPyu/JMZ1Lj93viTGdS4/w70kpj3nuhw99IKY9pzrwnnoL0cPfUzs6KEXxLS7xcvRQy+IcZ3L0UMviHGdy9FDL4hxnQvnob9wHvoL56G/cB76y9FDH3cuRw+9IK44YtzdIs5Dfzl66MVZjetcOA/9hfPQXzgP/YXz0F84D/2F89BfOA/95eihjzuXo4deEOPuFnEe+gvnob8cPfTxWe3ooRfEuM6F89BfOA/9hfPQXzgP/YXz0F84D/3l6KGPO5ejh14Q4+4WcR76C+ehvxw99OKsxnUunIf+wnnoL5yH/sJ56C+ch/7CeegvnIf+cvTQx53L0UMviHF3izgP/YXz0F+OHvr4rHb00AtiXOfCeegvnIf+wnnoL5yH/sJ56C+ch/5y9NDHncvRQx8T4zz0F85Df+E89Jejhz4+qx099IIY17lwHvoL56G/cB76C+ehbzgPfcN56Jujhz7sXM3RQy+IK46YdrfYcB765uihF2c1rXM1nIe+4Tz0DeehbzgPfcN56BvOQ99wHvrm6KGPO5ejh14Q0+4WG85D33Ae+ubooY/PakcPvSDGdS6ch77hPPQN56FvOA99w3noG85D3xw99HHncvTQC2Lc3SLOQ99wHvrm6KEXZzWuc+E89A3noW84D33DeegbzkPfcB76hvPQN0cPfdy5HD30ghh3t4jz0Dech745eujjs9rRQy+IcZ0L56FvOA99w3noG85D33Ae+obz0DdHD33cuRw99DExzkPfcB76hvPQN0cPfXxWO3roBTGuc+E89A3noW84D33DeegbzkPfcB765uihjzuXo4deEFccMe5uEeehb44eenFW4zoXzkPfcB76hvPQN5yHvuE89A3noW84D31z9NDHncvRQy+IcXeLOA99w3nom6OHPj6rHT30ghjXuXAe+obz0Dech77hPPQN56FvOA99d/TQh52rO3roBTHtbrHjPPT9VXHEtM7VHT30gpjWuTrOQ99xHvqO89B3nIe+4zz0Heeh744e+rhzOXroBTHtbrHjPPQd56Hvjh76+Kx29NALYlznwnnoO85D33Ee+o7z0Hech77jPPTd0UMfdy5HD31MjPPQd5yHvuM89N3RQx+f1Y4eekGM61w4D33Heeg7zkPfcR76jvPQd5yHvjt66OPO5eihF8QVR4y7W8R56Lujh16c1bjOhfPQd5yHvuM89B3noe84D33Heeg7zkPfHT30cedy9NALYtzdIs5D33Ee+u7ooY/PakcPvSDGdS6ch77jPPQd56HvOA99x3noO85D3x099HHncvTQC2Lc3SLOQ99xHvru6KEXZzWuc+E89B3noe84D33Heeg7zkPfcR76jvPQd0cPfdy5HD30ghh3t4jz0Hech747eujjs9rRQy+IcZ0L56HvOA99x3noO85D33Ee+o7z0HdHD33cuRw99CHxwHnoB85DP3Ae+uHooQ/P6vGqOGJa5xo4D/3AeegHzkM/cB76gfPQD5yHfjh66OPO5eihF8QVR0y7Wxw4D/1w9NCLs5r2nGs4euhjYkcPvSDGPedy9NALYtxzLkcPvfjfGNe5HD30gpj2+1wD56Efjh76+Kx29NALYtxzLkcPvSD261w1f3zz+4/9J3HdgDjlb8RTELf5+vgsbaa/EP/84rtz1j+/+K4m+Wc8OxS0N8azQ5t7Yzw7VL83xrNDT3xjPDuUyvfFs4WV/43x7FBX3xjPDt32jfHsUITfGE898UTxnNYcxnNacxjPac1hPKc1h/Gc1hzFs8WuwhvjOa05jOe05jCe05rDeOqJJ4rntOYwntOaw3hOaw7jOa05jOe05iieLZYx3hjPac1h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8Vnt6KEXxLjOhfPQXzgP/YXz0F84D/2F89BfOA/95eihjzuXo4c+JsZ56C+ch/7CeegvRw99fFY7eugFMa5z4Tz0F85Df+E89BfOQ3/hPPQXzkN/OXro487l6KEXxBVHjLtbxHnoL0cPvTircZ0L56G/cB76C+ehv3Ae+gvnob9wHvoL56G/HD30cedy9NALYtzdIs5Df+E89Jejhz4+qx099IIY17lwHvoL56G/cB76C+ehv3Ae+gvnob8cPfRx53L00Ati3N0izkN/4Tz0l6OHXpzVuM6F89BfOA/9hfPQN5yHvuE89A3noW84D317VVjnao4eekFMu1tsOA99w3nom6OHPj6rHT30ghjXuXAe+obz0Dech77hPPQN56FvOA99c/TQx53L0UMfE+M89A3noW84D31z9NDHZ7Wjh14Q4zoXzkPfcB76hvPQN5yHvuE89A3noW+OHvq4czl66AVxxRHj7hZxHvrm6KEXZzWuc+E89A3noW84D33DeegbzkPfcB76hvPQN0cPfdy5HD30ghh3t4jz0Dech745eujjs9rRQy+IcZ0L56FvOA99w3noG85D33Ae+obz0DdHD33cuRw99IIYd7eI89A3nIe+OXroxVmN61w4D33DeegbzkPfcB76hvPQN5yHvuE89M3RQx93LkcPvSDG3S3iPPQN56Fvjh76+Kx29NALYlznwnnoG85D33Ae+obz0Dech77hPPTN0UMfdy5HD31MjPPQN5yHvuE89M3RQx+f1Y4eekGM61w4D33DeegbzkPfcB76jvPQd5yHvjt66MPO1R099IK44ohpd4sd56Hvjh56cVbTOlfHeeg7zkPfcR76jvPQd5yHvuM89B3noe+OHvq4czl66AUx7W6x4zz0Heeh744e+visxnnou6OHXhBXHDHuOZejh14Q455zOXroxf/GuM7l6KEXxLTf5+o4D3139NDHZ7Wjh14Q455zOXroBbFf56r545vff+w/iXfoXOX1RVy6IG7z9fFZ2kx/If75xSPX+ucXj/uT/Ixnh4L2vni2MNy/MZ4dqt8b49mhJ74xnh1K5RvjqSeeKJ4d6uob49mh274xnh2K8BvjOa05jOe05iieLTYK3hjPac1hPKc1h/Gc1hzGU088UTynNYfxnNYcxnNacxjPac1hPKc1R/FssTLxxnhOaw7jOa05jOe05jCeeuKJ4jmtOYzntOYwntOaw3hOaw7jOa05imeLnZA3xnNacxiPXWtWv8m7xQLJWuKKI7arq+r3WrdYIFlLbFcqJbFdT5TEdtVPEW+xQLL0rN5igWQtMa5zbbFAsvbvccUR4zrXFgska4lxnWuLBZK1xLjOtcUCydKfx1sskKwlxnWuLRZI1hJXHDGuc22xQLKWGNe5tlggWUtM61xjiwWStcSGnUsQG3YuQUx7zjVeFda5xhYLJGuJDTuXIDbsXILYsHMJYlzn2mKBZC0xrnNtsUCylhjXubZYIFlLTHvONbZYIFlLTHvONbZYIFnaubZYIFlKvMUCyVpi2t3i2GKBZC0xrnNtsUCylhjXubZYIFlLjOtcWyyQrCXGPefaYoFkLTHuOdcWCyRLO9cWCyRriSuOGHe3uMUCyVpiXOfyWyCRxLjO5bcTIolxnctvzUMS455z+W1uSGLccy6/ZQzVufzGLiQx7m7Rb5JCEfutTEhiXOfy24KQxLjO5bfYIIlxnctvV0ES455z+a0fSGLccy6/jQLVufxmByQx7m7RbxxAElccMa5z+Vn5JTGuc/m58yUxrnP5Ge4lMe45l6OHXhDjnnPhPPTD0UMviHF3i44eekGMu1vEeeiHo4deEOM6l6OHXhDjOhfOQz9wHvqB89APnId+OHro487l6KGPiXEe+oHz0A+ch344eujjs9rRQy+IcZ0L56EfOA/9wHnoB85DP3Ee+onz0E9HD33Yuaajh14QVxwx7W5x4jz009FDL85qWueaOA/9xHnoJ85DP3Ee+onz0E+ch37iPPTT0UMfdy5HD70gpt0tTpyHfuI89NPRQx+f1Y4eekGM61w4D/3EeegnzkM/cR76ifPQT5yHfjp66OPO5eihF8S4u0Wch37iPPTT0UMvzmpc58J56CfOQz9xHvqJ89BPnId+4jz0E+ehn44e+rhzOXroBTHubhHnoZ84D/109NDHZ7Wjh14Q4zoXzkM/cR76ifPQT5yHfuI89BPnoZ+OHvq4czl66GNinId+4jz0E+ehn44e+visdvTQC2Jc58J56CfOQz9xHvqJ89BPnId+4jz009FDH3cuRw+9IK44YtzdIs5DPx099OKsxnUunId+4jz0E+ehnzgP/cR56CfOQz9xHvrp6KGPO5ejh14Q4+4WcR76ifPQT0cPfXxWO3roBTGuc+E89BPnoZ84D/3EeegnzkM/aR769Ho5iuij0vUHMuw3uv5Ahl0v/oEMu1/8A7nykGHN6w9kWPX6AxnWvf5AhpWvP5B57YumpP8DGfbM6w9k2EOvP5BhT73+QK649uXopVfIsMvGP5Bht41/IMOuG/9A5rUvRzm9Qua1L5qe/g9kXvuiCer/QOY9+6Ip6v9A5j37cpTUi/blaKkXyDRN/R/IvJtHmqj+D2Re+3JU1StkXvuiyer/QOa1L5qu/g9k3rMvmrD+D2Tesy9HZb1oX47OeoVceci8m0eatv4PZF77chTXK2Re+6Kp6/9A5rUvmrz+D2Tesy+avv4PZN6zL0eBvWhfjgZ7hcy7eaQ57G9kmsT+D2Re+3LU2CtkXvuiiez/QOa1L5rK/g9k3rMvmsz+D2Tesy9Hnb1oX44+e4XMu3mkGe3/QK48ZF77cpTaK2Re+6Jp7f9A5rUvmtj+D2Tesy+a2v4PZN6zL0e5vWhfjnZ7hcy7eaT57f9A5t08OhruxYntqLhXyLz2RZPc/4HMa180zf0fyLxnXzTR/R/IvGdfjqp70b4cXfcxcuK57hPPdZ94rvvk6LqPT+z0qjxkXPtKPNd94rnuE891n3iu+8Rz3See6z45uu5F+3J03SvkykPG3Twmnus+Obru1YnNa188133iue4Tz3WfeK77xHPdJ57rPvFc98nRdS/al6PrXiHjbh4Tz3WfeK775Oi6Fye2o+teIfPaF891n3iu+8Rz3See6z7xXPeJ57pPjq570b4cXfcKmXfzyHPdJ57rPjm67tWJzWtfPNd94rnuE891n3iu+8Rz3See6z7xXPfJ0XUv2pej614h824eea77xHPdJ0fXvTixHV33CpnXvniu+8Rz3See6z7xXPeJ57pPPNd9cnTdi/bl6LoXyDzXfeK57hPPdZ8cXffixOa57pOj614h8559ObruFTKvffFc98nRdS/+V3Z03StkXvtydN0r5MpD5j37cnTdK2Tesy9H171C9mtfNX988/uP/SfyHq77+YVcm0Bu8/XxWdpMf0H++cUj1/rnF4/87Tt/5bNFVXtjPlv0ujfms0UJfGM+9eQT5rNFvXxjPlt00Tfms0VxfWM+W7TcN+azRSV+Wz55j7WCN+Zz+nOcz+nPcT6nP8f51JNPmM/pz3E+pz/H+Zz+HOdz+nOcz+nPYT577E28MZ/Tn+N8Tn+O8zn9Oc6nnnzCfE5/jvM5/TnO5/TnOJ/Tn+N8Tn8O89ljMeSN+Zz+HOdz+nOcz+nPcT7VLR/1G795j5WTtch2LVcj2xVX9euveY+Vk7XIdvVSIu+xcrIW2a4EamS7XidP7D1WTtYiVx6yYftSf5cN25dC5rWvPVZO1iLz2tceKydrkXnta4+Vk6U/l/dYOVmLXHnIvGdfe6ycrEXmta89Vk7WIvPa1x4rJ2uRee1rj5WTtciG7UshVx4y79nXHisnS9vXHisna5EN25dCNmxfAnmPlZO1yLz2tcfKyVpkXvvaY+VkLTKvfe2xcrIWmffsa4+Vk7XIvGdfe6ycLG1fe6ycrEXm3TzusXKyFrnykHnta4+Vk7XIvPa1x8rJWmRe+9pj5WQtMu/Z1x4rJ2uRec++9lg5Wdq+9lg5WYvMu3ncY+VkLTLv5nGPlZOlJ7bfyolG5rUvvy0SjcxrX36LIRqZ9+zLb9dDI/Oeffmtb8j25TeooZCL30aGRsbdPBa/JQuNjGtf5VV5yLj2VfxWITQyrn0Vv+0GjYx79lX8FhY0Mu7ZV/HbQZDty2/aQCNXHjLu5rH4bQpoZF778jP/a2Re+/Lz82tkXvvys+hrZN6zL0fXvULmPfviue6Lo+teIeNuHouj614gO7ruFTKvfTm67hUyr305uu4VMq998Vz3hee6LzzXfeG57ouj6160L0fXvULm3TzyXPeF57ovjq57dWLz2hfPdV94rvvCc90Xnuu+8Fz3hee6LzzXfXF03Yv25ei6V8i8m0ee677wXPfF0XUvTmxH171C5rUvnuu+8Fz3hee6LzzXfeG57gvPdV8cXfeifTm67gUyz3VfeK77wnPdF0fXvTixHV33CpnXvniu+8Jz3Ree677wXPeF57ovPNd9cXTdi/bl6LpXyJWHzLt55Lnui6PrXp3YvPbFc90Xnuu+8Fz3hee6LzzXfeG57gvPdV8cXfeifTm67hUy7+aR57qvPNd9dXTdxyd2dXTdK2Rc+6qvykPGta/Kc91Xnuu+8lz3lee6r46ue9G+HF33Chl381h5rvvKc91XR9e9OrF57Yvnuq88133lue4rz3Vfea77ynPdV57rvjq67kX7cnTdK2TczWPlue4rz3VfHV334sR2dN0rZF774rnuK891X3mu+8pz3Vee677yXPfV0XUv2pej614g81z3lee6rzzXfXV03YsT29F1r5B57Yvnuq88133lue4rz3Vfea77ynPdV0fXvWhfjq57hVx5yLybR57rvjq67tWJzWtfPNd95bnuK891X3mu+8pz3Vee677yXPfV0XUv2pej614h824eea77ynPdV0fXvTixHV33CpnXvniu+8pz3Vee677yXPeV57qvPNd9dXTdi/bl6LpXyLybR57rvvJc99XRda9ObF774rnuK891X3mu+8pz3Vee677yXPeV57qvjq570b4cXfcKmXfzyHPdV57rvjq67uMT+3J03StkXPu6eK77i+e6v16Vh4x79nXxXPcXz3V/Obru4/Z1ObruBTLPdX/xXPcXz3V/ObruxYnt6LpXyLz2xXPdXzzX/cVz3V881/3Fc91fPNf95ei6F+3L0XWvkCsPGXfzePFc95ej616d2Lz2xXPdXzzX/cVz3V881/3Fc91fPNf9xXPdX46ue9G+HF33Cpl388hz3V881/3l6LoXJ7aj614h89oXz3V/8Vz3F891f/Fc9xfPdX/xXPeXo+tetC9H171C5t088lz3F891fzm67tWJzWtfPNf9xXPdXzzX/cVz3V881/3Fc91fPNf95ei6F+3L0XWvkHk3jzzX/cVz3V+OrntxYju67hUyr33xXPcXz3V/8Vz3F891f/Fc9xfPdX85uu5F+3J03Qtknuv+4rnuL57r/nJ03YsT29F1r5B57Yvnur94rvuL57q/eK77i+e6v3iu+8vRdS/al6PrXiFXHjLv5pHnur8cXffqxOa1L57rvvFc943num88133jue7bq/KQcc++mqPrPm5fzdF1r5BxN4+N57pvPNd9c3TdixPb0XWvkHnti+e6bzzXfeO57hvPdd94rvvGc903R9e9aF+OrnuFjLt5bDzXfeO57puj616d2LxnX46ue4XMe/bl6LoXyI6ue4XMe/bl6LpX/yvz2pej614h437vq/Fc983Rda9ObN6zL0fXvUB2dN0rZL/2VfPHN7//2H9Bfkv7ai1/IXfBkPocnx9mvLL88rtFf372+/+Mv3/5n9CFCF2J0BcRuhlCfx6S95+v6xfoToQeROgJhH6P+/6fDP353e8/918OsvfY798N7djIJLRjI+vf/k6P8gt0JUI7NjIJ7djI8vwG/duPLMdGJqE3aGTjVb5Bj6mge+lfn/2vH+ZP6A0a2XLo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VRxd9woZd/NYeK77wnPdF0fXvTixHV33CrnykHnti+e6LzzXfeG57gvPdV94rvvi6LoX7cvRda+QcTePhee6LzzXfXF03asTm9e+eK77wnPdF57rvvBc94Xnui88133hue6Lo+tetC9H171C5t088lz3hee6L46ue3FiO7ruFTKvffFc94Xnui88133hue4Lz3VfeK774ui6F+3L0XWvkHk3jzzXfeG57ouj616c2I6ue4XMa188133hue4Lz3VfeK77wnPdF57rvji67kX7cnTdK2TezSPPdV94rvvi6LpXJzavffFc94Xnui88133hue4Lz3VfeK77wnPdF0fXvWhfjq57hcy7eeS57gvPdV8cXffixHZ03SvkykPmtS+e677wXPeF57ovPNd94bnui6PrXrQvR9e9QubdPPJc94Xnui+Ornt1YvPaF891X3iu+8pz3Vee677yXPeV57qvr8pDxrWv6ui6V8i4m8fKc91Xnuu+OrruxYnt6LpXyLz2xXPdV57rvvJc95Xnuq88133lue6ro+tetC9H171Cxt08Vp7rvvJc99XRdS9ObEfXvULmtS+e677yXPeV57qvPNd95bnuK891Xx1d96J9ObruFTLv5pHnuq881311dN2rE5vXvniu+8pz3Vee677yXPeV57qvPNd95bnuq6PrXrQvR9e9QubdPPJc95Xnuq+OrntxYju67hVy5SHz2hfPdV95rvvKc91Xnuu+8lz31dF1L9qXo+teIfNuHnmu+8pz3VdH1706sXnti+e6rzzXfeW57ivPdV95rvvKc91Xnuu+OrruRftydN0rZN7NI891X3mu++rouhcntqPrXiHz2hfPdV95rvvKc91Xnuu+8lz3lee6r46ue9G+HF33Cpl388hz3Vee6746uu7Fie3oulfIvPbFc91Xnuu+8lz3F891f/Fc9xfPdX85uu7j9nW9Kg8Zd/N48Vz3F891fzm67tWJzWtfPNf9xXPdXzzX/cVz3V881/3Fc91fPNf95ei6F+3L0XWvkHE3jxfPdX/xXPeXo+tenNiOrnuFXHnIvPbFc91fPNf9xXPdXzzX/cVz3V+OrnvRvhxd9wqZd/PIc91fPNf95ei6Vyc2r33xXPcXz3V/8Vz3F891f/Fc9xfPdX/xXPeXo+tetC9H171C5t088lz3F891fzm67sWJ7ei6V8i89sVz3V881/3Fc91fPNf9xXPdXzzX/eXouhfty9F1r5B5N4881/3Fc91fjq57cWI7uu4VMq998Vz3F891f/Fc9xfPdX/xXPcXz3V/ObruRftydN0rZN7NI891f/Fc95ej616d2LxnX46ue4XMe/bl6LpXyLz2xXPdX46ue/W/Mq99ObruFTLv9754rvvL0XUvTmxH171C5j37cnTdK+Rqh1zzxze//9h/Qd6gfbVXaZ/I6SWQ23ylP7+6zfQX5J9fPHKtf37xuD/JL/lsUNXems8Gve6t+WxQAt+azwaN8Y35tB1k/m/NZ4Mu+tZ8Niiub81ng5b71nzqySfM5/TnOJ/Tn+N8Tn+O8zn9Oc7n9Ocwnx3mGN6az+nPcT6nP8f5nP4c51NPPmE+pz/H+Zz+HOdz+nOcz+nPcT6nP4f57DCo8dZ8Tn+O8zn9Oc7n9Oc4n3ryCfM5/TnO5/TnOJ/Tn+N8Tn+O87Hrz+o3ftsOKyerke1arka2K67q11/bDisnq5ErD9muMWpkuxKoke16nT6x7aqaRua1rx1WThb/Xd5h5WQ1Mq997bByshq58pB57WuHlZPVyLz2tcPKyWpkXvvaYeVkNTLv2dcOKyeLT+wdVk5WI1ceMq997bByshrZsH0pZMP2pZAN25dA3mHlZDUyr33tsHKyGtmwfSnkykM2bF8Kmde+dlg5WY3Ma187rJwsRt5h5WQ1Mu/mcYeVk9XIvGdfO6ycrEbmta8dVk5WI/NuHndYOVmNzLt53GHlZPGJvcPKyWpkXvvaYeVkNXLlIfNuHndYOVmNzHv2tcPKyWpkXvvaYeVkNTLv5nGHlZPVyLybxx1WThaf2H4rJxqZ1778tkg0Mq99+S2GKOTuNwKikXHPvrrfVIdGxrWv/qo8ZNzNY/ebvdDIuJvH7jdOoU9sXvvym5DQyLz25Tf0oJFxN4/db45BI+OefXW/0QSNzGtfftMGGhl389j9Bgg0Mu7msfvNBMgT28/8r5ErD5nXvvyU+xoZd/PY/cT4Gpn37MvRda+Qee3L0XWvkHk3j46ue4XMu3nkue67o+teIfPal6PrXiDzXPed57rvPNd957nuO8913x1d96J9ObruFTLv5pHnuu881313dN2LE9vRda+Qee2L57rvPNd957nuO89133mu+85z3XdH171oX46ue4XMu3nkue47z3XfHV334sR2dN0rZF774rnuO89133mu+85z3Xee677zXPfd0XUv2pej614h824eea77znPdd0fXvTqxee2L57rvPNd957nuO89133mu+85z3Xee6747uu5F+3J03Stk3s0jz3Xfea777ui6Fye2o+teIVceMq998Vz3nee67zzXfee57gfPdT8cXfdx+xqOrnuFjLt5HK/KQ8bdPA5H1706sXHta/Bc94Pnuh881/3gue4Hz3U/eK77wXPdD0fXvWhfjq57hYy7eRw81/3gue6Ho+tenNiOrnuFzGtfPNf94LnuB891P3iu+8Fz3Q+e6344uu5F+3J03Stk3s0jz3U/eK774ei6Fye2o+teIfPaF891P3iu+8Fz3Q+e637wXPeD57ofjq570b4cXfcKmXfzyHPdD57rfji67tWJzWtfPNf94LnuB891P3iu+8Fz3Q+e637wXPfD0XUv2pej614h824eea77wXPdD0fXvTixHV33CrnykHnti+e6HzzX/eC57gfPdT94rvvh6LoX7cvRda+QeTePPNf94Lnuh6PrXp3YvPbFc90Pnut+8Fz3g+e6HzzX/eC57gfPdT8cXfeifTm67hUy7+aR57ofPNf9cHTdixPb0XWvkHnti+e6HzzX/eC57gfPdT94rvvBc92P/z97b5clSaok3U7oPjig/M1/YtdidYSHVyWNVPHRZaiIveVaJyqTzfHEJNWcLYyu+3n66oyue4Qs9+ax67nuu57rvr9M7cTujK57hCyXvrqe677rue67nuu+67nuu57rvuu57juj6x6kL0bXPUKWe/PY9Vz3Xc913xld9+jE1ktfeq77rue673qu+67nuu96rvuu57rveq77zui6B+mL0XWPkPXePOq57rue674zuu7Bic3oukfIpoesl770XPddz3Xf9Vz3Xc913/Vc953RdQ/SF6PrHiHrvXnUc913Pdd9Z3TdoxNbL33pue67nuu+67nuu57rvuu57rue677rue47o+sepC9G1z1C1nvzqOe673qu+87ougcnNqPrHiHrpS89133Xc913Pdd913Pddz3Xfddz3XdG1z1IX4yue4Ss9+ZRz3Xf9Vz3ndF1D05sRtc9QtZLX3qu+67nuu96rvuu57rveq77rue674yue5C+GF33CFnvzaOe677rue47o+sendh66UvPdd/1XPddz3Xf9Vz3Xc91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rvui57oveq77wui6B+mL0XWPkPXePOq57oue674wuu7Bic3oukfIeulLz3Vf9Fz3Rc91X/Rc90XPdV/0XPeF0XUP0hej6x4h67151HPdFz3XfWF03aMTWy996bnui57rvui57oue677oue6Lnuu+6LnuC6PrHqQvRtc9QtZ786jnui96rvvC6LoHJzaj6x4hmx6yXvrSc90XPdd90XPdFz3XfdFz3RdG1z1IX4yue4Ss9+ZRz3Vf9Fz3hdF1j05svfSl57oveq77que6r3qu+6rnuq96rvv6Mj1kufRVGV33CFnuzWPVc91XPdd9ZXTdgxOb0XWPkPXSl57rvuq57que677que6rnuu+6rnuK6PrHqQvRtc9QpZ781j1XPdVz3VfGV334MRmdN0jZL30pee6r3qu+6rnuq96rvuq57qveq77yui6B+mL0XWPkPXePOq57que674yuu7Ria2XvvRc91XPdV/1XPdVz3Vf9Vz3Vc91X/Vc95XRdQ/SF6PrHiHrvXnUc91XPdd9ZXTdgxOb0XWPkE0PWS996bnuq57rvuq57que677que4ro+sepC9G1z1C1nvzqOe6r3qu+8roukcntl760nPdVz3XfdVz3Vc9133Vc91XPdd91XPdV0bXPUhfjK57hKz35lHPdV/1XPeV0XUPTmxG1z1C1ktfeq77que6r3qu+6rnuq96rvuq57qvjK57kL4YXfcIWe/No57rvuq57iuj6x6c2Iyue4Ssl770XPdVz3Vf9Vz3Tc913/Rc903Pdd8YXffz9NVepocs9+ax6bnum57rvjG67tGJrZe+9Fz3Tc913/Rc903Pdd/0XPdNz3Xf9Fz3jdF1D9IXo+seIcu9eWx6rvum57pvjK57cGIzuu4Rsukh66UvPdd903PdNz3XfdNz3Tc9131jdN2D9MXoukfIem8e9Vz3Tc913xhd9+jE1ktfeq77pue6b3qu+6bnum96rvum57pveq77xui6B+mL0XWPkPXePOq57pue674xuu7Bic3oukfIeulLz3Xf9Fz3Tc913/Rc903Pdd/0XPeN0XUP0hej6x4h67151HPdNz3XfWN03YMTm9F1j5D10pee677pue6bnuu+6bnum57rvum57huj6x6kL0bXPULWe/Oo57pveq77xui6Rye2XvrSc903Pdd903PdNz3XfdNz3Tc9133T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zf8um4c6k93IcunLXqaHLJe+zEM/yW5kufRlHvpJdj+X9dKXh36S3chysy/z0E+yG1kvfXnoJ9mNrJe+PPST7EbWS18e+kl2IxOmL4DsoZ9kN7Le7MtDP8nm9OWhn2Q3sukhE6YvhEyYvhCyXvry0CKyG1kvfXno+diNrJe+PDRx7EbWm3156MrYjaw3+/LQZrE5fXmop9iNrPfm0UPfxGZkD30Tu5H10peHvondyHrpy0OTxW5kvfTloSNjN7Le7MtD+8ZuZL3Zl4dej83py0MJyG5kvTePLupFNiObHrJe+uJrOcHIeumLr4sEI+ulL77GEIysN/vi6/XAyHqzL772DZi++Ao1MLLem0e+2guMrPfmka+cAp7YfH0TGFkvffG1QmBkvfTF192AkfVmX3wNCxhZb/bF14MA0xdftQFE5msrwMh6bx75OgUwsl764jP/Y2S99MXn58fIeumLz6KPkfVmX4yue4SsN/vSc90bo+seIZsest6bR0bXPULWS1+MrnuELJe+MqPrHiHLpa+s57rPeq77/DI9ZLnZV2Z03c/TV2Z03SNkuTePWc91n/Vc95nRdQ9ObEbXPULWS196rvus57rPeq77rOe6z3qu+6znus+MrnuQvhhd9whZ7s1j1nPdZz3XfWZ03aMTWy996bnus57rPuu57rOe6z7rue6znus+67nuM6PrHqQvRtc9QtZ786jnus96rvvM6LoHJzaj6x4h66UvPdd91nPdZz3XfdZz3Wc9133Wc91nRtc9SF+MrnuArOe6z3qu+6znus+MrntwYjO67hGyXvrSc91nPdd91nPdZz3XfdZz3Wc9131mdN2D9MXoukfIpoes9+ZRz3WfGV336MTWS196rvus57rPeq77rOe6z3qu+6znus96rvvM6LoH6YvRdY+Q9d486rnus57rPjO67sGJzei6R8h66UvPdZ/1XPdZz3Wf9Vz3Wc91n/Vc95nRdQ/SF6PrHiHrvXnUc91nPdd9ZnTdoxNbL33pue6znus+67nui57rvui57oue677oue7Ly9TSV2F03SNkuTePRc91X/Rc94XRdQ9ObEbXPULWS196rvui57oveq77oue6L3qu+6Lnui+MrnuQvhhd9wBZz3Vf9Fz3Rc91Xxhd9+DEZnTdI2S99KXnui96rvui57oveq77oue6L3qu+8Lougfpi9F1j5BND1nvzaOe674wuu7Ria2XvvRc90XPdV/0XPdFz3Vf9Fz3Rc91X/Rc94XRdQ/SF6PrHiHrvXnUc90XPdd9YXTdgxOb0XWPkPXSl57rvui57oue677oue6Lnuu+6LnuC6PrHqQvRtc9QtZ786jnui96rvvC6LpHJ7Ze+tJz3Rc9133Rc90XPdd90XPdFz3XfdFz3RdG1z1IX4yue4Ss9+ZRz3Vf9Fz3hdF1D05sRtc9QtZLX3qu+6Lnui96rvui57oveq77oue6L4yue5C+GF33AFnPdV/0XPdFz3VfGF334MRmdN0jZL30pee6L3qu+6Lnui96rvuq57qveq77yui6n6evyui6R8imhyz35rHque4ro+sendhy6avque6rnuu+6rnuq57rvuq57que677que4ro+sepC9G1z1ClnvzWPVc91XPdV8ZXffgxGZ03SNkvfSl57qveq77que6r3qu+6rnuq96rvvK6LoH6YvRdY+Q9d486rnuq57rvjK67tGJrZe+9Fz3Vc91X/Vc91XPdV/1XPdVz3Vf9Vz3ldF1D9IXo+seIeu9edRz3Vc9131ldN2DE5vRdY+Q9dKXnuu+6rnuq57rvuq57que677que4ro+sepC9G1z1A1nPdVz3XfdVz3VdG1z04sRld9whZL33pue6rnuu+6rnuq57rvuq57que674yuu5B+mJ03SNk00PWe/Oo57qvjK57dGLrpS89133Vc91XPdd91XPdVz3XfdVz3Vc9131ldN2D9MXoukfIem8e9Vz3Vc91Xxld9+DE1nPdV0bXPUI2PWS92Rej6x4h682+GF336P9lufTVGF33CFnue19Nz3XfGF338xO7vUwPWW721Rhd9wiZL33Zey3XL+sA2UH6Kq9U3sjhBZBLf4Xvny49/AX5zx9u0ez7h9u1ksH+OIhqd+6PB4v+rfvjIATeuj8OEuOt++MgXt66P/bsz3R/HATXW/fHQcq9dX8cROJb9+fJz/P9efLzdH889CDcuj9Pfp7vz5Of5/vz5Of5/tizP9P9efLzfH+e/Dzfnyc/z/fnyc/z/Xny83R/PDRZ3Lo/T36e78+Tn+f78+Tn+f7Ysz/T/Xny83x/nvw8358nP8/358nP8/158vN0fzx0kdy6P09+nu8PXX6G3/j10HKyG9n0kOmCK/z6q4eWk93IdPESI9MlxgqR6UIgRPbQcrL5xPbQcrIbWS99eWg52f132fSQ9dKXh5aT3ch66ctDy8luZL305aHlZPNz2UPLyW5kvfTloeVkN7LpIeulLw8tJ7uR9dKXh5aT3ch66ctDy8luZML0hZAJ0xdC1pt9eWg52Zy+PLSc7EYmTF8ImTB9IWTC9IWQ9dKXh5aT3ch66ctDy8luZL305aHlZDey3uzLQ8vJbmS92ZeHlpPN6ctDy8lmZA8tJ7uR9d48emg52Y2sl748tJzsRtZLXx5aTnYj66UvDy0nu5HlZl/dQ8vJbmS52Vf30HKyN311Dy0nu5FND1nuzWP30HKyG1kufXW+lhOMrJe++LpIMLJe+uJrDMHIcrOvztfrgZHlZl+dr30Dpi++Qg2MLPfmsfPVXkBkviYLjKyXvvj6JjCyXvria4XAyHrpi6+7ASPrzb74GhYwst7si68HAaYvvmoDjKz35pGvgAAjmx6yXvriM/9jZL30xefnx8h66YvPoo+R9WZfjK57hKw3+9Jz3XdG1z1C1nvzyOi6R8h6bx71XPed0XWPkPXSF6PrHiHrpS89133Xc913Pdd913Pdd0bXPUhfjK57gKznuu96rvuu57rvjK57cGIzuu4Rsl760nPddz3Xfddz3Xc9133Xc913Pdd9Z3Tdg/TF6LpHyKaHrPfmUc913xld9+jE1ktfeq77rue673qu+67nuu96rvuu57rveq77zui6B+mL0XWPkPXePOq57rue674zuu7Bic3oukfIeulLz3Xf9Vz3Xc913/Vc913Pdd/lXPf5xei6n6avC1nte18XstqbxwtZ7c3jhWx6yGrp60JWS18Xslr6upDV0teFrJe+5Fz3F7La7OtCVpt9Xchqs68L2eTSF6PrHiGrvXm8kNXePF7Iam8eL2S99MXoukfIeulLznV/IeulLznX/YWsN/uSc91fyHqzL0bXPUhfjK57gCznur+Q9d48yrnuL2S99MXoukfIeulLznV/IeulLznX/YWsN/uSc91fyHqzL0bXPUhfjK57hGx6yHpvHuVc9xeyXvpidN0jZL30Jee6v5D10pec6/5C1pt9ybnuL2S92Rej6x6kL0bXPULWe/Mo57rPLznX/YWsl74YXfcIWS99ybnuL2S99CXnur+Q9WZfcq77C1lv9sXougfpi9F1j5D13jzKue4vZNND1ktfjK57hKyX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83x/nvw83x979me6P09+nu8PXX6G3/h10XKyGZku5WJkuuAKv/7qouVkMzJdvMTIdIkRI9OFQIxscie2i5aTzch66ctFy8nmv8uE6Qsh66UvFy0nm5H10peLlpPNyHrpy0XLyd7nsouWk83IeunLRcvJZmS92ZeLlpO9J7aLlpPNyHrpy0XLyWZkvfTlouVkMzJh+kLIhOkLIevNvly0nOxNXy5aTvYiu2g52YxMmL4QMmH6Qsh66ctFy8lmZL305aLlZDOyXvpy0XKyGVlv9uWi5WQzst7sy0XLyd705aLlZDOy6SHrvXl00XKyGVkvfbloOdmMLJe+mouWk83IcumruWg52YwsN/tqL9NDlpt9NRctJ1vTV3PRcrIZWe7NY3PRcrIX2UXLyWZkvfTF13KCkfXSF18XCUbWS198jSEYWW721fh6PTCy3uyLr30Dpi++Qg2MLPfmsfHVXmBk00PWS198fRMYWS998bVCYGS99MXX3YCR9WZffA0LGFlv9sXXgwDTF1+1AUbWe/PIV0CAkfXePPLVBMATm8/8j5H10hefnx8j66UvPos+RtabfTG67hGy3uxLz3XfGF33AJnRdY+Q9d48MrruEbJe+mJ03SNkvfTF6LpHyHrpS8913/Rc903Pdd/0XPeN0XUP0hej6x4hmx6y3ptHPdd9Y3TdoxNbL33pue6bnuu+6bnum57rvum57pue677pue4bo+sepC9G1z1C1nvzqOe6b3qu+8bougcnNqPrHiHrpS89133Tc903Pdd903PdNz3XfdNz3TdG1z1IX4yue4Ss9+ZRz3Xf9Fz3jdF1j05svfSl57pveq77pue673qu+67nuu96rvuu57rvL1NLX53RdY+Q5d48dj3Xfddz3XdG1z04sRld9whZL33pue67nuu+67nuu57rvuu57rue674zuu5B+mJ03QNkPdd913Pddz3XfWd03YMTm9F1j5D10pee677rue67nuu+67nuu57rvuu57juj6x6kL0bXPUI2PWS9N496rvvO6LpHJ7Ze+tJz3Xc9133Xc913Pdd913Pddz3Xfddz3XdG1z1IX4yue4Ss9+ZRz3Xf9Vz3ndF1D05sRtc9QtZLX3qu+67nuu96rvuu57rveq77rue674yue5C+GF33CFnvzaOe677rue47o+sendh66UvPdd/1XPddz3Xf9Vz3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903Pdd/0XPdNz3Xf9Fz3Tc913xhd9yB9MbruEbLem0c9133Tc903Rtc9OLEZXfcIWS996bnum57rvum57pue677pue6bnuu+MbruQfpidN0DZD3XfdNz3Tc9131jdN2DE5vRdY+Q9dKXnuu+6bnum57rvum57pue677pue4bo+sepC9G1z1CNj1kvTePeq77xui6Rye2XvrSc913Pdd913Pddz3Xfddz3feX6SHLzb46o+t+nr46o+seIcu9eex6rvuu57rvjK57cGIzuu4Rsl760nPddz3Xfddz3Xc9133Xc913Pdd9Z3Tdg/TF6LpHyHJvHrue677rue47o+sendh66UvPdd/1XPddz3Xf9Vz3Xc913/Vc913Pdd8ZXfcgfTG67hGy3ptHPdd913Pdd0bXPTixGV33CFkvfem57rue677rue67nuu+67nuu57rvjO67kH6YnTdA2Q9133Xc913Pdd9Z3TdgxOb0XWPkPXSl57rvuu57rue677rue67nuu+67nuO6PrHqQvRtc9QjY9ZL03j3qu+87oukcntl760nPddz3Xfddz3Xc9133Xc913Pdd913Pdd0bXPUhfjK57hKz35lHPdd/1XPed0XUPTmxG1z1C1ktfeq77rue673qu+67nuu96rvuu57rvjK57kL4YXfcIWe/No57rvuu57juj6x6d2HrpS8913/Vc913OdV9fcq77C1lt9nUhq82+LmS12deFbGLp60JW+97Xhaz25vFCVnvzeCGrvXm8kPXSF6PrHiHrpS851/2FrJe+5Fz3F7La7OtCVpt9Xchqs68LWS99MbruAbKc6/5CVnvzeCGrvXm8kPXSF6PrHiHrpS851/2FrJe+5Fz3F7Le7EvOdX8h682+GF33IH0xuu4Rsukh6715lHPdX8h66YvRdY+Q9dKXnOv+QtZLX3Ku+wtZb/Yl57q/kPVmX4yue5C+GF33CFnvzaOc676+5Fz3F7Je+pJz3V/IerMvRtc9QtabfTG67hGy3uyL0XWP/l/WS1+MrnuErPe9LznX/YWsN/tidN0jZL3ZF6PrHiHzpS97r+X6ZR0g35K+Som/yBUwhNrbezHtFeGPlxTeay/2l8V8Q3dB6Ht893dDB0XoSAj9PiSvX+c8gE6K0KYInRWhCyH0+3e/fl1HB1lVhGZMZBCaMZHVj7/TLf0J3RgTGYRm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u5ZB37uWQd+7lqHqW731vWsZ9L1rGfS9axmavtVb37uWQd+7luGBdy17KK9b6mV2S1nfLRV9t1T13dL9q3cv47ql0Se31PXd0lB3Sw+8awlv6f7Vu9X2vqUxuaWo75aSvlvSt3p3fat317d6P/CuJbwlfat317d6D32r9wPvWsJb0rd6D32r9wPvWsJb0rd6D32r99C3ej/wriW8JXWrdzzUrd7xULd6xwfetYS3pG71joe61Ts+8K4lvCV1q3c81K3e8VC3escH3rVEtxT0rd5B3+od9K3eD7xrCW9J3+od9K3eD7xrCW9J3+od9K3eQd/q/cC7lvCW9K3eUd/qHfWt3g+8awlvSd/qHfWt3g+8awlvSd/qHfWt3knf6v3Au5bwlvSt3knf6p30rd4PvGsJb0nf6p30rd4PvGsJb0nf6p31rd5Z3+r9wLuW8Jb0rd5Z3+qd9a3eD7xrCW9J3+qd9a3eD7xriW6p6Fu9i77Vu+hbvYu6571j0bd6F32rd9G3ehd1z3vHom/1LvpW7wfetYS3pG/1rvpW76pv9X7gXUt4S/pW76pv9a76Vu+q7nnvWPWt3k3f6t3Uva0Tm77VW9+7llHfu5ZR37uWselbvfW9axn1vWsZ9b1rGbu+1Vvfu5ZR37uWsetbvfW9axn1vWsZ9b1rGbu+1Vvfu5ZR37uWUd+7lnHoW731vWsZ9b1rGYe+1Vvfu5ZR37uWUd+7lnHoW731vWuZ9L1rmfS9a5kOdat30veuZTqyvltSt3onfe9aJn3vWiZ971qmQ9/qre9dy6TvXcuk713LFPSt3vretUz63rVMQd/qre9dy6TvXcuk713LFPWt3vretUz63rVM+t61TFHf6q3vXcuk713LFPWt3vretUz63rVM+t61TEnf6q3vXcuk713LpO9dy5T0rd763rVM+t61TEnf6q3vXcuk713LpO9dy5T1rd763rVM+t61TPretUxZ3+qt713LpO9dy5T1rd763rVM+t61TPretUxF3+qt713LpO9dy6TvXctU9K3e+t61TPretUxV3+qt713LpO9dy6TvXctU9a3e+t61TPretUz63rVMVd/qre9dy6TvXcvU9K3e+t61TPretUz63rVMTd/qre9dy6TvXcuk713L1PSt3vretUz63rVMXd/qre9dy6TvXcuk713L1PWt3vretUz63rVM+t61TEPf6q3vXcuk713LNPSt3vretUz63rVM+t61TEPf6q3vXcuk713LrO9dy3yoW72zvncts753LfOhbvXO+t61zPretcz63rXMh7rVO+t71zLre9cy63vXMgd9q7e+dy2zvnctc9C3eut71zLre9cy63vXMgd9q7e+dy2zvncts753LXPUt3rre9cy63vXMkd9q7e+dy2zvncts753LXPSt3rre9cy63vXMut71zInfau3vncts753LXPSt3rre9cy63vXMut71zJnfau3vncts753LbO+dy1z1rd663vXMut71zJnfau3vncts753LbO+dy1z0bd663vXMut71zLre9cyF32rt753LbO+dy1z0bd663vXMut71zLre9cyV32rt753LbO+dy2zvnctc9W3eut71zLre9cyN32rt753LbO+dy2zvnctc9O3eut71zLre9cy63vXMjd9q7e+dy2zvnctc9e3eut71zLre9cy63vXMnd9q7e+dy2zvncts753LXPXt3rre9cy63vXMou8a1lKe/30+cf+eUt/ryKxILfWXgtaa/0dvIbXVSTW2JJeFyn5I0md/Ogo9e+Pjv7+0Thet1NEQo8rdD/KJHS95SoSq2Bt8XWR+L7GOF7X6DdcY/zn1ygyrwnW+rpIqP3rr1SRefMPXiXecpV0y1VEKlgd6fXTLYzJVcotV6m3XKXdcpV+wxZURN5IQ1tQEXnJDF8laNroisg7Y2gLKiKvgYGlW+S9LnSNcsM16h2/UiIvU+F/7P2WqwxVv1LxuONXSuQNJvBPUeSVJHSNG5YGkZeG4K9ULHf8Y4/1lqs0Xb9S/ZZfqRsOGCJv06Br3LA0pHjHP8OUbrlKVvWPXeSNlFbD3x/uoU3+89UbrtFuuEa/4RoSy0Jssf/96dhK+Lp7iLyoga8SbrlKvOUqtywOWdfikO/4YLLkestV2i1XuaU7iLw8EEd/fdySjqN+/Scv8j4Avkq45SrxlqvcskgUXYtEuaFBlBsaRLmhQZQbGoTIs+kp5uP1Tz22/PWfusjj5vgq4ZarRJGrtNc33ynFyeIg8pw3vkq+5Srllqvc8ulDveXDSZHHoOUWbZFHoFPr+fUfsPXy9T+gyFPNqdVyXaWlyVXCLVeJt1wl3XKVfMc/eZGHfuX+ybcbOkS7oUO0GzqEyDO24BoiD83G1F5LUMzhYw/Jr6uIHC9SieurxFuuIvL0QxzH9eNxfPyXuX5xZR5B/cF1yk3XqTdd54bf/n7Db3+/4bdf5KFLdI0gco3X4eG82uQa8YZrpBuukW+4hsTvezy/OXutkuen/l9XSZHnHPFVdH1nKfJIZGz1+hC8H2kSetxwlXoct1wl3HKVeMtV0n++mNYj33CNcsM16g3XaDdco99wjf++CNRw3HANkccgzzX/tVrXGL7+FoZ4y1XSLVfJt1xF5BOCnl7HpvNEUSdXqbdcpd1ylX7LVW74vY83/N7HcMM14g3XkPidRx8vVJEHF/FVZF4mPb9/ff14Oj6u8zqMV6Gp5Pg67abr9Juuc8Pvfrrhdz/d8LufbvjdT//94b+KPJOIrlFuuEa94RoSv+/o44Uq8qghvoqqdxlqvuXgn285+OdbDv4iTyXiq9xw9M83HP3zDUf/fMPRP99w9M831IByQw0oN9SAcsvBv9xy8Jd5uBBepdxylVsO/uWWg3+55eAv8uwgvIrQqNpwlOsoE8LXx6Sr0PxZfJ1403XSTde5Yb+vN+z39Yb9vt6w39f+3x9r6vjvr9GOG64RbriGSLdHhzORRwHxVUT2e7EjoMgzg/BAI/IoIL5Ku+Uq/ZaryIxti0e+tp4Y8tetR2iSJr5OuOk68abr3PAEgMhjgegaN9SCfkMtEHoUcLkN9RtqQb+hFowbaoHIo4BwMx23FAORxwHltmyRJwfhBjRuKQbjlmIwbikG44ZPCcd//ylhO44brhFuuIbMhMTPGXnvs/tIr6ukW66Sb7lKueUqMhMS23WVs1xOrqLqeeEm8vTg+SPXyzdHOj5DT9ars6+8frjV8nlLX384xfb6XTr/+P7hEF/3P2zfv8hTj0/efzB+/9H4/Sfj95+N338xfv/V+P2LPHV3tqVrEvTZaeKXz1WayPO2P7nOuOc6Ik/d/uQ6NxTqG568bTHdcI18wzXKTf/d603X+e81Ay32G67x308BbSJP28Zy9OmnUq8DTgq3XCXecpV0y1XyPb8rqdzwb6zecI0bfufTTft9uuH3Ph83XCPccA2J3/lcLulHrrV//W0UeZQWX0Xidz73+vqwKfc+u0q55Sr1lqu0W64i8XufR3idh/IYs6uMO64i8lhtOfLrKuc+VtdnuxTfA6fixyiolzysiTyFK3xLUd8tJX23lEVuKX53S3+v8t9/699uGCHayj3vArbSb7qOyKcSPfbrgdOe2vh6HZkHgn9wHZFPrXt+D4Lq57/tyXXiTdcR+RS412tDCf38ZmVynXzTdb5ZB1qr7+uM8nmdv//D+m//h9/8xo5+FfgxRgbJwvUiQojHe11I089Mz/+7PjQ9cgWHyB6vLxbPBfrje/5vfjy9P2XtOYIbr/H6L1LjxzGl5ReevvGs8IyNZ4Hnu+e9N55/8ARmPOeZ4HXjZ8ssEzxx41nhSRvPCk/eeFZ4ino8sVx5Yw5fq9t3L3FYiqC/fcII+hsijDBvcW3UcX2IP3r7+j/85mWVH/wPb/murN/yXdk3b578AEK+44Pdb14o+cHt1Ts++RJ5TwR+Itxv+XS7j3s+9RjHPZ9GfPPOCP6nM+I9H2cN/RUQrb1Df02DEexXqWG/Sg37VWrYr1JD/wdiIEI/9H9oBSPo/2AJRtD/4Q+MYH537of53bkf5nfnfpjfnfthfnfuh/nduR/2d+dgf3cO9nfnYH93DvZ352B/dw72d+dgf3cO9nfnYH93DvZ352h/d472d+dof3eO9nfnaH93jvZ352h/d472d+dof3eO9nfnZH93TvZ352R/d072d+dkf3dO9nfnZH93TvZ352R/d072d+dsf3fO9nfnbH93zvZ352x/d872d+dsf3fO9nfnbH93zvZ352J/dy72d+dif3cu9nfnYn93LvZ352J/dy72d+dif3cu9nfnan93rvZ352p/d672d+dqf3eu9nfnan93NjAaCUawvzsbGDGEIhgYAwQj2N+dDYzTgRHs784GxtLACPZ3Z/ujY7r90THd/uiY3uzvzt3+7tzt787d/u7c7e/O3f7u3O3vzt3+7tzt787d/u7c7e/Ow/7uPOzvzsP+7mx/Vli3Pyus258V1u3PCuv2Z4V1+7PCuv1ZYcP+rLBhf1bYsD8rbNifFTYO87vzsD8rbNifFTbszwob9meFDfuzwob9WWHD/qywYX9W2LA/K2zYnxU27M8KG/ZnhQ37s8KG/Vlhw/6ssGF/VtiwPyts2J8VNuzPChv2Z4UN+7PChv1ZYcP+rLBhf1bYsD8rbNifFTbszwob9meFDfuzwob9WWHD/qywYX9W2LA/K2zYnxU27M8KG/ZnhQ37s8KG/Vlhw/6ssGF/VtiwPyts2J8VNuzPChv2Z4UN+7PChv1ZYcP+rLBhf1bYsD8rbNifFTbszwob9meFDfuzwob9WWHD/qywYX9W2LA/K2zYnxU27M8KG/ZnhQ37s8KG/Vlhw/6ssGF/VtiwPyts2J8VNuzPChv2Z4UN+7PChv1ZYcP+rLBhf1bYsD8rbNifFTbszwob9meFDfuzwob9WWHD/qywYX9W2LA/K2zYnxU27M8KG/ZnhQ37s8KG/Vlhw/6ssGF/VtiwPyts2J8VNuzPChv2Z4UN+7PChv1ZYcP6rLB8HNZnhf2JYHx3/hPB+O78J4Lx3flPBOO7858IxnfnPxGM785/Ihjfnf9EML47/4lgf3e2PivsTwT7u7P1WWF/Itjfna3PCvsTwf7ubH1W2J8I+nfnlq4I6Ujox1Pv14/nCG68hh7+/nQN4+NW8guP/p3/v8QT2ytmTcf/wTP7u498/dXh42+uL5b6K4gZlgYms9lhqb+U2WGpvx3qYRnae29uE5b6a6odlnmzFGOpv7jbYan/BKGHZXqzzDOW3EcZWZb73CPHcp97xFgamHmph2V7d/U+6eoGhm/aYbnPPXIs97lHjmXeLH/Msr/3njHbe/a5R47lPvfIsdznHjmW+9zzY5bjuFiOMGO5zz1iLA1ME7bDcp975Fjuc89PWZ4Xf3X1dHw+inGx3Oeen7PMb5ZlxjJvlv/m3+WU5T73yLHc5x45lvvc83OWtV8sx4zlPvfIsdznHjGWBua022G5zz0/ZhnS68ZTKJPP1Q1MrrfDcp975FjmzVKM5T73yLHkPve0K2btx/HJ8i8e7qMMxMN9OoF4uA8cCI8Bm8R/iaen+sIz/i+eyTpee369MHj+uX/cSnzR5D5FSNPkPkdI0+Q+SUjTzJumIE3u04Q0Te7zhDRN7uPH72iOUC+aI4UJTe7TijRN7sONME0D7h5FNNN73Rw5T2jus5AkzX0WkqS5z0KSNPOm+e92oVwmNPdZSJLmPgv9guY1wOYPzTqhuc9CkjT3WegX5/TxsQuVyTndgJ5MK83xlaYBU5olmvssJElzn4Ukae6zkCTNvGkK0txnIUma3GehkftFs/RPmn/xcB9uIB7u0wrEw338+MRTx1c8BtyOj+LhPiBAPNyNf1wve9bRJg9xGvBdPoonbzwrPNwle7Q3ns8pcRce8taM8JC3ZoSHvDV/rD0jTvCQt+Y1nmDAufooHvLWjPDs1rzEs1vzEk/eeFZ4yFszwkPemhEe8taM8OzWvMRD3ZrbcXk723nnn3i+/vAor6/QRn9/ah/HX5IGtMn/JclSX/fS6ucE0+kXjO2oLx/o+efx9QvGYMDgrIfmGe6iGT51LhdN6vouTpO67f+WZnj/pod6TGjmTVOQJvVZQpwm9dFDnCb1SUWcJvXBRpwm9zlImCa3Nl2c5j4LSdLkPgvVy/zZavn6CEfgtqFjPHnjWeHhPn5APN7OE6WE68dLBz+eUnmPTk+lx88f/wvI2xFBHJC31i8OyFuRlwbkTu39S0D1Uq2dfw55Ashb3RYH5K1BiwPy1qHFAWV2QPEDUJkA8tajxQGRN2kMiLxJY0D6m/T1cMr550+T6RVBf9dFEQwIl2EE/X0RRpg3ujauj17PP/c2+R+mf/s//KYBvD9BOYGkDpKV4/p0pqT3VUZ6XaXccpX6byE0gdvLvb7W0dw/Hkx7317/t7c3BG6vHPH1BOLJsX69ve/Ug7+DMMLrKvn8xZtcJQhcJfR8NdvQz2TXj9fwuk4UuU694oTejjG5zr/9xStZ5AbPPfi6wdRmN6i/waJV0YBMC0bQ3wJhBPs9zYA4CkUwIHeCEez3NAMaIxhB/2djMEK2H8H+7mxATQMj2N+dDUhYYAT7u7MB3QiMYH93NiDWgBHs784GFBIwgv3d2YAsAUawvzsb0ALACPZ3ZwMD8GEE+7uzgVHvMIL93dnAUHMYwf7ubGB8N4xgf3c2MAYbRrC/OxsYJw0j2N+dDYxlhhHs784GxhvDCPZ3ZwNjgmEE+7uzgXG7MIL53TkaGFsLI5jfnaOB8a8wgvndOR7md+doYNQpjGB+d44GRobCCOZ352hg9CaKYGDmJYxgf3c2MN0RRrC/OxuYYwgj2N+dDUzsgxHs784GZtPBCPZ3ZwNT2GAE+7uzgXljMIL93dnA3C4Ywf7ubGD+FYxgf3c2MEMKRrC/OxuYwwQj2N+dDcwyghHs784G5gHBCPZ3ZwMzdWAE+7uz/bk00f5cmmh/Lk20P5cmZvu7c7a/O2f7u3O2vztn+7tztr87Z/u7c7a/Oxf7u3OxvzsX+7tzsb87F/u7s/1ZYdH+rLBof1ZYtD8rLNqfFRbtzwqL9meFRfuzwqL9WWHR/qywaH9WWLQ/KyzanxUW7c8Ki/ZnhUX7s8Ki/Vlh0f6ssGh/Vli0Pyss2p8VFu3PCov2Z4VF+7PCov1ZYdH+rLBof1ZYtD8rLNqfFRbtzwqL9meFRfuzwqL9WWHR/qywaH9WWLQ/KyzanxUW7c8Ki/ZnhUX7s8Ki/Vlh0f6ssGh/Vli0Pyss2p8VluzPCkv2Z4Ul+7PCkv1ZYekwvzsn+7PCkv1ZYcn+rLBkf1ZYsj8rLNmfFZbszwpL9meFJfuzwpL9WWHJ/qywZH9WWLI/KyzZnxWW7M8KS/ZnhSX7s8KS/Vlhyf6ssGR/VliyPyss2Z8VluzPCkv2Z4Ul+7PCkv1ZYcn+rLBkf1ZYsj8rLNmfFZbszwpL9meFJfuzwpL9WWHJ/qywZH9WWLI/KyzZnxWW7M8KS/ZnhSX7s8KS/Vlhyf6ssGR/VliyPyss2Z8VluzPCkv2Z4Ul+7PCkv1ZYcn+rLBkf1ZYsj8rLNmfFZbszwpL9meFJfuzwpL9WWHJ/qywZH9WWLI/KyzZnxWW7M8KS/ZnhSX7s8KS/Vlhyf6ssGR/VliyPyss2Z8VluzPCkv2Z4Ul+7PCkv1ZYcnArLCWrgjpSOjHU+/Xj+cIbrzG9opZ0/FxK3n6dx/5+qvDx99c/7I0MLTMDkv9fcUOS/3FyQ5L/Q1OD8vQ3ptPm7DMm6UYS/2d1g5L/eXaDkv9LV8Py/RmmWcs9R837LDc5x4xlgbGQdphuc89P2fZ3l29T7q6gQGZdljuc48cy7xZirHc556fs+zvvWfM9p597pFjuc89ciz3uUeO5T73/JjlOC6WI3xlmQ0M2rXDcp975Fjuc48cy33u+SnL8+Kvrp6Oz2cNLpZ5s/wxy/xmWWYs97nnX/27nLLc5x45lvvcI8dyn3t+zrL2i+WYsdznHjGWBkaY22G5zz1yLPe558csQ3rdeAolT1juc48cy7xZirHc5x45lvvcI8eS+9zTrpi1H8cny794uI8yEA/36QThMWBleBQP9xmip/rCM/4vnsk6Xnt+vRF3/rl/3Ep80eQ+RUjT5D5HSNPMm6YgTe6zhDRN7tOENE3u84Q0Te7jx+9ojlAvmiOFCU3u04owTQNSG0s091noFzTTe90cOU9o7rOQJM19FpKkmTdNQZr7LPQvd6FcJjT3WUiS5j4L/YLmNcDmD806obnPQpI091noF+f08bELlfGVpgGFmCWa+ywkSXOfhSRp7rOQJM28aQrS3GchSZrcZ6GR+0Wz9E+af/FwH24gHu7TCsTDffz4xFPHVzwGpIeP4uE+IEA83I1/XK8n1tEmjx0aEEE+iidvPCs83CV7tDeez7lmFx7y1ozwkLdmhIe8NX+sPSNO8JC3ZoDHgIz0UTzkrRnh2a15iWe35iWevPGs8JC3ZoSHvDUjPOStGeHZrXmJh7o1t+NSKbbzzj/xfP3hUV5foY3+/tQ+jr8kDfiE/0uSpb7updXPmZvTLxjbUcPfnz7/PCZfMBpQG+uheYa7aIZPAclFk7q+i9Okbvu/pRnev+mhHhOaedMUpEl9lhCnSX30EKdJfVIRp0l9sBGnyX0OEqbJLU0Xp8l9FqqXXbHVMnnogNuEjvFwn1YgnrzxrPB4O0+UEq4fLx38eErlPZ46lR4/f/wvIG9HBHFA3lq/OCBvRV4ckLdu/ktA9dJZnX8O+Ssgd65ucUDeGrQ4IG8dWhyQtxb9a0DxA1CZAMob0BoQeZPGgMibNAakv0lfj1Ocf/60RV4R9HddGEF/GwURigHHMYwwb3RtXB+9nn/ubfI/jP/2f/hNA3h/gnICSR0kK8f16UxJ76uM9LpKvuUq5d9CqAK3d35m8lpHz8Nvn9xe+7e31wVu7/wn8npm7vwL6+T2hgSEEV5XOZeUCYTvhHy/ukro+Wq2oZ/Jrh+v4XWdIHKdesUJvR1jcp1/+4sXksgNnnvwdYOpzW5Qf4NFq6IBkRaMoL8Fwgjme1oxoHaCEez3NAOKJBhB/ydvMIL+z8ZgBP2fXsEI9ndnA2oaGMH+7mxAwgIj2N+dDehGUAQDjg8Ywf7ubMBmASPY350NeBtgBPu7swFDAYxgf3c2MIsfRrC/OxuYOg8j2N+dDcxXhxHs784GJonDCPZ3ZwMzs2EE+7uzgdnTMIL93dnADGcYwf7ubGAWMoxgf3c2MFMYRrC/OxuYzQsj2N+dDcy4hRHs784GZsXCCPZ3ZwMzV2EE+7uzgdmlMIL93dnADFAYwf7ubGCWJoxgf3c2MGgSRrC/OxsYqQgj2N+dDQwPhBHs784GxuTBCPZ3ZwMD4WAE+7uzgdFnMIL93dnATDAYwf7ubGC2Foxgf3c2MKEKRrC/OxuY8gQj2N+dDUxKghHs784Gpg3BCPZ3ZwMTe2AE+7uzgak3MIL93dn+XJpify5NtT+Xph7md+d6mN+d62F+d66H+d25HuZ353qY353rYX53rof53bke9nfnYH93DvZ352B/dw72d2f7s8Kq/Vlh1f6ssGp/Vli1Pyus2p8VVu3PCqv2Z4VV+7PCqv1ZYdX+rLBqf1ZYtT8rrNqfFVbtzwqr9meFVfuzwqr9WWHV/qywan9WWLU/K6zanxVW7c8Kq/ZnhVX7s8Kq/Vlh1f6ssGp/Vli1Pyus2p8VVu3PCqv2Z4VV+7PCqv1ZYdX+rLBqf1ZYtT8rrNqfFVbtzwqr9meFVfuzwqr9WWHV/qywan9WWLU/K6zanxVW7c8Kq/ZnhVX7s8Kq/Vlh1f6ssGp/Vli1Pyus2p8VVu3PCqv2Z4VV+7PCqv1ZYdX+rLBqf1ZYtT8rrNqfFVbtzwqr9meFVfuzwqr9WWHV/qywan9WWLU/K6zanxVW7c8Kq/ZnhVX7s8Kq/Vlh1f6ssGp/Vli1Pyus2p8VVu3PCqv2Z4VV+7PCqv1ZYdX+rLBqf1ZYtT8rrNqfFdbszwpr9meFNfuzwpr9WWHtML87N/uzwpr9WWHN/qywZn9WWLM/K6zZnxXW7M8Ka/ZnhTX7s8Ka/Vlhzf6ssGZ/VlizPyus2Z8V1uzPCmv2Z4U1+7PCmv1ZYc3+rLBmf1ZYsz8rrNmfFdbszwpr9meFNfuzwpr9WWHN/qywZn9WWLM/K6zZnxXW7M8Ka/ZnhTX7s8KagVlhLV0R0pHQj6ferx/PEdx4je0Vs6bj41by9O8+8vVXh4+/ub5Y6q8JZlgamJ5mh6X+4mSHpf4Gp4dlaO/Np01Y6q+SdljmzVKMpf5ybYel/pavh2V6s8wzlvqPG3ZY7nOPHMt97hFjaWAupR6W7d3V+6SrGxiQaYflPvfIsdznHjmWebP8Mcv+3nvGbO/Z5x45lvvcI8dyn3vkWO5zz49ZjuNiOcKM5T73iLE0MPHXDst97pFjuc89P2V5XvzV1dPx+azBxXKfe37OMr9ZlhnLvFn+m3+XU5b73CPHcp975Fjuc8/PWdZ+sRwzlvvcI8dyn3vEWBqYpW6H5T73/JhlSK8bT6FMPlc3MF3eDst97pFjmTdLMZb73CPHkvvc066YtR/HJ8u/eLiPMhAP9+kE4uE+cCA8BowP/yWenuoLz/i/eCbreO359Ubc+ef+cSvxRZP7FCFNk/scIU2T+yQhTTNvmoI0uU8T0jS5zxPSNLmPH7+jOUK9aI4UJjS5TyvSNLkPN8I0Dfh1FNFM73Vz5Dyhuc9CkjT3WUiS5j4LSdLMm+a/24VymdDcZyFJmvss9Aua1wCbPzTrhOY+C0nS3GehX5zTx8cuVMaE5j4LydHsBmxmlmjus5AkzX0WkqS5z0KSNPOmKUiT+yw0cr9olv5J8y8e7sMNxMN9WoF4uI8fn3jqmODhPk8gPAaEio/i4W7843o9sY52TPBwV3iIh7uTQzyZG0974/mca3bhIW/NCA95a0Z4yFvzx9oz4gQPeWtGeMhbM8BjQHT6KJ7dmpd4dmte4tmteYknbzwrPOStGeEhb80Iz27NSzzUrbkdl0qxnXf+iefrD4/y+gpt9Pen9nG8SFIX7Fbq615a/Zy5Of2CsR01/P3p889j8gWjAbWxHppnuItm+BSQXDSp67s4Teq2/1ua4f2bHuoxoUl9OBCnmTdNQZrURw9xmtQnFXGa1AcbcZrc5yBpmvssJEiTW5ve6mVXbLVMHjrgNqFjPNynFYiH+/gB8WRneEoJ14+XDn48pfIeT51Kj58//heQtyOCOCBvrV8ckLciLw7IWzf/JaB66azOP4c8AeStbksDcifgFgfkrUOLA/LWon8NKH4AKhNA3nq0OKC8Aa0BkTdpDEh/k74epzj//GmLvCLo77owgv42CiPo74sowjdq4Tauj17PP/c2+R+Gf/s//KYBvD9BOYGkDpKV4/p0pqT3VUZ6XSXdcpX8byEUgdvLZ8q/P537x6NU79ur//b2msDtlSO+npk7OdbJ7XUJCCO8rpLPX7zJVYbAVcL55cH14+cx6H26ruHvdb6T1f3yOvWKE86/ckyu829/8VoUucFzD75uMLXZDepvsGhVNCDSghH0t0AYwX5PM6B2ghHs9zQDiiQUwYDGCEbQ/9kYjKD/0ysYwf7ubEBNAyPY350NSFhgBPu7swHdCIxgf3c2INaAEezvzgYUEjCC/d3ZgCwBRrC/OxvQAsAI9ndnAwPwYQTzu/MwMOodRjC/Ow8DQ81hBPO78zjM787DwMxsGMH87jwMzJ6GEczvzsPADGcUwcCcZRjB/u5sYF4xjGB/dzYw9xdGsL87G5ifCyPY350NzKGFEezvzgbmucII9ndnA3NRYQT7u7OB+aIwgv3d2cCcThjB/u5sYN4ljGB/dzYw3RFGsL87G5hjCCPY350NTOyDEezvzgZm08EI9ndnA1PYYAT7u7OBeWMwgv3d2cDcLhjB/u5sYP4VjGB/dzYwQwpGsL87G5jDBCPY350NzDKCEezvzgbmAcEI9ndnAzN1YAT7u7P9uTTD/lyaYX8uzbA/l2ZU+7tztb87V/u7c7W/O1f7u3O1vztX+7tztb87V/u7c7W/Ozf7u3Ozvzs3+7uz/Vlhw/6ssGF/VtiwPyts2J8VNuzPChv2Z4UN+7PChv1ZYcP+rLBhf1bYsD8rbNifFTbszwob9meFDfuzwob9WWHD/qywYX9W2LA/K2zYnxU27M8KG/ZnhQ37s8KG/Vlhw/6ssGF+Vlg4zM8KOyNY353PCNZ35zOC9d35jGB9dz4jWN+dzwjWd+czgvXd+YxgfXc+I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPY353Nzwo7I9jfnc3PCjsj2N+dzc8KOyPo351buiKkI6EfT71fP54juPEa2ytmTcfHreTp333k668OH39zfbHUXxPssNTfV6ywDAbGuNlhqb/B6WEZ2nvzaROW+qukHZb6O60dlnmzFGOpv+XrYZneLPOMpf7jhh2W+9wjx3Kfe+RY7nPPz1m2d1fvk65uYECmHZb73CPHcp975Fjuc8/PWfb33jMme4+BIap2WO5zjxzLfe6RY7nPPT9mOY6L5QgzlvvcI8dyn3vEWBoYPWyH5T73/JTlefFXV0/H57MGF8t97vk5y/xmWWYs97nnX/27nLLMm6UYy33ukWO5zz0/Z1n7xXLMWO5zjxzLfe6RY7nPPWIsDQx1V8MypNeNp1Amn6sbmC5vh+U+98ix3OceOZZ5sxRjyX3uaVfM2o/jk+VfPNxHGYiH+3QC8XAfOCAe7jNET/WFZ/xfPJN1vPb8eiPu/HP/uJX4l6YB+YQlmtznCGma3CcJaZrcZwlpmnnTFKTJfZ6Qpsl9/PgdzRHqRXOkMKHJfVqRpsl9uJGmuc9Cv6CZ3uvmyPkrTQOqH0s091lIkuY+C0nS3Gehf7kL5TKhmTdNQZr7LPQLmtcAmz8064TmPgtJ0txnoV+c08fHLlTGhOY+C0nS3GchQZoGxGqWaO6zkCTNfRaSpLnPQpI0MzXNkftFs/RPmn/xcB9uIB7u0wrEw338+MRTxwQP93kC4uE+ICA8BmSN/yme6/XEOtrksUMDIshH8XB3coiHu2SP9sbzOdfswpM3nhUe8taM8JC35o+1Z8QJHvLWjPCQt2aEh7w1AzwGJKqP4tmteYlnt+YlHvLWjPDkjWeFh7w1Izy7NS/xULfmdlwqxXbe+Seerz88yusrtNHfn9rH8SJJXbBbqa97afVz5ub0C8Z21PD3p88/j8kXjAbUxnponuEumuFTQPKiacCybIkmddv/Lc3w/k0P9ZjQpD4ciNOkPkuI08ybpiBN6pOKOE3qg404Te5zkDTNfRaSpMl9FqqXXbHV8vWhg8htQsd4uE8rEA/38QPi8XaeKCVcP146+PGUyns8dSo9fv74X0B5A1oD8tb6xQF5K/LigLx1818CqpfO6vxzyBNA3uq2OCBvDVoakDurtjggby3614DiB6AyAeStR4sDIm/SGFDegNaA9Dfp63GK88+ftsgrgv6uCyPob6Mwgv6+CCPMG10b10ev5597+/o//Maj+4P/4TcN4P0JygkkdZCsHNenMyW9rzLS6yrxlqukfwshC9xe7vW1jub+8SjV+/bKv729KnB75YivZ+ZOjnVye00Cwgivq+TzF29ylS5wldDz1WxDP5NdP17D6zpD5Dr1ihN6O8bX66R/+4uXgsgNnnvwdYOpzW5Qf4NFq6IBkRaMoL8Fwgj2e5oBtROMYL+nGVAkwQj6P3lDEQy4g2AE/Z9ewQj2d2cDahoYwf7ubEDCAiPY350N6EZgBPu7swGxBopgwGYBI9jfnQ14G2AE+7uzAUMBjGB/dzYwix9GsL87G5g6DyPY350NzFeHEezvzgYmicMI9ndnAzOzYQT7u7OB2dMwgv3d2cAMZxjB/u5sYBYyjGB/dzYwUxhGsL87G5jNCyPY350NzLiFEezvzgZmxcII9ndnAzNXYQT7u7OB2aUwgv3d2cAMUBjB/u5sYJYmjGB/dzYwaBJGsL87GxipCCPY350NDA+EEezvzgbG5MEI9ndnAwPhYAT7u7OB0WcwgvndORmYCQYjmN+dk4HZWjCC+d05HeZ352RghhSMYH53TgbmMMEI5nfnZGCWEYpgYNoQjGB/dzYwsQdGsL87G5h6AyPY353tz6VJ9ufSJPtzaVKwvztH+7tztL87R/u7c7S/O0f7u3O0vztH+7tztL87R/u7c7S/Oyf7u3OyvzvbnxWW7M8KS/ZnhSX7s8KS/Vlhyf6ssGR/VliyPyss2Z8VluzPCkv2Z4Ul+7PCkv1ZYcn+rLBkf1ZYsj8rLNmfFZbszwpL9meFJfuzwpL9WWHJ/qywZH9WWLI/KyzZnxWW7M8KS/ZnhSX7s8KS/Vlhyf6ssGR/VliyPyss2Z8VluzPCkv2Z4Ul+7PCkv1ZYcn+rLBkf1ZYsj8rLNmfFZbszwpL9meFJfuzwpL9WWHJ/qywZH9WWLI/KyzZnxWW7M8KS/ZnhSX7s8KS/Vlhyf6ssGR/VliyPyss2Z8VluzPCkv2Z4Ul+7PCkv1ZYcn+rLBkf1ZYsj8rLNmfFZbszwpL9meFJfuzwrL9WWHZ/qywbH9WWLY/Kywf5nfnbH9WWLY/KyzbnxWW7c8Ky/ZnhWX7s8Ky/Vlh2f6ssGx/Vli2Pyss258Vlu3PCsv2Z4Vl+7PCsv1ZYdn+rLBsf1ZYtj8rLNufFZbtzwrL9meFZfuzwrL9WWHZ/qywbH9WWLY/KyzbnxWW7c8Ky/ZnhWX7s8Ky/Vlh2f6ssGx/Vli2Pyss258Vlu3PCsv2Z4Vl+7PCsv1ZYdn+rLBsf1ZYtj8rLNufFZbtzwrL9meFZfuzwrL9WWHZ/qywbH9WWLY/KyzbnxWWDcwKa+mKkI6Efjz1fv34+e3J+sdrbK+YNR0ft5Knf/eRr786fPzN9cVSf02ww1J/X7HDUn9xMsPSwDw5PSxDe28+bcJSf5W0w1J/p7XDUn+5tsMyb5Y/ZpneLPOMpf7jhh2W+9wjx3Kfe+RY7nPPz1m2d1fvs66+zz1iLA1M6rTDcp975Fjuc8/PWfb33jMme4+BIap2WObNUozlPvfIsdznnh+zHMfFcoQZy33ukWO5zz1yLPe5R4ylgRnIWlieF3919XR8Pmtwsdznnp+zzG+WZcZyn3v+1b/LKct97pFjmTdLMZb73PNzlrVfLMeM5T73yLHc5x45lvvcI8dyn3t+zDKk142nUCafqxuYLm+H5T73yLHc5x45lvvcI8cyU7NsV8zaj+OT5V883EcZiIf7dALxcB84IB7uM0RP9YVn/F88k3W89vx6I+78c/+4lfiiyX2KkKVZDHgwLNHkPklI0+Q+S0jT5D5NSNPMm6YgTe7jx+9ojlAvmiOFCU3u04o0Te7DjTTNfRb6Bc30XjdHzhOa+ywkSNOAdcgSzX0WkqS5z0L/chfKZUJzn4UkaeZN8+c0rwE2f2jWCc19FpKkuc9Cvzinj49dqIwJzX0WkqS5z0KSNPdZSJCmAcebJZr7LCRJc5+FJGlyn4VG7hfN0j9p/sWTN54VHu7TCsTDffz4xFPHBA/3eQLi4T4gQDzcjX9cryfW0b4+dlgMiCAfxcPdySEe7pI92hvP51yzCw95a0Z48sazwkPemj/WnhEneMhbM8JD3poRHvLWjPDs1rzCY0DQ+iie3ZqXeMhbM8JD3poRnrzxrPDs1rzEQ92a23GpFNt55594vv7wKK+v0EZ/f2ofx4skdcFupb7updXPmZvTLxjbUcPfnz7/PCZfMBpQG+uheYa7aIZPAclFk7q+S9M0IHxWRDO8f9NDPSY0qQ8H4jSpzxLiNKmPHuI086YpSJP6YCNOk/scJE1zn4UkaXKfheplV2y1TB464DahQzzccnOMh/v4AfF4O0+c583rx0sHP55SeY+nTqXHzx//C8jbEUEcUN6A1oC8FXlxQN66+S8B1Utndf455Akgb3VbHJC3Bi0OyFuHlgbkTpX9a0DxA1CZAPLWo8UBkTdpDIi8SWNAeQYoHuGtuzxCOuQAxSMe5fqr4+d3odPEI1wRzj+nvv7xXzqQj7cz/nOBri84ZcP5Hk7dcL6H0zac7+F0Zjjh7V2PbQJnbDjfwplLljecf+CEDed7OJEZTnrDyTM4acP5Hk7ecL6HQ92QERzqhtzeJbBPSmCnbsgIDnVDRnCoGzKAM6gbcn8vyGOyIA/qhozgUDdkBIe6ISM4mRjOeIccYQaHuSFDOMwNGcJhbsgQDnFDPr8mvGQDRw4TOMQN+STyhlO+wqkHcUP+P/9ypnCIGzKGQ9yQMRzihnz+wPW46TFmcPKG8z0c4oaM4RA3ZAyHuCGnkF7PmaVQ8gQOc0OGcJgbMoITmBsyhMPckCEcZw25XY8J1358fZOxBmelF+bNZHmdVVOY11nb/KWhKr8NVf3z2fr4wuOsb0rjcdY4/x/sxClM8DjrnMJ4orPWKY3HWe+UVX/X6Kx5SuNxVlRl5dw1Ouu10nic1WBZcWmN3K0Z4uFuzRAPdWvGeKhbM8STqFszxkPdmjEeZ60ZWJBrclaDYd5MltdZUQXi4ZqcNU+Y11mVhHmddUPg+q3JWdlDebOz9gbzOqtjQK9bs7d+hfJ661cob/b7+zsxu9XsrV+hvN76FcrrrV+hvI771TSv4341y1sc96tpXm/9CuX11q9QXm/9CuXNZHl99StBFW4tvqqYsNu2Fl/NTVivWouvoieOx1cvFJal1eqrRorj8dU6xfH4KqnieHx1WnE8eeNZ4XHWmKXxULdmjMdZawbmxVqd1WCY11mvRXmbs6IK86pvnuk9l36kBu4EewtrU18mxROr74fiiTNdYvUt7peJkfuv6rcniSdW37XEE6tvW+KJ1fetXyeOH4nL18T6jUTiib11LpzYW+fCidV3rnh9sxhHPsCdjHq9Hz1q+njBtb3yZrK86vuWcF71bUs4r/qu9bu85XpPYpzNeZL37qZV0uv2z1u7fnLU6c0vn2vgttmsTaGV22aD4FDbbBAcapsNgkNts1mbQiu1zQbCofY9IjjUvkcEh9r3uDaFVmabDYZD3ZDXcBqzzQbDoW7Ia1NoY7bZYDjUDRnByRvO93CoG/LaFNqYbTYYDnVDRnCoGzKCw9yQgSm0MdtsMBzmhgzhMDdkCIfa97gW8DZvnhxJAW/zJtWR1Kg2bwYeWTjMvkcIh9qIvjaFNm/uHVE43sw7snCojegIDrMRHcgwmzfnjiycvOF8D4e5IUM4zA0ZwnHWkIGwtHmT58C8znosyutNbwPzcvtqgGG2efPVSOPhtjwChWrzZsORxkNtecR4qC2PyDDbvKl5pPFwu9GBYbZ5E/8I4/HmCZLVGDZvWiFpPNytGeKhbs0YT954Vni2G32JZ7vRl3gcCy0ngtbmTriE8noTLoG87oRLa0FrcydcQnkdC8OneR0LlyaC1uZZuDTN61hoOc3rTWi5FrQ2Z1oknNdbv0J5uYSWzZmJCOflElo2Z64gnJdLaNmc2XxwXi5heHPm28F5uYThzZlAB+cl61feBDpyAt6m37XzpIC36RfzPGmYbfotPs/iydvT9xfPxNPX9PuBnsWzLY9LPNxudIiH240O8Ww3+gqPfgHSs3i2G32Jx1lrBsLSpl+sJJw3k+V1VlRhXm8aS6QqbfrVSuKJvWkscWJvGkuYWL9oSVhV2vTbk8QT+9NYosTe1OE4cSZTlTb9RiLxxP7U4SixP3U4Sqy+c4kKS5t+x49o3q5f2yOcV33bEs6rvmuJCnj77b4cMQFvP/I2hf75q2em0M5ts0FwqG02CA61zQbBobbZrE2hndpmg+BQ22wgHGrfI4JD7Xtcm0I7s80Gw8kbzvdwqBsygkPdkNem0M5ss8FwqBsygkPdkAEcZpsNMoV2ZpsNhkPdkBEc6oaM4ORtCv3nr57BYW7IEA5zQ4ZwmBsyhEPte1wLeLs3T46kgLd7k+pIalS7NwOPLBxm3yOEQ21EX5tCuzf3jiwcaiM6gkNtREdwmI3oQIbZvTl3ZOEwN2QEx5tvRxYOc0OGcJw1ZCAs7d7kOTBvJsvrrJrCvNy+GmCY7d58NdJ4uC2PQKHavdlwhPF4k+dI46G2PCLDbPem5pHGw+1GB4bZ7k38I41nWx5feCYaw+5NKySNh7s1QzzUrRnjoW7NEI83JZI0nu1GX+JxLLScCFq7O+ESypvJ8noTLq0Frd2dcAnldSwMn+Z1LFyaCFq7Z+HSLK8z4RLO601ouRa0dmdaJJzXW79CeTOVIK47MxHhvFxCy+7MFYTzcgktuzObD8zrTM+D83IJw7szgQ7OyyUM784EOjivM4GOnIC363ftPCng7frFPE8aZrt+i8+zeLbl8YVn4unr+v1Az+LZlsclHm43OsTD7UaHePLGs8Kz3ehLPNuNvsTjrDUDYWnXL1YSzuus14K8Q79YSTivN40lUpUO/Wol8cTeNJY4caZL7E9j2a7EM1Xp0G9PEk/sT2OJEntTh+PE3tThSFU69BuJxBP7U4ejxP7U4Six+s4lKiwd+h0/wnnV9y3hvOrblnBe9V1LVMA7bvfliAl4B7fNZm0KHdw2GwSH2maD4FDbbBAcapvN2hQ6qG02EA617xHBofY9IjjUvse1KXQw22wwHOqGDOAw22wwHOqGvDaFDmabDYZD3ZARnLzhfA+HuiGvTaGD2WaD4VA3ZASHuiEjOMwNGZhCB7PNBsNhbsgQDnNDhnCofY9rAe/w5smRFPAOb1IdSY3q8GbgkYXD7HuEcKiN6GtT6PDm3hGF4828IwuH2oiO4DAb0YEMc3hz7sjCyRvO93CYGzKEw9yQIRxnDRkIS4c3eQ7M66zHorze9DYwL7evBhhmhzdfjTQebssjUKgObzYcaTzUlkeMh9ryiAyzw5uaRxoPtxsdGGaHN/GPMB5vniBZjeHwphWSxsPdmiEe6taM8eSNZ4Vnu9GXeLYbfYnHsdByImgd7oRLKK834RLI6064tBa0DnfCJZTXsTB8mtexcGkiaB2ehUvTvI6FltO83oSWa0HrcKZFwnm99SuUl0toOZyZiHBeLqHlcOYKwnm5hJbDmc0H5+UShg9nvh2cl0sYPpwJdHBeqn4VD28CHTEB74mG2vIIBLwnHm7L49owe+LhtjxCPHl7+v7i+erpO/Fsy+MSz7Y8LvFwu9EhHm43OsSz3egrPPoFSM/i2W70JR5nrXktLP2ThSxvJsvrrKjCvN40lkBVeqbxprHEib1pLHFibxpLmFi/aElWVXpe0p/GEiX2p7FEib2pw3HizKUqPS/pTx2OEvtTh6PE/tThKLH6ziUpLD0vqL5xyebVr+0Rzqu+bQnnVd+1JAW8Z967m5aUgPe89bxNoX/+6okp9IRDbbNBcKhtNggOtc0GwaG22SxNoSccat8jgENts4FwqH2PCA6173FpCj3hUPseEZy84XwPh7ohIzjUDXlpCj3hUDdkBIe6ISM41A0ZwGG22QBT6Hmf1A0ZwaFuyAgOdUNGcPI2hf7zV8/gMDdkCIe5IUM4zA0ZwqH2PS4FvOd9UvselwLeeHiT6ghqVE841L5HBIfZ9wjhUBvRl6bQE07ecL6HQ21ER3CojegIDrMRfS3DPOEwN2QIh7khIzjefDuycJgbMoTjrCGvhaXnzTkrvTBvJsvrrJrCvNy+mrVh9sxCbXnEeLgtj2uF6pmF2/KI8HiT50jjobY8AsPsiYfa8ojxcLvR14bZE0/eeFZ4tuXxhadMhh970wpJ4+FuzRAPdWvGeKhbM8TjTYkkjWe70Zd4HAstvwpaz7zehEsobybL6024tBS0nnm9CZdQXsfC8Glex8KlNvn+wbNwaZI3OBMu4bzehJZLQeuZ11u/Qnm99SuUN1MJ4oIzExHOSyW0PPNSCS3PvFRCyzMvl9AyONPz4LxUwvAzL5Uw/MxLJQw/82ayvM4EOnIC3qDftfOkgDfoF/M8aZgN+i0+z+LZlscXnomnL+j3Az2LZ1sel3i43egQD7cbHeLJG88Kz3ajL/FsN/oSj7PWDISlQb9YSTivs16L8uoXKwnn9aaxRKrSoF+tJJ7Ym8YSJ850if1pLNuVeKYqDfrtSeKJ/WksUWJv6nCc2Js6HKlKg34jkXhif+pwlNifOhwlVt+5RIWlQb/jRziv+r4lnFd92xLOq75riQp4w+2+HDEBb+C22axNoYHbZoPgUNtsEBxqmw2CQ22zWZtCA7XNBsKh9j0iONS+RwSH2ve4NoUGZpsNhkPdkAEcZpsNhkPdkNem0MBss8FwqBsygpM3nO/hUDfktSk0MNtsMBzqhozgUDdkBIe5IQNTaGC22WA4zA0ZwmFuyBAOte9xLeAN3jw5kgLe4E2qI6lRDd4MPLJwmH2PEA61EX1tCg3e3DuicLyZd2ThUBvRERxmIzqQYQZvzh1ZOHnD+R4Oc0OGcJgbMoTjrCEDYWnwJs+BeZ31WJTXm94G5uX21QDDbPDmq5HGw215BArV4M2GI42H2vKI8VBbHpFhNnhT80jj4XajA8Ns8Cb+kcUTvXmCZDWG0ZtWSBoPd2uGeKhbM8aTN54Vnu1GX+LZbvQlHsdCy4mgNboTLqG83oRLIK874dJa0BrdCZdQXsfC8Glex8KliaA1ehYuTfM6FlpO83oTWq4FrdGZFgnn9davUF4uoWV0ZiLCebmEltGZKwjn5RJaRmc2H5yXSxgenfl2cF4uYXh0JtDBecn6lTeBjpyAN+p37Twp4I36xTxPGmajfovPs3jy9vT9xTPx9EX9fqBn8WzL4xIPtxsd4uF2o0M8242+wqNfgPQsnu1GX+Jx1pqBsDTqFysJ581keZ0VVZjXm8YSqUqjfrWSeGJvGkuc2JvGEibWL1oSVpVG/fYk8cT+NJYosTd1OE6cyVSlUb+RSDyxP3U4SuxPHY4Sq+9cosLSqN/xI5tXv7ZHOK/6tiWcV33XEhXwxtt9OWIC3shts1mbQiO3zQbBobbZIDjUNhsEh9pmszaFRmqbDYJDbbOBcKh9jwgOte9xbQqNzDYbDCdvON/DoW7ICA51Q16bQiOzzQbDoW7ICA51QwZwmG02yBQamW02GA51Q0ZwqBsygpO3KfSfv3oGh7khQzjMDRnCYW7IEA6173Et4I3ePDmSAt7oTaojqVGN3gw8snCYfY8QDrURfW0Kjd7cO7JwqI3oCA61ER3BYTaiAxlm9ObckYXD3JABnOTNtyMLh7khQzjOGjIQliZv8hyYN5PldVZNYV5uXw0wzCZvvhppPNyWR6BQTd5sOMJ4vMlzpPFQWx6RYTZ5U/NI4+F2owPDbPIm/pHGsy2PLzwTjWHyphWSxsPdmiEe6taM8VC3ZojHmxJJGs92oy/xOBZaTgStyZ1wCeXNZHm9CZfWgtbkTriE8joWhk/zOhYuTQStybNwaZbXmXAJ5/UmtFwLWpMzLRLO661fobyZShCXnJmIcF4uoWVy5grCebmElsmZzQfmdabnwXm5hOHJmUAH5+UShidnAh2c15lAR07Am/S7dp4U8Cb9Yp4nDbNJv8XnWTzb8vjCM/H0Jf1+oGfxbMvjEg+3Gx3i4XajQzx541nh2W70JZ7tRl/icdaagbA06RcrCed11mtRXv1iJeG83jSWSFWa9KuVxBN701jixJkusT+NZbsSz1SlSb89STyxP40lSuxNHY4Te1OHI1Vp0m8kEk/sTx2OEvtTh6PE6juXqLA06Xf8COdV37eE86pvW8J51XctUQFvut2XIybgTdw2m7UpNHHbbBAcapsNgkNts0FwqG02a1NoorbZQDjUvkcEh9r3iOBQ+x7XptDEbLPBcKgbMoDDbLPBcKgb8toUmphtNhgOdUNGcPKG8z0c6oa8NoUmZpsNhkPdkBEc6oaM4DA3ZGAKzcw2GwyHuSFDOMwNGcKh9j2uBbz5yFvA+z84ZQaH2veYABxq3yOCw+x7hHCojehrU2j25t4RhePNvCMLh9qIjuAwG9GBDDN7c+7IwskbzvdwmBsyhMPckCEcZw0ZCEuzN3kOzOusx6K83vQ2MC+3rwYYZrM3X400Hm7LI1CoZm82HGk81JZHjIfa8ogMs9mbmkcaD7cbHRhmszfxjzAeb54gWY1h9qYVksbD3ZohHurWjPHkjWeFZ7vRl3i2G32Jx7HQciJoze6ESyivN+ESyOtOuLQWtGZ3wiWU17EwfJrXsXBpImjNnoVL07yOhZbTvN6ElmtBa3amRcJ5vfUrlJdLaJmdmYhwXi6hZXbmCsJ5uYSW2ZnNB+flEoZnZ74dnJdLGJ6dCXRwXrJ+5U2gIyfgzfpdO08KeLN+Mc+Thtms3+LzLJ68PX1/8Uw8fVm/H+hZPNvyuMTD7UaHeLjd6BDPdqOv8OgXID2LZ7vRl3ictWYgLM36xUrCeTNZXmdFFeb1prFEqtKsX60kntibxhIn9qaxhIn1i5aEVaVZvz1JPLE/jSVK7E0djhNnMlVp1m8kEk/sTx2OEvtTh6PE6juXqLA063f8yObVr+0Rzqu+bQnnVd+1RAW8+XZfjpiAN3PbbNam0Mxts0FwqG02CA61zQbBobbZrE2hmdpmA+AUapsNhEPte0RwqH2Pa1NoYbbZYDh5w/keDnVDRnCoG/LaFFqYbTYYDnVDRnCoGzKAw2yzQabQwmyzwXCoGzKCQ92QEZy8TaH//NUzOMwNGcJhbsgQDnNDhnCofY9rAW/x5smRFPAWb1IdSY1q8WbgkYXD7HuEcKiN6GtTaPHm3pGFQ21ER3CojegIDrMRHcgwizfnjiwc5oaM4Hjz7cjCYW7IEI6zhgyEpcWbPAfmzWR5nVVTmJfbVwMMs8Wbr0YaD7flEShUizcbjjAeb/IcaTzUlkdkmC3e1DzSeLjd6MAwW7yJf6TxbMvjC89EY1i8aYWk8XC3ZoiHujVjPNStGeLxpkSSxrPd6Es8joWWE0FrcSdcQnkzWV5vwqW1oLW4Ey6hvI6F4dO8joVLE0Fr8SxcmuV1JlzCeb0JLdeC1uJMi4TzeutXKG+mEsQVZyYinJdLaFmcuYJwXi6hZXFm84F5nel5cF4uYXhxJtDBebmE4cWZQAfndSbQkRPwFv2unScFvEW/mOdJw2zRb/F5Fs+2PL7wTDx9Rb8f6Fk82/K4xMPtRod4uN3oEE/eeFZ4tht9iWe70Zd4nLVmICwt+sVKwnmd9VqUV79YSTivN40lUpUW/Wol8cTeNJY4caZL7E9j2a7EM1Vp0W9PEk/sT2OJEntTh+PE3tThSFVa9RuJxBP7U4ejxP7U4Six+s4lKiytRybLq75vCedV37aE86rvWqIC3nq7L0dMwFu5bTZrU2jlttkgONQ2GwSH2maD4FDbbNam0Epts4FwqH2PCA617xHBofY9rk2hldlmg+FQN2QAh9lmg+FQN+S1KbQy22wwHOqGjODkDed7ONQNeW0Krcw2GwyHuiEjONQNGcFhbsjAFFqZbTYYDnNDhnCYGzKEQ+17XAt4qzdPjqSAt3qT6khqVKs3A48sHGbfI4RDbURfm0KrN/eOKBxv5h1ZONRGdASH2YgOZJjVm3NHFk7ecL6Hw9yQIRzmhgzhOGvIQFhavclzYF5nPRbl9aa3gXm5fTXAMFu9+Wqk8XBbHoFCtXqz4UjjobY8YjzUlkdkmK3e1DzSeLjd6MAwW72Jf4TxePMEyWoMqzetkDQe7tYM8VC3ZownbzwrPNuNvsSz3ehLPI6FlhNBa3UnXEJ5vQmXQF53wqW1oLW6Ey6hvI6F4dO8joVLE0Fr9SxcmuZ1LLSc5vUmtFwLWqszLRLO661fobxcQsvqzESE83IJLaszVxDOyyW0rM5sPjgvlzC8OvPt4LxcwvDqTKCD85L1K28CHTkBb9Xv2nlSwFv1i3meNMxW/RafZ/Hk7en7i2fi6av6/UDP4tmWxyUebjc6xMPtRod4tht9gafpFyA9i2e70Zd4nLVmICxt+sVKwnkzWV5nRRXm9aaxRKrSpl+tJJ7Ym8YSJ/amsYSJ9YuWhFWlTb89STyxP40lSuxNHY4TZzJVadNvJBJP7E8djhL7U4ejxOo7l6iwtOl3/Mjm1a/tEc6rvm0J51XftUQFvO12X46YgLdx22zWptDGbbNBcKhtNggOtc0GwaG22axNoY3aZoPgUNtsIBxq3yOCQ+17XJtCG7PNBsPJG873cKgbMoJD3ZDXptDGbLPBcKgbMoJD3ZABHGabDTKFNmabDYZD3ZARHOqGjODkbQr956+ewWFuyBAOc0OGcJgbMoRD7XtcC3ibN0+OpIC3eZPqSGpUmzcDjywcZt8jhENtRF+bQps3944sHGojOoJDbURHcJiN6ECG2bw5d2ThMDdkBMebb0cWDnNDhnCcNWQgLG3e5DkwbybL66yawrzcvhpgmG3efDXSeLgtj0Ch2rzZcITxeJPnSOOhtjwiw2zzpuaRxsPtRgeG2eZN/CONZ1seX3gmGsPmTSskjYe7NUM81K0Z46FuzRCPNyWSNJ7tRl/icSy0nAhamzvhEsqbyfJ6Ey6tBa3NnXAJ5XUsDJ/mdSxcmgham2fh0iyvM+ESzutNaLkWtDZnWiSc11u/QnkzlSCuOTMR4bxcQsvmzBWE83IJLZszmw/K253peXBeLmF4dybQwXm5hOH9yGR5nQl05AS8Xb9r50kBb9cv5nnSMNv1W3yexbMtjy88E09f1+8HehbPtjwu8XC70SEebjc6xJM3nhWe7UZf4tlu9CUeZ60ZCEu7frGScF5nvRbl1S9WEs7rTWOJVKVdv1pJPLE3jSVOnOkS+9NYtivxTFXa9duTxBP701iixN7U4TixN3U4UpV2/UYi8cT+1OEosT91OEqsvnOJCku7fsePcF71fUs4r/q2JZxXfdcSFfD22305YgLezm2zWZtCO7fNBsGhttkgONQ2GwSH2mazNoV2apsNhEPte0RwqH2PCA6173FtCu3MNhsMh7ohAzjMNhsMh7ohr02hndlmg+FQN2QEJ28438OhbshrU2hnttlgONQNGcGhbsgIDnNDBqbQzmyzwXCYGzKEw9yQIRxq3+NawNu9eXIkBbzdm1RHUqPavRl4ZOEw+x4hHGoj+toU2r25d0TheDPvyMKhNqIjOMxGdCDD7N6cO7Jw8obzPRzmhgzhMDdkCMdZQwbC0u5NngPzOuuxKK83vQ3My+2rAYbZ7s1XI42H2/IIFKrdmw1HGg+15RHjobY8IsNs96bmkcbD7UYHhtnuTfwjjMebJ0hWY9i9aYWk8XC3ZoiHujVjPHnjWeHZbvQlnu1GX+JxLLScCFq7O+ESyutNuLTOO9wJl9aC1uFOuITyOhaGT/M6Fi5NBK3nQZQsr2Oh5TSvN6HlWtA6nGmRcF5v/Qrl5RJaDmcmIpyXS2g5nLmCcF4uoeVwZvPBebmE4cOZbwfn5RKGD2cCHZyXrF95E+jICXiHftfOkwLeoV/M86Rhdui3+DyLJ29P3188E0/f0O8HehbPtjwu8XC70SEebjc6xLPd6Cs8+gVIz+LZbvQlHmetGQhLh36xknDeTJbXWVGFeb1pLJGqdOhXK4kn9qaxxIm9aSxhYv2iJWFV6dBvTxJP7E9jiRJ7U4fjxJlMVTr0G4nEE/tTh6PE/tThKLH6ziUqLB36HT+yefVre4Tzqm9bwnnVdy1RAe+43ZcjJuAd3DabtSl0cNtsEBxqmw2CQ22zQXCobTZrU+igttkgONQ2GwiH2veI4FD7Htem0MFss8Fw8obzPRzqhozgUDfktSl0MNtsMBzqhozgUDdkAIfZZoNMoYPZZoPhUDdkBIe6ISM4eZtC//mrZ3CYGzKEw9yQIRzmhgzhUPse1wLe4c2TIyngHd6kOpIa1eHNwCMLh9n3COFQG9HXptDhzb0jC4faiI7gUBvRERxmIzqQYQ5vzh1ZOMwNGcHx5tuRhcPckCEcZw0ZCEuHN3kOzJvJ8jqrpjAvt68GGGaHN1+NNB5uyyNQqA5vNhxRPOnwJs+RxkNteQSG2RMPteUR4+F2o68NsyeevPGs8GzL4wvPV43hiWdbHpd4uFszxEPdmjEe6tYM8XhTIknj2W70JR7HQsuvgtYzrzfhEsqbyfJ6Ey4tBa1nXm/CJZTXsTB8mtexcOmroPXM61i4NMvrTLiE83oTWi4FrWdeb/0K5fXWr1DezCSIO/NSCS3PvFRCyzMvldDyzEsltDzzUgkt0+FMz4PzUgnDz7xUwvAzL5Uw/M87R2R5nQl0xAS8JxpqyyMQ8J54uC2Pa8PsiYfb8gjxbMvjC89XT1869PuBnsWzLY9LPNxudIiH240O8eSNZ4Vnu9GXeLYbfYnHWWteC0vPvM5qMMzrrNeivPrFSsJ5vWksgar0TOxNY4kTe9NY4sSZLrE/jWW7Ek9UpWdifxpLlNifxhIl9qYOx4m9qcOBqjQd+o1E4on9qcNRYn/qcJRYfeeSFJaeeTNZXvV9Sziv+rYlnFd915IU8P6ZE2lUwHveOrXNZmkKTQe3zQbBobbZIDjUNhsEh9pmszSFnnDyhvM9HGrfI4JD7XtEcKh9j0tT6AmH2veI4FA3ZACH2WaD4VA35KUp9IRD3ZARHOqGjODkDed7ONQNeWkKPeFQN2QEh7ohIzjUDRnBYW7Ia1NoOphtNhgOc0OGcJgbMoRD7XtcCnhPOHkLeP8Hp8zgUPseE4BD7XtEcJh9jxAOtRF9aQo9/3/URvQ1nODNvCMLh9qIjuAwG9HXMswTDnNDhnDyhvM9HOaGDOEwN2QIx1lDXgtLz7zOSi/M66zHorze9DYwL7evZm2YPfFQWx4xHm7LI1CoBm82HGk81JZHjIfa8ogMs8GbmkcaD7cbHRhmgzfxjzAeb54gWY1h8KYVksbD3ZohHurWjPHkjWeFZ7vRl3i2G32Jx7HQciJoDe6ESyivN+ESyOtOuLQWtAZ3wiWU17EwfJrXsXBpImgNnoVL07yOhZbTvN6ElmtBa3CmRcJ5vfUrlJdLaBmcmYhwXi6hZXDmCsJ5uYSWwZnNB+flEoYHZ74dnJdLGB6cCXRwXrJ+5U2gIyfgDfpdO08KeIN+Mc+Thtmg3+LzLJ68PX1/8Uw8fUG/H+hZPNvyuMTD7UaHeLjd6BDPdqOv8OgXID2LZ7vRl3ictWYgLA36xUrCeTNZXmdFFeb1prFEqtKgX60kntibxhIn9qaxhIn1i5aEVaVBvz1JPLE/jSVK7E0djhNnMlVp0G8kEk/sTx2OEvtTh6PE6juXqLA06Hf8yObVr+0Rzqu+bQnnVd+1RAW84XZfjpiAN3DbbNam0MBts0FwqG02CA61zQbBobbZrE2hgdpmg+BQ22wgHGrfI4JD7Xtcm0IDs80Gw8kbzvdwqBsygkPdkNem0MBss8FwqBsygkPdkNdwIrPNBplCI7PNBsOhbsgIDnVDRnDyNoX+81fP4DA3ZAiHuSFDOMwNGcKh9j2uBbzRmydHUsAbvUl1JDWq0ZuBRxYOs+8RwqE2oq9NodGbe0cWDrURHcGhNqIjOMxGdCDDjN6cO7JwmBsyguPNtyMLh7khQzjOGjIQlkZv8hyYN5PldVZNYV5uXw0wzEZvvhppPNyWR6BQjd5sOMJ4vMlzpPFQWx6RYTZ6U/NI4+F2owPDbPQm/pHGsy2PLzwTjWH0phWSxsPdmiEe6taM8VC3ZojHmxJJGs92oy/xOBZaTgSt0Z1wCeXNZHm9CZfWgtboTriE8joWhk/zOhYuTQSt0bNwaZbXmXAJ5/UmtFwLWqMzLRLO661fobyZShAXnZmIcF4uoWV05grCebmEltGZzQfmdabnwXm5hOHRmUAH5+UShkdnAh2c15lAR07AG/W7dp4U8Eb9Yp4nDbNRv8XnWTzb8vjCM/H0Rf1+oGfxbMvjEg+3Gx3i4XajQzx541nh2W70JZ7tRl/icdaagbA06hcrCed11mtRXv1iJeG83jSWSFUa9auVxBN701jixJkusT+NZbsSz1SlUb89STyxP40lSuxNHY4Te1OHI1Vp1G8kEk/sTx2OEvtTh6PE6juXqLA06nf8COdV37eE86pvW8J51XctUQFvvN2XIybgjdw2m7UpNHHbbBAcapsNgkNts0FwqG02a1NoOvKG8z0cat8jgkPte0RwqH2Pa1NoYrbZYDjUDRnAYbbZYDjUDXltCk3MNhsMh7ohIzh5w/keDnVDXptCE7PNBsOhbsgIDnVDRnCYGzIwhSZmmw2Gw9yQIRzmhgzhUPse1wLe5M2TIyngTd6kOpIa1eTNwCMLh9n3COFQG9HXptDkzb0jCsebeUcWDrURHcFhNqIDGWby5tyRhZM3nO/hMDdkCIe5IUM4zhoyEJYmb/IcmNdZj0V5veltYF5uXw0wzCZvvhppPNyWR6BQTd5sONJ4qC2PGA+15REZZpM3NY80Hm43OjDMJm/iH2E83jxBshrD5E0rJI2HuzVDPNStGePJG88Kz3ajL/FsN/oSj2Oh5UTQmtwJl1Beb8IlkNedcGktaE3uhEsor2Nh+DSvY+HSRNCaPAuXpnkdCy2neb0JLdeC1uRMi4TzeutXKC+X0DI5MxHhvFxCy+TMFYTzcgktkzObD87LJQxPznw7OC+XMDw5E+jgvGT9yptAR07Am/S7dp4U8Cb9Yp4nDbNJv8XnWTx5e/r+4pl4+pJ+P9CzeLblcYmH240O8XC70SGe7UZf4dEvQHoWz3ajL/E4a81AWJr0i5WE82ayvM6KKszrTWOJVKVJv1pJPLE3jSVO7E1jiRJn/aIlYVVp1m9PEk/sT2OJEntTh+PEmUxVmvUbicQT+1OHo8T+1OEosfrOJSoszfodP7J59Wt7hPOqb1vCedV3LVEBb77dlyMm4M3cNpu1KTRz22wQHGqbDYJDbbNBcKhtNmtTaKa22SA41DYbCIfa94jgUPse16bQzGyzwXDyhvM9HOqGjOBQN+S1KTQz22wwHOqGjOBQN2QAh9lmg0yhmdlmg+FQN2QEh7ohIzh5m0L/+atncJgbMoTD3JAhHOaGDOFQ+x7XAt7szZMjKeDN3qQ6khrV7M3AIwuH2fcI4VAb0dem0OzNvSMLh9qIjuBQG9ERHGYjOpBhZm/OHVk4zA0ZwfHm25GFw9yQIRxnDRkIS7M3eQ7Mm8nyOqumMC+3rwYYZrM3X400Hm7LI1CoZm82HGE83uQ50nioLY/IMJu9qXmk8XC70YFhNnsT/0jj2ZbHF56JxjB70wpJ4+FuzRAPdWvGeKhbM8TjTYkkjWe70Zd4HAstJ4LW7E64hPJmsrzehEtrQWt2J1xCeR0Lw6d5HQuXJoLW7Fm4NMvrTLiE83oTWq4FrdmZFgnn9davUN5MJYjLzkxEOC+X0DI7cwXhvFxCy+zM5gPzOtPz4LxcwvDsTKCD83IJw7MzgQ7O60ygIyfgzfpdO08KeLN+Mc+Thtms3+LzLJ5teXzhmXj6in4/0LN4tuVxiYfbjQ7xcLvRIZ688azwbDf6Es92oy/xOGvNQFha9IuVhPM667Uor36xknBebxpLpCot+tVK4om9aSxx4kyX2J/Gsl2JZ6rSot+eJJ7Yn8YSJfamDseJvanDkaq06DcSiSf2pw5Hif2pw1Fi9Z1LVFha9Dt+hPOq71vCedW3LeG86ruWqIC33O7LERPwFm6bzdoUWrhtNggOtc0GwaG22SA41DabtSm0UNtsIBxq3yOCQ+17RHCofY9rU2hhttlgONQNGcBhttlgONQNeW0KLcw2GwyHuiEjOHnD+R4OdUNem0ILs80Gw6FuyAgOdUNGcJgbMjCFFmabDYbD3JAhHOaGDOFQ+x7XAt7izZMjKeAt3qQ6khrV4s3AIwuH2fcI4VAb0dem0OLNvSMKx5t5RxYOtREdwWE2ogMZZvHm3JGFkzec7+EwN2QIh7khQzjOGjIQlhZv8hyY11mPRXm96W1gXm5fDTDMFm++Gmk83JZHoFAt3mw40nioLY8YD7XlERlmizc1jzQebjc6MMwWb+IfYTzePEGyGsPiTSskjYe7NUM81K0Z48kbzwrPdqMv8Ww3+hKPY6HlRNBa3AmXUF5vwiWQ151waS1oLe6ESyivY2H4NK9j4dJE0Fo8C5emeR0LLad5vQkt14LW4kyLhPN661coL5fQsjozEeG8XELL6swVhPNyCS3rkcnycgnDqzPfDs7LJQyvzgQ6OC9Zv/Im0JET8Fb9rp0nBbxVv5jnScNs1W/xeRZP3p6+v3gmnr6q3w/0LJ5teVzi4XajQzzcbnSIZ7vRV3j0C5CexbPd6Es8zlozEJZW/WIl4byZLK+zogrzetNYIlVp1a9WEk/sTWOJE3vTWMLE+kVLwqrSqt+eJJ7Yn8YSJfamDseJM5mqtOo3Eokn9qcOR4n9qcNRYvWdS1RYWvU7fmTz6tf2COdV37aE86rvWqIC3nq7L0dMwFu5bTZrU2jlttkgONQ2GwSH2maD4FDbbNam0Epts0FwqG02EA617xHBofY9rk2hldlmg+HkDed7ONQNGcGhbshrU2hlttlgONQNGcGhbsgADrPNBplCK7PNBsOhbsgIDnVDRnDyNoX+81fP4DA3ZAiHuSFDOMwNGcKh9j2uBbzVmydHUsBbvUl1JDWq1ZuBRxYOs+8RwqE2oq9NodWbe0cWDrURHcGhNqIjOMxGdCDDrN6cO7JwmBsyguPNtyMLh7khQzjOGjIQllZv8hyYN5PldVZNYV5uXw0wzFZvvhppPNyWR6BQrd5sOMJ4vMlzpPFQWx6RYbZ6U/NI4+F2owPDbPUm/pHGsy2PLzwTjWH1phWSxsPdmiEe6taM8VC3ZoSneVMiSePZbvQlHsdCy4mgtbkTLqG8mSyvN+HSWtDa3AmXUF7HwvBpXsfCpYmgtXkWLs3yOhMu4bzehJZrQWtzpkXCeb31K5Q3UwnimjMTEc7LJbRszlxBOC+X0LI5s/nAvM70PDgvlzC8ORPo4LxcwvDmTKCD8zoT6MgJeJt+186TAt6mX8zzpGG26bf4PItnWx5feCaevqbfD/Qsnm15XOLhdqNDPNxudIgnbzwrPNuNvsSz3ehLPM5aMxCWNv1iJeG8znotyqtfrCSc15vGEqlKm361knhibxpLnDjTJfansWxX4pmqtOm3J4kn9qexRIm9qcNxYm/qcKQqbfqNROKJ/anDUWJ/6nCUWH3nEhWWNv2OH+G86vuWcF71bUs4r/quJSrgbbf7csQEvI3bZrM2hTZumw2CQ22zQXCobTYIDrXNZm0KbdQ2GwiH2veI4FD7HhEcat/j2hTamG02GA51QwZwmG02GA51Q16bQhuzzQbDoW7ICE7ecL6HQ92Q16bQxmyzwXCoGzKCQ92QERzmhgxMoY3ZZoPhMDdkCIe5IUM41L7HtYC3efPkSAp4mzepjqRGtXkz8MjCYfY9QjjURvS1KbR5c++IwvFm3pGFQ21ER3CYjehAhtm8OXdk4eQN53s4zA0ZwmFuyBCOs4YMhKXNmzwH5nXWY0He7k1vA/Ny+2qAYbZ789VI4+G2PAKFaj/yxrPCQ215xHioLY/IMNu9qXmk8XC70YFhtnsT/wjj8eYJktUYdm9aIWk83K0Z4qFuzRhP3nhWeLYbfYlnu9GXeBwLLSeC1u5OuITyehMugbzuhEtrQWt3J1xCeR0Lw6d5HQuXJoLW7lm4NM3rWGg5zetNaLkWtHZnWiSc11u/Qnm5hJbdmYkI5+USWnZnriCcl0to2Z3ZfHBeLmF4d+bbwXm5hOHdmUAH5yXrV94EOnIC3q7ftfOkgLfrF/M8aZjt+i0+z+LJ29P3F8/E09f1+4GexbMtj0s83G50iIfbjQ7xbDf6Co9+AdKzeLYbfYnHWWsGwtKuX6wknDeT5XVWVGFebxpLpCrt+tVK4om9aSxxYm8aS5hYv2hJWFXa9duTxBP701iixN7U4ThxJlOVdv1GIvHE/tThKLE/dThKrL5ziQpLu37Hj2xe/doe4bzq25ZwXvVdS1TA22/35YgJeDu3zWZtCu3cNhsEh9pmg+BQ22wQHGqbzdoU2qltNggOtc0GwqH2PSI41L7HtSm0M9tsMJy84XwPh7ohIzjUDXltCu3MNhsMh7ohIzjUDRnAYbbZIFNoZ7bZYDjUDRnBoW7ICE7eptB//uoZHOaGDOEwN2QIh7khQzjUvse1gLd78+RICniHN6mOpEZ1eDPwyMJh9j1CONRG9LUpdBx5w/keDrURHcGhNqIjOMxGdCDDHN6cO7JwmBsyguPNtyMLh7khQzjOGjIQlg5v8hyYN5PldVZNYV5uXw0wzA5vvhppPNyWR6BQHd5sOMJ4vMlzpPFQWx6RYXZ4U/NI4+F2owPD7PAm/pHGsy2PLzwTjeHwphWSxsPdmiEe6taM8VC3ZojHmxJJGs92oy/xOBZaTgStw51wCeXNZHm9CZfWgtbhTriE8joWhk/zOhYuTQStw7NwaZbXmXAJ5/UmtFwLWoczLRLO661fobyZShA3nJmIcF4uoeVw5grCebmElsOZzQfmdabnwXm5hOHDmUAH5+UShg9nAh2c15lAR07AO/S7dp4U8A79Yp4nDbNDv8XnWTzb8vjCM/H0Df1+oGfxbMvjEg+3Gx3i4XajQzx541nh2W70JZ7tRl/icdaagbB06BcrCed11mtRXv1iJeG83jSWSFU69KuVxBN701jixJkusT+NZbsSz1SlQ789STyxP40lSuxNHY4Te1OHI1Xp0G8kEk/sTx2OEvtTh6PE6juXqLB06Hf8COdV37eE86pvW8J51XctUQHvuN2XIybgHdw2m7UpdHDbbBAcapsNgkNts0FwqG02a1PooLbZQDjUvkcEh9r3iOBQ+x7XptDBbLPBcKgb8hLOeXKibsgIDnVDXppCTzjUDRnBoW7ICE7ecL6HQ92Ql6bQEw51Q0ZwqBsygkPdkBEc5oa8NoXmg9lmg+EwN2QIh7khQzjUvselgPeEk7eA939wygwOte8xATjUvkcEh9n3COFQG9GXptATDrURHcDxZt6RhUNtREdwmI3oaxnmCYe5IUM4ecP5Hg5zQ4ZwmBsyhOOsIa+FpWdeZ6UX5nXWY1Feb3obmJfbV7M2zJ54qC2PGA+35XGtUD3x5I1nhYfa8ojxUFsegWH2xENtecR4uN3oa8PsiYfbjY7wePMEiWoMTzzb8rjEw92aIR7q1ozx5I1nhWe70Zd4tht9icex0PKroPXM6024hPJ6Ey6BvO6ES0tB65nXm3AJ5XUsDJ/mdSxcapPvHzwLl6Z5HQstp3m9CS2XgtYzr7d+hfJ661coL5XQMh/OTEQ4L5XQ8sxLJbQ881IJLc+8mSwvlTD8zEslDD/zUgnDz7xUwvAzL1m/8ibQERPwnmioLY9AwHvi4bY8rg2zJx5uyyPEk7en7y+er56+E8+2PC7xbMvjEg+3Gx3i4XajQzzbjb7Co1+A9Cye7UZf4nHWmtfC0jOvsxoM82ayvM6KKszrTWMJVKVnYm8aS5zYm8YSJ/amsYSJ9YuWZFWlZ2J/GkuU2J/GEiX2pg7HiTOXqvRM7E8djhL7U4ejxP7U4Six+s4lKSw986pvXKJ5g35tj3Be9W1LOK/6riUp4D3z3t20pAS8563nbQr981dPTKEnHGqbDYJDbbNBcKhtNggOtc1maQo94VD7HgEcapsNhEPte0RwqH2Pa1NoYLbZYDh5w/keDnVDRnCoG/LaFBqYbTYYDnVDRnCoGzKAw2yzQabQwGyzwXCoGzKCQ92QEZy8TaH//NUzOMwNGcJhbsgQDnNDhnCofY9rAW/w5smRFPAGb1IdSY1q8GbgkYXD7HuEcKiN6GtTaPDm3pGFQ21ER3CojegIDrMRHcgwgzfnjiwc5oaM4Hjz7cjCYW7IEI6zhgyEpcGbPAfmzWR5nVVTmJfbVwMMs8Gbr0YaD7flEShUgzcbjjAeb/IcaTzUlkdkmA3e1DzSeLjd6MAwG7yJf6TxbMvjC89EYxi8aYWk8XC3ZoiHujVjPNStGeLxpkSSxrPd6Es8joWWE0FrcCdcQnkzWV5vwqW1oDW4Ey6hvI6F4dO8joVLE0Fr8CxcmuV1JlzCeb0JLdeC1uBMi4TzeutXKG+mEsQFZyYinJdLaBmcuYJwXi6hZXBm84F5nel5cF4uYXhwJtDBebmE4cGZQAfndSbQkRPwBv2unScFvEG/mOdJw2zQb/F5Fs+2PL7wTDx9Qb8f6Fk82/K4xMPtRod4uN3oEE/eeFZ4tht9iWe70Zd4nLVmICwN+sVKwnmd9VqQN+oXKwnn9aaxRKrSqF+tJJ7Ym8YSJ850if1pLNuVeKYqjfrtSeKJ/WksUWJv6nCc2Js6HKlKo34jkXhif+pwlNifOhwlVt+5RIWlUb/jRziv+r4lnFd92xLOq75riQp44+2+HDEBb+S22axNoZHbZoPgUNtsEBxqmw2CQ22zWZtCI7XNBsKh9j0iONS+RwSH2ve4NoVGZpsNhkPdkAEcZpsNhkPdkNem0Mhss8FwqBsygpM3nO/hUDfktSk0MttsMBzqhozgUDdkBIe5IQNTaGS22WA4zA0ZwmFuyBAOte9xLeCN3jw5kgLe6E2qI6lRjd4MPLJwmH2PEA61EX1tCo3e3DuicLyZd2ThUBvRERxmIzqQYUZvzh1ZOHnD+R4Oc0OGcJgbMoTjrCEDYWn0Js+BeZ31WJTXm94G5uX21QDDbPTmq5HGw215BArV6M2GI42H2vKI8VBbHpFhNnpT80jj4XajA8Ns9Cb+EcbjzRMkqzGM3rRC0ni4WzPEQ92aMZ688azwbDf6Es92oy/xOBZaTgSt0Z1wCeX1JlwCed0Jl9aC1uhOuITyOhaGT/M6Fi5NBK3Rs3Bpmtex0HKa15vQci1ojc60SDivt36F8nIJLaMzExHOyyW0jM5cQTgvl9AyOrP54LxcwvDozLeD83IJw6MzgQ7Oy9WvkjeBjpyAN+l37Twp4E36xTxPGmaTfovPs3jy9vT9xTPx9CX9fqBn8WzL4xIPtxsd4uF2o0M8242+wqNfgPQsnu1GX+Jx1pqBsDTpFysJ581keZ0VVZjXm8YSqUqTfrWSeGJvGkuc2JvGEibWL1oSVpUm/fYk8cT+NJYosTd1OE6cyVSlSb+RSDyxP3U4SuxPHY4Sq+9cosLSpN/xI5tXv7ZHOK/6tiWcV33XEhXwptt9OWIC3jS32YTx/ujjvC34YEmqr5+u6WM0Tw2znOdx7LX+h9Li5PvguUXm6ZuqGm+qabypfv9NtWs61PnnOnlCZW4Jefim5naOp28qaLypqPGmksabyhpvqmi8qarxpprGm9K4omeNK3rRuKIXjSt60biiF40retG4oheNK3rRuKIXjSt60biiF40retW4oleNK3rVuKJXjSt61biiV40retW4oleNK3rVuKJXjSt607iiN40retO4ojeNK3rTuKI3jSt607iiN40retO4ojeNK3rXuKJ3jSt617iid40rete4oneNK3rXuKJ3jSt617iid40r+tC4og+NK/rQuKIPjSv60LiiD40r+tC4og+NK/rQuKIPhSt6PhSu6PlQuKLnQ+GKng+FK3o+JFZ0sYcp8yGyltfyem28to+n46eMYr/kSbGHr0rcfFR9t9T03VLXd0vj/lt6v8bRP5/rfN1SOPTdUrj/ltL7lvLslqK+W0r331J7//Puk3/eIeu7paLvlqq+W3pg9e7vf95j9s+767ul+1fv8X7ZZITJLcVD3y3dvnqn4xqBmo4cJrcU77+l/L6lMrul9Cil6S1lfbdU7r+l91yJY8xuqeq7pabvlrq+W7p99U4hvSaLpVAm22469N1S0HdLUd8tSaze7Zq/3D/20XG8rpFvuEa54Rr1hms0kWu8Jhr//+ydXZrbOM9tpyRS4N/8J3bU/cUqv09Y3JUctIwNsK/qwgm1V8cE6DKxWk2TNfoDa4z/fg2V64lojaSyxttgxjbe37K/VsmPrKLSqbXX9dqWy4SXPLBGeWCN+sj/kfZAkv7AGuO/X6McT/wf0bmLBpLkB9Z44L2ucvErX787eZ3C0/gaQjHu/yPlkVXqI6u0R1bpKqvceuycc5+sMp5YReV6E14lPbKKzvv+q/vPv78nde4TgTU03vfyNX3m+jiyTWiVR1bReN+fXybMa5XZ//n2yCpdZZX6+iXy9ZnsbJXxxCoql2DwKumRVVS6+3bvLq0f5ffOReXeCV5FHlmlPLJK/e97pPZAh98e6PBV7lWkU+5XX588fa2SZ1v3dfZ+va3kbbu7P7pSuVWh/EjJ3iNle490Pv5IXzM9rw6pTB5J7D1SsfdI1d4jtecfSY77kdo5eaRu75GGuUcah71Hen73LvXtkSa/nhnZ3iPZ272Hvd172Nu9h73de9jbvYe93XuY273LYW73Loe53bsc5nbvcpz2Hsnc7l0Oc7t3Oczt3uVo9h7J3O5dDnu7d7K3e6dk75Hs7d7J3u6dxN4j2du9k73dO9nbvVO390j2du9sb/fO9nbvnO09kr3dO9vbvXOx90j2du9sb/fO9nbvPMw90mlv9z7t7d6nvd37PO09kr3d+7S3e5/V3iPZ271Pe7v3aW/3lsPeI9nbvcXe7i32dm8Re49kb/cWe7u3NHuPZG/3Fnu7d7G3e5dk75Hs7d7F3u5d7O3epdh7JHu7d7G3e5du75Hs7d7V3u5d7e3eNdt7JHu7d7W3e1d7u3et9h7J3u5d7e3edZh7pGZv9272du9mb/du5r7vXZq93bvZ272bvd27mfu+d2n2du9mb/f+wF1L+Ej2du9ub/e2d9ey2LtrWbq93bvb273t3bUs9u5alm5v9x72dm97dy3LsLd727trWezdtSz27lqWYW/3tnfXsti7a1ns3bWsh7ndu9q7a1nt3bWsh7ndux7mdu9q765ltXfXsh7mdu9q765ltXfXstq7a1mTvd3b3l3Lau+uZU32dm97dy2rvbuW1d5dy5rs7d727lpWe3ctq727ljXb273t3bWs9u5a1mxv97Z317Lau2tZ7d21rNne7m3vrmW1d9ey2rtrWU97u7e9u5bV3l3Letrbve3dtaz27lpWe3ctq9jbve3dtaz27lpWe3ctq9jbve3dtaz27lpWsbd727trWe3dtaz27lrWYm/3tnfXstq7a1nt3bWsxd7ube+uZbV317IWe7u3vbuW1d5dy2rvrmWt9nZve3ctq727ltXeXcta7e3e9u5aVnt3LWu1t3vbu2tZ7d21rPbuWtZmb/e2d9ey2rtrWe3dtazN3u5t765ltXfXsnZ7u7e9u5bV3l3Lau+uZe32dm97dy2rvbuW1d5dy9rt7d727lpWe3ct67C3e9u7a1nt3bWs9u5a1mFv97Z317Lau2tZ7d21rMPc7t3s3bVs9u5atsPc7t3s3bVsh7ndu9m7a9kOc7t3s3fXstm7a9ns3bVsyd7ube+uZbN317Ile7u3vbuWzd5dy2bvrmVL9nZve3ctm727ls3eXcuW7e3e9u5aNnt3LVu2t3vbu2vZ7N21bPbuWrZsb/e2d9ey2btr2ezdtWynvd3b3l3LZu+uZTvt7d727lo2e3ctm727lu20t3vbu2vZ7N21bPbuWjaxt3vbu2vZ7N21bB+4a9lTeT1SL7NHavYeqdt7pGHukT5w17KXcT/S6JNHSvYeKdt7pNPeIz2/e7favh5pTB6p2Hukau+R7O3exd7uXezt3h+4awkfyd7uXe3t3tXe7v2Bu5bwkezt3tXe7v2Bu5bwkezt3tXe7t3s7d4fuGsJH8ne7t3s7d7N3u79gbuW8JHs7d7N3u79gbuW8JHs7d7d3u7d7e3eH7hrCR/J3u7d7e3e3d7u/YG7lvCR7O3e3d7u/YG7luiRhr3de9jbvYe93fsDdy3hI9nbvYe93XvY270/cNcSPpK93XuY2737B+5awkcyt3v3w9zu3Q9zu3c/xN4jmdu9+2Fu9+6Hud27f+CuJXwke7t3srd7f+CuJXwke7t3srd7J3u79wfuWsJHsrd7J3u7d7K3e3/griV6pGxv9872du8P3LWEj2Rv9872du9sb/fO5r7v3bO93Tvb272zvd37NPd9737a271Pe7v3B+5awkeyt3uf9nbv097ufZr7vnc/7e3ep73dW+zt3mLu+95d7O3eYm/3/sBdS/hI9nZve3ctu727lt3eXcsu9nZve3ctu727lt3eXcte7O3e9u5adnt3LXuxt3vbu2vZ7d217PbuWvZqb/e2d9ey27tr2e3dtezV3u5t765lt3fXsld7u7e9u5bd3l3Lbu+uZW/2dm97dy27vbuW3d5dy97s7d727lp2e3cte7O3e9u7a9nt3bXs9u5a9m5v97Z317Lbu2vZ7d217N3e7m3vrmW3d9eyd3u7t727lt3eXctu765lH/Z2b3t3Lbu9u5bd3l3LPuzt3vbuWnZ7dy3HYW73HvbuWg57dy2HvbuW4zC3ew97dy2HvbuWw95dy3GY272HvbuWw95dy5Hs7d727loOe3cth727liPZ273t3bUc9u5aDnt3LUeyt3vbu2s57N21HNne7m3vruWwd9dy2LtrObK93dveXcth767lsHfXcpz2dm97dy2HvbuW47S3e9u7azns3bUc9u5ajtPe7m3vruWwd9dy2LtrOcTe7m3vruWwd9dyiL3d295dy2HvruWwd9dyiL3d295dy2HvruWwd9dyFHu7t727lsPeXctR7O3e9u5aDnt3LYe9u5aj2Nu97d21HPbuWg57dy1Htbd727trOezdtRzV3u5t767lsHfXcti7azmavd3b3l3LYe+u5bB313I0e7u3vbuWw95dy9Hs7d727loOe3cth727lqPb273t3bUc9u5aDnt3LUe3t3vbu2s57N21HN3e7m3vruWwd9dy2LtrOYa93dveXcth767lsHfXcgx7u7e9u5bD3l3LMazt3uUwd9fyeiRru/f1SNa+7309krXd+3oka7v39UjWdu/rkax93/t6JGu79/VI1nbv65Gs3dYpR7K3e5u7a3k9kr3d29xdy+uR7O3e5u5aXo9kb/c2d9fyeiR7u7e5u5blMHfX8noke7u3ubuW1yPZ273N3bW8Hsne7m3uruX1SPZ2b3N3La9Hsrd7m7treT2Stds61yPZ273N3bW8Hsne7m3uruX1SPZ2b3N3La9H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tcz27lrmbG/3tnfXMtu7a5nt3bXM2d7ube+uZbZ31zLbu2uZs73d295dy2zvrmU+7e3e9u5aZnt3LbO9u5b5tLd727trme3dtcz27lrm097ube+uZbZ31zKLvd3b3l3LbO+uZbZ31zKLvd3b3l3LbO+uZbZ31zIXe7u3vbuW2d5dy1zs7d727lpme3cts727lrnY273t3bXM9u5aZnt3LXO1t3vbu2uZ7d21zNXe7m3vrmW2d9cy27trmau93dveXcts765ltnfXMjd7u7e9u5bZ3l3L3Ozt3vbuWmZ7dy2zvbuWudnbve3dtcz27lpme3ctc7e3e9u7a5nt3bXM3d7ube+uZbZ31zLbu2uZh73d295dy2zvrmW2d9cyD3u7t727ltneXcs87O3e9u5aZnt3LU97dy3Pw9zufdq7a3nau2t5HmLvkczt3qe9u5anvbuW52Fu9z7t3bU87d21PO3dtTyTvd3b3l3L095dy9PeXcsz2du97d21PO3dtTw/cNeyp/J6pF4mj/SBu5bwkZK9R8r2Hun53buXcT/S6JNHEnuPVOw9UrX3SM/v3q22r0cak0fq9h5pmHuk097ufdrbvU97u/cH7lrCR7K3e5/2du/T3u79gbuW8JHs7d6nvd37A3ct4SPZ273F3u4t9nbvD9y1hI9kb/cWe7u32Nu9P3DXEj6Svd272Nu9P3DXEj6Svd272Nu9i73d+wN3LeEj2du9i73du9jbvT9w1xI9UrW3e1d7u/cH7lrCR7K3e1d7u3e1t3t/4K4lfCR7u3e1t3tXe7v3B+5awkeyt3s3e7v3B+5awkeyt3s3e7t3s7d7f+CuJXwke7t3s7d7d3u79wfuWsJHsrd7d3u79wfuWsJHsrd7d3u7d7e3e3/griV8JHu797C3ew97u/cH7lrCR7K3ew97u/cH7lrCR7K3ew97u/ewt3sPc9/3lsPc7i2Hud1bDnO7txzmvu8th7ndWw5zu7d84K4lfCRzu7cc5nZvOezt3snc970l2du9k73dO9nbvT9w1xI+kr3dO9nbvZO52zqS7O3e9u5air27lmLvrqVke7u3vbuWYu+updi7aynZ3u5t766l2LtrKdne7m3vrqXYu2sp9u5aymlv97Z311Ls3bUUe3ct5bS3e9u7ayn27lqK2Nu97d21FHt3LcXeXUsRe7u3vbuWYu+updi7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iry2hs+/5W31+be8rT7/lrfV59/ytjrBLe95glve8wS3vOcJbnl/wtNYljV82Pf0oy3vj3gay2Kb8iOexrKq4QS3vD/iaSyrGj7/lnf/hKexLGs45C3vfjvkLe9+O+Qt737zt3frwSZuvx3ylne/HfKWd7/9Nbe8+63+or/nr7nl3du+5f09QI+2vPuvHuTh6d9vhD/Yb+y/etTGuuHDj8nxvRcy/vAtN+Ph19b3r/z6+dL77sz/df+P//Rv//wv//LP/89/+Jd//c//8X/887/+1//+1fD29X8eQ9Kv/7Df/ukx2zxtUXKLqbZ4DABPWzS5hcktutzC5RZDbiG/51N+z6f8nk/5PW+3m96k6U1Mb9L1Jq43GXqT0Juk3qT0Jvq73/R3v+nvftPf/aa/+01/95v+7jf93W/6u9/0d7/p777p777p777p777p777p777p777p777p777p777p737X3/2uv/tdf/e7/u53/d3v+rvf9Xe/6+9+19/9rr/7rr/7rr/7rr/7rr/7rr/7rr/7rr/7rr/7rr/7rr/7Q3/3h/7uD/3dH/q7P/R3f+jv/tDf/aG/+0N/94f+7of+7of+7of+7of+7of+7of+7of+7of+7of+7of+7qf+7qf+7qf+7qf+7qf+7qf+7qf+7qf+7qf+7qf+7pf+7j8+oljtBwCWj39oYnqTrjdxrcn9P9rXC/cvsv2LTGyyf5HtX2T7F9n+RfYnm+xfZPsX2f5Ftn+R/cll/P5Ftn+R/Z//InveRH/3S3/3S3/3S3/39QMXTT9x0fQjF00/c9H0QxdNP3XR9GMXTT930fSDF00/edH0oxdNP3vR9MMXTT99YfrpC9NPX5h++sL00xe/SMV73mToTUJvknqT0pvo775++sL00xemn74w/fSF6acvTD99YfrpC9Otz3TrM936TLc+063PdOsz3fpMtz7Trc906zPd+ky3PtOtz3TrM936TLc+063PdOsz3fpMtz7Trc906zPd+ky3PtOtz3TrM936TLc+063PdOsz3fpMtz7Trc906zPd+ky3PtOtz3TrM936TLc+063PdOsz3fpMtz7Trc906zPd+ky3PtOtz3TrM936TLc+063PdOsz3fpMtz7Trc906zPd+ky3PtOtz3TrM936TLc+063PdOsz3fpMtz7Trc906zPd+ky3PtOtz3TrM936TLc+063PdOsz3fpMtz7Trc906zPd+rpufV23vq5bX9etr+vW13Xr67r1dd36um59Xbe+rltf162v69bXdevruvV13fq6bn1dt76uW1/Xra/r1td16+u69XXd+rpufV23vq5bX9etr+vW13Xr67r1dd36um59Xbe+rltf162v69bXdevruvV13fq6bn1dt76uW1/Xra/r1td16+u69XXd+rpufV23vq5bX9etr+vW13Xr67r1dd36um59Xbe+rltf162v69bXdevruvV13fq6bn1dt76uW1/Xra/r1td16+u69XXd+rpufV23vq5bX9etr+vW13Xr67r1dd36um59Xbe+rltf162v69bXdevruvV13fq6bn1dt76uW1/Xra/r1td16+u69XXd+rpufV23vq5bX9etz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+161v6NY3dOsbuvUN3fqGbn1Dt76hW9/QrW/o1jd06xu69Q3d+oZufUO3vqFb39Ctb+jWN3TrG7r1Dd36hm59Q7e+oVvf0K1v6NY3dOsbuvUN3fqGbn1Dt76hW9/QrW/o1jd06xu69Q3d+oZufUO3vqFb39Ctb+jWN3TrG7r1Dd36hm59Q7e+oVvf0K1v6NY3dOsbuvUN3fqGbn1Dt76hW9/QrW/o1jd06xu69Q3d+oZufUO3vqFb39Ctb+jWN3TrG7r1Dd36hm59Q7e+oVvf0K1v6NY3dOsbuvUN3fqGbn1Dt76hW9/QrW/o1jd06xu69Q3d+oZufUO3vqFb39Ctb+jWN3TrG7r1Dd36hm59Q7e+oVvf0K1v6NY3dOsbuvUN3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fqmbn1Tt76pW9/UrW/q1jd165u69U3d+qZufVO3vqlb39Stb+rWN3Xrm7r1Td36pm59U7e+qVvf1K1v6tY3deubuvVN3fqmbn1Tt76pW9/UrW/q1jd165u69U3d+qZufVO3vqlb39St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nmjAEw14ogFPNOCJBjzRgCca8MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA08cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8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faFbX+jWF7r1hW59oVtf6NYXuvWFbn2hW1/o1he69YVufaFbX+jWF7r1hW59oVtf6NYXuvWFbn2hW1/o1he69YVufaFbX+jWF7r1hW59oVtf6NYXuvWFbn2hW1/o1he69YVufaFbX+jWF7r1hW59oVtf6NYXuvWFbn2hW1/o1he69YVufaFbX+jWF7r1hW59oVtf6NYXuvWFbn2hW1/o1he69YVufaFbX+jWF7r1hW59oVtf6NYXuvWFbn2hW1/o1he69YVufaFbX+jWF7r1hW59oVtf6taXuvWlbn2pW1/q1pe69aVufalbX+rWl7r1pW59qVtf6taXuvWlbn2pW1/q1pe69aVufalbX+rWl7r1pW59qVtf6taXuvWlbn2pW1/q1pe69aVufalbX+rWl7r1pW59qVtf6taXuvWlbn2pW1/q1pe69aVufalbX+rWl7r1pW59qVtf6taXuvWlbn2pW1/q1pe69aVufalbX+rWl7r1pW59qVtf6taXuvWlbn2pW1/q1pe69aVufalbX+rWl7r1pW59qVtf6taXuvWlbn2pW1/q1pe69aVufalbX+rWl7r1pW59qVtf6taXuvWlbn2pW1/q1pe69aVufalbX+rWl7r1pW59qVtf6taXuvWlbn2pW1/p1le69ZVufaVbX+nWV7r1lW59pVtf6dZXuvWVbn2lW1/p1le69ZVufaVbX+nWV7r1lW59pVtf6dZXuvWVbn2lW1/p1le69ZVufaVbX+nWV7r1lW59pVtf6dZXuvWVbn2lW1/p1le69ZVufaVbX+nWV7r1lW59pVtf6dZXuvWVbn2lW1/p1le69ZVufaVbX+nWV7r1lW59pVtf6dZXuvWVbn2lW1/p1le69ZVufaVbX+nWV7r1lW59pVtf6dZXuvWVbn2lW1/p1le69ZVufaVbX+nWV7r1lW59pVtf6dZXuvWVbn2lW1/p1lcg+AUkv5DoF/3d162vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936pm59U7e+qVvf1K1v6tY3deubuvVN3fqmbn1Tt76pW9/UrW/q1jd165u69U3d+qZufVO3vqlb39Stb+rWN3Xrm7r1Td36pm59U7e+qVvf1K1v6tY3deubuvVN3fqmbn1Tt76pW9/UrW/q1jd165u69U3d+qZufVO3vqlb39Stb+rWN3Xrm7r1Td36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qTch96z0JuRWhd6EnKXXm5CTs3oTck5Ob0JOxehNyB643oTsfIINFWDvgGmB6AFk0psAygKiCUBTf/fB8Qdw+gEcfgBnH8DRB3DyARx8AOcewLEH/dSD6Yce7CYbpt1Mb9L1Jq43Ef3yb1//xr5eabp6mK4epquH6ephunqYrh6mq4fp6mG6epiuHqarh+nqYbp6mK4epquH6ephunqYrh6mq4fp6mG6epiuHqarh+nqYbp6mK4epquH6ephunqYrh6mq4fp6mG6epiuHqarh+nqYbp6mK4epquH6ephunqYrh6mq4fp6mG6epiuHqarh+nqYbp6mK4epquH6ephunqYrh6mq4fp6mG6epiuHqarh+nqYbp6mK4epquH6ephunqYrh6mq4fp6mG6epiuHqarh+nqYbp6mK4epquH6ephunqYrh6mq0fX1aPrNz26ftGj6yec+s31JkNvEnqT1JuU3kR/9/UTTl0/4dT1E05dP+HU9RNOXT/h1PUTTl0/4dT1E05dP+HU9RNOXbe+rltf162v69bXdevruvV13fq6bn1dt76uW1/Xra/r1td16+u69XXd+rpufV23vq5bX9etr+vW13Xr67r1dd36um59Xbe+rltf162v69bXdevruvV13fq6bn1dt76uW1/Xra/r1td16+u69XXd+rpufV23vq5bX9etr+vW13Xr67r19ZDv6/QovYl8W6fnTW/S9CamN+l6E9ea/O3raMDXK/d+qt5Et5W9nyo32fupapO9n6o22fupapO9n6o22fupapO9n6o22fupapO9n6o22fupapO9n6o22fupapO9n6o22fupapO9n6o22fupapO9n6o22fupapO9n6o22fupapO9n6o22fupahP93detr+vW13Xr67r1dd36um598n7qV5OhNwm9ib6bnvpueuq76aXvppe4m37/j69fFl9PfdQfHbAfFCk32Q+KVJvsB0WqTfaDItUm+0GRapP9oEi1yX5QpNpkPyhSbbIfFKk22Q+KVJvsB0WqTfaDItUm+0GRapP9oEi1yX5QpNrk9A+KfBqoMvW8mymT3y8eFPnc79rvfre/mPcX8/5i3l/M+4t5fzGf7Yv5eZPPeoLz8yb6yWt9E+4XT3B+3kQ/ea1vwpm+CWf6Jpzpm3Cmb8KZvgln+iac6Ztwpm/Cmb4JZ/omnOmbcKZvwpm+CWf6Jtx+brneZD+3XG2y79mrTfY9e7XJvmevNtn37NUmp79n/5T89OBp03OnTY+dNj112kDo9Ney539tWduytmVty9qWtT/ZZMvalrUta1vW/mSTLWtb1rasbVn7k022rG1Z27K2Ze1PNtlPsFSbfNYTLJ+Tn37IUX9KuOlPCTf9KeGmPiX8b1/ffL/z5T5KKSvhBt8Nvht8N/j+ySYbfDf4bvDd4Psnm2zw3eC7wXeD759sssF3g+8G3w2+f7KJ/u5v8H0b+F7jKOUvwfc5X/rXK/caa6+x9hprr7H2GmuvsfYaa6+x9DXW8yZ7U11tsmMh1SY7FlJtsmMh1SY7FlJtsmMh1SY7FlJtsmMh1SY7FlJtsmMh1SY7FlJtsmMh1SY7FlJtsmMh1SY7FlJtsmMh1SY7FlJtsmMh1SafFQv5vIn+7uvW13Xr67r1dd36um59Xbe+rltf162v69bXdevruvV13fq6bn1dt76uW1/Xra/r1td16+u69XXd+rpufV23vq5bX9etz9V8iK8mTW9iepOuN3G9ydCbhN4k9SalNxEvzv7ta1f465U7rFVvssNa1Sb6u7/DWuUmO6xVbbLDWtUmO6xVbbLDWtUmO6xVbbLDWtUm+0EmapP9IBO1yX6QidpkP8hEbbIfZKI22Q8yUZuc/kEmz0N09afYqRj3268eZPLc7+J3v9uL8r0o34vyvSjfi/K9KN+L8r0o34vyvSg/w6L8eZP9dEG1if7u76cLyk32k2/UJvvJN2qT/eQbtcl+8o3aZD/5Rm2iR0oM/flyQ3++3GPre95Ef77cAFG9+Ttf7pNxcpN9Mk5tsk/GqU32yTi1yT4ZpzbZJ+PUJnsTTm2yN+HUJnsTTm2yN+HUJnsTTm2yN+HUJnsTTm2yN+HUJnsTTm2yN+HUJnsTTm2yN+HUJnsTTm2yN+HUJnsTTm2yN+HUJjt+Qm2y4yfUJjt+Qm2y4yfUJjt+Qm2y4yfUJjt+Qm2y4yfUJjt+Qm2y4yfUJjt+Qm2y4yfUJjt+Qm2y4yfUJjt+Qm2y4yfUJjt+Qm2y4yfUJjt+Qm2y4yfUJjt+Qm2y4yfUJjt+Qm2y4yfUJjt+Qm3S9CamN+l6E9ebDL1J6E1Sb1J6E/3d163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc9163Pd+ly3Ptetz3Xrc936XLc+163Pdetz3fpctz7Xrc916xu69Q3d+oZufUO3vqFb39Ctb+jWN3TrG7r1Dd36hm59Q7e+oVvf0K1v6NY3dOsbuvUN3fqGbn1Dt76hW9/QrW/o1jd06xu69Q3d+oZufUO3vqFb39Ctb+jWN3TrG7r1Dd36hm59Q7e+oVvf0K1v6NY3dOsbuvUN3fqGbn1Dt76hW9/QrW/o1jd06xu69Q3d+oZufUO3vqFb39Ctb+jWN3TrG7r1Dd36hm59Q7e+oVvf0K1v6NY3dOsbuvUN3fqGbn1Dt76hW9/QrW/o1jd06xu69Q3d+oZufUO3vqFb39Ctb+jWN3TrG7r1Dd36hm59Q7e+oVvf0K1v6NY3dOsbuvUN3fqGbn1Dt76hW9/QrW/o1jd06xu69Q3d+oZufUO3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+0K0vdOsL3fpCt77QrS906wvd+kK3vtCtL3TrC936Qre+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77UrS9160vd+lK3vtStL3XrS936Ure+1K0vdetL3fpSt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vtKtr3TrK936Sre+0q2vdOsr3fpKt77Sra906yvd+kq3vqlb39Stb+rWN3Xrm7r1Td36pm59U7e+qVvf1K1v6tY3deubuvVN3fqmbn1Tt76pW9/UrW/q1jd165u69U3d+qZufVO3vqlb39Stb+rWN3Xrm7r1Td36pm59U7e+qVvf1K1v6tY3deubuvVN3fqmbn1Tt76pW9/UrW/q1jd165u69U3d+qZufVO3vqlb39Stb+rWN3Xrm7r1Td36pm59U7e+qVvf1K1v6tY3deubuvVN3fqmbn1Tt76pW9/UrW/q1jd165u69U3d+qZufVO3vqlb39Stb+rWN3Xrm7r1Td36pm59U7e+qVvf1K1v6tY3deubuvVN3fqmbn1Tt76pW9/UrW/q1jd165u69U3d+qZufVO3vqlb39Stb+rWN3Xrazcd++5tGmhjoE0HbRy0GaBNgDYJ2hRoA+ZBA/OggXnQwDxoYB40MA8amAcNzIMG5kED86CBeWBgHhiYBwbmgYF5YGAeGJgHBuaBgXlgYB4YmAcdzIMO5kEH86CDedDBPOhgHnQwDzqYBx3Mgw7mgYN54GAeOJgHDuaBg3ngYB44mAcO5oGDeeBgHgwwDwaYBwPMgwHmwQDzYIB5MMA8GGAeDDAPBpgHAeZBgHkQYB4EmAcB5kGAeRBgHgSYBwHmQYB5kGAeJJgHCeZBgnmQYB4kmAcJ5kGCeZBgHiSYBwXmQYF5UGAeFJgHBeZBgXlQYB4UmAcF5kGBeTDBPJhgHkwwDyaYBxPMgwnmwQTzYIJ5MME8AJ7YgCc24IkNeGIDnnhfLIM2A7QJ0CZBmwJtwDwAntiAJzbgiQ14YgOe2IAnNuCJDXhiA57YgCc24IkNeGIDntiAJzbgiQ14YgOe2IAnNuCJDXhiA57YgCc24IkNeGIDntiAJzbgiQ14YgOe2IAnNuCJDXhiA57YgCc24IkNeGIDntiAJzbgiQ14YgOe2IAnNuCJDXhiA57YgCc24IkNeGIDntiAJzbgiQ14YgOe2IAnNuCJDXhiA57YgCc24IkNeGIDntiAJzbgiQ14YgOe2IAnNuCJDXhiA57YgCc24IkNeGIDntiAJzbgiQ14YgOe2IAnNuCJDXhiA57YgCc24IkNeGIDntiAJzbgiQ14YgOe2IAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeKIBTzTgiQY80YAnGvBEA55owBMNeGIHntiBJ3bgiR14Ygee2IEnduCJHXhiB57YgSd24IkdeGIHntiBJ3bgiR14Ygee2IEnduCJHXhiB57YgSd24IkdeGIHntiBJ3bgiR14Ygee2IEnduCJHXhiB57YgSd24IkdeGIHntiBJ3bgiR14Ygee2IEnduCJHXhiB57YgSd24IkdeGIHntiBJ3bgiR14Ygee2IEnduCJHXhiB57YgSd24IkdeGIHntiBJ3bgiR14Ygee2IEnduCJHXhiB57YgSd24IkdeGIHntiBJ3bgiR14Ygee2IEnduCJHXhiB57YgSd24IkdeGIHntiBJ3bgiR14Ygee2IEnduCJHXhiB57YgSd24IkdeGIHntiBJ3bgiR14ogNPdOCJDjzRgSc68EQHnujAEx14ogNPdOCJDjzRgSc68EQHnujAEx14ogNPdOCJDjzRgSc68EQHnujAEx14ogNPdOCJDjzRgSc68EQHnujAEx14ogNPdOCJDjzRgSc68EQHnujAEx14ogNPdOCJDjzRgSc68EQHnujAEx14ogNPdOCJDjzRgSc68EQHnujAEx14ogNPdOCJDjzRgSc68ER/7InV7O9tysc/tjHQpoM2DtoMrc39P76+tv/XPxk4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtIaOEpr4CitgaO0Bo7SGjhKa+AorYGjtAaO0ho4SmvgKK2Bo7QGjtKaA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATHXiiA0904IkOPNGBJzrwRAee6MATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMH8MQBPHEATxzAEwfwxAE8cQBPHMATB/DEATxxAE8cwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYAnBvDEAJ4YwBMDeGIATwzgiQE8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMTeGICT0zgiQk8MYEnJvDEBJ6YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8sYAnFvDEAp5YwBMLeGIBTyzgiQU8cQJPnMATJ/DECTxxAk+cwBMn8MQJPHECT5zAEyfwxAk8cQJPnMATJ/DECTxxAk+cwBMn8MQJPHECT5zAEyfwxAk8cQJPnMATJ/DECTxxAk+cwBMn8MQJPHECT5zAEyfwxAk8cQJPnMATJ/DECTxxAk+cwBMn8MQJPHECT5zAEyfwxAk8cQJPnMATJ/DECTxxAk+cwBMn8MQJPHECT5zAEyfwxAk8cQJPnMATJ/DECTxxAk+cwBMn8MQJPHECT5zAEyfwxAk8cQJPnMATJ/DECTxxAk+cwBMn8MQJPHECT5zAEyfwxAk8cQJPnMATJ/DECTxxAk+cwBMn8MQJPHECT5zAEyfwxAk8cQJPnMATJ/DEqXtiv+meeG/TQBsDbTpo46DNAG0CtEnQpkAbMA8amAcNzIMG5kED86CBedDAPGhgHjQwDxqYBw3MAwPzwMA8MDAPDMwDA/PAwDwwMA8MzAMD88DAPOhgHnQwDzqYBx3Mgw7mQQfzoIN50ME86GAedDAPHMwDB/PAwTxwMA8czAMH88DBPHAwDxzMAwfzYIB5MMA8GGAeDDAPBpgHA8yDAebBAPNggHkwwDwIMA8CzIMA8yDAPAgwDwLMgwDzIMA8CDAPAsyDBPMgwTxIMA8SzIME8yDBPEgwDxLMgwTzIME8KDAPCsyDAvOgwDwoMA8KzIMC86DAPCgwDwrMgwnmwQTzYIJ5MME8mGAeTDAPJpgHE8yDCeYB8MQGPLEBT2zAExvwxAY8sQFPbMATG/DEBjyxAU9swBMb8MQGPLEBT2zAExvwxAY8sQFPbMATG/DEBjyxAU9swBMb8MQGPLEBT2zAExvwxAY8sQFPbMATG/DEBjyxAU9swBMb8MQGPLEBT2zAExvwxAY8sQFPbMATG/DEBjyxAU9swBMb8MQGPLEBT2zAExvwxAY8sQFPbMATG/DEBjyxAU9swBMb8MQGPLEBT2zAExvwxAY8sQFPbMATG/DEBjyxAU9swBMb8MQGPLEBT2zAExvwxAY8sQFPbMATG/DEBjyxAU9swBMb8MQGPLEBT2zAExvwxAY8sQFPbMATG/DEBjyxAU9swBMb8MQGPLEBT2zAExvwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU804IkGPNGAJxrwRAOeaMATDXiiAU/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT+zAEzvwxA48sQNP7MATO/DEDjyxA0/swBM78MQOPLEDT3TgiQ480YEnOvBEB57owBMdeKIDT3TgiQ480YEnOvBEB57owBMdeKIDT3TgiQ480YEnOvBEB57owBMdeKIDT3TgiQ480YEnOvBEB57owBMdeKIDT3TgiQ480YEnOvBEB57owBMdeKIDT3TgiQ480YEnOvBEB57owBMdeKIDT3TgiQ480YEnOvBEB57owBMdeKIDT3TgiQ480YEnOvBEB57owBMdeKIDT3TgiQ480YEnOvBEB57owBMdeKIDT3TgiQ480YEnOvBEB57owBMdeKIDT3TgiQ48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","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"// use crate::{ HEIGHT, WIDTH };\nuse arenalib::{ NO_EVENT, WAIT, SEE_MOVE, WIDTH };\nuse arenalib::{ MAX_ACTIONS, MAX_OBSTACLES };\nuse arenalib::{ SERIALIZED_ACTION_BYTE_SIZE, SERIALIZED_ACTIONS_ARRAY_SIZE, SERIALIZED_ACTIONS_PER_FIELD, VIEW_DISTANCE };\nuse skplg::{softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD};\nuse arenalib::{Action, get_action_actor, get_action_target_x, get_action_target_y, get_action_type, new_action};\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\nuse crate::character::Character;\nuse crate::event::Event;\nuse crate::event::{ build_subtype_value_event }; // , build_value_event\nuse crate::map::{ is_visible, get_distance, can_move_to };\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::{ get_default_obstacles };\nuse arenalib::{MAGE};\nuse arenalib::{MAX_ACTIONS_PER_CHARACTER, MAX_ENEMY_OBSTACLES};\n// use crate::ResolvedAction::ResolvedAction;\n// use crate::actionDefinition::{ build_move_action };\nuse arenalib::{apply_action_result_effects, apply_action_pre_calc_effects, validate_action_requirements, build_result_event};\nuse arenalib::arena_action_def_builder;\nuse super::obstacle::new_obstacle;\n\n// use crate::{ACTION_RESULT_COORDINATES_IDX_SELF, ACTION_RESULT_COORDINATES_IDX_TARGET, ACTION_RESULT_COORDINATES_IDX_INVISIBLE};\n// use crate::{SEE_CAST, SEE_DRAW, SEE_RITUAL, SEE_SEARCH_TRAP, RECEIVE_ATTACK, DISARMED_TRAP, ADD_OBSTACLE, WIN};\n// use crate::action_builder;\n\n\n\n// global ACTION_TYPE: u8 = 0;\n// global ACTION_ACTOR: u8 = 1;\n// global ACTION_TARGET_X: u8 = 2;\n// global ACTION_TARGET_Y: u8 = 3;\n\nglobal SEEN_EVENT_IDX: u32 = 1;\nglobal UNSEEN_EVENT_IDX: u32 = 0;\nglobal WORLD_EVENT_IDX: u32 = 2;\nglobal SELF_EVENT_IDX: u32 = 3;\n\npub fn execute_action(\n    action: Action,\n    enemy_advance: u8,\n    actor: Character,\n    mut energy: u8,\n    my_obstacles: [Obstacle; MAX_OBSTACLES],\n    their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]\n) -> (bool, Event, Event, Event, Character, u8) /*where T: ResolvedAction */{\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    //let action_def = c.resolve_action(action.register[action.base_index + ACTION_TYPE]);\n        //let mut result_event: Event = build_std_event(NO_EVENT, c.id, 0, 0);\n        //let mut result_char = c;\n        //let mut required_energy = 0;\n        let mut is_valid = true;\n        //let action_def = c.resolve_action(get_action_type(action));\n        // let mut result_valid = true;\n\n        // let need_sneak = get_action_type(action) == SNEAK;\n        //let can_sneak = c.can_sneak();\n        // let need_move = get_action_type(action) == MOVE | get_action_type(action) == SNEAK;\n        // let can_move = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles);\n        // let need_target_is_neighbor = get_action_type(action) == SNEAK | get_action_type(action) == MOVE | get_action_type(action) == ATTACK | get_action_type(action) == SEARCH | get_action_type(action) == DISARM_TRAP;\n        //let target_is_neighbor = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        // let need_target_is_not_self = get_action_type(action) == ATTACK | get_action_type(action) == SHOOT;\n        // let target_is_not_self = (c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action));\n        // let need_ritual = get_action_type(action) == RITUAL;\n        //let can_ritual = c.can_ritual();\n        // let need_search = get_action_type(action) == SEARCH;\n        //let can_search = c.can_search();\n        //let can_attack = is_neighbor & not_self;\n        // let need_can_cast_fireball = get_action_type(action) == CAST_FIREBALL;\n        // let min_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if get_action_type(action) == SHOOT {\n        //     MIN_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let max_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if (get_action_type(action) == DRAW) | (get_action_type(action) == SHOOT) {\n        //     MAX_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let need_check_status = get_action_type(action) == CAST_FIREBALL | get_action_type(action) == RITUAL | get_action_type(action) == DRAW | get_action_type(action) == SHOOT;\n        // let can_cast_fireball = c.can_cast_fireball(); // & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        // let can_draw = c.can_shoot(); // & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_shoot = c.can_shoot(); // & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_disarm = c.can_disarm();\n        // let is_valid =\n        //     (get_action_type(action) == WAIT) |\n        //     ((get_action_type(action) == SNEAK) & can_sneak & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == MOVE) & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == RITUAL) & can_ritual) |\n        //     ((get_action_type(action) == SEARCH) & can_search & target_is_neighbor) |\n        //     ((get_action_type(action) == ATTACK) & target_is_neighbor & target_is_not_self) |\n        //     ((get_action_type(action) == CAST_FIREBALL) & can_cast_fireball & result_char.status <= max_rounds_to_finish) |\n        //     ((get_action_type(action) == DRAW) & can_draw) |\n        //     ((get_action_type(action) == SHOOT) & can_shoot & target_is_not_self) |\n        //     ((get_action_type(action) == DISARM_TRAP) & can_disarm & target_is_neighbor);\n\n\n\n\n        // need to adapt status first in case of action interruption!\n\n    //let action_type = action.get_action_type(action);\n    //let action_def = c.resolve_action(action_type);\n    let action_type = get_action_type(action);\n\n    let actor_id = actor.get_id();\n    let actor_x = actor.get_x();\n    let actor_y = actor.get_y();\n    let actor_target_x = actor.get_target_x();\n    let actor_target_y = actor.get_target_y();\n    let actor_last_action = actor.get_last_action();\n    let (action_def_valid, action_def) = actor.get_action(action_type);\n    softassert!(quote { is_valid }, quote { action_def_valid }, quote { f\"Failed to fetch action def of {action_type}\" });\n\n    let action_target_x = get_action_target_x(action);\n    let action_target_y = get_action_target_y(action);\n    let distance = get_distance(actor_x, actor_y, action_target_x, action_target_y);\n\n    // let is_continuous = action.get_action_is_continuous();\n    // let is_not_interrupted = (\n    //     ((!is_continuous) & (action.get_action_result_status_multiplier() != 0)) | // that's the ID of the wait action => leave status, but not continuous\n    //     ((is_continuous) & (action.get_action_req_previous_action() == c.last_action) & (action_target_x == c.get_target_x()) & (action_target_y == c.get_target_y()))\n    // );\n\n\n    let mut actor_progress = actor.get_progress();\n    let mut actor_is_hidden = actor.get_is_hidden() == 1;\n    let actor_is_in_view_range = is_visible(enemy_advance, actor_x);\n    // let max_range_part = get_action_req_max_range(action) as u16;\n    // let mut actor_max_range = max_range_part * max_range_part;\n    let mut is_not_interrupted = true;\n    let mut actor_damage_mod = actor.get_damage_mod();\n    let mut actor_status = actor.get_status();\n    // ~200 gates\n    apply_action_pre_calc_effects!(quote { action_def });\n\n\n///////////////////////////\n    // ~4000 gates\n    validate_action_requirements!(quote { is_valid }, quote { action_def });\n    // // pub global ACTION_NEEDS_TARGET_FREE_SPACE: u8 = 0;  // u1\n    // let target_is_free_space_valid = !action.get_action_req_target_free_space() | can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles);\n    // softassert!(quote { is_valid }, quote { target_is_free_space_valid }, quote { f\"Target space ({action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" });\n    \n    // // pub global ACTION_NEEDS_TARGET_IS_NOT_SELF: u8 = 1; // u1\n    // let target_is_not_self_valid = !action.get_action_req_target_is_not_self() | (c_x != action_target_x) | (c_y != action_target_y);\n    // softassert!(quote { is_valid }, quote { target_is_not_self_valid }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" });\n\n    // // pub global ACTION_NEEDS_STATUS_HIDDEN: u8 = 4; // u1\n    // let char_is_hidden = c.is_hidden == 1;\n    // let char_is_hidden_valid = !action.get_action_req_status_hidden() | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_is_hidden_valid }, quote { f\"Character needs to be hidden to perform action {action_type}\" });\n    \n    // // pub global ACTION_NEEDS_STATUS_VISIBLE: u8 = 2; // u1\n    // let char_is_in_view_range = is_visible(enemy_advance, c_x);\n    // let char_is_fully_visible = char_is_in_view_range & !char_is_hidden;\n    // let char_is_fully_visible_valid = !action.get_action_req_status_visible() | char_is_fully_visible;\n    // softassert!(quote { is_valid }, quote { char_is_fully_visible_valid }, quote { f\"Character must be fully visible for action {action_type}: in_view_range: {char_is_in_view_range} & !hidden {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_NEEDS_STATUS_INVISIBLE: u8 = 3; // u1\n    // let char_invisible_valid = !action.get_action_req_status_invisible() | !char_is_in_view_range | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_invisible_valid }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {char_is_in_view_range} || hidden: {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_MAX_RANGE: u8 = 7; // u6 // TODO: max_range!\n    // let max_range_part = action.get_action_req_max_range() as u16;\n    // let max_range = max_range_part * max_range_part;\n    // let max_range_valid  = distance <= max_range;\n    // softassert!(quote { is_valid }, quote { max_range_valid }, quote { f\"Character is out of range! Distance: {distance} > {max_range}: {{{c_x},{c_y}}} - {{{action_target_x},{action_target_y}}} with {max_range_part}\" });\n\n    // // pub global ACTION_NEEDS_MIN_STATUS: u8 = 8; // u4\n    // let min_status = action.get_action_req_min_status();\n    // let min_status_valid = min_status <= status;\n    // softassert!(quote { is_valid }, quote { min_status_valid }, quote { f\"Character needs min status {min_status} to perform action {action_type}, but only has {status}\" });\n\n    // // pub global ACTION_NEEDS_MAX_STATUS: u8 = 9; // u4\n    // let max_status = action.get_action_req_max_status();\n    // let max_status_valid = max_status >= status;\n    // softassert!(quote { is_valid }, quote { max_status_valid }, quote { f\"Character cannot have a higher status than {max_status} to perform action {action_type}: got {status}\" });\n\n    // // pub global ACTION_NEEDED_ENERGY: u8 = 10;    // u4\n    // let required_energy = action.get_action_req_energy();\n    // let energy_valid = required_energy <= energy;\n    // softassert!(quote { is_valid }, quote { energy_valid }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {required_energy}\" });\n    //////////////////////\n    \n\n        let coords = [\n            (actor_x, actor_y),\n            (action_target_x, action_target_y),\n            (NOWHERE, NOWHERE),\n        ];\n\n    // pub global ACTION_RESULT_STATUS_MULTIPLIER: u8 =     ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT;     // u1\n    // pub global ACTION_RESULT_STATUS_FIXED_ADDITION: u8 = ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 1; // u4\n    // pub global ACTION_MOVE_TO_TARGET: u8 =               ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 2; // u1\n    // pub global ACTION_SETS_STATUS_HIDDEN: u8 = 5; // u1\n    // pub global ACTION_REMOVES_STATUS_HIDDEN: u8 = 6; // u1\n\n        // CALCULATE EVENTS\n        comptime {\n          assert(SEEN_EVENT_IDX == 1);\n          assert(UNSEEN_EVENT_IDX == 0);\n        }\n        //let result_event_idx = is_visible as u32;\n        let mut events: BoundedVec<Event, 4> = BoundedVec::new();\n        // 19000 gates\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        build_result_event!(0 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(1 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(2 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(3 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        assert(events.len() == 4);\n\n        // let seen_event_value = status as u32 * action.get_action_result_event_seen_value_status_multiplier() as u32 + action.get_action_result_event_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { seen_event_value <= 255 as u32 }, quote { f\"Invalid event value (seen): {seen_event_value} does not fit in u8!\" });\n\n        // let unseen_event_value = status as u32 * action.get_action_result_event_not_seen_value_status_multiplier() as u32 + action.get_action_result_event_not_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { unseen_event_value <= 255 as u32 }, quote { f\"Invalid event value (unseen): {unseen_event_value} does not fit in u8!\" });\n\n        // let seen_event_coords_idx = action.get_action_result_event_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { seen_event_coords_idx < 4 }, quote { f\"Invalid seen event coord idx: {seen_event_coords_idx} > 3\" });\n\n        // let seen_event_coords = coords[seen_event_coords_idx & 3];\n\n        // let unseen_event_coords_idx = action.get_action_result_event_not_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { unseen_event_coords_idx < 4 }, quote { f\"Invalid unseen event coord idx: {unseen_event_coords_idx} > 3\" });\n\n        // let unseen_event_coords = coords[unseen_event_coords_idx & 3];\n\n        // //let events = [\n        // let dummy_event =    build_subtype_value_event(NO_EVENT, c.get_id(), coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].0, coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].1, 0 as u8, 0 as u8, 0 as u8);\n        // let unseen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_not_seen_type(),\n        //         c.get_id(), \n        //         unseen_event_coords.0,\n        //         unseen_event_coords.1,\n        //         unseen_event_value as u8,\n        //         action.get_action_result_event_not_seen_subtype(),\n        //         action.get_action_result_event_not_seen_radius()\n        //     );\n        // let seen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_seen_type(),\n        //         c.get_id(), \n        //         seen_event_coords.0,\n        //         seen_event_coords.1,\n        //         seen_event_value as u8,\n        //         action.get_action_result_event_seen_subtype(),\n        //         action.get_action_result_event_seen_radius()\n        //     );\n        //];\n\n\n        // APPLY EFFECTS ON SELF\n        let mut result_energy = energy;\n        let mut result_coords = coords[0];\n        let mut result_progress = actor_progress;\n        let mut result_is_hidden = actor_is_hidden;\n        let mut result_is_visible = actor_is_in_view_range;\n        let mut result_damage_mod = actor_damage_mod;\n        let mut result_health = actor.get_health();\n        let mut result_status = actor_status;\n\n\n        // let energy = std::wrapping_sub(energy, action.get_action_req_energy());\n        // let status = actor_progress as u32 * action.get_action_result_status_multiplier() as u32 + action.get_action_result_status_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { status <= MAX_STATUS as u32 }, quote { f\"Invalid result status: {status} > {MAX_STATUS}\" });\n\n        // let final_coords = coords[action.get_action_move_to_target() as u8];\n        // // debug!(quote { println(f\"final_coords:{final_coords}\"); });\n        // let is_hidden = ((c.is_hidden == 1) & !action.get_action_result_effect_removes_status_hidden()) | action.get_action_result_effect_sets_status_hidden();\n        // let is_visible = !is_hidden & is_visible(enemy_advance, final_coords.0);\n        // 200 gates\n        apply_action_result_effects!(quote { action_def });\n\n// let result_coord_src = action_def[6] as u8;\n// let result_coord_src_fixed = result_coord_src & 4 as u8;\n// let result_coord = result_coord_src_fixed != 0 as u8;\n// let result_coord_cast = result_coord as u8;\n// println(f\"result coords: {result_coord_src} {result_coord_src_fixed} {result_coord} {result_coord_cast}\");\n// result_coords = coords[((action_def[6]as u8 / 4 as u8) == 1 as u8)as u8];\n        // let target_coords = [\n        //     (target_x, target_y),\n        //     (c.get_target_x(), c.get_target_y())\n        // ];\n\n        (\n            is_valid,\n            if result_is_visible { events.get_unchecked(SEEN_EVENT_IDX) } else { events.get_unchecked(UNSEEN_EVENT_IDX) },//events[1 + (is_visible as u8)],\n            events.get_unchecked(WORLD_EVENT_IDX),\n            events.get_unchecked(SELF_EVENT_IDX),//events[get_action_unseen_event_is_internal(action_def) as u8],\n            Character {\n                id: actor_id,\n                x: result_coords.0,\n                y: result_coords.1,\n                progress: result_progress, // status as u8,\n                is_hidden: result_is_hidden as u1, //is_hidden as u1,\n                has_been_seen: result_is_visible, //is_visible,\n                last_action: is_not_interrupted as u8 * actor.get_last_action() + (!is_not_interrupted) as u8 * action_type,\n                target_x: is_not_interrupted as u8 * actor.get_target_x() + (!is_not_interrupted) as u8 * action_target_x, // if is_not_interrupted { c.get_target_x() } else { get_action_target_x(action) };\n                target_y: is_not_interrupted as u8 * actor.get_target_y() + (!is_not_interrupted) as u8 * action_target_y,\n                class: actor.class,\n                damage_mod: result_damage_mod,\n                health: result_health,\n                status: result_status,\n                actions: actor.actions,\n            },\n            result_energy\n        )\n\n        // if get_action_type(action) == SNEAK {\n        //     //assert(c.can_sneak());\n        //     if !can_sneak { let actor_id = c.id; println(f\"Failed to execute action: Character {actor_id} cannot sneak\"); }\n        //     //assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     //assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_sneak() & can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);  \n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_sneak();\n        // }\n        // if get_action_type(action) == MOVE {\n        //     // assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);\n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_move();\n        //     result_char.has_been_seen = is_visible(enemy_advance, result_char.x);\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_MOVE, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        // }\n        // if get_action_type(action) == RITUAL {\n        //     //assert(c.can_ritual());\n        //     // result_valid = c.can_ritual();\n        //     result_char.status += 1;\n        //     if result_char.status >= RITUAL_ROUNDS_FOR_WIN {\n        //         result_event = build_std_event(WIN, c.id, 0, 0);\n        //     } else {\n        //         result_event = build_std_event(SEE_RITUAL, c.id, 0, 0);\n        //     }\n        //     required_energy = c.get_energy_per_ritual();\n        // }\n        // if get_action_type(action) == SEARCH {\n        //     // assert(c.can_search());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_search() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(SEE_SEARCH_TRAP, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_search();\n        // }\n        // if get_action_type(action) == ATTACK {\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_MELEE), ATTACK_MELEE);\n        //     required_energy = c.get_energy_per_attack();\n        // }\n        // // TODO: global SET_TRAP = 6 as u8;\n        // if get_action_type(action) == CAST_FIREBALL {\n        //     // assert(c.can_cast_fireball());\n        //     result_char.status += 1;\n        //     // assert(result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     // result_valid = c.can_cast_fireball() & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     if result_char.status >= FIREBALL_ROUNDS_FOR_CAST {\n        //         // TODO: handle friendly fire and destruction of own walls and own traps\n        //         result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_FIREBALL), ATTACK_FIREBALL);\n        //     } else {\n        //         if c.get_has_been_seen() {\n        //             result_event = build_subtype_value_event(SEE_CAST, c.id, get_action_target_x(action), get_action_target_y(action), 0, ATTACK_FIREBALL);\n        //         }\n        //     }\n        //     required_energy = c.get_energy_per_cast();\n        // }\n        // if get_action_type(action) == DRAW {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     // result_valid = c.can_shoot() & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     result_char.status += 1;\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_DRAW, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        //     required_energy = c.get_energy_per_draw();\n        // }\n        // if get_action_type(action) == SHOOT {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = c.can_shoot() & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     // TODO: check distance! abs(c.x - get_action_target_x(action)) + abs(c.y - get_action_target_y(action)) <= c.get_shoot_range()\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_RANGED), ATTACK_RANGED);\n        //     required_energy = c.get_energy_per_shoot();\n\n        // }\n        // // TODO: SET_TRAP\n        // if get_action_type(action) == DISARM_TRAP {\n        //     // assert(c.can_disarm());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_disarm() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(DESTROY, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_disarm();\n        // }\n        \n        // // assert(energy >= required_energy);\n        // let result_valid = is_valid & (energy >= required_energy);\n        // if result_valid {\n        //     energy -= required_energy;\n        // }\n        // // energy -= required_energy;\n        // (result_valid, result_event, result_char, energy)\n    }\n//}\n\n//global test_actions: [TestActionDefinition; 1] = [\n    // build_test_action_def!(build_wait_action_def(), quote { 0, 1, 3, 4 }),\n    //TestActionDefinition { register: build_test_action_def!(build_wait_action_def()), action: new_action(0, 1, 3, 4) },\n    // build_move_action(class_energy_per_move[ARCHER]),\n    //     build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n    //     build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n    //     build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n    //     build_wait_action_def(),\n    //     ,\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[RITUALIST]),\n    //     build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n    //     build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n    //     build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[ROGUE]),\n    //     build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n    //     build_sneak_action(class_energy_per_sneak[ROGUE]),\n    //     build_search_action(class_energy_per_search[ROGUE], 1),\n    //     build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n    //     build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[KNIGHT]),\n    //     build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[MAGE]),\n    //     build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n    //     build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n    //     build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n    //     build_wait_action_def(),\n    //     build_wait_action_def()\n    // ]\n// ]\n\n// pub fn create_test_action(action: Action) -> TestActionDefinition {\n//     TestActionDefinition {\n//         register: \n//     }\n// }\n\n// pub struct TestActionDefinition {\n//     pub register: [u8; ACTION_DEFINITION_SIZE],\n//     pub action: Action,\n// }\n\n// impl ResolvedAction for TestActionDefinition {\n//     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n//     }\n//     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n//     }\n//     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n//     }\n//     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n//     }\n//     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_MAX_RANGE]\n//     }\n//     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MIN_STATUS]\n//     }\n//     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MAX_STATUS]\n//     }\n//     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDED_ENERGY]\n//     }\n//     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_EVENT_IS_TRAP] == 1\n//     }\n//     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n//     }\n//     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n//         self.register[ACTION_MOVE_TO_TARGET] as u1\n//     }\n//     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_IS_CONTINUOUS] == 1\n//     }\n//     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n//     }\n\n//     fn get_action_target_x(self) -> u8 {\n//         get_action_target_x(self.action)\n//     }\n//     fn get_action_target_y(self) -> u8 {\n//         get_action_target_y(self.action)\n//     }\n//     fn get_action_type(self) -> u8 {\n//         get_action_type(self.action)\n//     }\n// }\n\n#[test]\nfn test_execute_action() {\n  // global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder = get_arena_action_def_builder();\n    let action_def = arena_action_def_builder.build_move_action(4); //, quote { 1, 2, 3, 4 }; //new_action(1, 2, 3, 4);\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let action = new_action(1, 2, 3, 4);\n    let their_advance = 30;\n    let mut actions = [[0; 32]; MAX_ACTIONS_PER_CHARACTER + 1];\n    actions[1] = action_def;\n    let actor = Character {\n        id: 2,\n        x: 2,\n        y: 4,\n        target_x: 0,\n        target_y: 0,\n        health: 255,\n        damage_mod: 1,\n        last_action: WAIT,\n        class: MAGE,\n        is_hidden: 0 as u1,\n        has_been_seen: true,\n        progress: 0,\n        status: 0,\n        actions: actions\n    };\n    let energy = 15;\n    let my_obstacles = get_default_obstacles(0);\n    let (no_obstacle_valid, no_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n    assert(no_obstacle_valid);\n    let their_obstacles = get_default_obstacles(1).as_slice().push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle);\n    let (valid, event, _, internal_event, c, result_energy) = execute_action(\n        action,\n        their_advance,\n        actor,\n        energy,\n        my_obstacles,\n        their_obstacles.as_array()\n    );\n    assert(valid, \"valid\");\n    assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n    assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n    assert(event.x == get_action_target_x(action), f\"{event}.target_x is not action target x\");\n    assert(event.y == get_action_target_y(action), f\"{event}.target_y is not action target y\");\n    assert(c.x == event.x, f\"{c}.x is not event {event}.x\");\n    assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n    assert(result_energy == 11, f\"{result_energy} != 11\");\n}\n\n\n\npub fn parse_actions(fields: [Field; SERIALIZED_ACTIONS_ARRAY_SIZE]) -> [Action; MAX_ACTIONS] {\n    comptime {\n        assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n        assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n        assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n    }\n\n    let mut actions: [Action] = &[];\n    for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n        let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n        //assert(split.len() == 32);\n        for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n            let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n            actions = actions.push_back(new_action(\n                split[offset],\n                split[offset + 1],\n                split[offset + 2],\n                split[offset + 3],\n            ));\n            /*Action {\n                action: split[offset],\n                actor: split[offset + 1],\n                target_x: split[offset + 2],\n                target_y: split[offset + 3],\n            }*/\n        }\n    }\n    actions.as_array()\n}\n\n/**\n* Warning: This function can throw!!!\n*/\n// pub fn serialize_actions(actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n//     comptime {\n//         assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n//         assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n//         assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n//     }\n\n//     assert(actions.len() <= MAX_ACTIONS);\n\n//     let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, 0, 0, 0); MAX_ACTIONS];\n//     for i in 0..actions.len() {\n//         actions_stuffed[i] = actions[i];\n//     }\n\n//     let mut fields: [Field] = &[];\n//     for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n//         let mut data: [u8; 32] = [0; 32];\n//         for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n//             let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n//             let action = actions_stuffed[index];\n//             let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n//             data[offset] = get_action_type(action);\n//             data[offset + 1] = get_action_actor(action);\n//             data[offset + 2] = get_action_target_x(action);\n//             data[offset + 3] = get_action_target_y(action);\n//         }\n//         fields = fields.push_back(std::field::bytes32_to_field(data));\n//     }\n//     fields.as_array()\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/action.nr"},"72":{"source":"\nuse arenalib::ARCHER;\nuse arenalib::KNIGHT;\nuse arenalib::MAGE;\nuse arenalib::RITUALIST;\nuse arenalib::ROGUE;\nuse arenalib::WIDTH;\nuse arenalib::HEIGHT;\nuse arenalib::{ CLASS_COUNT, PROGRESS_COUNT };\nuse arenalib::{ WAIT }; //, ATTACK_MELEE, ATTACK_FIREBALL, ATTACK_RANGED, MAX_FIREBALL_ROUNDS_FOR_CAST, MIN_FIREBALL_ROUNDS_FOR_CAST, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES, MAX_ACTIONS_PER_CHARACTER };\nuse arenalib::{ WIDTH_MASK, HEIGHT_MASK, CLASS_MASK, PROGRESS_MASK };\nuse arenalib::{ WIDTH_BITS, HEIGHT_BITS, CLASS_BITS, PROGRESS_BITS };\nuse crate::event::Event;\nuse crate::map::is_visible;\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::new_obstacle;\nuse skplg::{NOWHERE, debug, softassert};\nuse arenalib::{ActionDefinition};\nuse arenalib::{SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, SerializedArenaCharacterActionDefinitions, SerializedArenaCharacterActionDefinition};\n// use arenalib::{TRAP, ADD_OBSTACLE, WIN_BY_RITUAL, RITUAL_ROUNDS_FOR_WIN};\nuse arenalib::get_test_action_register;\nuse crate::event::{build_subtype_value_event, serialize_events};\nuse arenalib::NO_EVENT;\nuse arenalib::get_wait_action_def;\n\n\npub global SERIALIZED_CHARACTER_BYTES: u32 = 6;\npub type SerializedCharacter = [u8; SERIALIZED_CHARACTER_BYTES];\n\n// use skplam::{build_wait_action_def, build_shoot_action, build_draw_action, build_move_action, build_attack_action, build_cast_action, build_evocation_action, build_search_action, build_set_trap_action, build_sneak_action, build_ritual_action, build_disarm_trap_action};\n\n// this should be more efficient: for all the following: order is: UNKNOWN_CLASS, ARCHER, RITUALIST, ROGUE, KNIGHT, MAGE\nglobal class_damage_melee: [u8; 6] = [ 0, 32, 8, 24, 40, 16 ];\nglobal class_damage_ranged: [u8; 6] = [ 0, 24, 40, 16, 32, 8 ];\nglobal class_damage_fireball: [u8; 6] = [ 0, 0, 100, 50, 0, 100 ];\nglobal class_damage: [[u8; 6]; 3] = [ class_damage_melee, class_damage_ranged, class_damage_fireball ];\nglobal class_energy_per_attack: [u8; 6] = [ 0, 7, 7, 7, 6, 7 ];\nglobal class_energy_per_cast: [u8; 6] = [ 0, 255, 12, 255, 255, 6 ];\nglobal class_energy_per_disarm: [u8; 6] = [ 0, 255, 255, 12, 255, 255 ];\nglobal class_energy_per_move: [u8; 6] = [ 0, 3, 4, 3, 4, 4 ];\nglobal class_energy_per_ritual: [u8; 6] = [ 0, 255, 12, 255, 255, 255 ];\nglobal class_energy_per_search: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_sneak: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_draw: [u8; 6] = [ 0, 9, 255, 255, 255, 255 ];\nglobal class_energy_per_shoot: [u8; 6] = [ 0, 6, 255, 255, 255, 255 ];\nglobal resistances: [u16; 8 * 3] = [\n     0,  75, 100, 85,  50, 100, 20,  0, //,  255, 255, 0, 0, 0, 255, 255, 255 ], // Melee vs dummy, archer, ritualist, thief, knight, mage, wall, water, unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n     0,  80, 100, 90,  25, 100,  5,  0, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Ranged vs dummy, archer, ritualist, thief, knight, mage, wall, water\n     0,  80, 100, 90, 100,  90, 60, 50, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Fireball vs dummy, archer, ritualist, thief, knight, mage, wall, water\n];\n\nglobal trap_resistances: [u16; 8] = [ 0,  75, 100, 50,  75, 90, 5, 0]; //,  255, 255, 255, 255, 255, 255, 255, 255 ]; // Trap vs dummy, archer, ritualist, thief, knight, mage\n\n\n//global x: ActionDefinition = build_set_trap_action(1 as u8, 1 as u8);\n// TODO: move to character!\n// global ARCHER: u8 = 1;    WAIT, MOVE, ATTACK, DRAW, SHOOT\n// global RITUALIST: u8 = 2; WAIT, MOVE, ATTACK, CAST, RITUAL\n// global ROGUE: u8 = 3;     WAIT, MOVE, ATTACK, SNEAK, SEARCH, DISARM_TRAP, SET_TRAP\n// global KNIGHT: u8 = 4;    WAIT, MOVE, ATTACK\n// global MAGE: u8 = 5;      WAIT, MOVE, ATTACK, CAST, CAST_FIREBALL\n// global ACTION_DEFINITIONS: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER * CLASS_COUNT] = [\n//     // [[0 as u8; ACTION_DEFINITION_SIZE]; MAX_ACTIONS_PER_CHARACTER], // 0 for no action\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n    \n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ARCHER]),\n//         build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//         build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//         build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[RITUALIST]),\n//         build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//         build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//         build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ROGUE]),\n//         build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//         build_sneak_action(class_energy_per_sneak[ROGUE]),\n//         build_search_action(class_energy_per_search[ROGUE], 1),\n//         build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[KNIGHT]),\n//         build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[MAGE]),\n//         build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//         build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//         build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n//         WAIT_ACTION,\n//         WAIT_ACTION\n//     // ]\n// ];\n// global \n// pub fn get_test_action_register() -> [u8; ACTION_DEFINITION_REGISTER_SIZE] {\n//     build_action_def_reg!([\n//         [\n//             build_move_action(class_energy_per_move[ARCHER]),\n//             build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//             build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//             build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[RITUALIST]),\n//             build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//             build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//             build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[ROGUE]),\n//             build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//             build_sneak_action(class_energy_per_sneak[ROGUE]),\n//             build_search_action(class_energy_per_search[ROGUE], 1),\n//             build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//             build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[KNIGHT]),\n//             build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[MAGE]),\n//             build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//             build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//             build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST),\n//             build_wait_action_def(),\n//             build_wait_action_def()\n//         ]\n//     ])\n// }\n// pub fn get_test_action_register() -> SerializedArenaActionDefinitions {\n//   let action_builder = arena_action_def_builder;\n//      [\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER)),\n//             std::field::bytes32_to_field(action_builder.build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT)), // arche),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n            \n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST, 255)),\n//             std::field::bytes32_to_field(action_builder.build_ritual_action(3, class_energy_per_ritual[RITUALIST], RITUAL_ROUNDS_FOR_WIN, WIN_BY_RITUAL)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_sneak_action(class_energy_per_sneak[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_search_action(class_energy_per_search[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_set_trap_action(class_energy_per_disarm[ROGUE], 1, ADD_OBSTACLE, TRAP)),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[KNIGHT])),\n//            std::field::bytes32_to_field( action_builder.build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT])),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[MAGE], MAGE, 7)),\n//             std::field::bytes32_to_field(action_builder.build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def())\n//         ]\n// }\n\n// struct CharacterClass {\n//     class: u8,\n//     damage: u8,\n//     energy_per_attack: u8,\n//     energy_per_cast: u8,\n//     energy_per_disarm: u8,\n//     energy_per_move: u8,\n//     energy_per_ritual: u8,\n//     energy_per_search: u8,\n//     energy_per_sneak: u8,\n// }\n\npub struct Character {\n    pub id: u8,\n    pub x: u8, // 5 bit\n    pub y: u8, // 4 bit\n    pub class: u8, // 3 bit\n    pub progress: u8, // 0 = idle, 1-15 = continuing action => 4 bit\n    pub health: u8,\n    pub has_been_seen: bool,\n    pub is_hidden: u1,\n    pub target_x: u8,\n    pub target_y: u8,\n    pub damage_mod: u8,\n    pub last_action: u8,\n    pub status: u8,\n    // pub wait_action: ActionDefinition,\n    pub actions: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1], // BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER>,\n}\n\n// pub fn resolve_action(action: u8, class: u8) -> ActionDefinition {\n//     let mut idx = class as u32 * MAX_ACTIONS_PER_CHARACTER + action as u32;\n//     if idx >= (ACTION_DEFINITIONS.len()) {\n//         idx = 0;\n//     }\n//     // assert(action as u32 < MAX_ACTIONS_PER_CHARACTER);\n//     // assert(class as u32 < CLASS_COUNT);\n//     ACTION_DEFINITIONS[idx]\n// }\n//     pub fn resolve_action(action: Action) -> ActionDefinition {\n//         // let idx = get_action_base_index(self.get_id(), action);\n//         ActionDefinition::new(action, ACTION_DEFINITIONS)\n// //        (idx, ACTION_DEFINITIONS)\n//         //resolve_action(action, self.class)\n//         // let mut a = action as u32;\n//         // if a >= self.actions.len() { a = 0; }\n//         // self.actions[a] //.get_unchecked(a)\n//     }\n//global wait_action: ActionDefinition = buld_wait_action_def();\n\n// global wait_action: ActionDefinition = action_builder.build_wait_action_def();\n\nimpl Character {\n    // pub fn new(id: u8 x: u8, y: u8, class: u8, status: u8, health: u8, has_been_seen: u8)\n    /// May throw\n\n\n    pub fn get_id(self) -> u8 {\n        self.id\n    }\n\n    pub fn get_x(self) -> u8 {\n        self.x\n    }\n\n    pub fn get_y(self) -> u8 {\n        self.y\n    }\n\n    pub fn get_class(self) -> u8 {\n        self.class\n    }\n\n    pub fn get_progress(self) -> u8 {\n        self.progress\n    }\n\n    pub fn get_status(self) -> u8 {\n        self.status\n    }\n\n    pub fn get_health(self) -> u8 {\n        self.health\n    }\n\n    pub fn get_has_been_seen(self) -> bool {\n        self.has_been_seen\n    }\n\n    pub fn get_target_x(self) -> u8 {\n        self.target_x\n    }\n\n    pub fn get_target_y(self) -> u8 {\n        self.target_y\n    }\n\n    pub fn get_is_hidden(self) -> u1 {\n      self.is_hidden\n    }\n\n    pub fn get_damage_mod(self) -> u8 {\n      self.damage_mod\n    }\n\n    pub fn get_action(self, action_idx: u8) -> (bool, ActionDefinition) {\n      /*if action_idx == 0 {\n        (true, self.wait_action)\n      } else */if action_idx <= MAX_ACTIONS_PER_CHARACTER as u8 {\n        (true, self.actions[action_idx])\n      } else {\n        (false, self.actions[0])\n      }\n    }\n\n    // pub fn get_energy_per_attack(self) -> u8 {\n    //     class_energy_per_attack[self.class]\n    // }\n\n    // pub fn get_energy_per_cast(self) -> u8 {\n    //     class_energy_per_cast[self.class]\n    // }\n\n    // pub fn get_energy_per_disarm(self) -> u8 {\n    //     class_energy_per_disarm[self.class]\n    // }\n\n    // pub fn get_energy_per_move(self) -> u8 {\n    //     class_energy_per_move[self.class]\n    // }\n\n    // pub fn get_energy_per_ritual(self) -> u8 {\n    //     class_energy_per_ritual[self.class]\n    // }\n\n    // pub fn get_energy_per_search(self) -> u8 {\n    //     class_energy_per_search[self.class]\n    // }\n\n    // pub fn get_energy_per_sneak(self) -> u8 {\n    //     class_energy_per_sneak[self.class]\n    // }\n\n    // pub fn get_energy_per_draw(self) -> u8 {\n    //     class_energy_per_draw[self.class]\n    // }\n\n    // pub fn get_energy_per_shoot(self) -> u8 {\n    //     class_energy_per_shoot[self.class]\n    // }\n\n    // pub fn get_damage(self, attack_type: u8) -> u8 {\n    //     self.damage_mod + class_damage[attack_type][self.class]\n    // }\n\n    pub fn get_last_action(self) -> u8 {\n      self.last_action\n    }\n\n    // pub fn can_sneak(self) -> bool {\n    //     class_energy_per_sneak[self.class] != 255\n    // }\n\n    // pub fn can_ritual(self) -> bool {\n    //     class_energy_per_ritual[self.class] != 255\n    // }\n\n    // pub fn can_cast_fireball(self) -> bool {\n    //     class_energy_per_cast[self.class] != 255\n    // }\n\n    pub fn can_shoot(self) -> bool {\n        self.class == ARCHER\n    }\n    // pub fn can_disarm(self) -> bool {\n    //     class_energy_per_disarm[self.class] != 255\n    // }\n\n    // pub fn can_search(self) -> bool {\n    //     class_energy_per_search[self.class] != 255\n    // }\n\n    fn is_pos_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_target_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_class_valid(class: u8) -> bool { class as u32 <= CLASS_COUNT }\n    fn is_status_valid(status: u8) -> bool { status < PROGRESS_COUNT }\n\n    pub fn is_valid(self) -> bool {\n        Character::is_pos_valid(self.x, self.y) &\n        Character::is_target_valid(self.target_x, self.target_y) &\n        Character::is_class_valid(self.class) &\n        Character::is_status_valid(self.progress)\n    }\n\n    pub fn serialize(self) -> (SerializedCharacter, SerializedArenaCharacterActionDefinitions) {\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n        assert(self.is_valid());\n        let packed_x = self.x + (self.class << WIDTH_BITS);\n        let packed_y = self.y + (self.progress << HEIGHT_BITS);\n        let packed_target_x = (self.target_x & WIDTH_MASK) + ((self.is_hidden as u8) << WIDTH_BITS);\n        let packed_target_y = (self.target_y & HEIGHT_MASK) + ((self.last_action as u8) << HEIGHT_BITS);\n\n        // let serialized_action_defs = self.actions.map(|a|std::field::bytes32_to_field(a));\n        let serialized_action_defs = [\n          std::field::bytes32_to_field(self.actions[1]),\n          std::field::bytes32_to_field(self.actions[2]),\n          std::field::bytes32_to_field(self.actions[3]),\n          std::field::bytes32_to_field(self.actions[4]),\n          std::field::bytes32_to_field(self.actions[5]),\n          std::field::bytes32_to_field(self.actions[6])\n        ];\n        \n        ([packed_x, packed_y, self.health, packed_target_x, packed_target_y, self.damage_mod], serialized_action_defs)\n    }\n\n    pub fn to_obstacle(self) -> (bool, Obstacle) {\n        comptime {\n            assert(MAX_CHARACTERS < (255 - MAX_OBSTACLES));\n        }\n        assert(self.is_valid());\n        new_obstacle(self.id + (MAX_OBSTACLES as u8), self.x, self.y, self.health, self.class)\n        // Obstacle {\n        //     id: self.id + (MAX_CHARACTERS as u8),\n        //     x: self.x,\n        //     y: self.y,\n        //     obstacle_type: self.class,\n        //     health: self.health,\n        //     //was_alive: \n        // }\n    }\n\n    pub fn move(self, x: u8, y: u8) -> Character {\n        let mut c = self;\n        c.x = x;\n        c.y = y;\n        c\n    }\n\n    pub fn take_damage(self, attack_type: u8, dmg: u8) -> Character {\n        let damage_after_resistances = get_attack_damage_to_tile(attack_type, dmg as u32, self.class);\n        let mut c = self;\n        if damage_after_resistances > (c.health as u32) {\n            c.health = 0;\n        } else {\n            c.health -= (damage_after_resistances as u8);\n        }\n        c\n    }\n\n    pub fn set_status(self, status: u8) -> Character {\n        assert(status < PROGRESS_COUNT);\n        let mut c = self;\n        c.progress = status;\n        c\n    }\n\n    pub fn create_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n        // let mut actions: BoundedVec<ActionDefinition, 6> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..6 {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions.push(ACTION_DEFINITIONS[idx + i]);\n        //     }\n        // }\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: 0,\n            health: 0,\n            has_been_seen: false,\n            is_hidden: 0,\n            target_x: 255,\n            target_y: 255,\n            damage_mod: 0,//: class_damage[class],\n            last_action: WAIT,\n            status: 0, // TODO: status\n            actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1]// BoundedVec::new()\n        };\n        assert(c.is_valid());\n        c\n    }\n\n    pub fn parse(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool, Character) {\n        // these asserts could be disabled for production\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n\n      let (is_valid, c) = parse_unconstrained(id, data, actions_data, wait_action, events, enemy_advance);\n      // assert(c.)\n\n        assert(c.is_valid());\n        (is_valid, c)\n    }\n}\n\nfn parse_unconstrained(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool,Character) {\n          let mut is_valid = true;\n\n        let split: [u8; 32] = data.to_be_bytes::<32>();\n        assert(split.len() == 32);\n        let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n        let y_packed = split[2 + id * 6 + 1]; // 4 bit y, 4 bit status\n        let mut health = split[2 + id * 6 + 2] as u16;\n        let target_x_packed = split[2 + id * 6 + 3]; // 5 bit target x, 1 bit hidden, 1 bit has target, 1 bit unused\n        let target_y_packed = split[2 + id * 6 + 4]; // 4 bit target y, 4 bit last action\n        let damage_mod = split[2 + id * 6 + 5]; // last byte: for the moment, use to save damage_mod (buffs, etc)\n\n        let x = x_packed & WIDTH_MASK;\n        let y = y_packed & HEIGHT_MASK;\n        let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n        if !Character::is_class_valid(class) {\n            debug!(quote { println(f\"Invalid class {class}\"); });\n            class = 0;\n            is_valid = false;\n        }\n\n        let progress = (y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n        softassert!(quote { is_valid }, quote { Character::is_status_valid(progress) }, quote { f\"Invalid status {progress} during character parsing {id}\" });\n\n        let target_x = target_x_packed & WIDTH_MASK;\n        let target_y = target_y_packed & HEIGHT_MASK;\n        let last_action = (target_y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n\n        let is_visible = is_visible(enemy_advance, x); //((target_x_packed >> 5) & 1) as u1;\n        let is_hidden = ((target_x_packed >> WIDTH_BITS) & 1) as u1;\n\n        let mut damage: u16 = 0;\n        for i in 0..MAX_EVENTS {\n            let event = events[i];\n            damage += event.get_applied_damage_to_my_asset(x, y, class);\n            // if events[i].actor_id == id {\n            //     let event = events[i];\n            //     if event.actor_id == id {\n            //         damage += event.get_applied_damage_to_my_asset(x, y, class);\n            //     }\n            // }\n        }\n        if damage > health {\n            health = 0;\n        } else {\n            health -= damage;\n        }\n\n        // let mut actions = [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]; //: BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..MAX_ACTIONS_PER_CHARACTER {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions[i] = ACTION_DEFINITIONS[idx + i];\n        //     }\n        // }\n\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: progress,\n            health: health as u8,\n            has_been_seen: is_visible, // TODO \n            is_hidden: is_hidden,\n            target_x: target_x,\n            target_y: target_y,\n            damage_mod: damage_mod,\n            last_action: last_action,\n            actions: [\n              wait_action,\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 1].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 2].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 3].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 4].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 5].to_be_bytes::<32>()\n            ],\n            status: 0 // TODO: status\n        };\n        (is_valid, c)\n}\n\n// unconstrained fn create_character_unconstrained(\n//   id: u8,\n//   x: u8,\n//   y: u8,\n//   class: u8,\n//   progress: u8,\n//   health: u8,\n//   has_been_seen: u8\n// )\n\nfn select_action_defs_of_character(actions: SerializedArenaActionDefinitions, char_id: u32) -> [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1] {\n  let mut result: [SerializedArenaCharacterActionDefinition] = &[std::field::bytes32_to_field(get_wait_action_def())];\n  let offset = char_id * MAX_ACTIONS_PER_CHARACTER;\n  for i in 0..MAX_ACTIONS_PER_CHARACTER {\n    result = result.push_back(actions[offset + i]);\n  }\n  result.as_array().map(|f|f.to_be_bytes())\n}\n\npub fn get_default_characters(side: u8) -> [Character; MAX_CHARACTERS] {\n    assert(side < 2, f\"Side is too large {side}\");\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let default_actions = get_test_action_register();\n\n    let x = |x| x * ((side + 1) % 2) + (WIDTH - 1 - x) * side;\n    [\n        Character { id: 0, x: x(2), y: 2, class: ARCHER, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 1), status: 0 },\n        Character { id: 1, x: x(2), y: 3, class: RITUALIST, health: 60, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 2), status: 0 },\n        Character { id: 2, x: x(2), y: 4, class: ROGUE, health: 80, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 3), status: 0 },\n        Character { id: 3, x: x(2), y: 5, class: KNIGHT, health: 120, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 4), status: 0 },\n        Character { id: 4, x: x(2), y: 6, class: MAGE, health: 40, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 5), status: 0 },\n    ]\n}\n\n#[export]\npub fn parse_characters(data: SerializedArenaCharacterRoster, actions_data: SerializedArenaActionDefinitions, events: [Event; MAX_EVENTS], enemy_advance: u8) -> pub (bool, [Character; MAX_CHARACTERS]) {\n    comptime { assert(MAX_CHARACTERS == 5); }\n\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut is_valid = true;\n\n    let wait_action = get_wait_action_def();\n\n    // no need to optimize, compiler automatically rolls this out\n    // let mut result: [Character; MAX_CHARACTERS] = [Character::create_character(0, 0, 0, 0), Character::create_character(1, 0, 0, 0), Character::create_character(2, 0, 0, 0), Character::create_character(3, 0, 0, 0), Character::create_character(4, 0, 0, 0)];\n    // for i in 0..(MAX_CHARACTERS as u8) {\n    //     let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action, events, enemy_advance);\n    //     is_valid &= curr_valid;\n    //     result[i] = curr_c;\n    // }\n\n        let (curr_valid, curr_c0) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[0] = curr_c0;\n        let (curr_valid, curr_c1) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[1] = curr_c1;\n        let (curr_valid, curr_c2) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[2] = curr_c2;\n        let (curr_valid, curr_c3) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[3] = curr_c3;\n        let (curr_valid, curr_c4) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[4] = curr_c4;\n    let result = [curr_c0, curr_c1, curr_c2, curr_c3, curr_c4];\n    (is_valid, result)\n}\n\npub fn get_test_my_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 100,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\npub fn get_test_their_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 255,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\n#[test]\nfn test_serialize_character() {\n    let mut character = Character {\n        id: 4,\n        x: 21,\n        y: 9,\n        class: 5,\n        progress: 9,\n        health: 129,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 31,\n        target_y: 9,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    };\n    let (field, _) = character.serialize();\n    assert(field[0] == (21 | (5 << 5)));\n    assert(field[1] == (9 | (9 << 4)));\n    assert(field[2] == 129);\n    assert(field[3] == 31); // TODO: why?\n    assert(field[4] == 9);\n    assert(field[5] == 0);\n}\n\n#[test]\nfn test_parse_character() {\n    let dummy_events = Event::get_test_dummy_events();\n    let data_array: [u8; 32] = [\n        0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        191 as u8, 249 as u8, 255 as u8, 255 as u8, 9 as u8, 255 as u8,\n        181 as u8, 153 as u8, 129 as u8, 127 as u8, 9 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n    ];\n    let data: Field = std::field::bytes32_to_field(data_array);\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    println(data);\n    assert(data == 0xbff9ffff09ffb599817f0900000000000000, f\"Failed assumption: data: {data} != 0xbff9ffff09ffb599817f0900000000000000\");\n    let (character_valid, character) = Character::parse(3, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_valid);\n    assert(character.get_id() == 3);\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 9);\n    assert(character.get_class() == 5);\n    assert(character.get_progress() == 9);\n    assert(character.get_health() == 129);\n    assert(character.get_has_been_seen());\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n\n    let (character_max_valid, character_max) = Character::parse(2, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_max_valid);\n    assert(character_max.get_id() == 2);\n    assert(character_max.get_x() == 31);\n    assert(character_max.get_y() == 9);\n    assert(character_max.get_class() == 5);\n    assert(character_max.get_progress() == 15);\n    assert(character_max.get_health() == 255);\n    assert(character_max.get_has_been_seen());\n    assert(character_max.get_target_x() == 31);\n    assert(character_max.get_target_y() == 9);\n\n    let (character_min_valid, character_min) = Character::parse(0, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_min_valid);\n    assert(character_min.get_id() == 0);\n    assert(character_min.get_x() == 0);\n    assert(character_min.get_y() == 0);\n    assert(character_min.get_class() == 0);\n    assert(character_min.get_progress() == 0);\n    assert(character_min.get_health() == 0);\n    assert(character_min.get_has_been_seen() == false);\n    assert(character_min.get_target_x() == 0);\n    assert(character_min.get_target_y() == 0);\n}\n\n#[test]\nfn test_parse_character_as_in_game() {\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    let data: Field = 0x1602ff1f09001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00;\n    let (character_valid, character) = Character::parse(0, data, dummy_actions, wait_action, Event::get_test_dummy_events(), 20);\n    assert(character_valid);\n    assert(character.get_id() == 0);\n    assert(character.get_x() == 22, character.get_x());\n    assert(character.get_y() == 2, character.get_y());\n    assert(character.get_class() == 0, character.get_class());\n    assert(character.get_progress() == 0, character.get_progress());\n    assert(character.get_health() == 255);\n    assert(character.get_has_been_seen() == true);\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n}\n\n#[export]\npub fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> pub (Field, SerializedArenaActionDefinitions) {\n    let mut result: [u8; 32] = [0; 32];\n    let mut actions: SerializedArenaActionDefinitions = [0; 30]; //&[].as_array();\n    for i in 0..MAX_CHARACTERS {\n        let (serialized_char_bytes, serialized_actions) = chars[i].serialize();\n        for j in 0..6 {\n            result[2 + i * 6 + j] = serialized_char_bytes[j];\n        }\n        for k in 0..MAX_ACTIONS_PER_CHARACTER {\n          actions[i * MAX_ACTIONS_PER_CHARACTER + k] = serialized_actions[k];\n        }\n    }\n    \n    (std::field::bytes32_to_field(result), actions)\n}\n\n/**\n* For now we will only take class into account.\n*/\npub fn get_attack_damage_to_tile(attack_type: u8, damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * resistances[attack_type * 8 + (class & 7)] as u32 / 100) as u32\n}\n\npub fn get_trap_damage_to_tile(damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * trap_resistances[class & 7] as u32 / 100) as u32\n}\n\n#[test]\nfn test_parse_character_round0() {\n  // let actions_data = .map(|f|f.to_be_bytes::<32>()).map(|f|std::field::bytes32_to_field(f));\n  let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let enemy_advance = 0x00;\n  let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0)\n  ];\n  let serialized_events = serialize_events(events);\n   println(f\"events: {serialized_events}\");\n\n  let parsed = parse_characters(data, [\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071020100a000020100a00000020000000002000000000000000,\n    0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n    0x023100081b161118120a010018120a01000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071008100a000008100a00000020000000002000000000000000,\n    0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n    0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071018100a000018100a00000020000000002000000000000000,\n    0x09f0000130060c002000000000200000000020000000002000000000000000,\n    0xf00001100610001005000100100500010020000000002000000000000000,\n    0xf00001301c0100100d000000100d00000020000000002000000000000000,\n    0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110061028100a000028100a00000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071010100a000010100a00000020000000002000000000000000,\n    0xf000071b1611002000000000000705000020000000002000000000000000,\n    0x6300061b161164150a020164150a02010020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000\n], events, enemy_advance);\n\n  assert(parsed.0);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/character.nr"},"74":{"source":"use arenalib::{ NO_EVENT, SEE_MOVE, RECEIVE_ATTACK, TRIGGERED_TRAP }; //, SEE_RITUAL, SEE_CAST, SEE_DRAW, SEE_SEARCH_TRAP, FOUND_TRAP\n// use crate::{ EMPTY, WALL };\nuse arenalib::{ EVENT_COUNT };\nuse arenalib::{ ATTACK_FIREBALL };\nuse arenalib::{ SERIALIZED_EVENT_BYTE_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD };\nuse arenalib::{ WIDTH };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS }; //, MAX_TRAPS\nuse arenalib::SerializedArenaEvents;\n// use crate::TRAPS_BUFFER_MASK;\nuse crate::map::get_distance;\n// use crate::character::Character;\nuse crate::character::{ get_attack_damage_to_tile, get_trap_damage_to_tile };\nuse crate::map::their_x_to_mine;\nuse skplg::{ debug, softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD };\n\npub struct Event {\n    pub event: u8,\n    pub actor_id: u8,\n    pub subtype: u8,\n    pub x: u8,\n    pub y: u8,\n    pub value: u8,\n    pub radius: u8,\n}\n\n\n    #[export]\n    pub fn parse_their_events(fields: SerializedArenaEvents) -> pub (bool, [Event; MAX_EVENTS]) {\n        comptime {\n            assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENT_BYTE_SIZE <= 32);\n            assert(SERIALIZED_EVENTS_ARRAY_SIZE * SERIALIZED_EVENTS_PER_FIELD == MAX_EVENTS);\n            assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n        }\n\n        let mut valid = true;\n        let mut events: [Event; MAX_EVENTS] = [Event::empty(0); MAX_EVENTS];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let split: [u8; 32] = fields[i].to_be_bytes::<32>(); //.to_be_bytes<32>();\n            //assert(split.len() == 32);\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                let raw_x = split[offset + 2];\n                let (x_parsed_valid, x_parsed) = their_x_to_mine(raw_x);\n                softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to calculate their_x_to_mine: {raw_x}\" });\n                events[i * SERIALIZED_EVENTS_PER_FIELD + j] = Event {\n                    event: split[offset],\n                    actor_id: split[offset + 1],\n                    x: x_parsed,\n                    y: split[offset + 3],\n                    value: split[offset + 4],\n                    subtype: split[offset + 5],\n                    radius: split[offset + 6],\n                };\n            }\n        }\n        (valid, events)\n    }\n    \n    #[export]\n    pub fn serialize_events(events: [Event; MAX_EVENTS]) -> pub SerializedArenaEvents {\n        assert(events.len() == MAX_EVENTS);\n        assert(MAX_EVENTS % SERIALIZED_EVENTS_PER_FIELD == 0);\n        assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n\n        let mut fields: [Field] = &[];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let mut data: [u8; 32] = [0; 32];\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let index = i * SERIALIZED_EVENTS_PER_FIELD + j;\n                let event = events[index];\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                data[offset] = event.event;\n                data[offset + 1] = event.actor_id;\n                data[offset + 2] = event.x;\n                data[offset + 3] = event.y;\n                data[offset + 4] = event.value;\n                data[offset + 5] = event.subtype;\n                data[offset + 6] = event.radius;\n            }\n            fields = fields.push_back(std::field::bytes32_to_field(data));\n        }\n        fields.as_array()\n    }\n    \n#[test]\nfn test_event_serde() {\n    let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 5, NO_EVENT, 1),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 6, NO_EVENT, 2),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 7, NO_EVENT, 3),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 8, NO_EVENT, 4)\n  ];\n\n  let serialized = serialize_events(events);\n  let (result_valid, result) = parse_their_events(serialized);\n  assert(result_valid);\n  assert(result[0].event == events[0].event);\n  assert(result[1].event == events[1].event);\n  assert(result[2].event == events[2].event);\n  assert(result[3].event == events[3].event);\n  assert(result[0].actor_id == events[0].actor_id);\n  assert(result[1].actor_id == events[1].actor_id);\n  assert(result[2].actor_id == events[2].actor_id);\n  assert(result[3].actor_id == events[3].actor_id);\n  assert(result[0].x == events[0].x);\n  assert(result[1].x == events[1].x);\n  assert(result[2].x == events[2].x);\n  assert(result[3].x == events[3].x);\n  assert(result[0].y == events[0].y);\n  assert(result[1].y == events[1].y);\n  assert(result[2].y == events[2].y);\n  assert(result[3].y == events[3].y);\n  assert(result[0].value == events[0].value);\n  assert(result[1].value == events[1].value);\n  assert(result[2].value == events[2].value);\n  assert(result[3].value == events[3].value);\n  assert(result[0].subtype == events[0].subtype);\n  assert(result[1].subtype == events[1].subtype);\n  assert(result[2].subtype == events[2].subtype);\n  assert(result[3].subtype == events[3].subtype);\n  assert(result[0].radius == events[0].radius);\n  assert(result[1].radius == events[1].radius);\n  assert(result[2].radius == events[2].radius);\n  assert(result[3].radius == events[3].radius);\n}\n    // fn affects_my_character(self, x: u8, y: u8) -> bool {\n    //     let distance = get_distance(self.x, self.y, x, y);\n    //     ((self.x == x) & (self.y == y)) | ((self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y))\n    // }\nimpl Event {\n    fn affects_my_obstacle(self, x: u8, y: u8) -> bool {\n        (self.x == x) & (self.y == y)\n    }\n\n    fn may_affect_my_other_characters(self) -> bool {\n        (self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL)\n    }\n\n    fn may_affect_my_obstacles(self) -> bool {\n        self.event == RECEIVE_ATTACK\n    }\n\n    /**\n    * For now we will only take class into account.\n    */\n    pub fn get_applied_damage_to_my_asset(self, x: u8, y: u8, tile: u8) -> u16 {\n        let mut damage = 0;\n        let radius = self.radius as u32;\n        let radius = radius * radius;\n    \n        if self.event == RECEIVE_ATTACK {\n            let distance = get_distance(self.x, self.y, x, y) as u32;\n            debug!(quote {\n                        // let event = self.event;\n                        // let actor = self.actor_id;\n                        // let self_x = self.x;\n                        // let self_y = self.y;\n                        // let val = self.value;\n                        // println(f\"GetAppliedDamageToMyAsset: Event({event}:{val} from {actor}@{self_x}|{self_y})@{x}|{y}: {distance} <= {radius}\");\n                    });\n            if distance <= radius {\n                let damage_raw = get_attack_damage_to_tile(self.subtype, self.value as u32, tile) as u32;\n                damage = damage_raw * (1 + radius - distance) / (radius + 1) as u32;\n                debug!(quote { println(f\"Deal damage: {damage_raw} * (1 + {radius} - {distance}) / ({radius} + 1) = {damage}\"); });\n            }\n            // if (self.x == x) & (self.y == y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile);\n            // } else if (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile) / 2;\n            // }\n        }\n        if self.event == TRIGGERED_TRAP {\n            damage = get_trap_damage_to_tile(self.value as u32, tile);\n        }\n        damage as u16\n    }\n\n    pub fn empty(actor_id: u8) -> Event {\n        Event {\n            event: NO_EVENT,\n            actor_id: actor_id,\n            x: 0,\n            y: 0,\n            value: 0,\n            subtype: 0,radius: 0\n        }\n    }\n\n    pub fn get_dummy_events() -> [Field; MAX_EVENTS] {\n        [0; MAX_EVENTS]\n    }\n\n    pub fn get_test_dummy_events() -> [Event; MAX_EVENTS] {\n        [Event::empty(0); MAX_EVENTS]\n    }\n}\n\npub fn build_std_event(event: u8, actor_id: u8, x: u8, y: u8) -> Event {\n    assert(event < EVENT_COUNT);\n    assert((actor_id as u32) < MAX_CHARACTERS);\n    assert((x < WIDTH) | (x == NOWHERE));\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: 0,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\n#[test]\nfn test_build_std_event() {\n    let event = build_std_event(SEE_MOVE, 1, 2, 3);\n    assert(event.event == SEE_MOVE);\n    assert(event.actor_id == 1);\n    assert(event.x == 2);\n    assert(event.y == 3);\n}\n\n#[test(should_fail)]\nfn test_build_std_event_fail() {\n    let event = build_std_event(EVENT_COUNT, 1, 2, 3);\n    assert(event.event == EVENT_COUNT);\n}\n\npub fn build_value_event(event: u8, actor_id: u8, x: u8, y: u8, value: u8) -> Event {\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\npub fn build_subtype_value_event(event_type: u8, actor_id: u8, x: u8, y: u8, value: u8, event_subtype: u8, radius: u8) -> Event {\n    Event {\n        event: event_type,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: event_subtype,\n        radius: radius,\n    }\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/event.nr"},"75":{"source":"mod common;\n// mod actionPreCalcEffect;\n// mod actionResultEvent;\n// mod actionResultEffect;\n// mod actionRequirements;\nmod action;\n// mod actionDefinitionRegister;\nmod bugs;\nuse arenalib::{ new_action };\npub use action::execute_action;\n// mod actionDefinition;\nmod character;\nuse character::{ Character };\nuse character::parse_characters;\nmod event;\nuse event::Event;\npub use event::{serialize_events, parse_their_events};\nmod obstacle;\nuse obstacle::Obstacle;\npub use obstacle::{ new_obstacle, parse_my_obstacles, parse_their_obstacles, get_obstacle_x, get_obstacle_y, get_obstacle_id, get_obstacle_type, get_obstacle_health, serialize_my_obstacles, get_default_obstacles };\nmod map;\nuse dep::std;\nuse obstacle::serialize_obstacle;\nuse obstacle::serialize_their_obstacles;\n// use action::ACTION_TARGET_X;\n// use action::ACTION_TARGET_Y;\n// use action::ACTION_TYPE;\nuse arenalib::{get_action_target_y, get_action_target_x, get_action_type};\nuse obstacle::serialize_my_obstacles_for_me;\nuse map::is_visible;\npub use arenalib::{SerializedArenaActionDefinitions, SerializedArenaActions, SerializedArenaCharacterRoster, SerializedArenaEnemyObstacles, SerializedArenaEvents, SerializedArenaObstacles};\nuse arenalib::arena_test_action_def_register;\nuse character::serialize_chars;\nuse skplg::{softassert, debug};\nuse arenalib::{serialize_actions, parse_actions};\n\nuse arenalib::{SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLE_BYTE_SIZE};\nuse arenalib::{WIDTH};\nuse arenalib::{MAX_ACTIONS, MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES};\nuse arenalib::{VIEW_DISTANCE};\nuse arenalib::{ARCHER, KNIGHT, ROGUE, MAGE, RITUALIST};\nuse arenalib::{MIN_FIREBALL_ROUNDS_FOR_CAST};\nuse arenalib::{SEE_MOVE, RECEIVE_ATTACK, NO_EVENT};\nuse arenalib::{ATTACK_FIREBALL, ATTACK_RANGED};\nuse arenalib::{WAIT};\nuse arenalib::get_wait_action_def;\nuse arenalib::get_test_action_register;\n\n// mod ResolvedAction;\n\n\n\n// #[export]\n// pub fn ext_can_move_to(x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle]) -> bool {\n//     assert(MAX_OBSTACLES == 24);\n//     let mut my_obstacles_parsed = Obstacle::parse_my_obstacles(my_obstacles, events).as_array();\n//     // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n//     // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n//     let enemy_objects_parsed = Obstacle::parse_their_obstacles(enemy_objects);\n\n//     let mut can = true;\n//     for i in 0..MAX_OBSTACLES {\n//         if !obstacles[i].is_traversible() & (obstacles[i].x == x) & (obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     for i in 0..their_obstacles.len() {\n//         if !their_obstacles[i].is_traversible() & (their_obstacles[i].x == x) & (their_obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     can\n// }\n\n// pub comptime global DEBUG: bool = false;\n// pub comptime fn debug(stmt: Quoted) -> Quoted {\n//     let debug_result = if DEBUG {\n//         stmt\n//     } else { quote {} };\n//     debug_result\n// }\n// pub comptime fn debugmsg<T>(msg: T) -> Quoted {\n//     debug!(quote { println($msg); })\n// }\n// pub comptime fn softassert(varname: Quoted, check: Quoted, msg: Quoted) -> Quoted {\n//     let result = if DEBUG {\n//         quote {\n//             $varname &= $check;\n//             if !($check) {\n//                 println($msg);\n//             }\n//         }\n//     } else {\n//         quote {\n//             $varname &= $check;\n//         }\n//     };\n//     result\n// }\n\n// // MAP\n// global WIDTH_BITS: u8 = 5;\n// global WIDTH_MASK: u8 = (1 << WIDTH_BITS) - 1;\n// global WIDTH: u8 = 1 << WIDTH_BITS;\n// global HEIGHT_BITS: u8 = 4;\n// global HEIGHT_MASK: u8 = (1 << HEIGHT_BITS) - 1;\n// global HEIGHT: u8 = 10;\n// // global NOWHERE: u8 = 255;\n\n// // CLASSES\n// //global UNKNOWN_CLASS: u8 = 0;\n// global ARCHER: u8 = 1;\n// global RITUALIST: u8 = 2;\n// global ROGUE: u8 = 3;\n// global KNIGHT: u8 = 4;\n// global MAGE: u8 = 5;\n// global CLASS_BITS: u8 = 3;\n// global CLASS_MASK: u8 = (1 << CLASS_BITS) - 1;\n// global CLASS_COUNT: u32 = 6;\n// global MAX_ACTIONS_PER_CHARACTER: u32 = 6;\n\n// // ACTIONS\n// global WAIT: u8 = 0;\n// //global SNEAK: u8 = 1;\n// //global MOVE: u8 = 2;          // => SEE_COLUMN (depr: MOVE)\n// //global RITUAL: u8 = 3;        // => SEE_RITUAL | WIN\n// //global SEARCH: u8 = 4;        // => SEE_SEARCH_TRAP\n// //global ATTACK: u8 = 5;        // => RECEIVE_ATTACK | DESTROY // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST: u8 = 6;          // => SEE_CAST // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST_FIREBALL: u8 = 7; // => RECEIVE_ATTACK // affects other characters if status == FIREBALL_ROUNDS_FOR_CAST\n// //global DRAW: u8 = 8;          // => SEE_DRAW\n// //global SHOOT: u8 = 9;         // => RECEIVE_ATTACK\n// //global TRIGGER_TRAP = 9;  // => TRIGGERED_TRAP ?????????\n// //global DISARM_TRAP: u8 = 10;  // => DESTROY\n// //global SET_TRAP: u8 = 11;\n// global ACTION_COUNT: u32 = 12;\n// pub global ACTION_RESULT_EVENT_COUNT: u32 = 4;\n// global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0;\n// global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1;\n// global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2;\n\n// // EVENTS\n// global NO_EVENT: u8 = 0 ;\n// // global DESTROY: u8 = 1;          // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //use coordinates to determine tile or trap that got destroyed and update map\n// //global DISCOVER = 2;         // actor_id = their_char or their_object when receive - handle to update enemy positions, got health & class (this is for all chars, not just the active one)\n// //global SEE_COLUMN = 2 ;      // y = the column the player sees => update objects list\n// global SEE_MOVE: u8 = 3 ;        // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //handle to update enemy positions => DISCOVER\n// //global SEE_SPELL = 4 ;       // actor_id = their_char when receive - need to handle effect via coordinates, => RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle my obstacles\n// global SEE_SEARCH_TRAP: u8 = 5 ; // actor_id = their_char when receive - need to create found trap event if there is a trap nearby => FOUND_TRAP\n// global SEE_RITUAL: u8 = 6 ;      // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_CAST: u8 = 7;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_DRAW: u8 = 8;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// //global RECEIVE_DAMAGE = 9;   // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client\n// global RECEIVE_ATTACK: u8 = 10;  // actor_id = 0 when receive - need to handle damage => // no need to events ... health of visible assets gets sent anyway and invisible ones will be updated during discovery //RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle in my obstacles\n// global TRIGGERED_TRAP: u8 = 11;  // actor_id = my_char when receive - need to handle damage (for now, later on we might want to handle other effects as well) => RECEIVE_DAMAGE\n// // global FOUND_TRAP: u8 = 12;      // actor_id = my_char when receive - no need to handle, only important to have on-chain for the client\n// global DISARMED_TRAP: u8 = 13;      // actor_id = their-char when receive - need to remove my trap from the map\n// global WIN: u8 = 14;\n// // global LOSE: u8 = 15;\n// global ADD_OBSTACLE: u8 = 4;\n// global EVENT_COUNT: u8 = 16;\n\n// // SUBTYPES:\n// global WIN_BY_RITUAL: u8 = 1;\n\n// // ATTACKS\n// global ATTACK_MELEE: u8 = 0;\n// global ATTACK_RANGED: u8 = 1;\n// global ATTACK_FIREBALL: u8 = 2;\n// // global ATTACK_COUNT: u8 = 3;\n// // TODO: instead of enum, use a global array of structs with damage, range, etc.\n\n\n// // TILES\n// global EMPTY: u8 = 0;\n// global WALL: u8 = 6;\n// global WATER: u8 = 7;\n// // global UNKNOWN_CLASS_TILE: u8 = 8;\n// global NON_EMPTY_WALKABLE_TILE_MIN: u8 = 9;\n// // global FLAG: u8 = 9;\n// global TRAP: u8 = 10;\n// // global TRAP_USED: u8 = 11;\n// // global TRAP_FOUND: u8 = 12;\n// // global BODY: u8 = 13;\n// // global BODY_LOOTED: u8 = 14;\n// // global FOG: u8 = 15;\n// global MAX_OBSTACLE_TYPE: u8 = 0x0f;\n// // global TILE_COUNT: u8 = 16;\n// // unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n// // STATUS\n// global RITUAL_ROUNDS_FOR_WIN: u8 = 15;\n// global MIN_FIREBALL_ROUNDS_FOR_CAST: u8 = 3;\n// global MAX_FIREBALL_ROUNDS_FOR_CAST: u8 = 6;\n// // global DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MIN_DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MAX_DRAW_ROUNDS_FOR_SHOOT: u8 = 3;\n// global PROGRESS_BITS: u8 = 4;\n// global PROGRESS_MASK: u8 = (1 << PROGRESS_BITS) - 1;\n// global PROGRESS_COUNT: u8 = 16 ; // just to be more in line with the other constants, actually used as a counter\n// global MAX_HEALTH: u8 = 255;\n\n// // GAMEPLAY\n// global VIEW_DISTANCE: u8 = 6;\n// // global MAX_TRAPS: u32 = 8; // note: only lowest bit of first byte of field is usable! => ! Field = 1 bit + 31 bytes!\n// // global TRAPS_BUFFER_SIZE: Field = 16;\n// // global TRAPS_BUFFER_MASK: Field = 15; // has to be 2^n - 1\n// global MAX_ACTIONS: u32 = 4;\n// global MAX_EVENTS: u32 = 4; // = MAX_ACTIONS // NO! handle traps in a different way (by passing as argument!)+ 4 (2 FOUND_TRAP + WIN/LOSE + 1 reserved)\n// global MAX_OBSTACLES: u32 = 24; // leave traps for now + MAX_TRAPS; // 24 + 8 player placeables\n// pub global MAX_CHARACTERS: u32 = 5;\n// global MIN_PROGRESS: u8 = 0;\n// pub global MAX_PROGRESS: u8 = PROGRESS_COUNT - 1;\n// global SERIALIZED_OBSTACLE_BYTE_SIZE: u32 = 3;//3\n// pub global SERIALIZED_OBSTACLES_ARRAY_SIZE: u32 = 3;//3 // TODO: we take 3 because 3 x 8 = MAX_OBSTACLES ... should assert on this (MAX_OBSTACLES + MAX_CHARACTERS + 7) / 8;\n// pub global SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE: u32 = SERIALIZED_OBSTACLES_ARRAY_SIZE + 1; // +1 because enemy characters are also serialized as obstacles\n// global SERIALIZED_OBSTACLES_PER_FIELD: u32 = 8;//8 // TODO: need to verify that SERIALIZED_OBSTACLES_ARRAY_SIZE * SERIALIZED_OBSTACLES_PER_FIELD = MAX_OBSTACLES!\n// global SERIALIZED_EVENT_BYTE_SIZE: u32 = 7;\n// pub global SERIALIZED_EVENTS_ARRAY_SIZE: u32 = 1; // MAX_EVENTS / SERIALIZED_EVENTS_PER_FIELD => 4 / 4 = 1\n// global SERIALIZED_EVENTS_PER_FIELD: u32 = 4; // 31 / 7 = 4\n// global SERIALIZED_ACTION_BYTE_SIZE: u32 = 5;\n// pub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n// global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4; // could be up to 6, but we only use 4\n\n\n// pub type SerializedArenaActionDefinitions = SerializedRosterActionDefinitions<MAX_ACTIONS_PER_CHARACTER, MAX_CHARACTERS>;\n// pub type SerializedArenaCharacterActionDefinitions = SerializedCharacterActionDefinitions<MAX_ACTIONS_PER_CHARACTER>;\n// pub type SerializedArenaCharacterActionDefinition = SerializedCharacterActionDefinition;\n// #[export]\n// fn tf(x: Field) -> (u32, [u8;32]) {\n//     let mut result: [u8;32] = [0;32];\n//     let bts = x.to_be_bytes::<32>();\n//     for j in 0..31 {\n//         result[j] = 2*j;//bts[j];\n//     }\n//     (32 , result)\n// }\n// i,\n// 20, 0 -> 25,\n// 25 -> 0, \n// x, 0, 0, d0,\n// x, 0, 0, 9d, 1, 0,\n// x, 0, 0, 1, 0, b4, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 91, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 23, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, d4, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, 66, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 50, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b9, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, c5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 55, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b2, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, e8, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2a, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, cb, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 9b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 5c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, a6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 86, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, d5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 38, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8e, 1, 0, 0, 1,\n// 0, 32, 1, 0, 1, 1, x, 0, 0, 1,\n// x, 0, 0, 1, x, 0, 0, 1, 0, 1, 1\n\n// i,\n// 20, 0, 1e -> 0, 0 -> 1e, 0\n// x, 0, 0, d0,\n// x, 0, 0, ba, 1, 0,\n// x, 0, 0, 1, 0, cf, 1, 0, 1, 1,\n\nfn get_actor_from_move(mut move: u32) -> u8 {\n    if (move % 2) == 1 {\n        move -= 1; //((move % 10) - 1) >> 1 // actually not needed ... but clearer this way\n    }\n    let single_digit: u32 = (move % 10 as u32) >> 1;\n    single_digit as u8\n}\n// 3, 1, 1, 1, 0, 1, 2, 0, 2, 8, 1, 0, 0, 1\n// 4, 2, 2, 0, x, 0, 0, 0, 4, a, 2, 0, 0, 2\n\n#[export]\npub fn hash_serialized_private_state(my_chars: SerializedArenaCharacterRoster, my_char_actions: SerializedArenaActionDefinitions, my_obstacles: SerializedArenaObstacles, secret: Field) -> pub Field {\n    // let my_chars_be_bytes: [u8; 32] = my_chars.to_be_bytes::<32>();\n    // assert(my_chars_be_bytes.len() == 32);\n    let gamestate_before_hash_calculated = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n    //let gamestate_before_hash_calculated_field = std::field::bytes32_to_field(gamestate_before_hash_calculated);\n    gamestate_before_hash_calculated\n}\n\n#[test]\nfn test_hash_match() {\n  let my_chars = 12345678901234567890;\n  let my_char_actions = [\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890\n  ];\n  let my_obstacles = [\n    12345678901234567890, 12345678901234567890, 12345678901234567890\n  ];\n  let secret = 12345678901234567890;\n\n  let hash1 = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n  let valid = hash_serialized_private_state(my_chars, my_char_actions, my_obstacles, secret);\n\n  assert(hash1 == valid, f\"{hash1} != {valid}\");\n}\n\n#[export]\nfn get_serialized_obstacle(id: u8, x: u8, y: u8, obstacle_type: u8) -> pub Field {\n    let mut result: [u8; 32] = [0; 32];\n    result[0] = id;\n    result[1] = x;\n    result[2] = y;\n    result[3] = obstacle_type;\n    std::field::bytes32_to_field(result)\n}\n\n// global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// global action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n\n\n#[export]\npub fn calculate_turn(\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions_input: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //mut my_obstacles_parsed: [[u8; 5]; 24],\n    actions_input: SerializedArenaActions,\n    // Common Inputs\n    move_input: u32, //pub\n    // Enemy Inputs\n    enemy_advance_input: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects_input: SerializedArenaEnemyObstacles, // pub\n    enemy_events_input: SerializedArenaEvents, // pub //MAX_EVENTS],\n\n) -> pub (bool, SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, [Obstacle; 24], u8, SerializedArenaEvents, SerializedArenaEnemyObstacles) {\n    let mut success = true;\n    \n// let action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n    //let actionRegister = ActionDefinitionRegister::new(my_char_actions_input);\n    // calculate enemy advance in our coordinates and shadow\n    // let (enemy_advance_valid, enemy_advance) = their_x_to_mine(enemy_advance);\n\n    // // more efficient to do this here, BUT leads to bad side effects for frontend (and it is not THAT costly)\n    // let enemy_advance = if enemy_advance_input >= WIDTH { 0 } else { WIDTH - enemy_advance_input - 1 };\n\n\n    // TODO: Validate map => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    let (events_valid, events) = parse_their_events(enemy_events_input);\n    softassert!(quote { success }, quote { events_valid }, quote { f\"Failed to parse their events {events}\" });\n\n    // let side = move as u1;\n    let (my_chars_valid, mut my_chars) = parse_characters(my_chars_input, my_char_actions_input, events, enemy_advance_input);\n    softassert!(quote { success }, quote { my_chars_valid }, quote { f\"Failed to parse my characters {my_chars}\" });\n\n    let actor_id = get_actor_from_move(move_input);\n    let mut actor = my_chars[actor_id]; //Character::parse(actor_id, my_chars, events);\n    \n    comptime {\n        assert(MAX_OBSTACLES == 24);\n    }\n\n    let (valid, my_obstacles_parsed) = parse_my_obstacles(my_obstacles_input, events);\n    softassert!(quote { success }, quote { valid }, quote { f\"Failed to parse my obstacles {my_obstacles_input}\" });\n    let mut my_obstacles_parsed: [Obstacle; MAX_OBSTACLES] = my_obstacles_parsed;\n\n    let (actions_valid, actions) = parse_actions(MAX_CHARACTERS as u8, actions_input); // actions.map(|action| Action::from_field(action));\n    softassert!(quote { success }, quote { actions_valid }, quote { f\"Failed to parse actions {actions_input}\" });\n    // let mut my_obstacles_parsed = my_obstacles_parsed.as_array();\n//    let (valid, mut my_obstacles_parsed) = parse_my_obstacles(my_obstacles, events).as_array();\n    // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n    let (enemy_objects_parsed_valid, enemy_objects_parsed) = parse_their_obstacles(enemy_objects_input);\n    softassert!(quote { success }, quote { enemy_objects_parsed_valid }, quote { f\"Failed to parse their obstacles {enemy_objects_input}\" });\n\n    let mut energy: u8 = 12;\n    let mut result_events_calculated: [Event] = &[];\n    for i in 0..MAX_ACTIONS {\n        // TODO: ensure that if actor committed suicide, it is not allowed to do any more actions\n        let action = actions[i];\n        //let resolved_action = actionRegister.resolve_action(action); //resolve_action(action);\n        let result = execute_action(action, enemy_advance_input, actor, energy, my_obstacles_parsed, enemy_objects_parsed);\n        //assert(result.0);\n        success &= result.0;\n        let result_event = result.1;\n        let internal_event = result.2;\n        actor = result.4;\n        energy = result.5;\n        \n        // 4461 / 5 = 892,2\n        my_chars = my_chars.map(|c| wb_apply_damage_to_char(c, result_event, actor));\n        // 16800 / 24 = 700\n        my_obstacles_parsed = my_obstacles_parsed.map(|obstacle| {\n            let (updated_obstacle_valid, updated_obstacle) = update_my_obstacle(obstacle, result_event);\n            //success = success & updated_obstacle_valid;\n            softassert!(quote { success }, quote { updated_obstacle_valid }, quote { f\"Failed to update my obstacle {obstacle}, {result_event}\" });\n            updated_obstacle\n        });\n\n        result_events_calculated = result_events_calculated.push_back(result_event);\n    }\n    let result_events_calculated = serialize_events(result_events_calculated.as_array());\n    assert(result_events_calculated.len() == SERIALIZED_EVENTS_ARRAY_SIZE);\n\n    // send death events => no need\n\n    // determine view range\n    let mut my_advance_calculated = 0;\n    for i in 0..MAX_CHARACTERS {\n        if my_chars[i].x > my_advance_calculated {\n            my_advance_calculated = my_chars[i].x;\n        }\n    }\n    my_advance_calculated += VIEW_DISTANCE;\n\n    let (serialized_characters, serialized_action_defs) = serialize_chars(my_chars);\n    let serialized_obstacles: [Field] = serialize_my_obstacles(enemy_advance_input, my_obstacles_parsed);\n    let (serialized_chars_as_obstacles_valid, serialized_chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance_input, my_chars);\n    // success = success & serialized_chars_as_obstacles_valid;\n    softassert!(quote { success }, quote { serialized_chars_as_obstacles_valid }, quote { f\"Failed to serialize chars as obstacles: {my_chars}\" });\n    let serialized_obstacles_for_enemy: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE] = serialized_obstacles.push_back(serialized_chars_as_obstacles).as_array();\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles_parsed);\n\n    (success, serialized_characters, serialized_action_defs, my_obstacles_parsed, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy)\n}\n\n\n\n#[export]\npub fn turn(\n    // verification_key: pub [Field; 114],\n    // proof: pub [Field; 93],\n    // public_inputs: pub [Field; 1 ],//+ 2 * SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE + 2 * SERIALIZED_EVENTS_ARRAY_SIZE],\n    // key_hash: pub Field,\n    // last_move: pub u32,\n    // last_enemy_advance: pub u8,\n    // last_enemy_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // last_events: pub [Field, SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_advance: pub u8,\n    // last_my_result_events: pub [Field; SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_result_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // Gamestate Hashes\n    // gamestate_before_hash: pub Field,\n    // gamestate_after_hash: pub Field,\n    // My Secret State\n    secret: Field,\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //my_obstacles: [[u8; 5]; 24],\n    actions: SerializedArenaActions,\n    // Common Inputs\n    move: u32, //pub\n    // Enemy Inputs\n    enemy_advance: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects: SerializedArenaEnemyObstacles, // pub\n    enemy_events: SerializedArenaEvents, // pub //MAX_EVENTS],\n    // My Results\n    my_result_advance: u8, // pub // 1 bit win, 1 bit lose, 1 bit reserved, 5 bits advance\n    my_result_events: SerializedArenaEvents, // pub\n    my_result_objects: SerializedArenaEnemyObstacles, // pub\n    // Gamestate Hashes\n    gamestate_before_hash: Field, // pub\n    gamestate_after_hash: Field, // pub\n) -> pub bool {\n    // Validate global constants (to make sure one didn't change one without updating dependet ones)\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    //let my_char_actions = arena_test_action_def_register;// get_test_action_register();\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(my_chars_input, my_char_actions, my_obstacles_input, secret);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    softassert!(quote { success }, quote { gamestate_before_hash == gamestate_before_hash_calculated_field }, quote { f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\" });\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        my_chars_input,\n        my_char_actions,\n        my_obstacles_input,\n        actions,\n        move,\n        enemy_advance,\n        enemy_objects,\n        enemy_events\n    );\n    softassert!(quote { success }, quote { turn_calc_valid }, quote { f\"Tun calculation failed\" });\n\n    // if side == 0 {\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x > my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated += VIEW_DISTANCE;\n    // } else {\n    //     my_advance_calculated = WIDTH - 1;\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x < my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated -= VIEW_DISTANCE;\n    // }\n    softassert!(quote { success }, quote { my_result_advance == my_advance_calculated }, quote { f\"Invalid result advance: {my_result_advance} != {my_advance_calculated}\" });\n\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        softassert!(quote { success }, quote { result_event_should == result_event_calculated }, quote { f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\" });\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    assert(my_result_objects.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE {\n        let my_result_object = my_result_objects[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        softassert!(quote { success }, quote { my_result_object == serialized_obstacle }, quote { f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\" });\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secret, serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    softassert!(quote { success }, quote { new_hash_bytes == gamestate_after_hash }, quote { f\"Invalid result hash: {new_hash_bytes} != {gamestate_after_hash}\" });\n    success\n}\n\nfn wb_apply_damage_to_char(mut c: Character, event: Event, actor: Character) -> Character {\n    if c.id == actor.id {\n        c = actor;\n    }\n    apply_damage_to_char(c, event)\n}\n\nfn apply_damage_to_char(c: Character, event: Event) -> Character {\n    let dmg = event.get_applied_damage_to_my_asset(c.x, c.y, c.class);\n    Character {\n        id: c.id,\n        x: c.x,\n        y: c.y,\n        class: c.class,\n        health: safe_subtract_dmg(c.health, dmg),\n        progress: c.progress,\n        target_x: c.target_x,\n        target_y: c.target_y,\n        has_been_seen: c.has_been_seen,\n        is_hidden: c.is_hidden,\n        damage_mod: c.damage_mod,\n        last_action: c.last_action,\n        actions: c.actions,\n        status: 0\n    }\n}\nfn update_my_obstacle(obstacle: Obstacle, event: Event) -> (bool, Obstacle) {\n    let dmg =\n        // event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle)) +\n        event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle));\n    new_obstacle(get_obstacle_id(obstacle), get_obstacle_x(obstacle), get_obstacle_y(obstacle), safe_subtract_dmg(get_obstacle_health(obstacle), dmg), get_obstacle_type(obstacle))\n    // Obstacle {\n    //     health: safe_subtract_dmg(obstacle.health, dmg),\n    //     id: obstacle.id,\n    //     x: obstacle.x,\n    //     y: obstacle.y,\n    //     obstacle_type: obstacle.obstacle_type,\n    // }\n}\n\nfn get_data_hash(secret: Field, characters: Field, character_actions: SerializedArenaActionDefinitions, obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> Field {\n  assert(character_actions.len() == 30);\n  assert(obstacles.len() == 3);\n  std::hash::poseidon2::Poseidon2::hash([\n    secret,\n    characters,\n    character_actions[0],\n    character_actions[1],\n    character_actions[2],\n    character_actions[3],\n    character_actions[4],\n    character_actions[5],\n    character_actions[6],\n    character_actions[7],\n    character_actions[8],\n    character_actions[9],\n    character_actions[10],\n    character_actions[11],\n    character_actions[12],\n    character_actions[13],\n    character_actions[14],\n    character_actions[15],\n    character_actions[16],\n    character_actions[17],\n    character_actions[18],\n    character_actions[19],\n    character_actions[20],\n    character_actions[21],\n    character_actions[22],\n    character_actions[23],\n    character_actions[24],\n    character_actions[25],\n    character_actions[26],\n    character_actions[27],\n    character_actions[28],\n    character_actions[29],\n    obstacles[0],\n    obstacles[1],\n    obstacles[2]\n  ], 2 + 30 + 3)\n}\n// fn get_data_hash(secret: [u8], characters: [u8], character_actions: [u8; ACTION_DEFINITION_REGISTER_SIZE], obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> [u8; 32] {\n//     assert(secret.len() == 32);\n//     assert(characters.len() == 32);\n\n//     let mut data: [u8; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE] = [0; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE];\n//     for i in 0..32 {\n//         data[i] = secret[i];\n//         data[i + 32] = characters[i];\n//     }\n//     let offset = 32 + 32;\n//     for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//         let obstacle: [u8; 32] = obstacles[i].to_be_bytes::<32>();\n//         assert(obstacle.len() == 32);\n//         for j in 0..32 {\n//             data[offset + i * 32 + j] = obstacle[j];\n//         }\n//     }\n//     let offset = 32 + 32 + 32 * SERIALIZED_OBSTACLES_ARRAY_SIZE;\n//     for i in 0..ACTION_DEFINITION_REGISTER_SIZE {\n//         data[offset + i] = character_actions[i];\n//     }\n//     // let offset = WIDTH * HEIGHT + 32 * 3;\n//     // for i in 0..10 {\n//     //     data[offset + i * 4] = (searched_traps[i] & 255) as u8;\n//     //     data[offset + i * 4 + 1] = ((searched_traps[i] >> 8) & 255) as u8;\n//     //     data[offset + i * 4 + 2] = ((searched_traps[i] >> 16) & 255) as u8;\n//     //     data[offset + i * 4 + 3] = ((searched_traps[i] >> 24) & 255) as u8;\n//     // }\n//     std::hash::blake3(data)\n// }\n\n// fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> Field {\n//     comptime {\n//         assert(MAX_CHARACTERS <= 5);\n//     }\n//     let mut result: [u8; 32] = [0; 32];\n//     for i in 0..MAX_CHARACTERS {\n//         let serialized = chars[i].serialize();\n//         for j in 0..6 {\n//             result[2 + i * 6 + j] = serialized[j];\n//         }\n//     }\n//     std::field::bytes32_to_field(result)\n// }\n\nfn serialize_chars_as_obstacles(enemy_advance: u8, chars: [Character; MAX_CHARACTERS]) -> (bool, Field) {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut result: [u8; 32] = [0; 32];\n    let mut valid_result = true;\n    for i in 0..MAX_CHARACTERS {\n        if (chars[i].is_hidden == 0) & is_visible(enemy_advance, chars[i].get_x()) {\n            let (valid, char_as_obstacle) = chars[i].to_obstacle();\n            let serialized = serialize_obstacle(char_as_obstacle);\n            valid_result = valid_result & valid;\n            result[2 + i * 3] = serialized[0];\n            result[2 + i * 3 + 1] = serialized[1];\n            result[2 + i * 3 + 2] = serialized[2];\n        }\n    }\n    (valid_result, std::field::bytes32_to_field(result))\n}\n\nfn safe_subtract_dmg(a: u8, b: u16) -> u8 {\n    let mut result = 0;\n    if (a as u16) > b {\n        result = a - (b as u8);\n    }\n    result\n}\n\nfn test_result_object_builder(enemy_advance: u8, chars: [Character; MAX_CHARACTERS], obs: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1]) {\n    let mut result: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        result[i] = obs[i];\n    }\n    let (valid, chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance, chars);\n    result[SERIALIZED_OBSTACLES_ARRAY_SIZE] = chars_as_obstacles;\n    (valid, result)\n}\n\n// fn test_helper_roster(actor: Character, mut chars: [Character; MAX_CHARACTERS]) -> [Character; MAX_CHARACTERS] {\n//     chars[actor.id] = actor;\n//     chars\n// }\n\n// fn test_helper_execute_move(move: u32, actor: Character, advances: [u8; 2], secret: [Field; 2], last_hashes: [Field; 2], chars: [[Character; MAX_CHARACTERS]; 2], obs: [[Obstacle; MAX_OBSTACLES]; 2], actions: [Action], my_events: [Event], their_events: [Event]) -> (u32, [Character; MAX_CHARACTERS], Field) {\n//     let side = move as u1;\n//     let other_side = (side as u8 + 1) as u1;\n//     let chars_after = test_helper_roster(actor, chars[side]);\n//     let my_obstacles_serialized = serialize_obstacles(advances[other_side], obs[side]);\n//     let secret_be_bytes: [u8; 32] = secret[side].to_be_bytes();\n//     assert(secret_be_bytes.len() == 32);\n//     let serialized_chars_after = serialize_chars(chars_after);\n//     let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes();\n//     assert(serialized_chars_after_be_bytes.len() == 32);\n//     let current_hash = std::field::bytes32_to_field(get_data_hash(secret_be_bytes, serialized_chars_after_be_bytes, my_obstacles_serialized)); \n\n//     let (enemy_objects_valid, enemy_objects) = test_result_object_builder(chars[other_side], serialize_obstacles(other_side, advances[side], obs[other_side]));\n//     assert(enemy_objects_valid, \"Invalid enemy objects\");\n//     let (my_result_objects_valid, my_result_objects) = test_result_object_builder(chars_after, my_obstacles_serialized);\n//     assert(my_result_objects_valid, \"Invalid my result objects\");\n\n//     let result = turn(\n//         secret[side],\n//         character::serialize_chars(chars[side]),\n//         my_obstacles_serialized,\n//         serialize_actions(actions),\n//         move,\n//         advances[other_side],\n//         enemy_objects,\n//         Event::serialize_events(their_events).as_array(),\n//         advances[side],\n//         Event::serialize_events(my_events).as_array(),\n//         my_result_objects,\n//         last_hashes[side],\n//         current_hash\n//     );\n//     assert(result, \"Invalid result\");\n\n//     (move + 1, chars_after, current_hash)\n// }\n\n// #[test]\n// fn test_main() {\n//     let secrets = [123456789, 9876543210];\n//     let mut chars = [ character::get_default_characters(0), character::get_default_characters(1) ];\n//     let mut obs = [ Obstacle::get_default_obstacles(0), Obstacle::get_default_obstacles(1) ];\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 2, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 3, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 4, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 5, target_y: 1 },\n//     ];\n//     let their_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let mut move = 0;\n//     let mut actor = chars[0][0].move(5, 1);\n//     let mut last_hashes = [ 0x12b8f97907a05ec6a77da3f70368fa3b02e166c74edab8ea0695d6f406146559, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n//     let mut advances = [2 + VIEW_DISTANCE, 29 - VIEW_DISTANCE];\n//     advances[0] = 5 + VIEW_DISTANCE;\n\n//     let mut side = move % 2;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 0 },\n//         Action { action: MOVE, actor: 0, target_x: 27, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(27, 0);\n//     advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 1, target_y: 3 },\n//         Action { action: MOVE, actor: 1, target_x: 0, target_y: 3 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(0, 3);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 2 },\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 1, target_x: 28, target_y: 1 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(28, 1);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n// }\n\n#[test]\nfn test_main_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions = arena_test_action_def_register.map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    println(secrets[side]);\n    println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    println(my_obstacles_serialized_for_me);\n    println(serialize_actions(actor.id, actions));\n    println(move);\n    println(advances[other_side]);\n    println(test_result_object_other_chars);\n    println(serialize_events(their_events));\n    println(advances[side]);\n    println(serialize_events(my_events));\n    println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let result = turn(\n        secrets[side],\n        serialized_chars_input,\n        serialized_char_actions_input,\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events),\n        advances[side],\n        serialize_events(my_events),\n        test_result_object_chars_after,\n        last_hashes[side],\n        current_hash\n    );\n    assert(result, \"Turn failed\");\n}\n\n\n#[test]\nfn test_calc_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions_raw = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000];\n    let test_actions = test_actions_raw.map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    // println(secrets[side]);\n    // println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    // println(my_obstacles_serialized_for_me);\n    // println(serialize_actions(actor.id, actions));\n    // println(move);\n    // println(advances[other_side]);\n    // println(test_result_object_other_chars);\n    // println(serialize_events(their_events));\n    // println(advances[side]);\n    // println(serialize_events(my_events));\n    // println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n\n\n\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    let my_char_actions = arena_test_action_def_register; //get_test_action_register();\n    println(\"my_char_actions\");\n    println(my_char_actions);\n    println(\"serialized_char_actions_input\");\n    println(serialized_char_actions_input);\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    let gamestate_before_hash = last_hashes[side];\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(serialized_chars_input, my_char_actions, my_obstacles_serialized_for_me, secrets[side]);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        serialized_chars_input,\n        arena_test_action_def_register, //serialized_char_actions_input,\n        // get_test_action_register(),\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events)\n    );\n    assert(turn_calc_valid, f\"Tun calculation failed\");\n    assert(advances[side] == my_advance_calculated, f\"Invalid result advance:  != {my_advance_calculated}\");\n\nlet my_result_events: [Field; SERIALIZED_EVENTS_ARRAY_SIZE] = serialize_events(my_events);\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        assert(result_event_should == result_event_calculated, f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\");\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    for i in 0..test_result_object_chars_after.len() {\n        let my_result_object = test_result_object_chars_after[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        assert(my_result_object == serialized_obstacle, f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\");\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secrets[side], serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    assert(new_hash_bytes == current_hash, f\"Invalid result hash: {new_hash_bytes} != {current_hash}\");\n}\n\n// #[export]\n// pub fn setup_obstacles(\n    \n// )\n\n#[test]\nfn test_calc_turn_0() {\n  let my_chars = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0, 0, 0, 0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n\n  let result = calculate_turn(my_chars, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events);\n\n  assert(result.0);\n}\n\nfn test_turn_0() {\n  let secret = 0x075bcd15;\n  let my_chars_input = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0,0,0,0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n  let my_result_advance = 0x12;\n  let my_result_objects = [0,0,0,0];\n  let my_result_events = [0xffff0000000000ffff0000000000ffff0000000000ffff000000000000];\n  let initial_hash = 0x07a86579c9d2236bd1c02ced0660e9280e1d9a73146a0c9c8e4d8e27d64d6565;\n  let final_hash = 0x2c7492b9fc2adae465ec974b512f12b29b486e7c268cca2c304330eac57dd680;\n\n  let result = turn(secret, my_chars_input, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events, my_result_advance, my_result_events, my_result_objects, initial_hash, final_hash);\n\n  assert(result);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/lib.nr"},"76":{"source":"use arenalib::{ WIDTH, WIDTH_MASK, VIEW_DISTANCE, MAX_OBSTACLES, MAX_ENEMY_OBSTACLES };\nuse crate::obstacle::{ Obstacle, get_obstacle_y, get_obstacle_x, is_obstacle_traversible };\nuse skplg::NOWHERE;\n\n// pub fn is_neighbor(curr_x: u8, curr_y: u8, x: u8, y: u8) -> bool {\n//     // assert(curr_x < WIDTH);\n//     // assert(curr_y < HEIGHT);\n//     // assert(x < WIDTH);\n//     // assert(y < HEIGHT);\n//     // validating coordinates is not the job of this function\n//     // only avoid overflows!\n\n\n//     let shifted_curr_x = std::wrapping_add(curr_x, 1);\n//     let shifted_curr_y = std::wrapping_add(curr_y, 1);\n//     let shifted_x = std::wrapping_add(x, 1);\n//     let shifted_y = std::wrapping_add(y, 1);\n\n//     ((shifted_curr_x == shifted_x) & (std::wrapping_add(shifted_curr_y, 1) >= shifted_y) & (shifted_curr_y <= std::wrapping_add(shifted_y, 1))) |\n//     ((shifted_curr_y == shifted_y) & (std::wrapping_add(shifted_curr_x, 1) >= shifted_x) & (shifted_curr_x <= std::wrapping_add(shifted_x, 1)))\n// }\n\n// global DISTANCE_TABLE_HEIGHT: u32 = HEIGHT as u32;\n// global DISTANCE_TABLE_WIDTH: u32 = WIDTH as u32;\n\n// unconstrained fn distance_sqrt(x: u32) -> u32 {\n//     let mut result: u32 = 0;\n//     for i in 0..DISTANCE_TABLE_WIDTH {\n//         if i * i == x {\n//             result = i;\n//             break;\n//         }\n//     }\n//     result\n// }\n\n// fn d(a: u8, b: u8) -> u8 {\n//     let d = a as i32 - b as i32;\n//     let d2 = d * d;\n//     assert(d2 >= 0);\n//     let d2u = d2 as u32;\n//     let result = unsafe {\n//         let sq = distance_sqrt(d2u);\n//         assert(sq * sq == d2u);\n//         sq\n//     };\n//     assert(result < DISTANCE_TABLE_WIDTH);\n//     comptime { assert(DISTANCE_TABLE_WIDTH <= 256) };\n//     result as u8\n// }\n// global DISTANCE_TABLE: [[u8; DISTANCE_TABLE_WIDTH]; DISTANCE_TABLE_HEIGHT] = [\n//     [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 2,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ],\n//     [ 3,  3,  3,  4,  4,  5,  6,  7,  8,  9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ],\n// ]\n\nglobal MAX_DISTANCE: u32 = 0xff * 0xff;\n\npub fn get_distance(curr_x: u8, curr_y: u8, x: u8, y: u8) -> u16 {\n    // assert(curr_x < WIDTH);\n    // assert(curr_y < HEIGHT);\n    // assert(x < WIDTH);\n    // assert(y < HEIGHT);\n    // validating coordinates is not the job of this function\n    // only avoid overflows!\n\n    // let dx = unsafe {\n    //     let diff_\n    //     distance_sqrt(x)\n    // }\n\n    let dx = if curr_x > x { curr_x - x } else { x - curr_x } as u32;\n    let dy = if curr_y > y { curr_y - y } else { y - curr_y } as u32;\n\n    // let dx = curr_x as i16 - x as i16;\n    // let dy = curr_y as i16 - y as i16;\n\n    let distance = (dx * dx + dy * dy) as u32;\n    if distance > MAX_DISTANCE {\n      MAX_DISTANCE as u16\n    } else {\n      distance as u16\n    }\n}\n\n\npub fn is_visible(enemy_advance: u8, x: u8) -> bool {\n    //(x >= enemy_advance) == (side == 0)\n    x >= enemy_advance\n}\n\n// TODO: This is for the future - fireballs, etc. only if we have line of sight\n// pub fn is_visible(curr_x: u8, curr_y: u8, x: u8, y: u8, map: &Map) -> bool {\n//     assert(curr_x < WIDTH);\n//     assert(curr_y < HEIGHT);\n//     assert(x < WIDTH);\n//     assert(y < HEIGHT);\n\n//     let mut x = curr_x as f32;\n//     let mut y = curr_y as f32;\n//     let x2 = x + 0.5;\n//     let y2 = y + 0.5;\n//     let dx = x2 - x;\n//     let dy = y2 - y;\n//     let mut t = 0.0;\n//     let mut max_t = 1.0;\n//     let mut x = x;\n//     let mut y = y;\n\n//     while t < max_t {\n//         let x = x + dx * t;\n//         let y = y + dy * t;\n//         let x = x as u8;\n//         let y = y as u8;\n\n//         if map.is_wall(x, y) {\n//             return false;\n//         }\n\n//         t += 0.1;\n//     }\n\n//     true\n// }\n\npub fn their_x_to_mine(x: u8) -> (bool, u8) {\n    if x == NOWHERE {\n        (true, NOWHERE)\n    } else {\n        (x < WIDTH, std::wrapping_sub(WIDTH - 1, x) & WIDTH_MASK)\n    }\n}\n\npub fn can_move_to(distance: u16, x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> bool {\n    let mut can = distance <= (VIEW_DISTANCE as u16 * VIEW_DISTANCE as u16); //x <= advance;\n\n    for i in 0..MAX_OBSTACLES {\n        if !is_obstacle_traversible(obstacles[i]) & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    for i in 0..MAX_ENEMY_OBSTACLES {\n        if !is_obstacle_traversible(their_obstacles[i]) & (get_obstacle_x(their_obstacles[i]) == x) & (get_obstacle_y(their_obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    can\n}\n// pub fn their_x_to_mine(side: u1, x: i8) -> i8 {\n//     let mul = side as i8;\n//     mul * 31 + 16 + x\n// }\n\n// x * s -16 + y = 0 if s == 0 => y = 16\n// x * s -16 + y = 31 if s == 1 => x = 31\n// y = 31 * s + 16 + x\n// s = 0:\n// x = -16 => y = 0\n// x = 15 => y = 31\n// s = 1:\n// x = -16 => y = 31\n// x = 15 => y = 0\n\n// pub fn serialize_x(x: i8) -> (bool, u8) {\n//     let valid = (x >= -(WIDTH / 2) as i8) & (x < (WIDTH / 2) as i8);\n//     (valid, (x + (WIDTH / 2) as i8) as u8)\n// }\n\n// pub fn deserialize_x(x: u8) -> (bool, i8) {\n//     let valid = x < WIDTH;\n//     (valid, x as i8 - (WIDTH / 2) as i8)\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/map.nr"},"77":{"source":"// use crate::MAX_OBSTACLES;\n// use crate::{ HEIGHT, WIDTH };\n// use crate::{ EMPTY, WALL, WATER };\n// use crate::{ MAX_EVENTS }; // MAX_CHARACTERS\n// // use crate::{ RECEIVE_ATTACK };\n// // use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\n// use crate::{ SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\n// use crate::event::Event;\n// use crate::map::{ is_visible }; //is_neighbor\n// use dep::std;\n\n// pub struct Obstacle {\n//     pub id: u8,\n//     pub x: u8,             // 5 bit\n//     pub y: u8,             // 4 bit\n//     pub health: u8,        // 8 bit\n//     pub obstacle_type: u8, // 4 bit\n// }\n\n// pub impl Obstacle {\n//     pub fn serialize(self) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         assert(self.y < 0x10, f\"Obstacle y is too large\");\n//         assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n\n//         let packed_y = self.obstacle_type * 0x10 + self.y;\n//         [ self.x, packed_y, self.health]\n//     }\n\n//     pub fn is_obstacle_traversible(self) -> bool {\n//         (self.obstacle_type >= NON_EMPTY_WALKABLE_TILE_MIN) | (self.obstacle_type == EMPTY)\n//     }\n\n//     pub fn parse_their_obstacles(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let health = field[2];\n//         let o = Obstacle {\n//             id: id,\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn parse_obstacle(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let mut health = field[2];\n//         if (obstacle_type == WALL) | (obstacle_type == WATER) {\n//             let mut damage = 0;\n//             for i in 0..MAX_EVENTS {\n//                 damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n//             }\n//             if damage > (health as u16) {\n//                 health = 0;\n//             } else {\n//                 health -= (damage as u8);\n//             }\n//         }\n//         let o = Obstacle {\n//             id: id, // + (MAX_CHARACTERS as u8),\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//             //was_alive: was_alive,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn is_valid(self) -> bool {\n//         (self.x < WIDTH) & (self.y < HEIGHT)\n//     }\n\n//     pub fn parse_their_obstacles(serialized_obstacles: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_their_obstacles(id, serialized_obstacle));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn parse_my_obstacles(serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE], events: [Event; MAX_EVENTS]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_obstacle(id, serialized_obstacle, events));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn serialize_obstacles(side: u1, enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n//         let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n//         for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//             let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n//                 if is_visible(side, enemy_advance, obstacle.x) {\n//                     let serialized_obstacle = obstacle.serialize();\n//                     for k in 0..3 {\n//                         serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n//                     }\n//                 }\n//             }\n//             serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n//         }\n//         serialized_obstacles\n//     }\n\n//     pub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n//         // assert(side < 2, f\"Side is too large {side}\");\n//         let x = |x| x * (((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n//         [\n//             new_obstacle( 0, x(0), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 1, x(1), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 2, x(3), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 3, x(4), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 4, x(5), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle( 5, x(5), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle( 6, x(5), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle( 7, x(5), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 8, x(4), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 9, x(3), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(10, x(1), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(11, x(0), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(12, x(7), y: 0, obstacle_type: 200, WALL),\n//             new_obstacle(13, x(7), y: 1, obstacle_type: 200, WALL),\n//             new_obstacle(14, x(7), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle(15, x(7), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle(16, x(7), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle(17, x(7), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle(18, x(6), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(19, x(7), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(20, x(5), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(21, x(6), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(22, x(7), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(23, x(8), y: 9, obstacle_type: 255, WATER),\n//         ]\n//     }\n// }\n\n\nuse arenalib::MAX_OBSTACLES;\nuse arenalib::{ HEIGHT, WIDTH };\nuse arenalib::{ EMPTY, WALL, WATER };\nuse arenalib::{ MAX_EVENTS, MAX_HEALTH, MAX_OBSTACLE_TYPE, MAX_ENEMY_OBSTACLES }; // MAX_CHARACTERS\n// use crate::{ RECEIVE_ATTACK };\n// use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\nuse arenalib::{ SerializedArenaEnemyObstacles, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\nuse arenalib::NON_EMPTY_WALKABLE_TILE_MIN;\nuse arenalib::SerializedArenaObstacles;\nuse crate::event::Event;\nuse crate::map::{ is_visible, their_x_to_mine }; //is_neighbor\nuse dep::std;\nuse skplg::{softassert, NOWHERE};\nuse arenalib::SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE;\nuse arenalib::MAX_CHARACTERS;\n\n// pub type Obstacle = [u8; 5];\npub struct Obstacle {\n    pub id: u8,\n    pub x: u8,             // 5 bit\n    pub y: u8,             // 4 bit\n    pub health: u8,        // 8 bit\n    pub obstacle_type: u8, // 4 bit\n}\npub fn get_obstacle_id(obstacle: Obstacle) -> u8 {\n    obstacle.id //obstacle[0]\n}\npub fn get_obstacle_x(obstacle: Obstacle) -> u8 {\n    obstacle.x //[1]\n}\npub fn get_obstacle_y(obstacle: Obstacle) -> u8 {\n    obstacle.y //[2]\n}\npub fn get_obstacle_health(obstacle: Obstacle) -> u8 {\n    obstacle.health //[3]\n}\npub fn get_obstacle_type(obstacle: Obstacle) -> u8 {\n    obstacle.obstacle_type //[4]\n}\n\n#[export]\npub fn new_obstacle(id: u8, x: u8, y: u8, health: u8, obstacle_type: u8) -> pub (bool, Obstacle) {\n  let valid = ((x < WIDTH) | (x == NOWHERE)) & ((y < HEIGHT) | (y == NOWHERE)) & (health <= MAX_HEALTH) & (obstacle_type <= MAX_OBSTACLE_TYPE) & (id as u32 < (MAX_OBSTACLES + MAX_CHARACTERS));\n    // let mut valid = true;\n    // softassert!(quote { valid }, quote { (x < WIDTH) | (x == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid x: {x} >= {WIDTH}\" });\n    // softassert!(quote { valid }, quote { (y < HEIGHT) | (y == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid y: {y} >= {HEIGHT}\" });\n    // softassert!(quote { valid }, quote { health <= MAX_HEALTH }, quote { f\"Cannot create Obstacle: Invalid health: {health} > {MAX_HEALTH}\" });\n    // softassert!(quote { valid }, quote { obstacle_type <= MAX_OBSTACLE_TYPE }, quote { f\"Cannot create Obstacle: Invalid obstacle type: {obstacle_type} > {MAX_OBSTACLE_TYPE}\" }); //TODO: not sure if this or is_valid???\n    // (valid, [ id, x, y, health, obstacle_type ])\n    (valid, Obstacle { id: id, x: x, y: y, health: health, obstacle_type: obstacle_type })\n}\n\n#[test]\nfn test_new_obstacle() {\n  let (val, o) = new_obstacle(0, 0, 2, 0xc8, 0x06);\n  assert(val);\n  assert(o.id == 0);\n}\n\n// #[export]\n// pub struct FrontendObstacle {\n//   pub id: u8,\n//   pub x: u8,\n//   pub y: u8,\n\n// }\n\npub fn serialize_obstacle(obstacle: Obstacle) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n    // we could assert here, since obstacles can only be create with new_obstacle?!\n    // assert(self.y < 0x10, f\"Obstacle y is too large\");\n    // assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n    comptime {\n        let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let packed_y = get_obstacle_type(obstacle) * 0x10 + get_obstacle_y(obstacle);\n                [ get_obstacle_x(obstacle), packed_y, get_obstacle_health(obstacle)]\n            }\n        } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n                [ get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_health(obstacle), get_obstacle_type(obstacle)]\n            }\n        } else {\n            quote {\n                assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n            }\n        };\n        q\n    }\n}\n\npub fn is_obstacle_traversible(obstacle: Obstacle) -> bool {\n    (get_obstacle_type(obstacle) >= NON_EMPTY_WALKABLE_TILE_MIN) | (get_obstacle_type(obstacle) == EMPTY)\n}\n\npub fn parse_their_obstacle(id: u8, fld: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> (bool, Obstacle) {\n    comptime {\n        assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n    }\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let mut valid = true;\n    let x_raw = fld[0];\n    let (x_parsed_valid, x_parsed) = their_x_to_mine(x_raw);\n    softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to convert their x to mine of their obstacle {id}: {x_raw}\" });\n    let y = fld[1] & 0x0F;\n    let obstacle_type = (fld[1]) / 0x10;\n    let health = fld[2];\n    let (obstacle_valid, obstacle) = new_obstacle(id, x_parsed, y, health, obstacle_type);\n    softassert!(quote { valid }, quote { obstacle_valid }, quote { f\"Failed to create new obstacle {id}, {x_parsed}, {y}, {health}, {obstacle_type}\" });\n    (valid, obstacle)\n    // let o = Obstacle {\n    //     id: id,\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn parse_obstacle(id: u8, f: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> (bool, Obstacle) {\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let x = f[0];\n    // let mut y = f[1];\n    // let mut obstacle_type = f[1];\n    // comptime {\n    //     let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n    //         quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let y = f[1] & 0x0F;\n                let obstacle_type = (f[1]) / 0x10;\n    //         }\n    //     } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n    //         quote {\n    //             assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n    //             y = f[1];\n    //             obstacle_type = f[3];\n    //         }\n    //     } else {\n    //         quote {\n    //             assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n    //         }\n    //     };\n    //     q\n    // }\n    // let y = f[1]; // & 0x0F;\n    // let obstacle_type = f[3]; //f[1] / 0x10;// (f[1] & 0xF0) / 0x10;\n    let mut health = f[2];\n    //if (obstacle_type == WALL) | (obstacle_type == WATER) {\n        let mut damage = 0;\n        for i in 0..MAX_EVENTS {\n            damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n        }\n        if damage > (health as u16) {\n            health = 0;\n        } else {\n            health -= (damage as u8);\n        }\n    //}\n    new_obstacle(id, x, y, health, obstacle_type)\n    // let o = Obstacle {\n    //     id: id, // + (MAX_CHARACTERS as u8),\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    //     //was_alive: was_alive,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn is_obstacle_valid(obstacle: Obstacle) -> bool {\n    (get_obstacle_x(obstacle) < WIDTH) & (get_obstacle_y(obstacle) < HEIGHT)\n}\n\npub fn parse_their_obstacles(serialized_obstacles: SerializedArenaEnemyObstacles) -> (bool, [Obstacle; MAX_ENEMY_OBSTACLES]) {\n  let (dummy_obstacle_valid, dummy_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n  assert(dummy_obstacle_valid);\n    let mut obstacles: [Obstacle; MAX_ENEMY_OBSTACLES] = [dummy_obstacle; MAX_ENEMY_OBSTACLES];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n            obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j] = obstacle; //s.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    let serialized_obstacle_field = serialized_obstacles[SERIALIZED_OBSTACLES_ARRAY_SIZE].to_be_bytes::<32>();\n    assert(serialized_obstacle_field.len() == 32);\n    for j in 0..MAX_CHARACTERS {\n      let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n      // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n      let id = (MAX_OBSTACLES + j) as u8;\n      let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n      obstacles[MAX_OBSTACLES + j] = obstacle; //s.push_back(obstacle);\n      valid_result = valid_result & valid;\n    }\n    (valid_result, obstacles)\n}\n\npub fn parse_my_obstacles(serialized_obstacles: SerializedArenaObstacles, events: [Event; MAX_EVENTS]) -> (bool, [Obstacle; MAX_OBSTACLES]) {\n    let mut obstacles: [Obstacle] = &[];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    for i in 0..serialized_obstacles.len() {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            //let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_obstacle(id, serialized_obstacle, events);\n            obstacles = obstacles.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    (valid_result, obstacles.as_array())\n}\n\n#[export]\npub fn serialize_my_obstacles_for_me(obstacles: [Obstacle; MAX_OBSTACLES]) -> pub [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            let serialized_obstacle = serialize_obstacle(obstacle);\n            for k in 0..3 {\n                serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\n\npub fn serialize_my_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let serialized_obstacle = serialize_obstacle(obstacle);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\npub fn serialize_their_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) {\n    let mut valid_result = true;\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let parsed_x = their_x_to_mine(get_obstacle_x(obstacle));\n                valid_result = valid_result & parsed_x.0;\n                let mirrored_obstacle = new_obstacle(\n                    get_obstacle_id(obstacle),\n                    parsed_x.1,\n                    get_obstacle_y(obstacle),\n                    get_obstacle_health(obstacle),\n                    get_obstacle_type(obstacle)\n                );\n                valid_result = valid_result & mirrored_obstacle.0;\n                let serialized_obstacle = serialize_obstacle(mirrored_obstacle.1);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    (valid_result, serialized_obstacles)\n}\n\nfn get_x_of_side(side: u1, x: u8) -> u8 {\n    x * ((side as u8 + 1) as u1) as u8 + side as u8 * (WIDTH - 1 - x)\n}\n\n#[test]\nfn test_x() {\n    let x8s0 = get_x_of_side(0, 8);\n    assert(x8s0 == 8, f\"{x8s0} != 8\");\n    let x8s1 = get_x_of_side(1, 8);\n    assert(x8s1 == 23, f\"{x8s1} != 23\");\n}\n\npub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n    // assert(side < 2, f\"Side is too large {side}\");\n    let x = |x| get_x_of_side(side, x); //(((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n    [\n        new_obstacle( 0, x(0), 2, 200, WALL).1,\n        new_obstacle( 1, x(1), 2, 200, WALL).1,\n        new_obstacle( 2, x(3), 2, 200, WALL).1,\n        new_obstacle( 3, x(4), 2, 200, WALL).1,\n        new_obstacle( 4, x(5), 3, 200, WALL).1,\n        new_obstacle( 5, x(5), 4, 200, WALL).1,\n        new_obstacle( 6, x(5), 5, 200, WALL).1,\n        new_obstacle( 7, x(5), 7, 200, WALL).1,\n        new_obstacle( 8, x(4), 7, 200, WALL).1,\n        new_obstacle( 9, x(3), 7, 200, WALL).1,\n        new_obstacle(10, x(1), 7, 200, WALL).1,\n        new_obstacle(11, x(0), 7, 200, WALL).1,\n        new_obstacle(12, x(7), 0, 200, WALL).1,\n        new_obstacle(13, x(7), 1, 200, WALL).1,\n        new_obstacle(14, x(7), 2, 200, WALL).1,\n        new_obstacle(15, x(7), 3, 200, WALL).1,\n        new_obstacle(16, x(7), 4, 200, WALL).1,\n        new_obstacle(17, x(7), 5, 200, WALL).1,\n        new_obstacle(18, x(6), 8, 255, WATER).1,\n        new_obstacle(19, x(7), 8, 255, WATER).1,\n        new_obstacle(20, x(5), 9, 255, WATER).1,\n        new_obstacle(21, x(6), 9, 255, WATER).1,\n        new_obstacle(22, x(7), 9, 255, WATER).1,\n        new_obstacle(23, x(8), 9, 255, WATER).1,\n        // new_obstacle(24, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(25, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(26, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(27, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(28, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(29, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(30, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(31, x(0), 0, 255, EMPTY).1,\n    ]\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/obstacle.nr"},"78":{"source":"use skplg::{softassert, UNREADABLE_BYTES_PER_FIELD, NOWHERE};\nuse skpla::{ACTION_BYTE_SIZE, Action, new_action, get_action_actor, get_action_type, get_action_target_x, get_action_target_y};\nuse crate::SerializedArenaActions;\nuse crate::{MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER};\nuse crate::{WIDTH, HEIGHT};\nuse crate::WAIT;\n\npub global SERIALIZED_ACTION_BYTE_SIZE: u32 = ACTION_BYTE_SIZE;\npub global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4;\npub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n\n// comptime fn get_serialized_actions_array_size() -> u32 {\n//   let needed_usable_bytes = MAX_ACTIONS * ACTION_BYTE_SIZE;\n//   let usable_bytes_per_field = 32 - UNREADABLE_BYTES_PER_FIELD;\n//   let field_count = needed_usable_bytes / usable_bytes_per_field;\n//   if field_count * usable_bytes_per_field == needed_usable_bytes {\n//     field_count\n//   } else {\n//     field_count + 1\n//   }\n// }\n\n\n  pub fn parse_actions(max_actor_id: u8, fields: SerializedArenaActions) -> (bool, [Action; MAX_ACTIONS]) {\n    let mut valid = true;\n    softassert!(quote { valid }, quote { fields.len() == SERIALIZED_ACTIONS_ARRAY_SIZE }, quote { f\"{fields} does not have size {SERIALIZED_ACTIONS_ARRAY_SIZE}\" });\n    comptime {\n      assert(SERIALIZED_ACTION_BYTE_SIZE == 4);\n    }\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n\n      let mut actions: [Action] = &[];\n      assert(fields.len() == 1);\n      // for i in 0..1 {\n      let i = 0;\n          let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n          assert(split.len() == 32);\n          let mut serialized_actions_per_field = SERIALIZED_ACTIONS_PER_FIELD;\n          if serialized_actions_per_field * (i + 1) > MAX_ACTIONS {\n            serialized_actions_per_field = MAX_ACTIONS - serialized_actions_per_field * i;\n          }\n          assert(serialized_actions_per_field == SERIALIZED_ACTIONS_PER_FIELD);\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              let action_type = split[offset];\n              let actor = split[offset + 1];\n              let target_x = split[offset + 2];\n              let target_y = split[offset + 3];\n\n              softassert!(quote { valid }, quote { action_type as u32 <= MAX_ACTIONS_PER_CHARACTER }, quote { f\"Invalid action: action type {action_type} > {MAX_ACTIONS_PER_CHARACTER}\" });\n              softassert!(quote { valid }, quote { actor <= max_actor_id }, quote { f\"Invalid action: action actor {actor} > {max_actor_id}\" });\n              softassert!(quote { valid }, quote { (target_x < WIDTH) | (target_x == NOWHERE) }, quote { f\"Invalid action: action type {target_x} >= {WIDTH} and not {NOWHERE}\" });\n              softassert!(quote { valid }, quote { (target_y < HEIGHT) | (target_y == NOWHERE) }, quote { f\"Invalid action: action type {target_y} >= {HEIGHT} and not {NOWHERE}\" });\n\n              actions = actions.push_back(new_action(\n                  action_type,\n                  actor,\n                  target_x,\n                  target_y\n              ));\n              /*Action {\n                  action: split[offset],\n                  actor: split[offset + 1],\n                  target_x: split[offset + 2],\n                  target_y: split[offset + 3],\n              }*/\n          }\n      // }\n      // println(actions);\n      (valid, actions.as_array())\n  }\n\n  /**\n  * Warning: This function can throw!!!\n  */\n  pub fn serialize_actions(actor_id: u8, actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n      assert(actions.len() <= MAX_ACTIONS);\n\n      let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, actor_id, NOWHERE, NOWHERE); MAX_ACTIONS];\n      for i in 0..actions.len() {\n          actions_stuffed[i] = actions[i];\n      }\n\n      let mut fields: [Field] = &[];\n      for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n          let mut data: [u8; 32] = [0; 32];\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n              let action = actions_stuffed[index];\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              data[offset] = get_action_type(action);\n              data[offset + 1] = get_action_actor(action);\n              data[offset + 2] = get_action_target_x(action);\n              data[offset + 3] = get_action_target_y(action);\n          }\n          fields = fields.push_back(std::field::bytes32_to_field(data));\n      }\n      fields.as_array()\n  }\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/arenalib/src/actionSerDe.nr"},"90":{"source":"use dep::std::{append::Append};\nuse skplg::UNREADABLE_BYTES_PER_FIELD;\n\npub trait ActionDefinitionPartBuilder<T> { fn new() -> T; }\npub type DEF_ROW<T> = (Quoted, u8, T);\npub comptime fn get_def_register_value(register: Quoted, bytes: u32, bits: u8, bitsize: u8) -> Quoted {\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    if bitsize == 8 {\n      quote { $register[$bytes] }\n      // quote { ($register / $multiplier) as u8 }\n    } else {\n      let divisor = 1 << bits;\n      let mask = std::wrapping_sub(1 << bitsize, 1);\n      if bitsize == 1 {\n        // quote { (($register / $multiplier) as u1) == 1 }\n        quote { (($register[$bytes] as u8 & $divisor as u8) != 0 as u8) }\n      } else {\n        quote { (($register[$bytes] as u8 / $divisor as u8) & $mask as u8) }\n        // quote { (($register / $multiplier) as u8) & $mask as u8 }\n      }\n    }\n}\npub comptime fn build_over_def_array<Env, T>(array: [DEF_ROW<T>], base_index: u32, builder: fn[Env] (u32, u8, Quoted, u8, T) -> Quoted) -> Quoted {\n  let mut result = quote {};\n  \n  let mut bits: u8 = 0;\n  let mut bytes: u32 = base_index;\n\n  for i in 0..array.len() {\n    let (varname, bitsize, args) = array[i];\n    assert(bitsize <= 8, f\"Invalid bit size: {bitsize}\");\n    if (bits + bitsize) > 8 {\n      bytes += 1;\n      bits = 0;\n    }\n    assert(bits < 8, f\"bits must not reach 8 or higher: {bits}\");\n\n    let new_result = builder(bytes, bits, varname, bitsize, args);\n    result = quote { $result $new_result };\n\n    bits += bitsize;\n  }\n  result\n}\npub comptime fn derive_action_def_def_builder<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let mut params: [(Quoted, Type)] = &[];\n  let mut last_byte: u32 = 0;\n  let mut result: Quoted = build_over_def_array(array, 0, |bytes, bits, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { u8 }.as_type() } else { quote { u8 }.as_type() };\n    params = params.push_back((varname, t));\n    let mut r = quote {};\n    if bytes != last_byte {\n      r = r.append(quote { , });\n    } else if (bytes + bits as u32) != 0 {\n      r = r.append(quote { + });\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = r.append(quote { $varname  });\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = r.append(quote { $varname as u8 * $multiplier });\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = r.append(quote { (( $varname & $mask ) * $multiplier) });\n      }\n    }\n    last_byte = bytes;\n    r\n  });\n  f.set_parameters(params);\n\n  let return_type = f.return_type();\n\n  f.set_body(quote { $return_type { register: [ $result ] } }.as_expr().unwrap());\n  // println(f.body());\n}\npub comptime fn get_action_def_def_register_size<T>(array: [DEF_ROW<T>]) -> u32 {\n  let mut size = 0;\n  let _ = build_over_def_array(array, 0, |bytes, _, _, _, _|{\n    size = bytes;\n    quote {}\n  });\n  size + 1\n}\npub comptime fn get_action_def_def_register_element_type() -> Type {\n  quote { u8 }.as_type()\n}\npub comptime fn get_action_def_def_register_type<T>(array: [DEF_ROW<T>]) -> Type {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  quote { [$et; $size] }.as_type()\n}\npub comptime fn derive_action_def_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  // let size = get_action_def_requirements_register_size();\n  let fields = s.fields([]);\n  assert(fields.len() == 1);\n  s.set_fields([(fields[0].0, get_action_def_def_register_type(array))]);\n}\npub comptime fn derive_action_def_def_struct_new<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  let t = get_action_def_def_register_type(array);\n  f.set_return_type(t);\n  f.set_body(quote { ActionRequirement { [0 as $et; $size] } }.as_expr().unwrap());\n}\npub comptime fn derive_frontend_action_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  let mut fields: [(Quoted, Type)] = &[];\n  let _ = build_over_def_array(array, UNREADABLE_BYTES_PER_FIELD, |_, _, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    fields = fields.push_back((varname, t));\n    quote {}\n  });\n  s.set_fields(fields);\n}\npub comptime fn derive_frontend_action_def_struct_builder<T>(param_name: Quoted, base_index: u32, array: [DEF_ROW<T>]) -> Quoted {\n  // let mut params: [(Quoted, Type)] = &[];\n  let mut first = true;\n  let mut result: Quoted = build_over_def_array(array, base_index, |bytes, bits, varname, bitsize, _|{\n    // let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    // params = params.push_back((varname, t));\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    let mut r = quote {};\n    if !first {\n      r = quote { , };\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = quote { $r $varname: $param_name[$bytes] };\n      // r = quote { $r $varname: ($param_name / $multiplier) as u8 };\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = quote { $r $varname: ($param_name[$bytes] & $multiplier) != 0 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u1) == 1 };\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = quote { $r $varname: (( $param_name[$bytes] / $multiplier) & $mask ) as u8 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u8) & $mask as u8 };\n      }\n    }\n    first = false;\n    r\n  });\n  // f.set_parameters(params);\n\n  // let return_type = f.return_type();\n  // // f.set_return_type(return_type.as_type());\n  // f.set_return_data();\n  // f.set_return_public(true);\n  // // println(result);\n  // f.\nresult\n  // quote {  $result } };\n}\n\n// pub global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2; // u2\n\n// global YES: u8 = 1;\n// global NO: u8 = 0;\n// global MIN_STATUS: u8 = 0;\n// global MAX_STATUS: u8 = 15;\n\n// // pub type ActionDefinitionRegister = \n// pub fn build_action_def_requirements_none() -> ActionRequirement {\n//   build_action_def_requirements(\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     MIN_STATUS,\n//     MAX_STATUS,\n//     0 as u8,\n//     255 as u8)\n// }\n// pub fn build_action_def_pre_calc_effects_idle() -> ActionPreCalcEffect {\n//   build_action_def_pre_calc_effect(\n//     WAIT,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1)\n// }\n// // comptime fn no_requirements() -> CtString {\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1, \n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         0 as u8,\n// //         NO as u1)\n// // }\n// pub fn build_action_def_result_event_none() -> ActionResultEvent {\n//   build_action_def_result_event(\n//     0,\n//     0,\n//     ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//     NO_EVENT,\n//     NO_EVENT,\n//     0 as u8\n//   )\n// }\n// // comptime fn no_event() -> CtString {\n// //     build_action_event_def(NO_EVENT, NO_EVENT, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 0 as u8)\n// // }\n// pub fn build_wait_action_def() -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements_none(),\n//     build_action_def_pre_calc_effects_idle(),\n//     build_action_def_result_effects(\n//       0 as u8,\n//       0 as u8,\n//       1 as u8,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_wait_action_def() -> CtString {\n// //     build_action_def(\n// //         no_requirements(),\n// //         no_event(),\n// //         no_event(),\n// //         1 as u8,\n// //         0 as u8,\n// //         ACTION_RESULT_COORDINATES_IDX_SELF,\n// //         NO as u1,\n// //         WAIT\n// //     )\n// // }\n// // pub global WAIT_ACTION: ActionDefinition = comptime { let x = build_wait_action_def(); f\"[{x}]\".quoted_contents() };\n// pub fn build_sneak_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0 as u8,\n//       1 as u8),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0 as u8,\n//       0 as u8,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       YES as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_sneak_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     no_event(), // TODO: not sure if on-seen we should not send a move event instead - that way one could sneak and stay hidden, but not sneak while visible\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_move_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       1),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_MOVE,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_move_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_MOVE, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_cast_action(this_action_id: u8, energy: u8, class: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_CAST,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_cast_action(this_action_id: u8, energy: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_CAST, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_ritual_action(cast_action_id: u8, energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       RITUAL_ROUNDS_FOR_WIN,\n//       MAX_STATUS,\n//       0,\n//       255),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_ritual_action(this_action_id: u8, energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         RITUAL_ROUNDS_FOR_WIN,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 255 as u8),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 255 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1), // TODO: Maybe set this to handle friendly fire???\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     cast_action_id)\n// // }\n// pub fn build_search_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_search_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS, // should be max of shoot\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_DRAW,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_DRAW, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       draw_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     draw_action_id)\n// // }\n// pub fn build_disarm_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_disarm_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_set_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         ADD_OBSTACLE,\n//         TRAP,\n//         0),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_set_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         YES as u1),\n// //     no_event(),\n// //     build_action_event_def(ADD_OBSTACLE, TRAP, 0 as u8, 50 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n\n// // pub fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // fn get_action_needs_target_free_space(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// // }\n// // fn get_action_needs_target_is_not_self(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// // }\n// // fn get_action_needs_status_visible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// // }\n// // fn get_action_needs_status_invisible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// // }\n// // fn get_action_needs_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_sets_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_removes_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_max_range(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_MAX_RANGE]\n// // }\n// // fn get_action_needs_min_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MIN_STATUS]\n// // }\n// // fn get_action_needs_max_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MAX_STATUS]\n// // }\n// // fn get_action_needed_energy(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDED_ENERGY]\n// // }\n// // fn get_action_unseen_event_is_internal(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_EVENT_IS_TRAP] == 1\n// // }\n// // fn get_action_result_event_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_event_not_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_not_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_not_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_not_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_not_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_not_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_status_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// // }\n// // fn get_action_move_to_target(action: ActionDefinition) -> u1 {\n// //     action.register[action.base_index + ACTION_MOVE_TO_TARGET] as u1\n// // }\n// // fn get_action_is_continuous(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_IS_CONTINUOUS] == 1\n// // }\n// // fn get_action_needs_previous_action(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_PREVIOUS_ACTION] as u8\n// // }\n\n// // pub global ACTION_DEFINITION_SIZE: u32 = (ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 5) as u32; // 2 bytes for move_to_target and status_multiplier\n// // pub global ACTION_DEFINITION_REGISTER_SIZE: u32 = ACTION_DEFINITION_SIZE * (1 + (MAX_ACTIONS_PER_CHARACTER - 1) * (CLASS_COUNT - 1));\n\n// // fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // pub struct ActionDefinitionRegister {\n// //   register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinitionRegister {\n// //   pub fn new(register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinitionRegister {\n// //     ActionDefinitionRegister {\n// //       register: register\n// //     }\n// //   }\n\n// //   pub fn resolve_action(self, action: Action) -> ActionDefinition {\n// //     ActionDefinition {\n// //       base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //       action: action,\n// //       register: self.register\n// //     }\n// //   }\n// // }\n\n// // pub struct ActionDefinition {\n// //     base_index: u16,\n// //     action: Action,\n// //     register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinition {\n// //     pub fn new(action: Action, register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinition {\n// //         ActionDefinition {\n// //             base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //             action: action,\n// //             register: register\n// //         }\n// //     }\n// // }\n\n// // impl ResolvedAction for ActionDefinition {\n// //     fn get_action_needs_target_free_space(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: ActionDefinition) -> u1 {\n// //         self.register[self.base_index + ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n\n// // pub struct TestActionDefinition {\n// //     pub register: [u8; ACTION_DEFINITION_SIZE],\n// //     pub action: Action,\n// // }\n\n// // impl ResolvedAction for TestActionDefinition {\n// //     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n// //         self.register[ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n// // #[test]\n// // fn test_execute_action() {\n// //     let action = build_test_action_def!(build_move_action(4), quote { 1, 2, 3, 4 }); //new_action(1, 2, 3, 4);\n// //     let my_advance = 10;\n// //     let their_advance = 1;\n// //     let actor = Character {\n// //         id: 2,\n// //         x: 2,\n// //         y: 4,\n// //         target_x: 0,\n// //         target_y: 0,\n// //         health: 255,\n// //         damage_mod: 1,\n// //         last_action: WAIT,\n// //         class: MAGE,\n// //         is_hidden: 0 as u1,\n// //         has_been_seen: true,\n// //         status: 0,\n// //         actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]\n// //     };\n// //     let energy = 15;\n// //     let my_obstacles = get_default_obstacles(0);\n// //     let their_obstacles = get_default_obstacles(1);\n// //     let (valid, event, internal_event, c, result_energy) = execute_action(\n// //         action,\n// //         my_advance,\n// //         their_advance,\n// //         actor,\n// //         energy,\n// //         my_obstacles,\n// //         their_obstacles\n// //     );\n// //     assert(valid, \"valid\");\n// //     assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n// //     assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n// //     assert(event.x == action.get_action_target_x(), f\"{event}.target_x is not action target x\");\n// //     assert(event.y == action.get_action_target_y(), f\"{event}.target_y is not action target y\");\n// //     assert(c.x == event.x, f\"{c}.x is not action target x\");\n// //     assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n// //     assert(result_energy == 11, f\"{result_energy} != 11\");\n// // }\n\n// // #[export]\n// // pub fn build_action_register(actions: [])\n\npub type CharacterActionDefinition = [u8; 32];\npub type CharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [CharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedCharacterActionDefinition = Field;\npub type SerializedCharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedRosterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32, let MAX_CHARACTERS: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS];","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionDefinition.nr"},"91":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionRequirements::{get_action_def_requirements_base_index, get_action_def_requirements_byte_size};\nuse std::append::Append;\n\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_PRE_CALC_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { pre_calc_effect_continues_action }, 3, |continued_action|quote { let continues_action: bool = $continued_action as u8 == actor_last_action; }),\n    action_def_def(quote { pre_calc_effect_is_continuous }, 1, |is_continuous|quote { let is_continuous: bool = $is_continuous as bool; }),\n    action_def_def(quote { pre_calc_effect_interrupts }, 1, |is_interrupting|quote { let is_interrupting: bool = $is_interrupting as bool; }),\n    action_def_def(quote { pre_calc_effect_allow_retargeting }, 1, |allows_retargetting|quote { let not_interrupted_through_retargeting: bool = $allows_retargetting as bool | ((action_target_x == actor_target_x) & (action_target_y == actor_target_y)); })\n];\npub comptime fn get_action_def_pre_calc_base_index() -> u32 {\n  get_action_def_requirements_byte_size()+get_action_def_requirements_base_index()\n}\n\npub comptime fn get_action_def_pre_calc_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_PRE_CALC_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_pre_calc_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n// }\n#[derive_action_def_def_pre_calc_event_struct]\npub struct ActionPreCalcEffect {\n  pub register: [u8; 32]\n}\nimpl ActionPreCalcEffect {\n  #[derive_action_def_pre_calc_effect_struct_new]\n  pub fn new() -> ActionPreCalcEffect {\n    ActionPreCalcEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_pre_calc_effect_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_pre_calc_effect_builder]\npub fn build_action_def_pre_calc_effect() -> pub ActionPreCalcEffect { ActionPreCalcEffect::new() }\n\npub comptime fn apply_action_pre_calc_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_pre_calc_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_PRE_CALC_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  quote {\n    $result\n    is_not_interrupted = (\n      ((!is_continuous) as u8 * (!is_interrupting) as u8) + // that's the ID of the wait action => leave status, but not continuous\n      ((is_continuous) as u8 * continues_action as u8 * not_interrupted_through_retargeting as u8)\n    ) > 0;\n\n    actor_progress *= is_not_interrupted as u8;\n  }\n}\n\npub comptime fn set_action_def_pre_calc_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_pre_calc_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_pre_calc_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_pre_calc_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[derive_frontend_action_def_pre_calc_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefPreCalcEffects {}\n\n\npub comptime fn derive_frontend_action_def_pre_calc_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_pre_calc_base_index(), ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n  quote { FrontendActionDefPreCalcEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionPreCalcEffect.nr"},"92":{"source":"use skplg::{UNREADABLE_BYTES_PER_FIELD, softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse std::append::Append;\nuse crate::{actionDefinition::derive_frontend_action_def_struct, actionDefinition::derive_frontend_action_def_struct_builder};\n\n    // fn get_action_req_target_free_space(self) -> bool;\n    // fn get_action_req_target_is_not_self(self) -> bool;\n    // fn get_action_req_status_visible(self) -> bool;\n    // fn get_action_req_status_invisible(self) -> bool;\n    // fn get_action_req_status_hidden(self) -> bool;\n    // fn get_action_req_max_range(self) -> u8;\n    // fn get_action_req_min_status(self) -> u8;\n    // fn get_action_req_max_status(self) -> u8;\n    // fn get_action_req_energy(self) -> u8;\n    // fn get_action_req_previous_action(self) -> u8;\npub type ActionDefDefRequirementCheck = (Quoted, Quoted);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, expr: Quoted, msg: Quoted) -> DEF_ROW<ActionDefDefRequirementCheck> {\n    (varname, bit_size, (expr, msg))\n}\n// comptime global ACTION_DEF_DEF_FIELD_COUNT: u32 = 11;\nglobal ACTION_DEF_DEF_REQUIREMENTS: [DEF_ROW<ActionDefDefRequirementCheck>] = [\n    action_def_def(quote { action_req_target_free_space }, 1, quote { can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles) }, quote { f\"Target space cannot be moved to {action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" }),\n    action_def_def(quote { action_req_target_is_not_self }, 1, quote { (actor_x != action_target_x) | (actor_y != action_target_y) }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" }),\n    action_def_def(quote { action_req_status_visible }, 1, quote { actor_is_in_view_range & !actor_is_hidden },  quote { f\"Character must be fully visible for action {action_type}: in_view_range: {actor_is_in_view_range} & !hidden {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_invisible }, 1, quote { !actor_is_in_view_range | actor_is_hidden }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {actor_is_in_view_range} || hidden: {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_hidden }, 1, quote { actor_is_hidden }, quote { f\"Character needs to be hidden to perform action {action_type}\" }),\n    // action_def_def(quote { action_req_previous_action }, 3, quote { true }, quote { f\"\" }),\n    action_def_def(quote { action_req_min_progress }, 4, quote { action_req_min_progress as u8 <= actor_progress as u8 }, quote { f\"Character needs min progress {action_req_min_progress} to perform action {action_type}, but only has {actor_progress}\" }),\n    action_def_def(quote { action_req_max_progress }, 4, quote { action_req_max_progress as u8 >= actor_progress as u8 }, quote { f\"Character cannot have a higher progress than {action_req_max_progress} to perform action {action_type}: got {actor_progress}\" }),\n    action_def_def(quote { action_req_status }, 4, quote { (action_req_status as u8 == 0 as u8) | (action_req_status as u8 == actor_progress as u8) }, quote { f\"Character can only perform action {action_type} while having status {action_req_status}. Invalid status {actor_status}\" }),\n    // action_def_def(quote { action_req_required_energy }, 4, quote { action_req_required_energy <= energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_req_required_energy}\" }),\n    action_def_def(quote { action_req_max_range }, 8, quote { distance as u16 <= (action_req_max_range as u16) * (action_req_max_range as u16) }, quote { f\"Character is out of range! Distance: {distance} > {action_req_max_range}: {{{actor_x},{actor_y}}} - {{{action_target_x},{action_target_y}}} with {action_req_max_range}\" }),\n];\npub comptime fn get_action_def_requirements_base_index() -> u32 {\n  UNREADABLE_BYTES_PER_FIELD as u32\n}\n\npub comptime fn get_action_def_requirements_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_REQUIREMENTS)\n}\n\ncomptime fn derive_action_def_def_req_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n// comptime fn derive_action_def_requirements_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_REQUIREMENTS);\n// }\n\n#[derive_action_def_def_req_struct]\npub struct ActionRequirement {\n  pub register: [u8; 32]\n}\nimpl ActionRequirement {\n  #[derive_action_def_requirements_struct_new()]\n  pub fn new() -> ActionRequirement {\n    ActionRequirement { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_req_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[export]\n#[derive_action_def_def_req_builder]\npub fn build_action_def_requirements() -> pub ActionRequirement { ActionRequirement::new() }\n\npub comptime fn validate_action_requirements(valid_varname: Quoted, register: Quoted) -> Quoted {\n  let mut result = build_over_def_array(ACTION_DEF_DEF_REQUIREMENTS, get_action_def_requirements_base_index(), |bytes, bits, varname, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    // let varname = f\"action_requirement_{i}_is_valid\".quoted_contents();\n    let (checkexpr, msg) = args;\n    let check = if bitsize == 1 { quote { !($varname as bool) | ($checkexpr) } } else { quote { $checkexpr } };\n    let sa = softassert(valid_varname, check, msg);\n    quote {\n      let $varname = $expr;\n      $sa\n    }\n  });\n  // println(result);\n  // quote { assert(1==1); }\n  result\n}\n\npub comptime fn set_action_def_requirements_in_action_def(requirements: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_requirements_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_requirements_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $requirements.register[$i]; });\n    // result = quote { $result $action_def += $requirements.register[$i] as Field * $multiplier; };\n    // multiplier *= 2.pow_32(8);\n  }\n  // println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_requirements_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[derive_frontend_action_def_requirements_struct]\n#[derive(Default)]\npub struct FrontendActionDefRequirements {}\n\n\npub comptime fn derive_frontend_action_def_requirements_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_requirements_base_index(), ACTION_DEF_DEF_REQUIREMENTS);\n  // println(content);\n  quote { FrontendActionDefRequirements { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionRequirements.nr"},"93":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse skplg::softassert;\nuse crate::actionPreCalcEffect::{get_action_def_pre_calc_base_index, get_action_def_pre_calc_effects_byte_size};\nuse std::append::Append;\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { action_result_required_energy }, 4, |action_required_energy|{\n      let check = softassert(quote { is_valid }, quote { action_required_energy <= result_energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_required_energy}\" });\n      quote {\n        let action_required_energy = $action_required_energy;\n        $check\n        result_energy = std::wrapping_sub(result_energy, action_required_energy);\n      }\n    }),\n    action_def_def(quote { action_result_progress_increment }, 4, |progress_increment|quote { let action_result_effect_progress_increment: u32 = $progress_increment as u32; }),\n    action_def_def(quote { action_result_progress_multiplier }, 2, |progress_multiplier|quote { let action_result_effect_progress_multiplier: u32 = $progress_multiplier as u32; }),\n    action_def_def(quote { action_result_move_to_target }, 1, |move_to_target|quote { result_coords = coords[$move_to_target as u8]; }),\n    action_def_def(quote { action_result_hide }, 1, |hide|quote { let action_result_effect_hide: bool = $hide as bool; }),\n    action_def_def(quote { action_result_reveal }, 1, |leave_shadows|quote { let action_result_effect_leave_shadows: bool = $leave_shadows as bool; })\n];\npub comptime fn get_action_def_result_effect_base_index() -> u32 {\n  get_action_def_pre_calc_base_index() + get_action_def_pre_calc_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_result_effect_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n// }\n#[derive_action_def_def_result_effect_struct]\npub struct ActionResultEffect {\n  pub register: [u8; 32]\n}\nimpl ActionResultEffect {\n  //#[derive_action_def_result_effects_struct_new]\n  pub fn new() -> ActionResultEffect {\n    ActionResultEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_effects_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_result_effects_builder]\npub fn build_action_def_result_effects() -> pub ActionResultEffect { ActionResultEffect::new() }\n\npub comptime fn apply_action_result_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_effect_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n// println(result);\n  quote {\n    $result\n\n    let result_progress_raw = actor_progress as u32 * action_result_effect_progress_multiplier + action_result_effect_progress_increment;\n    //softassert!(quote { is_valid }, quote { result_progress_raw <= MAX_PROGRESS as u32 }, quote { f\"Invalid result progress: {result_progress_raw} > {MAX_PROGRESS}\" });\n    result_progress = result_progress_raw as u8;\n\n    result_is_hidden = (result_is_hidden & !action_result_effect_leave_shadows) | action_result_effect_hide;\n    result_is_visible = !result_is_hidden & is_visible(enemy_advance, result_coords.0);\n  }\n}\n\npub comptime fn set_action_def_result_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_result_effect_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_result_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[derive_frontend_action_def_result_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEffects {}\n\n\npub comptime fn derive_frontend_action_def_result_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_result_effect_base_index(), ACTION_DEF_DEF_RESULT_EFFECTS);\n  quote { FrontendActionDefResultEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEffect.nr"},"94":{"source":"// pub global ACTION_RESULT_EVENT_TYPE: u8 = 0;\n// pub global ACTION_RESULT_EVENT_SUBTYPE: u8 = 1;\n// pub global ACTION_RESULT_EVENT_VALUE_MULTIPLIER: u8 = 2;\n// pub global ACTION_RESULT_EVENT_VALUE_FIXED_ADDITION: u8 = 3;\n// pub global ACTION_RESULT_EVENT_COORD_IDX: u8 = 4;\n// pub global ACTION_RESULT_EVENT_RADIUS: u8 = 5;\n// pub comptime fn to_action_result_event(event_type: Quoted, subtype: Quoted, val_mul: Quoted, val_add: Quoted, coord_idx: Quoted, radius: Quoted) -> Quoted {\n//     quote { ($event_type, $subtype, $val_mul, $val_add, $coord_idx, $radius)}\n// }\n// pub comptime fn get_type_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_subtype_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_value_multiplier_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_value_addition_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n// pub comptime fn get_coord_idx_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.4 }\n// }\n// pub comptime fn get_radius_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.5 }\n// }\n// pub type ActionResultEventDefinition = (u8, u8, u8, u8, u8, u8);\n\nuse skplg::{softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionResultEffect::{get_action_def_result_effect_base_index, get_action_def_result_effects_byte_size};\n\npub type ActionDefDefResultEventRow = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefResultEventRow> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EVENTS: [DEF_ROW<ActionDefDefResultEventRow>] = [\n    action_def_def(quote { result_event_value_fixed_addition }, 8, |fixed_addition|quote { result_event_value += $fixed_addition as u32; }),\n    action_def_def(quote { result_event_value_scaled_by_progress }, 4, |factor|quote { result_event_value += ($factor as u32) * (actor_progress as u32); }),\n    action_def_def(quote { result_event_coords_idx }, 2, |coords_idx|{\n     let check = softassert(quote { is_valid }, quote { $coords_idx < 3 }, quote { f\"Invalid event coord idx: {result_event_coords_idx} does not fit in u8!\" });\n      quote {\n        let result_event_coords_idx: u8 = $coords_idx;\n        $check\n        result_event_coords = coords[result_event_coords_idx & 3];\n      }\n    }),\n    action_def_def(quote { result_event_type }, 4, |event_type|quote { result_event_type = $event_type; }),\n    action_def_def(quote { result_event_subtype }, 8, |event_subtype|quote { result_event_subtype = $event_subtype; }),\n    action_def_def(quote { result_event_radius }, 6, |event_radius|quote { result_event_radius = $event_radius; })\n];\ncomptime fn get_action_def_result_event_base_index() -> u32 {\n  get_action_def_result_effect_base_index() + get_action_def_result_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_event_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EVENTS)\n}\n\n\ncomptime fn derive_action_def_def_result_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EVENTS);\n// }\n#[derive_action_def_def_result_event_struct]\npub struct ActionResultEvent {\n  pub register: [u8; 32]\n}\nimpl ActionResultEvent {\n  #[derive_action_def_result_event_struct_new]\n  pub fn new() -> ActionResultEvent {\n    ActionResultEvent { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_event_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[export]\n#[derive_action_def_def_result_event_builder]\npub fn build_action_def_result_event() -> pub ActionResultEvent { ActionResultEvent::new() }\n\npub comptime fn build_result_event(event_idx: u32, events_collection_varname: Quoted, valid_varname: Quoted, register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_event_base_index();\n  let event_data_start_idx = base_index + event_idx * get_action_def_result_event_byte_size();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EVENTS, event_data_start_idx, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  //let value_valid_msg = f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\";\n  // let value_valid = softassert(valid_varname, quote { result_event_value <= 255 as u32 }, quote { f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\" });\n  let full_result = quote {\n    let event_idx = $event_idx as u8;\n    let mut result_event_type: u8 = 0;\n    let mut result_event_subtype: u8 = 0;\n    let mut result_event_coords: (u8,u8) = (NOWHERE, NOWHERE);\n    let mut result_event_value: u32 = 0;\n    let mut result_event_radius: u8 = 0;\n    $result\n    // $value_valid\n    if (result_event_value > 255) {\n      result_event_value = 255;\n    }\n\n    $events_collection_varname.push(build_subtype_value_event(\n      result_event_type,\n      actor_id,\n      result_event_coords.0,\n      result_event_coords.1,\n      result_event_value as u8,\n      result_event_subtype,\n      result_event_radius\n    ));\n  };\n  // println(full_result);\n  full_result\n}\n\npub comptime fn set_action_def_result_event_in_action_def(event: Quoted, event_count: u32, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let mut base_index = get_action_def_result_event_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  // println(\"start\");\n  for event_idx in 0..event_count {\n    let idx = event_idx * get_action_def_result_event_byte_size();\n    for i in 0..get_action_def_result_event_byte_size() {\n      let destination_idx = base_index + idx + i;\n      result = quote { $result $action_def[$destination_idx] = $event[$event_idx].register[$i]; };\n      // result = quote { $result $action_def += $event[$event_idx].register[$i] as Field * $multiplier; };\n      // multiplier *= 2;\n    }\n  }\n  //println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_event_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[derive_frontend_action_def_result_event_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEvent {}\n\n\npub comptime fn derive_frontend_action_def_result_event_struct_builder(param_name: Quoted, event_idx: u32) -> Quoted {\n  let idx = get_action_def_result_event_base_index() + event_idx * get_action_def_result_event_byte_size();\n  let content = derive_frontend_action_def_struct_builder(param_name, idx, ACTION_DEF_DEF_RESULT_EVENTS);\n  quote { FrontendActionDefResultEvent { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEvent.nr"},"96":{"source":"pub global NOWHERE: u8 = 255;\npub global UNREADABLE_BYTES_PER_FIELD: u32 = 1;\npub comptime global DEBUG: bool = true;\npub comptime fn debug(stmt: Quoted) -> Quoted {\n    let debug_result = if DEBUG { stmt } else { quote {} };\n    debug_result\n}\npub comptime fn debugmsg<T>(msg: T) -> Quoted {\n    debug!(quote { println($msg); })\n}\npub comptime fn softassert(varname: Quoted, check: Quoted, msg: Quoted) -> Quoted {\n    let result = if DEBUG {\n        quote {\n            $varname &= $check;\n            if !($check) {\n                println($msg);\n            }\n        }\n    } else {\n        quote {\n            $varname &= $check;\n        }\n    };\n    result\n}\n\n////////////////////\n\n// global WIDTH_MASK: u8 = 31;\n// global CLASS_MASK: u8 = 7;\n// global WIDTH_BITS: u8 = 5;\n// global MAX_CHARACTERS: u32 = 5;\n// struct Character {\n//     pub x: u8, // 5 bit\n//     pub class: u8, // 3 bit\n//     pub actions: [[u8; 32]; 7],\n// }\n// impl Character {\n//     fn is_class_valid(class: u8) -> bool {\n//         class as u32 <= 5\n//     }\n\n//     pub fn is_valid(self) -> bool {\n//         let mut valid = true;\n//         let x = self.x;\n//         let class = self.class;\n//         println(x);\n//         valid &= Character::is_class_valid(class);\n//         valid\n//     }\n\n//     fn parse(\n//         id: u8,\n//         data: Field,\n//         actions_data: [Field; 30],\n//         wait_action: [u8; 32],\n//     ) -> (bool, Character) {\n//         let mut is_valid = true;\n\n//         let split: [u8; 32] = data.to_be_bytes::<32>();\n//         assert(split.len() == 32);\n//         let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n\n//         let x = x_packed & WIDTH_MASK;\n//         let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n//         if !Character::is_class_valid(class) {\n//             class = 0;\n//             is_valid = false;\n//         }\n\n//         let c = Character {\n//             x: x,\n//             class: class,\n//             actions: [\n//                 wait_action,\n//                 actions_data[id * 6 as u8].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 1].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 2].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 3].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 4].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 5].to_be_bytes::<32>(),\n//             ],\n//         };\n//         (is_valid, c)\n//     }\n// }\n\n// fn create_character(x: u8, class: u8) -> Character {\n//     let c = Character { x: x, class: class, actions: [[0 as u8; 32]; 7] };\n//     assert(c.is_valid());\n//     c\n// }\n// fn parse_characters(data: Field, actions_data: [Field; 30]) -> (bool, [Character; MAX_CHARACTERS]) {\n//     let mut is_valid = true;\n\n//     let wait_action = [\n//         0 as u8, 0 as u8, 240 as u8, 0 as u8, 63 as u8, 0 as u8, 0 as u8, 1 as u8, 0 as u8,\n//         32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n//         32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n//         0 as u8, 0 as u8, 0 as u8,\n//     ];\n\n//     // no need to optimize, compiler automatically rolls this out\n//     let mut result: [Character; MAX_CHARACTERS] = [\n//         create_character(0, 0),\n//         create_character(0, 0),\n//         create_character(0, 0),\n//         create_character(0, 0),\n//         create_character(0, 0),\n//     ];\n//     for i in 0..(MAX_CHARACTERS as u8) {\n//         let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action);\n//         is_valid &= curr_valid;\n//         result[i] = curr_c;\n//     }\n\n//     // let (curr_valid, curr_c) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[0] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[1] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[2] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[3] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[4] = curr_c;\n//     (is_valid, result)\n// }\n\n// #[test]\n// fn test_parse_character_round0() {\n//     let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n\n//     let parsed = parse_characters(\n//         data,\n//         [\n//             0x03f00001300314002000000000100300000020000000002000000000000000,\n//             0x02f0000110071020100a000020100a00000020000000002000000000000000,\n//             0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n//             0x023100081b161118120a010018120a01000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0x03f00001300414002000000000100300000020000000002000000000000000,\n//             0x02f0000110071008100a000008100a00000020000000002000000000000000,\n//             0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n//             0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0x03f00001300314002000000000100300000020000000002000000000000000,\n//             0x02f0000110071018100a000018100a00000020000000002000000000000000,\n//             0x09f0000130060c002000000000200000000020000000002000000000000000,\n//             0xf00001100610001005000100100500010020000000002000000000000000,\n//             0xf00001301c0100100d000000100d00000020000000002000000000000000,\n//             0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n//             0x03f00001300414002000000000100300000020000000002000000000000000,\n//             0x02f0000110061028100a000028100a00000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0x03f00001300414002000000000100300000020000000002000000000000000,\n//             0x02f0000110071010100a000010100a00000020000000002000000000000000,\n//             0xf000071b1611002000000000000705000020000000002000000000000000,\n//             0x6300061b161164150a020164150a02010020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//         ],\n//     );\n//     assert(parsed.0);\n// }\n\n// // #[test]\n// // fn test_create_character_0() {\n// //   let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n// //   let enemy_advance = 0x08;\n// //   let events = [0 as u8, 0 as u8, 0 as u8, 0 as u8];\n// //   println(events);\n\n// //   let actions_data = [\n// //     0x03f00001300314002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071020100a000020100a00000020000000002000000000000000,\n// //     0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n// //     0x023100081b161118120a010018120a01000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0x03f00001300414002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071008100a000008100a00000020000000002000000000000000,\n// //     0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n// //     0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0x03f00001300314002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071018100a000018100a00000020000000002000000000000000,\n// //     0x09f0000130060c002000000000200000000020000000002000000000000000,\n// //     0xf00001100610001005000100100500010020000000002000000000000000,\n// //     0xf00001301c0100100d000000100d00000020000000002000000000000000,\n// //     0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n// //     0x03f00001300414002000000000100300000020000000002000000000000000,\n// //     0x02f0000110061028100a000028100a00000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0x03f00001300414002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071010100a000010100a00000020000000002000000000000000,\n// //     0xf000071b1611002000000000000705000020000000002000000000000000,\n// //     0x6300061b161164150a020164150a02010020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000\n// // ];\n// //   comptime { assert(5 <= 5); }\n\n// //     let enemy_advance = if enemy_advance >= 32 { 0 } else { 32 - enemy_advance - 1 };\n// //     let mut is_valid = true;\n\n// //     let wait_action = [0 as u8, 0 as u8, 240 as u8, 0 as u8, 63 as u8, 0 as u8, 0 as u8, 1 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8];\n\n// // let mut result: [Character; 5] = [create_character(0, 0, 0, 0), create_character(1, 0, 0, 0), create_character(2, 0, 0, 0), create_character(3, 0, 0, 0), create_character(4, 0, 0, 0)];\n// //     //for i in 0..(5 as u8) {\n// //         let (curr_valid, curr_c) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[0] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[1] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[2] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[3] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[4] = curr_c;\n// //    // }\n// //     assert(is_valid);\n// //     // assert(result[0].x == 0);\n// // }\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplg/src/lib.nr"}},"names":["calculate_turn"],"brillig_names":["print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","directive_to_radix","directive_invert","directive_integer_quotient"]}