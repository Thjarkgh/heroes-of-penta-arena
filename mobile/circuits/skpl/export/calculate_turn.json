{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":8316402544576497130,"abi":{"parameters":[{"name":"my_chars_input","type":{"kind":"field"},"visibility":"private"},{"name":"my_char_actions_input","type":{"kind":"array","length":30,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_obstacles_input","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"},{"name":"actions_input","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"move_input","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"enemy_advance_input","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"enemy_objects_input","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"enemy_events_input","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"boolean"},{"kind":"field"},{"kind":"array","length":30,"type":{"kind":"field"}},{"kind":"array","length":24,"type":{"kind":"struct","path":"obstacle::Obstacle","fields":[{"name":"id","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"y","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"health","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"obstacle_type","type":{"kind":"integer","sign":"unsigned","width":8}}]}},{"kind":"integer","sign":"unsigned","width":8},{"kind":"array","length":1,"type":{"kind":"field"}},{"kind":"array","length":4,"type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11167361122731473993":{"error_kind":"fmtstring","length":27,"item_types":[]},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"}}},"bytecode":"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","debug_symbols":"","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"// use crate::{ HEIGHT, WIDTH };\nuse arenalib::{ NO_EVENT, WAIT, SEE_MOVE, WIDTH };\nuse arenalib::{ MAX_ACTIONS, MAX_OBSTACLES };\nuse arenalib::{ SERIALIZED_ACTION_BYTE_SIZE, SERIALIZED_ACTIONS_ARRAY_SIZE, SERIALIZED_ACTIONS_PER_FIELD, VIEW_DISTANCE };\nuse skplg::{softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD};\nuse arenalib::{Action, get_action_actor, get_action_target_x, get_action_target_y, get_action_type, new_action};\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\nuse crate::character::Character;\nuse crate::event::Event;\nuse crate::event::{ build_subtype_value_event }; // , build_value_event\nuse crate::map::{ is_visible, get_distance, can_move_to };\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::{ get_default_obstacles };\nuse arenalib::{MAGE};\nuse arenalib::{MAX_ACTIONS_PER_CHARACTER, MAX_ENEMY_OBSTACLES};\n// use crate::ResolvedAction::ResolvedAction;\n// use crate::actionDefinition::{ build_move_action };\nuse arenalib::{apply_action_result_effects, apply_action_pre_calc_effects, validate_action_requirements, build_result_event};\nuse arenalib::arena_action_def_builder;\nuse super::obstacle::new_obstacle;\n\n// use crate::{ACTION_RESULT_COORDINATES_IDX_SELF, ACTION_RESULT_COORDINATES_IDX_TARGET, ACTION_RESULT_COORDINATES_IDX_INVISIBLE};\n// use crate::{SEE_CAST, SEE_DRAW, SEE_RITUAL, SEE_SEARCH_TRAP, RECEIVE_ATTACK, DISARMED_TRAP, ADD_OBSTACLE, WIN};\n// use crate::action_builder;\n\n\n\n// global ACTION_TYPE: u8 = 0;\n// global ACTION_ACTOR: u8 = 1;\n// global ACTION_TARGET_X: u8 = 2;\n// global ACTION_TARGET_Y: u8 = 3;\n\nglobal SEEN_EVENT_IDX: u32 = 1;\nglobal UNSEEN_EVENT_IDX: u32 = 0;\nglobal WORLD_EVENT_IDX: u32 = 2;\nglobal SELF_EVENT_IDX: u32 = 3;\n\npub fn execute_action(\n    action: Action,\n    enemy_advance: u8,\n    actor: Character,\n    mut energy: u8,\n    my_obstacles: [Obstacle; MAX_OBSTACLES],\n    their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]\n) -> (bool, Event, Event, Event, Character, u8) /*where T: ResolvedAction */{\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    //let action_def = c.resolve_action(action.register[action.base_index + ACTION_TYPE]);\n        //let mut result_event: Event = build_std_event(NO_EVENT, c.id, 0, 0);\n        //let mut result_char = c;\n        //let mut required_energy = 0;\n        let mut is_valid = true;\n        //let action_def = c.resolve_action(get_action_type(action));\n        // let mut result_valid = true;\n\n        // let need_sneak = get_action_type(action) == SNEAK;\n        //let can_sneak = c.can_sneak();\n        // let need_move = get_action_type(action) == MOVE | get_action_type(action) == SNEAK;\n        // let can_move = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles);\n        // let need_target_is_neighbor = get_action_type(action) == SNEAK | get_action_type(action) == MOVE | get_action_type(action) == ATTACK | get_action_type(action) == SEARCH | get_action_type(action) == DISARM_TRAP;\n        //let target_is_neighbor = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        // let need_target_is_not_self = get_action_type(action) == ATTACK | get_action_type(action) == SHOOT;\n        // let target_is_not_self = (c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action));\n        // let need_ritual = get_action_type(action) == RITUAL;\n        //let can_ritual = c.can_ritual();\n        // let need_search = get_action_type(action) == SEARCH;\n        //let can_search = c.can_search();\n        //let can_attack = is_neighbor & not_self;\n        // let need_can_cast_fireball = get_action_type(action) == CAST_FIREBALL;\n        // let min_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if get_action_type(action) == SHOOT {\n        //     MIN_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let max_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if (get_action_type(action) == DRAW) | (get_action_type(action) == SHOOT) {\n        //     MAX_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let need_check_status = get_action_type(action) == CAST_FIREBALL | get_action_type(action) == RITUAL | get_action_type(action) == DRAW | get_action_type(action) == SHOOT;\n        // let can_cast_fireball = c.can_cast_fireball(); // & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        // let can_draw = c.can_shoot(); // & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_shoot = c.can_shoot(); // & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_disarm = c.can_disarm();\n        // let is_valid =\n        //     (get_action_type(action) == WAIT) |\n        //     ((get_action_type(action) == SNEAK) & can_sneak & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == MOVE) & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == RITUAL) & can_ritual) |\n        //     ((get_action_type(action) == SEARCH) & can_search & target_is_neighbor) |\n        //     ((get_action_type(action) == ATTACK) & target_is_neighbor & target_is_not_self) |\n        //     ((get_action_type(action) == CAST_FIREBALL) & can_cast_fireball & result_char.status <= max_rounds_to_finish) |\n        //     ((get_action_type(action) == DRAW) & can_draw) |\n        //     ((get_action_type(action) == SHOOT) & can_shoot & target_is_not_self) |\n        //     ((get_action_type(action) == DISARM_TRAP) & can_disarm & target_is_neighbor);\n\n\n\n\n        // need to adapt status first in case of action interruption!\n\n    //let action_type = action.get_action_type(action);\n    //let action_def = c.resolve_action(action_type);\n    let action_type = get_action_type(action);\n\n    let actor_id = actor.get_id();\n    let actor_x = actor.get_x();\n    let actor_y = actor.get_y();\n    let actor_target_x = actor.get_target_x();\n    let actor_target_y = actor.get_target_y();\n    let actor_last_action = actor.get_last_action();\n    let (action_def_valid, action_def) = actor.get_action(action_type);\n    softassert!(quote { is_valid }, quote { action_def_valid }, quote { f\"Failed to fetch action def of {action_type}\" });\n\n    let action_target_x = get_action_target_x(action);\n    let action_target_y = get_action_target_y(action);\n    let distance = get_distance(actor_x, actor_y, action_target_x, action_target_y);\n\n    // let is_continuous = action.get_action_is_continuous();\n    // let is_not_interrupted = (\n    //     ((!is_continuous) & (action.get_action_result_status_multiplier() != 0)) | // that's the ID of the wait action => leave status, but not continuous\n    //     ((is_continuous) & (action.get_action_req_previous_action() == c.last_action) & (action_target_x == c.get_target_x()) & (action_target_y == c.get_target_y()))\n    // );\n\n\n    let mut actor_progress = actor.get_progress();\n    let mut actor_is_hidden = actor.get_is_hidden() == 1;\n    let actor_is_in_view_range = is_visible(enemy_advance, actor_x);\n    // let max_range_part = get_action_req_max_range(action) as u16;\n    // let mut actor_max_range = max_range_part * max_range_part;\n    let mut is_not_interrupted = true;\n    let mut actor_damage_mod = actor.get_damage_mod();\n    let mut actor_status = actor.get_status();\n    // ~200 gates\n    apply_action_pre_calc_effects!(quote { action_def });\n\n\n///////////////////////////\n    // ~4000 gates\n    validate_action_requirements!(quote { is_valid }, quote { action_def });\n    // // pub global ACTION_NEEDS_TARGET_FREE_SPACE: u8 = 0;  // u1\n    // let target_is_free_space_valid = !action.get_action_req_target_free_space() | can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles);\n    // softassert!(quote { is_valid }, quote { target_is_free_space_valid }, quote { f\"Target space ({action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" });\n    \n    // // pub global ACTION_NEEDS_TARGET_IS_NOT_SELF: u8 = 1; // u1\n    // let target_is_not_self_valid = !action.get_action_req_target_is_not_self() | (c_x != action_target_x) | (c_y != action_target_y);\n    // softassert!(quote { is_valid }, quote { target_is_not_self_valid }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" });\n\n    // // pub global ACTION_NEEDS_STATUS_HIDDEN: u8 = 4; // u1\n    // let char_is_hidden = c.is_hidden == 1;\n    // let char_is_hidden_valid = !action.get_action_req_status_hidden() | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_is_hidden_valid }, quote { f\"Character needs to be hidden to perform action {action_type}\" });\n    \n    // // pub global ACTION_NEEDS_STATUS_VISIBLE: u8 = 2; // u1\n    // let char_is_in_view_range = is_visible(enemy_advance, c_x);\n    // let char_is_fully_visible = char_is_in_view_range & !char_is_hidden;\n    // let char_is_fully_visible_valid = !action.get_action_req_status_visible() | char_is_fully_visible;\n    // softassert!(quote { is_valid }, quote { char_is_fully_visible_valid }, quote { f\"Character must be fully visible for action {action_type}: in_view_range: {char_is_in_view_range} & !hidden {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_NEEDS_STATUS_INVISIBLE: u8 = 3; // u1\n    // let char_invisible_valid = !action.get_action_req_status_invisible() | !char_is_in_view_range | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_invisible_valid }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {char_is_in_view_range} || hidden: {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_MAX_RANGE: u8 = 7; // u6 // TODO: max_range!\n    // let max_range_part = action.get_action_req_max_range() as u16;\n    // let max_range = max_range_part * max_range_part;\n    // let max_range_valid  = distance <= max_range;\n    // softassert!(quote { is_valid }, quote { max_range_valid }, quote { f\"Character is out of range! Distance: {distance} > {max_range}: {{{c_x},{c_y}}} - {{{action_target_x},{action_target_y}}} with {max_range_part}\" });\n\n    // // pub global ACTION_NEEDS_MIN_STATUS: u8 = 8; // u4\n    // let min_status = action.get_action_req_min_status();\n    // let min_status_valid = min_status <= status;\n    // softassert!(quote { is_valid }, quote { min_status_valid }, quote { f\"Character needs min status {min_status} to perform action {action_type}, but only has {status}\" });\n\n    // // pub global ACTION_NEEDS_MAX_STATUS: u8 = 9; // u4\n    // let max_status = action.get_action_req_max_status();\n    // let max_status_valid = max_status >= status;\n    // softassert!(quote { is_valid }, quote { max_status_valid }, quote { f\"Character cannot have a higher status than {max_status} to perform action {action_type}: got {status}\" });\n\n    // // pub global ACTION_NEEDED_ENERGY: u8 = 10;    // u4\n    // let required_energy = action.get_action_req_energy();\n    // let energy_valid = required_energy <= energy;\n    // softassert!(quote { is_valid }, quote { energy_valid }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {required_energy}\" });\n    //////////////////////\n    \n\n        let coords = [\n            (actor_x, actor_y),\n            (action_target_x, action_target_y),\n            (NOWHERE, NOWHERE),\n        ];\n\n    // pub global ACTION_RESULT_STATUS_MULTIPLIER: u8 =     ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT;     // u1\n    // pub global ACTION_RESULT_STATUS_FIXED_ADDITION: u8 = ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 1; // u4\n    // pub global ACTION_MOVE_TO_TARGET: u8 =               ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 2; // u1\n    // pub global ACTION_SETS_STATUS_HIDDEN: u8 = 5; // u1\n    // pub global ACTION_REMOVES_STATUS_HIDDEN: u8 = 6; // u1\n\n        // CALCULATE EVENTS\n        comptime {\n          assert(SEEN_EVENT_IDX == 1);\n          assert(UNSEEN_EVENT_IDX == 0);\n        }\n        //let result_event_idx = is_visible as u32;\n        let mut events: BoundedVec<Event, 4> = BoundedVec::new();\n        // 19000 gates\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        build_result_event!(0 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(1 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(2 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(3 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        assert(events.len() == 4);\n\n        // let seen_event_value = status as u32 * action.get_action_result_event_seen_value_status_multiplier() as u32 + action.get_action_result_event_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { seen_event_value <= 255 as u32 }, quote { f\"Invalid event value (seen): {seen_event_value} does not fit in u8!\" });\n\n        // let unseen_event_value = status as u32 * action.get_action_result_event_not_seen_value_status_multiplier() as u32 + action.get_action_result_event_not_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { unseen_event_value <= 255 as u32 }, quote { f\"Invalid event value (unseen): {unseen_event_value} does not fit in u8!\" });\n\n        // let seen_event_coords_idx = action.get_action_result_event_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { seen_event_coords_idx < 4 }, quote { f\"Invalid seen event coord idx: {seen_event_coords_idx} > 3\" });\n\n        // let seen_event_coords = coords[seen_event_coords_idx & 3];\n\n        // let unseen_event_coords_idx = action.get_action_result_event_not_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { unseen_event_coords_idx < 4 }, quote { f\"Invalid unseen event coord idx: {unseen_event_coords_idx} > 3\" });\n\n        // let unseen_event_coords = coords[unseen_event_coords_idx & 3];\n\n        // //let events = [\n        // let dummy_event =    build_subtype_value_event(NO_EVENT, c.get_id(), coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].0, coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].1, 0 as u8, 0 as u8, 0 as u8);\n        // let unseen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_not_seen_type(),\n        //         c.get_id(), \n        //         unseen_event_coords.0,\n        //         unseen_event_coords.1,\n        //         unseen_event_value as u8,\n        //         action.get_action_result_event_not_seen_subtype(),\n        //         action.get_action_result_event_not_seen_radius()\n        //     );\n        // let seen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_seen_type(),\n        //         c.get_id(), \n        //         seen_event_coords.0,\n        //         seen_event_coords.1,\n        //         seen_event_value as u8,\n        //         action.get_action_result_event_seen_subtype(),\n        //         action.get_action_result_event_seen_radius()\n        //     );\n        //];\n\n\n        // APPLY EFFECTS ON SELF\n        let mut result_energy = energy;\n        let mut result_coords = coords[0];\n        let mut result_progress = actor_progress;\n        let mut result_is_hidden = actor_is_hidden;\n        let mut result_is_visible = actor_is_in_view_range;\n        let mut result_damage_mod = actor_damage_mod;\n        let mut result_health = actor.get_health();\n        let mut result_status = actor_status;\n\n\n        // let energy = std::wrapping_sub(energy, action.get_action_req_energy());\n        // let status = actor_progress as u32 * action.get_action_result_status_multiplier() as u32 + action.get_action_result_status_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { status <= MAX_STATUS as u32 }, quote { f\"Invalid result status: {status} > {MAX_STATUS}\" });\n\n        // let final_coords = coords[action.get_action_move_to_target() as u8];\n        // // debug!(quote { println(f\"final_coords:{final_coords}\"); });\n        // let is_hidden = ((c.is_hidden == 1) & !action.get_action_result_effect_removes_status_hidden()) | action.get_action_result_effect_sets_status_hidden();\n        // let is_visible = !is_hidden & is_visible(enemy_advance, final_coords.0);\n        // 200 gates\n        apply_action_result_effects!(quote { action_def });\n\n// let result_coord_src = action_def[6] as u8;\n// let result_coord_src_fixed = result_coord_src & 4 as u8;\n// let result_coord = result_coord_src_fixed != 0 as u8;\n// let result_coord_cast = result_coord as u8;\n// println(f\"result coords: {result_coord_src} {result_coord_src_fixed} {result_coord} {result_coord_cast}\");\n// result_coords = coords[((action_def[6]as u8 / 4 as u8) == 1 as u8)as u8];\n        // let target_coords = [\n        //     (target_x, target_y),\n        //     (c.get_target_x(), c.get_target_y())\n        // ];\n\n        (\n            is_valid,\n            if result_is_visible { events.get_unchecked(SEEN_EVENT_IDX) } else { events.get_unchecked(UNSEEN_EVENT_IDX) },//events[1 + (is_visible as u8)],\n            events.get_unchecked(WORLD_EVENT_IDX),\n            events.get_unchecked(SELF_EVENT_IDX),//events[get_action_unseen_event_is_internal(action_def) as u8],\n            Character {\n                id: actor_id,\n                x: result_coords.0,\n                y: result_coords.1,\n                progress: result_progress, // status as u8,\n                is_hidden: result_is_hidden as u1, //is_hidden as u1,\n                has_been_seen: result_is_visible, //is_visible,\n                last_action: is_not_interrupted as u8 * actor.get_last_action() + (!is_not_interrupted) as u8 * action_type,\n                target_x: is_not_interrupted as u8 * actor.get_target_x() + (!is_not_interrupted) as u8 * action_target_x, // if is_not_interrupted { c.get_target_x() } else { get_action_target_x(action) };\n                target_y: is_not_interrupted as u8 * actor.get_target_y() + (!is_not_interrupted) as u8 * action_target_y,\n                class: actor.class,\n                damage_mod: result_damage_mod,\n                health: result_health,\n                status: result_status,\n                actions: actor.actions,\n            },\n            result_energy\n        )\n\n        // if get_action_type(action) == SNEAK {\n        //     //assert(c.can_sneak());\n        //     if !can_sneak { let actor_id = c.id; println(f\"Failed to execute action: Character {actor_id} cannot sneak\"); }\n        //     //assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     //assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_sneak() & can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);  \n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_sneak();\n        // }\n        // if get_action_type(action) == MOVE {\n        //     // assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);\n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_move();\n        //     result_char.has_been_seen = is_visible(enemy_advance, result_char.x);\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_MOVE, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        // }\n        // if get_action_type(action) == RITUAL {\n        //     //assert(c.can_ritual());\n        //     // result_valid = c.can_ritual();\n        //     result_char.status += 1;\n        //     if result_char.status >= RITUAL_ROUNDS_FOR_WIN {\n        //         result_event = build_std_event(WIN, c.id, 0, 0);\n        //     } else {\n        //         result_event = build_std_event(SEE_RITUAL, c.id, 0, 0);\n        //     }\n        //     required_energy = c.get_energy_per_ritual();\n        // }\n        // if get_action_type(action) == SEARCH {\n        //     // assert(c.can_search());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_search() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(SEE_SEARCH_TRAP, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_search();\n        // }\n        // if get_action_type(action) == ATTACK {\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_MELEE), ATTACK_MELEE);\n        //     required_energy = c.get_energy_per_attack();\n        // }\n        // // TODO: global SET_TRAP = 6 as u8;\n        // if get_action_type(action) == CAST_FIREBALL {\n        //     // assert(c.can_cast_fireball());\n        //     result_char.status += 1;\n        //     // assert(result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     // result_valid = c.can_cast_fireball() & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     if result_char.status >= FIREBALL_ROUNDS_FOR_CAST {\n        //         // TODO: handle friendly fire and destruction of own walls and own traps\n        //         result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_FIREBALL), ATTACK_FIREBALL);\n        //     } else {\n        //         if c.get_has_been_seen() {\n        //             result_event = build_subtype_value_event(SEE_CAST, c.id, get_action_target_x(action), get_action_target_y(action), 0, ATTACK_FIREBALL);\n        //         }\n        //     }\n        //     required_energy = c.get_energy_per_cast();\n        // }\n        // if get_action_type(action) == DRAW {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     // result_valid = c.can_shoot() & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     result_char.status += 1;\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_DRAW, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        //     required_energy = c.get_energy_per_draw();\n        // }\n        // if get_action_type(action) == SHOOT {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = c.can_shoot() & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     // TODO: check distance! abs(c.x - get_action_target_x(action)) + abs(c.y - get_action_target_y(action)) <= c.get_shoot_range()\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_RANGED), ATTACK_RANGED);\n        //     required_energy = c.get_energy_per_shoot();\n\n        // }\n        // // TODO: SET_TRAP\n        // if get_action_type(action) == DISARM_TRAP {\n        //     // assert(c.can_disarm());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_disarm() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(DESTROY, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_disarm();\n        // }\n        \n        // // assert(energy >= required_energy);\n        // let result_valid = is_valid & (energy >= required_energy);\n        // if result_valid {\n        //     energy -= required_energy;\n        // }\n        // // energy -= required_energy;\n        // (result_valid, result_event, result_char, energy)\n    }\n//}\n\n//global test_actions: [TestActionDefinition; 1] = [\n    // build_test_action_def!(build_wait_action_def(), quote { 0, 1, 3, 4 }),\n    //TestActionDefinition { register: build_test_action_def!(build_wait_action_def()), action: new_action(0, 1, 3, 4) },\n    // build_move_action(class_energy_per_move[ARCHER]),\n    //     build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n    //     build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n    //     build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n    //     build_wait_action_def(),\n    //     ,\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[RITUALIST]),\n    //     build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n    //     build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n    //     build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[ROGUE]),\n    //     build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n    //     build_sneak_action(class_energy_per_sneak[ROGUE]),\n    //     build_search_action(class_energy_per_search[ROGUE], 1),\n    //     build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n    //     build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[KNIGHT]),\n    //     build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[MAGE]),\n    //     build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n    //     build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n    //     build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n    //     build_wait_action_def(),\n    //     build_wait_action_def()\n    // ]\n// ]\n\n// pub fn create_test_action(action: Action) -> TestActionDefinition {\n//     TestActionDefinition {\n//         register: \n//     }\n// }\n\n// pub struct TestActionDefinition {\n//     pub register: [u8; ACTION_DEFINITION_SIZE],\n//     pub action: Action,\n// }\n\n// impl ResolvedAction for TestActionDefinition {\n//     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n//     }\n//     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n//     }\n//     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n//     }\n//     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n//     }\n//     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_MAX_RANGE]\n//     }\n//     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MIN_STATUS]\n//     }\n//     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MAX_STATUS]\n//     }\n//     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDED_ENERGY]\n//     }\n//     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_EVENT_IS_TRAP] == 1\n//     }\n//     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n//     }\n//     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n//         self.register[ACTION_MOVE_TO_TARGET] as u1\n//     }\n//     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_IS_CONTINUOUS] == 1\n//     }\n//     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n//     }\n\n//     fn get_action_target_x(self) -> u8 {\n//         get_action_target_x(self.action)\n//     }\n//     fn get_action_target_y(self) -> u8 {\n//         get_action_target_y(self.action)\n//     }\n//     fn get_action_type(self) -> u8 {\n//         get_action_type(self.action)\n//     }\n// }\n\n#[test]\nfn test_execute_action() {\n  // global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder = get_arena_action_def_builder();\n    let action_def = arena_action_def_builder.build_move_action(4); //, quote { 1, 2, 3, 4 }; //new_action(1, 2, 3, 4);\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let action = new_action(1, 2, 3, 4);\n    let their_advance = 30;\n    let mut actions = [[0; 32]; MAX_ACTIONS_PER_CHARACTER + 1];\n    actions[1] = action_def;\n    let actor = Character {\n        id: 2,\n        x: 2,\n        y: 4,\n        target_x: 0,\n        target_y: 0,\n        health: 255,\n        damage_mod: 1,\n        last_action: WAIT,\n        class: MAGE,\n        is_hidden: 0 as u1,\n        has_been_seen: true,\n        progress: 0,\n        status: 0,\n        actions: actions\n    };\n    let energy = 15;\n    let my_obstacles = get_default_obstacles(0);\n    let (no_obstacle_valid, no_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n    assert(no_obstacle_valid);\n    let their_obstacles = get_default_obstacles(1).as_slice().push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle);\n    let (valid, event, _, internal_event, c, result_energy) = execute_action(\n        action,\n        their_advance,\n        actor,\n        energy,\n        my_obstacles,\n        their_obstacles.as_array()\n    );\n    assert(valid, \"valid\");\n    assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n    assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n    assert(event.x == get_action_target_x(action), f\"{event}.target_x is not action target x\");\n    assert(event.y == get_action_target_y(action), f\"{event}.target_y is not action target y\");\n    assert(c.x == event.x, f\"{c}.x is not event {event}.x\");\n    assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n    assert(result_energy == 11, f\"{result_energy} != 11\");\n}\n\n\n\npub fn parse_actions(fields: [Field; SERIALIZED_ACTIONS_ARRAY_SIZE]) -> [Action; MAX_ACTIONS] {\n    comptime {\n        assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n        assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n        assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n    }\n\n    let mut actions: [Action] = &[];\n    for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n        let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n        //assert(split.len() == 32);\n        for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n            let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n            actions = actions.push_back(new_action(\n                split[offset],\n                split[offset + 1],\n                split[offset + 2],\n                split[offset + 3],\n            ));\n            /*Action {\n                action: split[offset],\n                actor: split[offset + 1],\n                target_x: split[offset + 2],\n                target_y: split[offset + 3],\n            }*/\n        }\n    }\n    actions.as_array()\n}\n\n/**\n* Warning: This function can throw!!!\n*/\n// pub fn serialize_actions(actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n//     comptime {\n//         assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n//         assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n//         assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n//     }\n\n//     assert(actions.len() <= MAX_ACTIONS);\n\n//     let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, 0, 0, 0); MAX_ACTIONS];\n//     for i in 0..actions.len() {\n//         actions_stuffed[i] = actions[i];\n//     }\n\n//     let mut fields: [Field] = &[];\n//     for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n//         let mut data: [u8; 32] = [0; 32];\n//         for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n//             let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n//             let action = actions_stuffed[index];\n//             let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n//             data[offset] = get_action_type(action);\n//             data[offset + 1] = get_action_actor(action);\n//             data[offset + 2] = get_action_target_x(action);\n//             data[offset + 3] = get_action_target_y(action);\n//         }\n//         fields = fields.push_back(std::field::bytes32_to_field(data));\n//     }\n//     fields.as_array()\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/action.nr"},"72":{"source":"\nuse arenalib::ARCHER;\nuse arenalib::KNIGHT;\nuse arenalib::MAGE;\nuse arenalib::RITUALIST;\nuse arenalib::ROGUE;\nuse arenalib::WIDTH;\nuse arenalib::HEIGHT;\nuse arenalib::{ CLASS_COUNT, PROGRESS_COUNT };\nuse arenalib::{ WAIT }; //, ATTACK_MELEE, ATTACK_FIREBALL, ATTACK_RANGED, MAX_FIREBALL_ROUNDS_FOR_CAST, MIN_FIREBALL_ROUNDS_FOR_CAST, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES, MAX_ACTIONS_PER_CHARACTER };\nuse arenalib::{ WIDTH_MASK, HEIGHT_MASK, CLASS_MASK, PROGRESS_MASK };\nuse arenalib::{ WIDTH_BITS, HEIGHT_BITS, CLASS_BITS, PROGRESS_BITS };\nuse crate::event::Event;\nuse crate::map::is_visible;\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::new_obstacle;\nuse skplg::{NOWHERE, debug, softassert};\nuse arenalib::{ActionDefinition};\nuse arenalib::{SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, SerializedArenaCharacterActionDefinitions, SerializedArenaCharacterActionDefinition};\n// use arenalib::{TRAP, ADD_OBSTACLE, WIN_BY_RITUAL, RITUAL_ROUNDS_FOR_WIN};\nuse arenalib::get_test_action_register;\nuse crate::event::{build_subtype_value_event, serialize_events};\nuse arenalib::NO_EVENT;\nuse arenalib::get_wait_action_def;\n\n\npub global SERIALIZED_CHARACTER_BYTES: u32 = 6;\npub type SerializedCharacter = [u8; SERIALIZED_CHARACTER_BYTES];\n\n// use skplam::{build_wait_action_def, build_shoot_action, build_draw_action, build_move_action, build_attack_action, build_cast_action, build_evocation_action, build_search_action, build_set_trap_action, build_sneak_action, build_ritual_action, build_disarm_trap_action};\n\n// this should be more efficient: for all the following: order is: UNKNOWN_CLASS, ARCHER, RITUALIST, ROGUE, KNIGHT, MAGE\nglobal class_damage_melee: [u8; 6] = [ 0, 32, 8, 24, 40, 16 ];\nglobal class_damage_ranged: [u8; 6] = [ 0, 24, 40, 16, 32, 8 ];\nglobal class_damage_fireball: [u8; 6] = [ 0, 0, 100, 50, 0, 100 ];\nglobal class_damage: [[u8; 6]; 3] = [ class_damage_melee, class_damage_ranged, class_damage_fireball ];\nglobal class_energy_per_attack: [u8; 6] = [ 0, 7, 7, 7, 6, 7 ];\nglobal class_energy_per_cast: [u8; 6] = [ 0, 255, 12, 255, 255, 6 ];\nglobal class_energy_per_disarm: [u8; 6] = [ 0, 255, 255, 12, 255, 255 ];\nglobal class_energy_per_move: [u8; 6] = [ 0, 3, 4, 3, 4, 4 ];\nglobal class_energy_per_ritual: [u8; 6] = [ 0, 255, 12, 255, 255, 255 ];\nglobal class_energy_per_search: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_sneak: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_draw: [u8; 6] = [ 0, 9, 255, 255, 255, 255 ];\nglobal class_energy_per_shoot: [u8; 6] = [ 0, 6, 255, 255, 255, 255 ];\nglobal resistances: [u16; 8 * 3] = [\n     0,  75, 100, 85,  50, 100, 20,  0, //,  255, 255, 0, 0, 0, 255, 255, 255 ], // Melee vs dummy, archer, ritualist, thief, knight, mage, wall, water, unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n     0,  80, 100, 90,  25, 100,  5,  0, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Ranged vs dummy, archer, ritualist, thief, knight, mage, wall, water\n     0,  80, 100, 90, 100,  90, 60, 50, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Fireball vs dummy, archer, ritualist, thief, knight, mage, wall, water\n];\n\nglobal trap_resistances: [u16; 8] = [ 0,  75, 100, 50,  75, 90, 5, 0]; //,  255, 255, 255, 255, 255, 255, 255, 255 ]; // Trap vs dummy, archer, ritualist, thief, knight, mage\n\n\n//global x: ActionDefinition = build_set_trap_action(1 as u8, 1 as u8);\n// TODO: move to character!\n// global ARCHER: u8 = 1;    WAIT, MOVE, ATTACK, DRAW, SHOOT\n// global RITUALIST: u8 = 2; WAIT, MOVE, ATTACK, CAST, RITUAL\n// global ROGUE: u8 = 3;     WAIT, MOVE, ATTACK, SNEAK, SEARCH, DISARM_TRAP, SET_TRAP\n// global KNIGHT: u8 = 4;    WAIT, MOVE, ATTACK\n// global MAGE: u8 = 5;      WAIT, MOVE, ATTACK, CAST, CAST_FIREBALL\n// global ACTION_DEFINITIONS: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER * CLASS_COUNT] = [\n//     // [[0 as u8; ACTION_DEFINITION_SIZE]; MAX_ACTIONS_PER_CHARACTER], // 0 for no action\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n    \n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ARCHER]),\n//         build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//         build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//         build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[RITUALIST]),\n//         build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//         build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//         build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ROGUE]),\n//         build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//         build_sneak_action(class_energy_per_sneak[ROGUE]),\n//         build_search_action(class_energy_per_search[ROGUE], 1),\n//         build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[KNIGHT]),\n//         build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[MAGE]),\n//         build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//         build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//         build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n//         WAIT_ACTION,\n//         WAIT_ACTION\n//     // ]\n// ];\n// global \n// pub fn get_test_action_register() -> [u8; ACTION_DEFINITION_REGISTER_SIZE] {\n//     build_action_def_reg!([\n//         [\n//             build_move_action(class_energy_per_move[ARCHER]),\n//             build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//             build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//             build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[RITUALIST]),\n//             build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//             build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//             build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[ROGUE]),\n//             build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//             build_sneak_action(class_energy_per_sneak[ROGUE]),\n//             build_search_action(class_energy_per_search[ROGUE], 1),\n//             build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//             build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[KNIGHT]),\n//             build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[MAGE]),\n//             build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//             build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//             build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST),\n//             build_wait_action_def(),\n//             build_wait_action_def()\n//         ]\n//     ])\n// }\n// pub fn get_test_action_register() -> SerializedArenaActionDefinitions {\n//   let action_builder = arena_action_def_builder;\n//      [\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER)),\n//             std::field::bytes32_to_field(action_builder.build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT)), // arche),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n            \n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST, 255)),\n//             std::field::bytes32_to_field(action_builder.build_ritual_action(3, class_energy_per_ritual[RITUALIST], RITUAL_ROUNDS_FOR_WIN, WIN_BY_RITUAL)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_sneak_action(class_energy_per_sneak[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_search_action(class_energy_per_search[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_set_trap_action(class_energy_per_disarm[ROGUE], 1, ADD_OBSTACLE, TRAP)),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[KNIGHT])),\n//            std::field::bytes32_to_field( action_builder.build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT])),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[MAGE], MAGE, 7)),\n//             std::field::bytes32_to_field(action_builder.build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def())\n//         ]\n// }\n\n// struct CharacterClass {\n//     class: u8,\n//     damage: u8,\n//     energy_per_attack: u8,\n//     energy_per_cast: u8,\n//     energy_per_disarm: u8,\n//     energy_per_move: u8,\n//     energy_per_ritual: u8,\n//     energy_per_search: u8,\n//     energy_per_sneak: u8,\n// }\n\npub struct Character {\n    pub id: u8,\n    pub x: u8, // 5 bit\n    pub y: u8, // 4 bit\n    pub class: u8, // 3 bit\n    pub progress: u8, // 0 = idle, 1-15 = continuing action => 4 bit\n    pub health: u8,\n    pub has_been_seen: bool,\n    pub is_hidden: u1,\n    pub target_x: u8,\n    pub target_y: u8,\n    pub damage_mod: u8,\n    pub last_action: u8,\n    pub status: u8,\n    // pub wait_action: ActionDefinition,\n    pub actions: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1], // BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER>,\n}\n\n// pub fn resolve_action(action: u8, class: u8) -> ActionDefinition {\n//     let mut idx = class as u32 * MAX_ACTIONS_PER_CHARACTER + action as u32;\n//     if idx >= (ACTION_DEFINITIONS.len()) {\n//         idx = 0;\n//     }\n//     // assert(action as u32 < MAX_ACTIONS_PER_CHARACTER);\n//     // assert(class as u32 < CLASS_COUNT);\n//     ACTION_DEFINITIONS[idx]\n// }\n//     pub fn resolve_action(action: Action) -> ActionDefinition {\n//         // let idx = get_action_base_index(self.get_id(), action);\n//         ActionDefinition::new(action, ACTION_DEFINITIONS)\n// //        (idx, ACTION_DEFINITIONS)\n//         //resolve_action(action, self.class)\n//         // let mut a = action as u32;\n//         // if a >= self.actions.len() { a = 0; }\n//         // self.actions[a] //.get_unchecked(a)\n//     }\n//global wait_action: ActionDefinition = buld_wait_action_def();\n\n// global wait_action: ActionDefinition = action_builder.build_wait_action_def();\n\nimpl Character {\n    // pub fn new(id: u8 x: u8, y: u8, class: u8, status: u8, health: u8, has_been_seen: u8)\n    /// May throw\n\n\n    pub fn get_id(self) -> u8 {\n        self.id\n    }\n\n    pub fn get_x(self) -> u8 {\n        self.x\n    }\n\n    pub fn get_y(self) -> u8 {\n        self.y\n    }\n\n    pub fn get_class(self) -> u8 {\n        self.class\n    }\n\n    pub fn get_progress(self) -> u8 {\n        self.progress\n    }\n\n    pub fn get_status(self) -> u8 {\n        self.status\n    }\n\n    pub fn get_health(self) -> u8 {\n        self.health\n    }\n\n    pub fn get_has_been_seen(self) -> bool {\n        self.has_been_seen\n    }\n\n    pub fn get_target_x(self) -> u8 {\n        self.target_x\n    }\n\n    pub fn get_target_y(self) -> u8 {\n        self.target_y\n    }\n\n    pub fn get_is_hidden(self) -> u1 {\n      self.is_hidden\n    }\n\n    pub fn get_damage_mod(self) -> u8 {\n      self.damage_mod\n    }\n\n    pub fn get_action(self, action_idx: u8) -> (bool, ActionDefinition) {\n      /*if action_idx == 0 {\n        (true, self.wait_action)\n      } else */if action_idx <= MAX_ACTIONS_PER_CHARACTER as u8 {\n        (true, self.actions[action_idx])\n      } else {\n        (false, self.actions[0])\n      }\n    }\n\n    // pub fn get_energy_per_attack(self) -> u8 {\n    //     class_energy_per_attack[self.class]\n    // }\n\n    // pub fn get_energy_per_cast(self) -> u8 {\n    //     class_energy_per_cast[self.class]\n    // }\n\n    // pub fn get_energy_per_disarm(self) -> u8 {\n    //     class_energy_per_disarm[self.class]\n    // }\n\n    // pub fn get_energy_per_move(self) -> u8 {\n    //     class_energy_per_move[self.class]\n    // }\n\n    // pub fn get_energy_per_ritual(self) -> u8 {\n    //     class_energy_per_ritual[self.class]\n    // }\n\n    // pub fn get_energy_per_search(self) -> u8 {\n    //     class_energy_per_search[self.class]\n    // }\n\n    // pub fn get_energy_per_sneak(self) -> u8 {\n    //     class_energy_per_sneak[self.class]\n    // }\n\n    // pub fn get_energy_per_draw(self) -> u8 {\n    //     class_energy_per_draw[self.class]\n    // }\n\n    // pub fn get_energy_per_shoot(self) -> u8 {\n    //     class_energy_per_shoot[self.class]\n    // }\n\n    // pub fn get_damage(self, attack_type: u8) -> u8 {\n    //     self.damage_mod + class_damage[attack_type][self.class]\n    // }\n\n    pub fn get_last_action(self) -> u8 {\n      self.last_action\n    }\n\n    // pub fn can_sneak(self) -> bool {\n    //     class_energy_per_sneak[self.class] != 255\n    // }\n\n    // pub fn can_ritual(self) -> bool {\n    //     class_energy_per_ritual[self.class] != 255\n    // }\n\n    // pub fn can_cast_fireball(self) -> bool {\n    //     class_energy_per_cast[self.class] != 255\n    // }\n\n    pub fn can_shoot(self) -> bool {\n        self.class == ARCHER\n    }\n    // pub fn can_disarm(self) -> bool {\n    //     class_energy_per_disarm[self.class] != 255\n    // }\n\n    // pub fn can_search(self) -> bool {\n    //     class_energy_per_search[self.class] != 255\n    // }\n\n    fn is_pos_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_target_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_class_valid(class: u8) -> bool { class as u32 <= CLASS_COUNT }\n    fn is_status_valid(status: u8) -> bool { status < PROGRESS_COUNT }\n\n    pub fn is_valid(self) -> bool {\n        Character::is_pos_valid(self.x, self.y) &\n        Character::is_target_valid(self.target_x, self.target_y) &\n        Character::is_class_valid(self.class) &\n        Character::is_status_valid(self.progress)\n    }\n\n    pub fn serialize(self) -> (SerializedCharacter, SerializedArenaCharacterActionDefinitions) {\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n        assert(self.is_valid());\n        let packed_x = self.x + (self.class << WIDTH_BITS);\n        let packed_y = self.y + (self.progress << HEIGHT_BITS);\n        let packed_target_x = (self.target_x & WIDTH_MASK) + ((self.is_hidden as u8) << WIDTH_BITS);\n        let packed_target_y = (self.target_y & HEIGHT_MASK) + ((self.last_action as u8) << HEIGHT_BITS);\n\n        // let serialized_action_defs = self.actions.map(|a|std::field::bytes32_to_field(a));\n        let serialized_action_defs = [\n          std::field::bytes32_to_field(self.actions[1]),\n          std::field::bytes32_to_field(self.actions[2]),\n          std::field::bytes32_to_field(self.actions[3]),\n          std::field::bytes32_to_field(self.actions[4]),\n          std::field::bytes32_to_field(self.actions[5]),\n          std::field::bytes32_to_field(self.actions[6])\n        ];\n        \n        ([packed_x, packed_y, self.health, packed_target_x, packed_target_y, self.damage_mod], serialized_action_defs)\n    }\n\n    pub fn to_obstacle(self) -> (bool, Obstacle) {\n        comptime {\n            assert(MAX_CHARACTERS < (255 - MAX_OBSTACLES));\n        }\n        assert(self.is_valid());\n        new_obstacle(self.id + (MAX_OBSTACLES as u8), self.x, self.y, self.health, self.class)\n        // Obstacle {\n        //     id: self.id + (MAX_CHARACTERS as u8),\n        //     x: self.x,\n        //     y: self.y,\n        //     obstacle_type: self.class,\n        //     health: self.health,\n        //     //was_alive: \n        // }\n    }\n\n    pub fn move(self, x: u8, y: u8) -> Character {\n        let mut c = self;\n        c.x = x;\n        c.y = y;\n        c\n    }\n\n    pub fn take_damage(self, attack_type: u8, dmg: u8) -> Character {\n        let damage_after_resistances = get_attack_damage_to_tile(attack_type, dmg as u32, self.class);\n        let mut c = self;\n        if damage_after_resistances > (c.health as u32) {\n            c.health = 0;\n        } else {\n            c.health -= (damage_after_resistances as u8);\n        }\n        c\n    }\n\n    pub fn set_status(self, status: u8) -> Character {\n        assert(status < PROGRESS_COUNT);\n        let mut c = self;\n        c.progress = status;\n        c\n    }\n\n    pub fn create_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n        // let mut actions: BoundedVec<ActionDefinition, 6> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..6 {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions.push(ACTION_DEFINITIONS[idx + i]);\n        //     }\n        // }\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: 0,\n            health: 0,\n            has_been_seen: false,\n            is_hidden: 0,\n            target_x: 255,\n            target_y: 255,\n            damage_mod: 0,//: class_damage[class],\n            last_action: WAIT,\n            status: 0, // TODO: status\n            actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1]// BoundedVec::new()\n        };\n        assert(c.is_valid());\n        c\n    }\n\n    pub fn parse(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool, Character) {\n        // these asserts could be disabled for production\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n\n        let mut is_valid = true;\n\n        let split: [u8; 32] = data.to_be_bytes::<32>();\n        assert(split.len() == 32);\n        let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n        let y_packed = split[2 + id * 6 + 1]; // 4 bit y, 4 bit status\n        let mut health = split[2 + id * 6 + 2] as u16;\n        let target_x_packed = split[2 + id * 6 + 3]; // 5 bit target x, 1 bit hidden, 1 bit has target, 1 bit unused\n        let target_y_packed = split[2 + id * 6 + 4]; // 4 bit target y, 4 bit last action\n        let damage_mod = split[2 + id * 6 + 5]; // last byte: for the moment, use to save damage_mod (buffs, etc)\n\n        let x = x_packed & WIDTH_MASK;\n        let y = y_packed & HEIGHT_MASK;\n        let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n        if !Character::is_class_valid(class) {\n            debug!(quote { println(f\"Invalid class {class}\"); });\n            class = 0;\n            is_valid = false;\n        }\n\n        let progress = (y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n        softassert!(quote { is_valid }, quote { Character::is_status_valid(progress) }, quote { f\"Invalid status {progress} during character parsing {id}\" });\n\n        let target_x = target_x_packed & WIDTH_MASK;\n        let target_y = target_y_packed & HEIGHT_MASK;\n        let last_action = (target_y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n\n        let is_visible = is_visible(enemy_advance, x); //((target_x_packed >> 5) & 1) as u1;\n        let is_hidden = ((target_x_packed >> WIDTH_BITS) & 1) as u1;\n\n        let mut damage: u16 = 0;\n        for i in 0..MAX_EVENTS {\n            let event = events[i];\n            damage += event.get_applied_damage_to_my_asset(x, y, class);\n            // if events[i].actor_id == id {\n            //     let event = events[i];\n            //     if event.actor_id == id {\n            //         damage += event.get_applied_damage_to_my_asset(x, y, class);\n            //     }\n            // }\n        }\n        if damage > health {\n            health = 0;\n        } else {\n            health -= damage;\n        }\n\n        // let mut actions = [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]; //: BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..MAX_ACTIONS_PER_CHARACTER {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions[i] = ACTION_DEFINITIONS[idx + i];\n        //     }\n        // }\n\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: progress,\n            health: health as u8,\n            has_been_seen: is_visible, // TODO \n            is_hidden: is_hidden,\n            target_x: target_x,\n            target_y: target_y,\n            damage_mod: damage_mod,\n            last_action: last_action,\n            actions: [\n              wait_action,\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 1].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 2].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 3].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 4].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 5].to_be_bytes::<32>()\n            ],\n            status: 0 // TODO: status\n        };\n        assert(c.is_valid());\n        (is_valid, c)\n    }\n}\n\n// unconstrained fn create_character_unconstrained(\n//   id: u8,\n//   x: u8,\n//   y: u8,\n//   class: u8,\n//   progress: u8,\n//   health: u8,\n//   has_been_seen: u8\n// )\n\nfn select_action_defs_of_character(actions: SerializedArenaActionDefinitions, char_id: u32) -> [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1] {\n  let mut result: [SerializedArenaCharacterActionDefinition] = &[std::field::bytes32_to_field(get_wait_action_def())];\n  let offset = char_id * MAX_ACTIONS_PER_CHARACTER;\n  for i in 0..MAX_ACTIONS_PER_CHARACTER {\n    result = result.push_back(actions[offset + i]);\n  }\n  result.as_array().map(|f|f.to_be_bytes())\n}\n\npub fn get_default_characters(side: u8) -> [Character; MAX_CHARACTERS] {\n    assert(side < 2, f\"Side is too large {side}\");\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let default_actions = get_test_action_register();\n\n    let x = |x| x * ((side + 1) % 2) + (WIDTH - 1 - x) * side;\n    [\n        Character { id: 0, x: x(2), y: 2, class: ARCHER, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 1), status: 0 },\n        Character { id: 1, x: x(2), y: 3, class: RITUALIST, health: 60, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 2), status: 0 },\n        Character { id: 2, x: x(2), y: 4, class: ROGUE, health: 80, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 3), status: 0 },\n        Character { id: 3, x: x(2), y: 5, class: KNIGHT, health: 120, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 4), status: 0 },\n        Character { id: 4, x: x(2), y: 6, class: MAGE, health: 40, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 5), status: 0 },\n    ]\n}\n\n#[export]\npub fn parse_characters(data: SerializedArenaCharacterRoster, actions_data: SerializedArenaActionDefinitions, events: [Event; MAX_EVENTS], enemy_advance: u8) -> pub (bool, [Character; MAX_CHARACTERS]) {\n    comptime { assert(MAX_CHARACTERS == 5); }\n\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut is_valid = true;\n\n    let wait_action = get_wait_action_def();\n\n    // no need to optimize, compiler automatically rolls this out\n    // let mut result: [Character; MAX_CHARACTERS] = [Character::create_character(0, 0, 0, 0), Character::create_character(1, 0, 0, 0), Character::create_character(2, 0, 0, 0), Character::create_character(3, 0, 0, 0), Character::create_character(4, 0, 0, 0)];\n    // for i in 0..(MAX_CHARACTERS as u8) {\n    //     let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action, events, enemy_advance);\n    //     is_valid &= curr_valid;\n    //     result[i] = curr_c;\n    // }\n\n        let (curr_valid, curr_c0) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[0] = curr_c0;\n        let (curr_valid, curr_c1) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[1] = curr_c1;\n        let (curr_valid, curr_c2) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[2] = curr_c2;\n        let (curr_valid, curr_c3) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[3] = curr_c3;\n        let (curr_valid, curr_c4) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[4] = curr_c4;\n    let result = [curr_c0, curr_c1, curr_c2, curr_c3, curr_c4];\n    (is_valid, result)\n}\n\npub fn get_test_my_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 100,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\npub fn get_test_their_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 255,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\n#[test]\nfn test_serialize_character() {\n    let mut character = Character {\n        id: 4,\n        x: 21,\n        y: 9,\n        class: 5,\n        progress: 9,\n        health: 129,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 31,\n        target_y: 9,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    };\n    let (field, _) = character.serialize();\n    assert(field[0] == (21 | (5 << 5)));\n    assert(field[1] == (9 | (9 << 4)));\n    assert(field[2] == 129);\n    assert(field[3] == 31); // TODO: why?\n    assert(field[4] == 9);\n    assert(field[5] == 0);\n}\n\n#[test]\nfn test_parse_character() {\n    let dummy_events = Event::get_test_dummy_events();\n    let data_array: [u8; 32] = [\n        0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        191 as u8, 249 as u8, 255 as u8, 255 as u8, 9 as u8, 255 as u8,\n        181 as u8, 153 as u8, 129 as u8, 127 as u8, 9 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n    ];\n    let data: Field = std::field::bytes32_to_field(data_array);\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    println(data);\n    assert(data == 0xbff9ffff09ffb599817f0900000000000000, f\"Failed assumption: data: {data} != 0xbff9ffff09ffb599817f0900000000000000\");\n    let (character_valid, character) = Character::parse(3, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_valid);\n    assert(character.get_id() == 3);\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 9);\n    assert(character.get_class() == 5);\n    assert(character.get_progress() == 9);\n    assert(character.get_health() == 129);\n    assert(character.get_has_been_seen());\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n\n    let (character_max_valid, character_max) = Character::parse(2, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_max_valid);\n    assert(character_max.get_id() == 2);\n    assert(character_max.get_x() == 31);\n    assert(character_max.get_y() == 9);\n    assert(character_max.get_class() == 5);\n    assert(character_max.get_progress() == 15);\n    assert(character_max.get_health() == 255);\n    assert(character_max.get_has_been_seen());\n    assert(character_max.get_target_x() == 31);\n    assert(character_max.get_target_y() == 9);\n\n    let (character_min_valid, character_min) = Character::parse(0, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_min_valid);\n    assert(character_min.get_id() == 0);\n    assert(character_min.get_x() == 0);\n    assert(character_min.get_y() == 0);\n    assert(character_min.get_class() == 0);\n    assert(character_min.get_progress() == 0);\n    assert(character_min.get_health() == 0);\n    assert(character_min.get_has_been_seen() == false);\n    assert(character_min.get_target_x() == 0);\n    assert(character_min.get_target_y() == 0);\n}\n\n#[test]\nfn test_parse_character_as_in_game() {\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    let data: Field = 0x1602ff1f09001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00;\n    let (character_valid, character) = Character::parse(0, data, dummy_actions, wait_action, Event::get_test_dummy_events(), 20);\n    assert(character_valid);\n    assert(character.get_id() == 0);\n    assert(character.get_x() == 22, character.get_x());\n    assert(character.get_y() == 2, character.get_y());\n    assert(character.get_class() == 0, character.get_class());\n    assert(character.get_progress() == 0, character.get_progress());\n    assert(character.get_health() == 255);\n    assert(character.get_has_been_seen() == true);\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n}\n\n#[export]\npub fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> pub (Field, SerializedArenaActionDefinitions) {\n    let mut result: [u8; 32] = [0; 32];\n    let mut actions: SerializedArenaActionDefinitions = [0; 30]; //&[].as_array();\n    for i in 0..MAX_CHARACTERS {\n        let (serialized_char_bytes, serialized_actions) = chars[i].serialize();\n        for j in 0..6 {\n            result[2 + i * 6 + j] = serialized_char_bytes[j];\n        }\n        for k in 0..MAX_ACTIONS_PER_CHARACTER {\n          actions[i * MAX_ACTIONS_PER_CHARACTER + k] = serialized_actions[k];\n        }\n    }\n    \n    (std::field::bytes32_to_field(result), actions)\n}\n\n/**\n* For now we will only take class into account.\n*/\npub fn get_attack_damage_to_tile(attack_type: u8, damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * resistances[attack_type * 8 + (class & 7)] as u32 / 100) as u32\n}\n\npub fn get_trap_damage_to_tile(damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * trap_resistances[class & 7] as u32 / 100) as u32\n}\n\n#[test]\nfn test_parse_character_round0() {\n  // let actions_data = .map(|f|f.to_be_bytes::<32>()).map(|f|std::field::bytes32_to_field(f));\n  let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let enemy_advance = 0x00;\n  let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0)\n  ];\n  let serialized_events = serialize_events(events);\n   println(f\"events: {serialized_events}\");\n\n  let parsed = parse_characters(data, [\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071020100a000020100a00000020000000002000000000000000,\n    0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n    0x023100081b161118120a010018120a01000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071008100a000008100a00000020000000002000000000000000,\n    0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n    0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071018100a000018100a00000020000000002000000000000000,\n    0x09f0000130060c002000000000200000000020000000002000000000000000,\n    0xf00001100610001005000100100500010020000000002000000000000000,\n    0xf00001301c0100100d000000100d00000020000000002000000000000000,\n    0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110061028100a000028100a00000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071010100a000010100a00000020000000002000000000000000,\n    0xf000071b1611002000000000000705000020000000002000000000000000,\n    0x6300061b161164150a020164150a02010020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000\n], events, enemy_advance);\n\n  assert(parsed.0);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/character.nr"},"74":{"source":"use arenalib::{ NO_EVENT, SEE_MOVE, RECEIVE_ATTACK, TRIGGERED_TRAP }; //, SEE_RITUAL, SEE_CAST, SEE_DRAW, SEE_SEARCH_TRAP, FOUND_TRAP\n// use crate::{ EMPTY, WALL };\nuse arenalib::{ EVENT_COUNT };\nuse arenalib::{ ATTACK_FIREBALL };\nuse arenalib::{ SERIALIZED_EVENT_BYTE_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD };\nuse arenalib::{ WIDTH };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS }; //, MAX_TRAPS\nuse arenalib::SerializedArenaEvents;\n// use crate::TRAPS_BUFFER_MASK;\nuse crate::map::get_distance;\n// use crate::character::Character;\nuse crate::character::{ get_attack_damage_to_tile, get_trap_damage_to_tile };\nuse crate::map::their_x_to_mine;\nuse skplg::{ debug, softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD };\n\npub struct Event {\n    pub event: u8,\n    pub actor_id: u8,\n    pub subtype: u8,\n    pub x: u8,\n    pub y: u8,\n    pub value: u8,\n    pub radius: u8,\n}\n\n\n    #[export]\n    pub fn parse_their_events(fields: SerializedArenaEvents) -> pub (bool, [Event; MAX_EVENTS]) {\n        comptime {\n            assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENT_BYTE_SIZE <= 32);\n            assert(SERIALIZED_EVENTS_ARRAY_SIZE * SERIALIZED_EVENTS_PER_FIELD == MAX_EVENTS);\n            assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n        }\n\n        let mut valid = true;\n        let mut events: [Event; MAX_EVENTS] = [Event::empty(0); MAX_EVENTS];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let split: [u8; 32] = fields[i].to_be_bytes::<32>(); //.to_be_bytes<32>();\n            //assert(split.len() == 32);\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                let raw_x = split[offset + 2];\n                let (x_parsed_valid, x_parsed) = their_x_to_mine(raw_x);\n                softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to calculate their_x_to_mine: {raw_x}\" });\n                events[i * SERIALIZED_EVENTS_PER_FIELD + j] = Event {\n                    event: split[offset],\n                    actor_id: split[offset + 1],\n                    x: x_parsed,\n                    y: split[offset + 3],\n                    value: split[offset + 4],\n                    subtype: split[offset + 5],\n                    radius: split[offset + 6],\n                };\n            }\n        }\n        (valid, events)\n    }\n    \n    #[export]\n    pub fn serialize_events(events: [Event; MAX_EVENTS]) -> pub SerializedArenaEvents {\n        assert(events.len() == MAX_EVENTS);\n        assert(MAX_EVENTS % SERIALIZED_EVENTS_PER_FIELD == 0);\n        assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n\n        let mut fields: [Field] = &[];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let mut data: [u8; 32] = [0; 32];\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let index = i * SERIALIZED_EVENTS_PER_FIELD + j;\n                let event = events[index];\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                data[offset] = event.event;\n                data[offset + 1] = event.actor_id;\n                data[offset + 2] = event.x;\n                data[offset + 3] = event.y;\n                data[offset + 4] = event.value;\n                data[offset + 5] = event.subtype;\n                data[offset + 6] = event.radius;\n            }\n            fields = fields.push_back(std::field::bytes32_to_field(data));\n        }\n        fields.as_array()\n    }\n    \n#[test]\nfn test_event_serde() {\n    let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 5, NO_EVENT, 1),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 6, NO_EVENT, 2),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 7, NO_EVENT, 3),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 8, NO_EVENT, 4)\n  ];\n\n  let serialized = serialize_events(events);\n  let (result_valid, result) = parse_their_events(serialized);\n  assert(result_valid);\n  assert(result[0].event == events[0].event);\n  assert(result[1].event == events[1].event);\n  assert(result[2].event == events[2].event);\n  assert(result[3].event == events[3].event);\n  assert(result[0].actor_id == events[0].actor_id);\n  assert(result[1].actor_id == events[1].actor_id);\n  assert(result[2].actor_id == events[2].actor_id);\n  assert(result[3].actor_id == events[3].actor_id);\n  assert(result[0].x == events[0].x);\n  assert(result[1].x == events[1].x);\n  assert(result[2].x == events[2].x);\n  assert(result[3].x == events[3].x);\n  assert(result[0].y == events[0].y);\n  assert(result[1].y == events[1].y);\n  assert(result[2].y == events[2].y);\n  assert(result[3].y == events[3].y);\n  assert(result[0].value == events[0].value);\n  assert(result[1].value == events[1].value);\n  assert(result[2].value == events[2].value);\n  assert(result[3].value == events[3].value);\n  assert(result[0].subtype == events[0].subtype);\n  assert(result[1].subtype == events[1].subtype);\n  assert(result[2].subtype == events[2].subtype);\n  assert(result[3].subtype == events[3].subtype);\n  assert(result[0].radius == events[0].radius);\n  assert(result[1].radius == events[1].radius);\n  assert(result[2].radius == events[2].radius);\n  assert(result[3].radius == events[3].radius);\n}\n    // fn affects_my_character(self, x: u8, y: u8) -> bool {\n    //     let distance = get_distance(self.x, self.y, x, y);\n    //     ((self.x == x) & (self.y == y)) | ((self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y))\n    // }\nimpl Event {\n    fn affects_my_obstacle(self, x: u8, y: u8) -> bool {\n        (self.x == x) & (self.y == y)\n    }\n\n    fn may_affect_my_other_characters(self) -> bool {\n        (self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL)\n    }\n\n    fn may_affect_my_obstacles(self) -> bool {\n        self.event == RECEIVE_ATTACK\n    }\n\n    /**\n    * For now we will only take class into account.\n    */\n    pub fn get_applied_damage_to_my_asset(self, x: u8, y: u8, tile: u8) -> u16 {\n        let mut damage = 0;\n        let radius = self.radius as u32;\n        let radius = radius * radius;\n    \n        if self.event == RECEIVE_ATTACK {\n            let distance = get_distance(self.x, self.y, x, y) as u32;\n            debug!(quote {\n                        // let event = self.event;\n                        // let actor = self.actor_id;\n                        // let self_x = self.x;\n                        // let self_y = self.y;\n                        // let val = self.value;\n                        // println(f\"GetAppliedDamageToMyAsset: Event({event}:{val} from {actor}@{self_x}|{self_y})@{x}|{y}: {distance} <= {radius}\");\n                    });\n            if distance <= radius {\n                let damage_raw = get_attack_damage_to_tile(self.subtype, self.value as u32, tile) as u32;\n                damage = damage_raw * (1 + radius - distance) / (radius + 1) as u32;\n                debug!(quote { println(f\"Deal damage: {damage_raw} * (1 + {radius} - {distance}) / ({radius} + 1) = {damage}\"); });\n            }\n            // if (self.x == x) & (self.y == y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile);\n            // } else if (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile) / 2;\n            // }\n        }\n        if self.event == TRIGGERED_TRAP {\n            damage = get_trap_damage_to_tile(self.value as u32, tile);\n        }\n        damage as u16\n    }\n\n    pub fn empty(actor_id: u8) -> Event {\n        Event {\n            event: NO_EVENT,\n            actor_id: actor_id,\n            x: 0,\n            y: 0,\n            value: 0,\n            subtype: 0,radius: 0\n        }\n    }\n\n    pub fn get_dummy_events() -> [Field; MAX_EVENTS] {\n        [0; MAX_EVENTS]\n    }\n\n    pub fn get_test_dummy_events() -> [Event; MAX_EVENTS] {\n        [Event::empty(0); MAX_EVENTS]\n    }\n}\n\npub fn build_std_event(event: u8, actor_id: u8, x: u8, y: u8) -> Event {\n    assert(event < EVENT_COUNT);\n    assert((actor_id as u32) < MAX_CHARACTERS);\n    assert((x < WIDTH) | (x == NOWHERE));\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: 0,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\n#[test]\nfn test_build_std_event() {\n    let event = build_std_event(SEE_MOVE, 1, 2, 3);\n    assert(event.event == SEE_MOVE);\n    assert(event.actor_id == 1);\n    assert(event.x == 2);\n    assert(event.y == 3);\n}\n\n#[test(should_fail)]\nfn test_build_std_event_fail() {\n    let event = build_std_event(EVENT_COUNT, 1, 2, 3);\n    assert(event.event == EVENT_COUNT);\n}\n\npub fn build_value_event(event: u8, actor_id: u8, x: u8, y: u8, value: u8) -> Event {\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\npub fn build_subtype_value_event(event_type: u8, actor_id: u8, x: u8, y: u8, value: u8, event_subtype: u8, radius: u8) -> Event {\n    Event {\n        event: event_type,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: event_subtype,\n        radius: radius,\n    }\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/event.nr"},"75":{"source":"mod common;\n// mod actionPreCalcEffect;\n// mod actionResultEvent;\n// mod actionResultEffect;\n// mod actionRequirements;\nmod action;\n// mod actionDefinitionRegister;\nmod bugs;\nuse arenalib::{ new_action };\npub use action::execute_action;\n// mod actionDefinition;\nmod character;\nuse character::{ Character };\nuse character::parse_characters;\nmod event;\nuse event::Event;\npub use event::{serialize_events, parse_their_events};\nmod obstacle;\nuse obstacle::Obstacle;\npub use obstacle::{ new_obstacle, parse_my_obstacles, parse_their_obstacles, get_obstacle_x, get_obstacle_y, get_obstacle_id, get_obstacle_type, get_obstacle_health, serialize_my_obstacles, get_default_obstacles };\nmod map;\nuse dep::std;\nuse obstacle::serialize_obstacle;\nuse obstacle::serialize_their_obstacles;\n// use action::ACTION_TARGET_X;\n// use action::ACTION_TARGET_Y;\n// use action::ACTION_TYPE;\nuse arenalib::{get_action_target_y, get_action_target_x, get_action_type};\nuse obstacle::serialize_my_obstacles_for_me;\nuse map::is_visible;\npub use arenalib::{SerializedArenaActionDefinitions, SerializedArenaActions, SerializedArenaCharacterRoster, SerializedArenaEnemyObstacles, SerializedArenaEvents, SerializedArenaObstacles};\nuse arenalib::arena_test_action_def_register;\nuse character::serialize_chars;\nuse skplg::{softassert, debug};\nuse arenalib::{serialize_actions, parse_actions};\n\nuse arenalib::{SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLE_BYTE_SIZE};\nuse arenalib::{WIDTH};\nuse arenalib::{MAX_ACTIONS, MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES};\nuse arenalib::{VIEW_DISTANCE};\nuse arenalib::{ARCHER, KNIGHT, ROGUE, MAGE, RITUALIST};\nuse arenalib::{MIN_FIREBALL_ROUNDS_FOR_CAST};\nuse arenalib::{SEE_MOVE, RECEIVE_ATTACK, NO_EVENT};\nuse arenalib::{ATTACK_FIREBALL, ATTACK_RANGED};\nuse arenalib::{WAIT};\nuse arenalib::get_wait_action_def;\nuse arenalib::get_test_action_register;\n\n// mod ResolvedAction;\n\n\n\n// #[export]\n// pub fn ext_can_move_to(x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle]) -> bool {\n//     assert(MAX_OBSTACLES == 24);\n//     let mut my_obstacles_parsed = Obstacle::parse_my_obstacles(my_obstacles, events).as_array();\n//     // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n//     // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n//     let enemy_objects_parsed = Obstacle::parse_their_obstacles(enemy_objects);\n\n//     let mut can = true;\n//     for i in 0..MAX_OBSTACLES {\n//         if !obstacles[i].is_traversible() & (obstacles[i].x == x) & (obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     for i in 0..their_obstacles.len() {\n//         if !their_obstacles[i].is_traversible() & (their_obstacles[i].x == x) & (their_obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     can\n// }\n\n// pub comptime global DEBUG: bool = false;\n// pub comptime fn debug(stmt: Quoted) -> Quoted {\n//     let debug_result = if DEBUG {\n//         stmt\n//     } else { quote {} };\n//     debug_result\n// }\n// pub comptime fn debugmsg<T>(msg: T) -> Quoted {\n//     debug!(quote { println($msg); })\n// }\n// pub comptime fn softassert(varname: Quoted, check: Quoted, msg: Quoted) -> Quoted {\n//     let result = if DEBUG {\n//         quote {\n//             $varname &= $check;\n//             if !($check) {\n//                 println($msg);\n//             }\n//         }\n//     } else {\n//         quote {\n//             $varname &= $check;\n//         }\n//     };\n//     result\n// }\n\n// // MAP\n// global WIDTH_BITS: u8 = 5;\n// global WIDTH_MASK: u8 = (1 << WIDTH_BITS) - 1;\n// global WIDTH: u8 = 1 << WIDTH_BITS;\n// global HEIGHT_BITS: u8 = 4;\n// global HEIGHT_MASK: u8 = (1 << HEIGHT_BITS) - 1;\n// global HEIGHT: u8 = 10;\n// // global NOWHERE: u8 = 255;\n\n// // CLASSES\n// //global UNKNOWN_CLASS: u8 = 0;\n// global ARCHER: u8 = 1;\n// global RITUALIST: u8 = 2;\n// global ROGUE: u8 = 3;\n// global KNIGHT: u8 = 4;\n// global MAGE: u8 = 5;\n// global CLASS_BITS: u8 = 3;\n// global CLASS_MASK: u8 = (1 << CLASS_BITS) - 1;\n// global CLASS_COUNT: u32 = 6;\n// global MAX_ACTIONS_PER_CHARACTER: u32 = 6;\n\n// // ACTIONS\n// global WAIT: u8 = 0;\n// //global SNEAK: u8 = 1;\n// //global MOVE: u8 = 2;          // => SEE_COLUMN (depr: MOVE)\n// //global RITUAL: u8 = 3;        // => SEE_RITUAL | WIN\n// //global SEARCH: u8 = 4;        // => SEE_SEARCH_TRAP\n// //global ATTACK: u8 = 5;        // => RECEIVE_ATTACK | DESTROY // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST: u8 = 6;          // => SEE_CAST // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST_FIREBALL: u8 = 7; // => RECEIVE_ATTACK // affects other characters if status == FIREBALL_ROUNDS_FOR_CAST\n// //global DRAW: u8 = 8;          // => SEE_DRAW\n// //global SHOOT: u8 = 9;         // => RECEIVE_ATTACK\n// //global TRIGGER_TRAP = 9;  // => TRIGGERED_TRAP ?????????\n// //global DISARM_TRAP: u8 = 10;  // => DESTROY\n// //global SET_TRAP: u8 = 11;\n// global ACTION_COUNT: u32 = 12;\n// pub global ACTION_RESULT_EVENT_COUNT: u32 = 4;\n// global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0;\n// global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1;\n// global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2;\n\n// // EVENTS\n// global NO_EVENT: u8 = 0 ;\n// // global DESTROY: u8 = 1;          // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //use coordinates to determine tile or trap that got destroyed and update map\n// //global DISCOVER = 2;         // actor_id = their_char or their_object when receive - handle to update enemy positions, got health & class (this is for all chars, not just the active one)\n// //global SEE_COLUMN = 2 ;      // y = the column the player sees => update objects list\n// global SEE_MOVE: u8 = 3 ;        // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //handle to update enemy positions => DISCOVER\n// //global SEE_SPELL = 4 ;       // actor_id = their_char when receive - need to handle effect via coordinates, => RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle my obstacles\n// global SEE_SEARCH_TRAP: u8 = 5 ; // actor_id = their_char when receive - need to create found trap event if there is a trap nearby => FOUND_TRAP\n// global SEE_RITUAL: u8 = 6 ;      // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_CAST: u8 = 7;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_DRAW: u8 = 8;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// //global RECEIVE_DAMAGE = 9;   // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client\n// global RECEIVE_ATTACK: u8 = 10;  // actor_id = 0 when receive - need to handle damage => // no need to events ... health of visible assets gets sent anyway and invisible ones will be updated during discovery //RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle in my obstacles\n// global TRIGGERED_TRAP: u8 = 11;  // actor_id = my_char when receive - need to handle damage (for now, later on we might want to handle other effects as well) => RECEIVE_DAMAGE\n// // global FOUND_TRAP: u8 = 12;      // actor_id = my_char when receive - no need to handle, only important to have on-chain for the client\n// global DISARMED_TRAP: u8 = 13;      // actor_id = their-char when receive - need to remove my trap from the map\n// global WIN: u8 = 14;\n// // global LOSE: u8 = 15;\n// global ADD_OBSTACLE: u8 = 4;\n// global EVENT_COUNT: u8 = 16;\n\n// // SUBTYPES:\n// global WIN_BY_RITUAL: u8 = 1;\n\n// // ATTACKS\n// global ATTACK_MELEE: u8 = 0;\n// global ATTACK_RANGED: u8 = 1;\n// global ATTACK_FIREBALL: u8 = 2;\n// // global ATTACK_COUNT: u8 = 3;\n// // TODO: instead of enum, use a global array of structs with damage, range, etc.\n\n\n// // TILES\n// global EMPTY: u8 = 0;\n// global WALL: u8 = 6;\n// global WATER: u8 = 7;\n// // global UNKNOWN_CLASS_TILE: u8 = 8;\n// global NON_EMPTY_WALKABLE_TILE_MIN: u8 = 9;\n// // global FLAG: u8 = 9;\n// global TRAP: u8 = 10;\n// // global TRAP_USED: u8 = 11;\n// // global TRAP_FOUND: u8 = 12;\n// // global BODY: u8 = 13;\n// // global BODY_LOOTED: u8 = 14;\n// // global FOG: u8 = 15;\n// global MAX_OBSTACLE_TYPE: u8 = 0x0f;\n// // global TILE_COUNT: u8 = 16;\n// // unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n// // STATUS\n// global RITUAL_ROUNDS_FOR_WIN: u8 = 15;\n// global MIN_FIREBALL_ROUNDS_FOR_CAST: u8 = 3;\n// global MAX_FIREBALL_ROUNDS_FOR_CAST: u8 = 6;\n// // global DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MIN_DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MAX_DRAW_ROUNDS_FOR_SHOOT: u8 = 3;\n// global PROGRESS_BITS: u8 = 4;\n// global PROGRESS_MASK: u8 = (1 << PROGRESS_BITS) - 1;\n// global PROGRESS_COUNT: u8 = 16 ; // just to be more in line with the other constants, actually used as a counter\n// global MAX_HEALTH: u8 = 255;\n\n// // GAMEPLAY\n// global VIEW_DISTANCE: u8 = 6;\n// // global MAX_TRAPS: u32 = 8; // note: only lowest bit of first byte of field is usable! => ! Field = 1 bit + 31 bytes!\n// // global TRAPS_BUFFER_SIZE: Field = 16;\n// // global TRAPS_BUFFER_MASK: Field = 15; // has to be 2^n - 1\n// global MAX_ACTIONS: u32 = 4;\n// global MAX_EVENTS: u32 = 4; // = MAX_ACTIONS // NO! handle traps in a different way (by passing as argument!)+ 4 (2 FOUND_TRAP + WIN/LOSE + 1 reserved)\n// global MAX_OBSTACLES: u32 = 24; // leave traps for now + MAX_TRAPS; // 24 + 8 player placeables\n// pub global MAX_CHARACTERS: u32 = 5;\n// global MIN_PROGRESS: u8 = 0;\n// pub global MAX_PROGRESS: u8 = PROGRESS_COUNT - 1;\n// global SERIALIZED_OBSTACLE_BYTE_SIZE: u32 = 3;//3\n// pub global SERIALIZED_OBSTACLES_ARRAY_SIZE: u32 = 3;//3 // TODO: we take 3 because 3 x 8 = MAX_OBSTACLES ... should assert on this (MAX_OBSTACLES + MAX_CHARACTERS + 7) / 8;\n// pub global SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE: u32 = SERIALIZED_OBSTACLES_ARRAY_SIZE + 1; // +1 because enemy characters are also serialized as obstacles\n// global SERIALIZED_OBSTACLES_PER_FIELD: u32 = 8;//8 // TODO: need to verify that SERIALIZED_OBSTACLES_ARRAY_SIZE * SERIALIZED_OBSTACLES_PER_FIELD = MAX_OBSTACLES!\n// global SERIALIZED_EVENT_BYTE_SIZE: u32 = 7;\n// pub global SERIALIZED_EVENTS_ARRAY_SIZE: u32 = 1; // MAX_EVENTS / SERIALIZED_EVENTS_PER_FIELD => 4 / 4 = 1\n// global SERIALIZED_EVENTS_PER_FIELD: u32 = 4; // 31 / 7 = 4\n// global SERIALIZED_ACTION_BYTE_SIZE: u32 = 5;\n// pub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n// global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4; // could be up to 6, but we only use 4\n\n\n// pub type SerializedArenaActionDefinitions = SerializedRosterActionDefinitions<MAX_ACTIONS_PER_CHARACTER, MAX_CHARACTERS>;\n// pub type SerializedArenaCharacterActionDefinitions = SerializedCharacterActionDefinitions<MAX_ACTIONS_PER_CHARACTER>;\n// pub type SerializedArenaCharacterActionDefinition = SerializedCharacterActionDefinition;\n// #[export]\n// fn tf(x: Field) -> (u32, [u8;32]) {\n//     let mut result: [u8;32] = [0;32];\n//     let bts = x.to_be_bytes::<32>();\n//     for j in 0..31 {\n//         result[j] = 2*j;//bts[j];\n//     }\n//     (32 , result)\n// }\n// i,\n// 20, 0 -> 25,\n// 25 -> 0, \n// x, 0, 0, d0,\n// x, 0, 0, 9d, 1, 0,\n// x, 0, 0, 1, 0, b4, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 91, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 23, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, d4, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, 66, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 50, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b9, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, c5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 55, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b2, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, e8, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2a, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, cb, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 9b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 5c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, a6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 86, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, d5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 38, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8e, 1, 0, 0, 1,\n// 0, 32, 1, 0, 1, 1, x, 0, 0, 1,\n// x, 0, 0, 1, x, 0, 0, 1, 0, 1, 1\n\n// i,\n// 20, 0, 1e -> 0, 0 -> 1e, 0\n// x, 0, 0, d0,\n// x, 0, 0, ba, 1, 0,\n// x, 0, 0, 1, 0, cf, 1, 0, 1, 1,\n\nfn get_actor_from_move(mut move: u32) -> u8 {\n    if (move % 2) == 1 {\n        move -= 1; //((move % 10) - 1) >> 1 // actually not needed ... but clearer this way\n    }\n    let single_digit: u32 = (move % 10 as u32) >> 1;\n    single_digit as u8\n}\n// 3, 1, 1, 1, 0, 1, 2, 0, 2, 8, 1, 0, 0, 1\n// 4, 2, 2, 0, x, 0, 0, 0, 4, a, 2, 0, 0, 2\n\n#[export]\npub fn hash_serialized_private_state(my_chars: SerializedArenaCharacterRoster, my_char_actions: SerializedArenaActionDefinitions, my_obstacles: SerializedArenaObstacles, secret: Field) -> pub Field {\n    // let my_chars_be_bytes: [u8; 32] = my_chars.to_be_bytes::<32>();\n    // assert(my_chars_be_bytes.len() == 32);\n    let gamestate_before_hash_calculated = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n    //let gamestate_before_hash_calculated_field = std::field::bytes32_to_field(gamestate_before_hash_calculated);\n    gamestate_before_hash_calculated\n}\n\n#[test]\nfn test_hash_match() {\n  let my_chars = 12345678901234567890;\n  let my_char_actions = [\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890\n  ];\n  let my_obstacles = [\n    12345678901234567890, 12345678901234567890, 12345678901234567890\n  ];\n  let secret = 12345678901234567890;\n\n  let hash1 = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n  let valid = hash_serialized_private_state(my_chars, my_char_actions, my_obstacles, secret);\n\n  assert(hash1 == valid, f\"{hash1} != {valid}\");\n}\n\n#[export]\nfn get_serialized_obstacle(id: u8, x: u8, y: u8, obstacle_type: u8) -> pub Field {\n    let mut result: [u8; 32] = [0; 32];\n    result[0] = id;\n    result[1] = x;\n    result[2] = y;\n    result[3] = obstacle_type;\n    std::field::bytes32_to_field(result)\n}\n\n// global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// global action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n\n\n#[export]\npub fn calculate_turn(\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions_input: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //mut my_obstacles_parsed: [[u8; 5]; 24],\n    actions_input: SerializedArenaActions,\n    // Common Inputs\n    move_input: u32, //pub\n    // Enemy Inputs\n    enemy_advance_input: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects_input: SerializedArenaEnemyObstacles, // pub\n    enemy_events_input: SerializedArenaEvents, // pub //MAX_EVENTS],\n\n) -> pub (bool, SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, [Obstacle; 24], u8, SerializedArenaEvents, SerializedArenaEnemyObstacles) {\n    let mut success = true;\n    \n// let action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n    //let actionRegister = ActionDefinitionRegister::new(my_char_actions_input);\n    // calculate enemy advance in our coordinates and shadow\n    // let (enemy_advance_valid, enemy_advance) = their_x_to_mine(enemy_advance);\n\n    // // more efficient to do this here, BUT leads to bad side effects for frontend (and it is not THAT costly)\n    // let enemy_advance = if enemy_advance_input >= WIDTH { 0 } else { WIDTH - enemy_advance_input - 1 };\n\n\n    // TODO: Validate map => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    let (events_valid, events) = parse_their_events(enemy_events_input);\n    softassert!(quote { success }, quote { events_valid }, quote { f\"Failed to parse their events {events}\" });\n\n    // let side = move as u1;\n    let (my_chars_valid, mut my_chars) = parse_characters(my_chars_input, my_char_actions_input, events, enemy_advance_input);\n    softassert!(quote { success }, quote { my_chars_valid }, quote { f\"Failed to parse my characters {my_chars}\" });\n\n    let actor_id = get_actor_from_move(move_input);\n    let mut actor = my_chars[actor_id]; //Character::parse(actor_id, my_chars, events);\n    \n    comptime {\n        assert(MAX_OBSTACLES == 24);\n    }\n\n    let (valid, my_obstacles_parsed) = parse_my_obstacles(my_obstacles_input, events);\n    softassert!(quote { success }, quote { valid }, quote { f\"Failed to parse my obstacles {my_obstacles_input}\" });\n    let mut my_obstacles_parsed: [Obstacle; MAX_OBSTACLES] = my_obstacles_parsed;\n\n    let (actions_valid, actions) = parse_actions(MAX_CHARACTERS as u8, actions_input); // actions.map(|action| Action::from_field(action));\n    softassert!(quote { success }, quote { actions_valid }, quote { f\"Failed to parse actions {actions_input}\" });\n    // let mut my_obstacles_parsed = my_obstacles_parsed.as_array();\n//    let (valid, mut my_obstacles_parsed) = parse_my_obstacles(my_obstacles, events).as_array();\n    // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n    let (enemy_objects_parsed_valid, enemy_objects_parsed) = parse_their_obstacles(enemy_objects_input);\n    softassert!(quote { success }, quote { enemy_objects_parsed_valid }, quote { f\"Failed to parse their obstacles {enemy_objects_input}\" });\n\n    let mut energy: u8 = 12;\n    let mut result_events_calculated: [Event] = &[];\n    for i in 0..MAX_ACTIONS {\n        // TODO: ensure that if actor committed suicide, it is not allowed to do any more actions\n        let action = actions[i];\n        //let resolved_action = actionRegister.resolve_action(action); //resolve_action(action);\n        let result = execute_action(action, enemy_advance_input, actor, energy, my_obstacles_parsed, enemy_objects_parsed);\n        //assert(result.0);\n        success &= result.0;\n        let result_event = result.1;\n        let internal_event = result.2;\n        actor = result.4;\n        energy = result.5;\n        \n        // 4461 / 5 = 892,2\n        my_chars = my_chars.map(|c| wb_apply_damage_to_char(c, result_event, actor));\n        // 16800 / 24 = 700\n        my_obstacles_parsed = my_obstacles_parsed.map(|obstacle| {\n            let (updated_obstacle_valid, updated_obstacle) = update_my_obstacle(obstacle, result_event);\n            //success = success & updated_obstacle_valid;\n            softassert!(quote { success }, quote { updated_obstacle_valid }, quote { f\"Failed to update my obstacle {obstacle}, {result_event}\" });\n            updated_obstacle\n        });\n\n        result_events_calculated = result_events_calculated.push_back(result_event);\n    }\n    let result_events_calculated = serialize_events(result_events_calculated.as_array());\n    assert(result_events_calculated.len() == SERIALIZED_EVENTS_ARRAY_SIZE);\n\n    // send death events => no need\n\n    // determine view range\n    let mut my_advance_calculated = 0;\n    for i in 0..MAX_CHARACTERS {\n        if my_chars[i].x > my_advance_calculated {\n            my_advance_calculated = my_chars[i].x;\n        }\n    }\n    my_advance_calculated += VIEW_DISTANCE;\n\n    let (serialized_characters, serialized_action_defs) = serialize_chars(my_chars);\n    let serialized_obstacles: [Field] = serialize_my_obstacles(enemy_advance_input, my_obstacles_parsed);\n    let (serialized_chars_as_obstacles_valid, serialized_chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance_input, my_chars);\n    // success = success & serialized_chars_as_obstacles_valid;\n    softassert!(quote { success }, quote { serialized_chars_as_obstacles_valid }, quote { f\"Failed to serialize chars as obstacles: {my_chars}\" });\n    let serialized_obstacles_for_enemy: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE] = serialized_obstacles.push_back(serialized_chars_as_obstacles).as_array();\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles_parsed);\n\n    (success, serialized_characters, serialized_action_defs, my_obstacles_parsed, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy)\n}\n\n\n\n#[export]\npub fn turn(\n    // verification_key: pub [Field; 114],\n    // proof: pub [Field; 93],\n    // public_inputs: pub [Field; 1 ],//+ 2 * SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE + 2 * SERIALIZED_EVENTS_ARRAY_SIZE],\n    // key_hash: pub Field,\n    // last_move: pub u32,\n    // last_enemy_advance: pub u8,\n    // last_enemy_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // last_events: pub [Field, SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_advance: pub u8,\n    // last_my_result_events: pub [Field; SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_result_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // Gamestate Hashes\n    // gamestate_before_hash: pub Field,\n    // gamestate_after_hash: pub Field,\n    // My Secret State\n    secret: Field,\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //my_obstacles: [[u8; 5]; 24],\n    actions: SerializedArenaActions,\n    // Common Inputs\n    move: u32, //pub\n    // Enemy Inputs\n    enemy_advance: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects: SerializedArenaEnemyObstacles, // pub\n    enemy_events: SerializedArenaEvents, // pub //MAX_EVENTS],\n    // My Results\n    my_result_advance: u8, // pub // 1 bit win, 1 bit lose, 1 bit reserved, 5 bits advance\n    my_result_events: SerializedArenaEvents, // pub\n    my_result_objects: SerializedArenaEnemyObstacles, // pub\n    // Gamestate Hashes\n    gamestate_before_hash: Field, // pub\n    gamestate_after_hash: Field, // pub\n) -> pub bool {\n    // Validate global constants (to make sure one didn't change one without updating dependet ones)\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    //let my_char_actions = arena_test_action_def_register;// get_test_action_register();\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(my_chars_input, my_char_actions, my_obstacles_input, secret);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    softassert!(quote { success }, quote { gamestate_before_hash == gamestate_before_hash_calculated_field }, quote { f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\" });\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        my_chars_input,\n        my_char_actions,\n        my_obstacles_input,\n        actions,\n        move,\n        enemy_advance,\n        enemy_objects,\n        enemy_events\n    );\n    softassert!(quote { success }, quote { turn_calc_valid }, quote { f\"Tun calculation failed\" });\n\n    // if side == 0 {\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x > my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated += VIEW_DISTANCE;\n    // } else {\n    //     my_advance_calculated = WIDTH - 1;\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x < my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated -= VIEW_DISTANCE;\n    // }\n    softassert!(quote { success }, quote { my_result_advance == my_advance_calculated }, quote { f\"Invalid result advance: {my_result_advance} != {my_advance_calculated}\" });\n\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        softassert!(quote { success }, quote { result_event_should == result_event_calculated }, quote { f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\" });\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    assert(my_result_objects.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE {\n        let my_result_object = my_result_objects[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        softassert!(quote { success }, quote { my_result_object == serialized_obstacle }, quote { f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\" });\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secret, serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    softassert!(quote { success }, quote { new_hash_bytes == gamestate_after_hash }, quote { f\"Invalid result hash: {new_hash_bytes} != {gamestate_after_hash}\" });\n    success\n}\n\nfn wb_apply_damage_to_char(mut c: Character, event: Event, actor: Character) -> Character {\n    if c.id == actor.id {\n        c = actor;\n    }\n    apply_damage_to_char(c, event)\n}\n\nfn apply_damage_to_char(c: Character, event: Event) -> Character {\n    let dmg = event.get_applied_damage_to_my_asset(c.x, c.y, c.class);\n    Character {\n        id: c.id,\n        x: c.x,\n        y: c.y,\n        class: c.class,\n        health: safe_subtract_dmg(c.health, dmg),\n        progress: c.progress,\n        target_x: c.target_x,\n        target_y: c.target_y,\n        has_been_seen: c.has_been_seen,\n        is_hidden: c.is_hidden,\n        damage_mod: c.damage_mod,\n        last_action: c.last_action,\n        actions: c.actions,\n        status: 0\n    }\n}\nfn update_my_obstacle(obstacle: Obstacle, event: Event) -> (bool, Obstacle) {\n    let dmg =\n        // event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle)) +\n        event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle));\n    new_obstacle(get_obstacle_id(obstacle), get_obstacle_x(obstacle), get_obstacle_y(obstacle), safe_subtract_dmg(get_obstacle_health(obstacle), dmg), get_obstacle_type(obstacle))\n    // Obstacle {\n    //     health: safe_subtract_dmg(obstacle.health, dmg),\n    //     id: obstacle.id,\n    //     x: obstacle.x,\n    //     y: obstacle.y,\n    //     obstacle_type: obstacle.obstacle_type,\n    // }\n}\n\nfn get_data_hash(secret: Field, characters: Field, character_actions: SerializedArenaActionDefinitions, obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> Field {\n  assert(character_actions.len() == 30);\n  assert(obstacles.len() == 3);\n  std::hash::poseidon2::Poseidon2::hash([\n    secret,\n    characters,\n    character_actions[0],\n    character_actions[1],\n    character_actions[2],\n    character_actions[3],\n    character_actions[4],\n    character_actions[5],\n    character_actions[6],\n    character_actions[7],\n    character_actions[8],\n    character_actions[9],\n    character_actions[10],\n    character_actions[11],\n    character_actions[12],\n    character_actions[13],\n    character_actions[14],\n    character_actions[15],\n    character_actions[16],\n    character_actions[17],\n    character_actions[18],\n    character_actions[19],\n    character_actions[20],\n    character_actions[21],\n    character_actions[22],\n    character_actions[23],\n    character_actions[24],\n    character_actions[25],\n    character_actions[26],\n    character_actions[27],\n    character_actions[28],\n    character_actions[29],\n    obstacles[0],\n    obstacles[1],\n    obstacles[2]\n  ], 2 + 30 + 3)\n}\n// fn get_data_hash(secret: [u8], characters: [u8], character_actions: [u8; ACTION_DEFINITION_REGISTER_SIZE], obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> [u8; 32] {\n//     assert(secret.len() == 32);\n//     assert(characters.len() == 32);\n\n//     let mut data: [u8; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE] = [0; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE];\n//     for i in 0..32 {\n//         data[i] = secret[i];\n//         data[i + 32] = characters[i];\n//     }\n//     let offset = 32 + 32;\n//     for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//         let obstacle: [u8; 32] = obstacles[i].to_be_bytes::<32>();\n//         assert(obstacle.len() == 32);\n//         for j in 0..32 {\n//             data[offset + i * 32 + j] = obstacle[j];\n//         }\n//     }\n//     let offset = 32 + 32 + 32 * SERIALIZED_OBSTACLES_ARRAY_SIZE;\n//     for i in 0..ACTION_DEFINITION_REGISTER_SIZE {\n//         data[offset + i] = character_actions[i];\n//     }\n//     // let offset = WIDTH * HEIGHT + 32 * 3;\n//     // for i in 0..10 {\n//     //     data[offset + i * 4] = (searched_traps[i] & 255) as u8;\n//     //     data[offset + i * 4 + 1] = ((searched_traps[i] >> 8) & 255) as u8;\n//     //     data[offset + i * 4 + 2] = ((searched_traps[i] >> 16) & 255) as u8;\n//     //     data[offset + i * 4 + 3] = ((searched_traps[i] >> 24) & 255) as u8;\n//     // }\n//     std::hash::blake3(data)\n// }\n\n// fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> Field {\n//     comptime {\n//         assert(MAX_CHARACTERS <= 5);\n//     }\n//     let mut result: [u8; 32] = [0; 32];\n//     for i in 0..MAX_CHARACTERS {\n//         let serialized = chars[i].serialize();\n//         for j in 0..6 {\n//             result[2 + i * 6 + j] = serialized[j];\n//         }\n//     }\n//     std::field::bytes32_to_field(result)\n// }\n\nfn serialize_chars_as_obstacles(enemy_advance: u8, chars: [Character; MAX_CHARACTERS]) -> (bool, Field) {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut result: [u8; 32] = [0; 32];\n    let mut valid_result = true;\n    for i in 0..MAX_CHARACTERS {\n        if (chars[i].is_hidden == 0) & is_visible(enemy_advance, chars[i].get_x()) {\n            let (valid, char_as_obstacle) = chars[i].to_obstacle();\n            let serialized = serialize_obstacle(char_as_obstacle);\n            valid_result = valid_result & valid;\n            result[2 + i * 3] = serialized[0];\n            result[2 + i * 3 + 1] = serialized[1];\n            result[2 + i * 3 + 2] = serialized[2];\n        }\n    }\n    (valid_result, std::field::bytes32_to_field(result))\n}\n\nfn safe_subtract_dmg(a: u8, b: u16) -> u8 {\n    let mut result = 0;\n    if (a as u16) > b {\n        result = a - (b as u8);\n    }\n    result\n}\n\nfn test_result_object_builder(enemy_advance: u8, chars: [Character; MAX_CHARACTERS], obs: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1]) {\n    let mut result: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        result[i] = obs[i];\n    }\n    let (valid, chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance, chars);\n    result[SERIALIZED_OBSTACLES_ARRAY_SIZE] = chars_as_obstacles;\n    (valid, result)\n}\n\n// fn test_helper_roster(actor: Character, mut chars: [Character; MAX_CHARACTERS]) -> [Character; MAX_CHARACTERS] {\n//     chars[actor.id] = actor;\n//     chars\n// }\n\n// fn test_helper_execute_move(move: u32, actor: Character, advances: [u8; 2], secret: [Field; 2], last_hashes: [Field; 2], chars: [[Character; MAX_CHARACTERS]; 2], obs: [[Obstacle; MAX_OBSTACLES]; 2], actions: [Action], my_events: [Event], their_events: [Event]) -> (u32, [Character; MAX_CHARACTERS], Field) {\n//     let side = move as u1;\n//     let other_side = (side as u8 + 1) as u1;\n//     let chars_after = test_helper_roster(actor, chars[side]);\n//     let my_obstacles_serialized = serialize_obstacles(advances[other_side], obs[side]);\n//     let secret_be_bytes: [u8; 32] = secret[side].to_be_bytes();\n//     assert(secret_be_bytes.len() == 32);\n//     let serialized_chars_after = serialize_chars(chars_after);\n//     let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes();\n//     assert(serialized_chars_after_be_bytes.len() == 32);\n//     let current_hash = std::field::bytes32_to_field(get_data_hash(secret_be_bytes, serialized_chars_after_be_bytes, my_obstacles_serialized)); \n\n//     let (enemy_objects_valid, enemy_objects) = test_result_object_builder(chars[other_side], serialize_obstacles(other_side, advances[side], obs[other_side]));\n//     assert(enemy_objects_valid, \"Invalid enemy objects\");\n//     let (my_result_objects_valid, my_result_objects) = test_result_object_builder(chars_after, my_obstacles_serialized);\n//     assert(my_result_objects_valid, \"Invalid my result objects\");\n\n//     let result = turn(\n//         secret[side],\n//         character::serialize_chars(chars[side]),\n//         my_obstacles_serialized,\n//         serialize_actions(actions),\n//         move,\n//         advances[other_side],\n//         enemy_objects,\n//         Event::serialize_events(their_events).as_array(),\n//         advances[side],\n//         Event::serialize_events(my_events).as_array(),\n//         my_result_objects,\n//         last_hashes[side],\n//         current_hash\n//     );\n//     assert(result, \"Invalid result\");\n\n//     (move + 1, chars_after, current_hash)\n// }\n\n// #[test]\n// fn test_main() {\n//     let secrets = [123456789, 9876543210];\n//     let mut chars = [ character::get_default_characters(0), character::get_default_characters(1) ];\n//     let mut obs = [ Obstacle::get_default_obstacles(0), Obstacle::get_default_obstacles(1) ];\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 2, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 3, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 4, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 5, target_y: 1 },\n//     ];\n//     let their_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let mut move = 0;\n//     let mut actor = chars[0][0].move(5, 1);\n//     let mut last_hashes = [ 0x12b8f97907a05ec6a77da3f70368fa3b02e166c74edab8ea0695d6f406146559, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n//     let mut advances = [2 + VIEW_DISTANCE, 29 - VIEW_DISTANCE];\n//     advances[0] = 5 + VIEW_DISTANCE;\n\n//     let mut side = move % 2;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 0 },\n//         Action { action: MOVE, actor: 0, target_x: 27, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(27, 0);\n//     advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 1, target_y: 3 },\n//         Action { action: MOVE, actor: 1, target_x: 0, target_y: 3 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(0, 3);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 2 },\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 1, target_x: 28, target_y: 1 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(28, 1);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n// }\n\n#[test]\nfn test_main_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions = arena_test_action_def_register.map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    println(secrets[side]);\n    println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    println(my_obstacles_serialized_for_me);\n    println(serialize_actions(actor.id, actions));\n    println(move);\n    println(advances[other_side]);\n    println(test_result_object_other_chars);\n    println(serialize_events(their_events));\n    println(advances[side]);\n    println(serialize_events(my_events));\n    println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let result = turn(\n        secrets[side],\n        serialized_chars_input,\n        serialized_char_actions_input,\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events),\n        advances[side],\n        serialize_events(my_events),\n        test_result_object_chars_after,\n        last_hashes[side],\n        current_hash\n    );\n    assert(result, \"Turn failed\");\n}\n\n\n#[test]\nfn test_calc_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000].map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    // println(secrets[side]);\n    // println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    // println(my_obstacles_serialized_for_me);\n    // println(serialize_actions(actor.id, actions));\n    // println(move);\n    // println(advances[other_side]);\n    // println(test_result_object_other_chars);\n    // println(serialize_events(their_events));\n    // println(advances[side]);\n    // println(serialize_events(my_events));\n    // println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n\n\n\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    let my_char_actions = arena_test_action_def_register; //get_test_action_register();\n    println(\"my_char_actions\");\n    println(my_char_actions);\n    println(\"serialized_char_actions_input\");\n    println(serialized_char_actions_input);\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    let gamestate_before_hash = last_hashes[side];\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(serialized_chars_input, my_char_actions, my_obstacles_serialized_for_me, secrets[side]);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        serialized_chars_input,\n        serialized_char_actions_input,\n        // get_test_action_register(),\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events)\n    );\n    assert(turn_calc_valid, f\"Tun calculation failed\");\n    assert(advances[side] == my_advance_calculated, f\"Invalid result advance:  != {my_advance_calculated}\");\n\nlet my_result_events: [Field; SERIALIZED_EVENTS_ARRAY_SIZE] = serialize_events(my_events);\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        assert(result_event_should == result_event_calculated, f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\");\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    for i in 0..test_result_object_chars_after.len() {\n        let my_result_object = test_result_object_chars_after[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        assert(my_result_object == serialized_obstacle, f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\");\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secrets[side], serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    assert(new_hash_bytes == current_hash, f\"Invalid result hash: {new_hash_bytes} != {current_hash}\");\n}\n\n// #[export]\n// pub fn setup_obstacles(\n    \n// )\n\n#[test]\nfn test_calc_turn_0() {\n  let my_chars = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0, 0, 0, 0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n\n  let result = calculate_turn(my_chars, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events);\n\n  assert(result.0);\n}\n\nfn test_turn_0() {\n  let secret = 0x075bcd15;\n  let my_chars_input = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0,0,0,0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n  let my_result_advance = 0x12;\n  let my_result_objects = [0,0,0,0];\n  let my_result_events = [0xffff0000000000ffff0000000000ffff0000000000ffff000000000000];\n  let initial_hash = 0x07a86579c9d2236bd1c02ced0660e9280e1d9a73146a0c9c8e4d8e27d64d6565;\n  let final_hash = 0x2c7492b9fc2adae465ec974b512f12b29b486e7c268cca2c304330eac57dd680;\n\n  let result = turn(secret, my_chars_input, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events, my_result_advance, my_result_events, my_result_objects, initial_hash, final_hash);\n\n  assert(result);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/lib.nr"},"76":{"source":"use arenalib::{ WIDTH, WIDTH_MASK, VIEW_DISTANCE, MAX_OBSTACLES, MAX_ENEMY_OBSTACLES };\nuse crate::obstacle::{ Obstacle, get_obstacle_y, get_obstacle_x, is_obstacle_traversible };\nuse skplg::NOWHERE;\n\n// pub fn is_neighbor(curr_x: u8, curr_y: u8, x: u8, y: u8) -> bool {\n//     // assert(curr_x < WIDTH);\n//     // assert(curr_y < HEIGHT);\n//     // assert(x < WIDTH);\n//     // assert(y < HEIGHT);\n//     // validating coordinates is not the job of this function\n//     // only avoid overflows!\n\n\n//     let shifted_curr_x = std::wrapping_add(curr_x, 1);\n//     let shifted_curr_y = std::wrapping_add(curr_y, 1);\n//     let shifted_x = std::wrapping_add(x, 1);\n//     let shifted_y = std::wrapping_add(y, 1);\n\n//     ((shifted_curr_x == shifted_x) & (std::wrapping_add(shifted_curr_y, 1) >= shifted_y) & (shifted_curr_y <= std::wrapping_add(shifted_y, 1))) |\n//     ((shifted_curr_y == shifted_y) & (std::wrapping_add(shifted_curr_x, 1) >= shifted_x) & (shifted_curr_x <= std::wrapping_add(shifted_x, 1)))\n// }\n\n// global DISTANCE_TABLE_HEIGHT: u32 = HEIGHT as u32;\n// global DISTANCE_TABLE_WIDTH: u32 = WIDTH as u32;\n\n// unconstrained fn distance_sqrt(x: u32) -> u32 {\n//     let mut result: u32 = 0;\n//     for i in 0..DISTANCE_TABLE_WIDTH {\n//         if i * i == x {\n//             result = i;\n//             break;\n//         }\n//     }\n//     result\n// }\n\n// fn d(a: u8, b: u8) -> u8 {\n//     let d = a as i32 - b as i32;\n//     let d2 = d * d;\n//     assert(d2 >= 0);\n//     let d2u = d2 as u32;\n//     let result = unsafe {\n//         let sq = distance_sqrt(d2u);\n//         assert(sq * sq == d2u);\n//         sq\n//     };\n//     assert(result < DISTANCE_TABLE_WIDTH);\n//     comptime { assert(DISTANCE_TABLE_WIDTH <= 256) };\n//     result as u8\n// }\n// global DISTANCE_TABLE: [[u8; DISTANCE_TABLE_WIDTH]; DISTANCE_TABLE_HEIGHT] = [\n//     [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 2,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ],\n//     [ 3,  3,  3,  4,  4,  5,  6,  7,  8,  9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ],\n// ]\n\nglobal MAX_DISTANCE: u32 = 0xff * 0xff;\n\npub fn get_distance(curr_x: u8, curr_y: u8, x: u8, y: u8) -> u16 {\n    // assert(curr_x < WIDTH);\n    // assert(curr_y < HEIGHT);\n    // assert(x < WIDTH);\n    // assert(y < HEIGHT);\n    // validating coordinates is not the job of this function\n    // only avoid overflows!\n\n    // let dx = unsafe {\n    //     let diff_\n    //     distance_sqrt(x)\n    // }\n\n    let dx = if curr_x > x { curr_x - x } else { x - curr_x } as u32;\n    let dy = if curr_y > y { curr_y - y } else { y - curr_y } as u32;\n\n    // let dx = curr_x as i16 - x as i16;\n    // let dy = curr_y as i16 - y as i16;\n\n    let distance = (dx * dx + dy * dy) as u32;\n    if distance > MAX_DISTANCE {\n      MAX_DISTANCE as u16\n    } else {\n      distance as u16\n    }\n}\n\n\npub fn is_visible(enemy_advance: u8, x: u8) -> bool {\n    //(x >= enemy_advance) == (side == 0)\n    x >= enemy_advance\n}\n\n// TODO: This is for the future - fireballs, etc. only if we have line of sight\n// pub fn is_visible(curr_x: u8, curr_y: u8, x: u8, y: u8, map: &Map) -> bool {\n//     assert(curr_x < WIDTH);\n//     assert(curr_y < HEIGHT);\n//     assert(x < WIDTH);\n//     assert(y < HEIGHT);\n\n//     let mut x = curr_x as f32;\n//     let mut y = curr_y as f32;\n//     let x2 = x + 0.5;\n//     let y2 = y + 0.5;\n//     let dx = x2 - x;\n//     let dy = y2 - y;\n//     let mut t = 0.0;\n//     let mut max_t = 1.0;\n//     let mut x = x;\n//     let mut y = y;\n\n//     while t < max_t {\n//         let x = x + dx * t;\n//         let y = y + dy * t;\n//         let x = x as u8;\n//         let y = y as u8;\n\n//         if map.is_wall(x, y) {\n//             return false;\n//         }\n\n//         t += 0.1;\n//     }\n\n//     true\n// }\n\npub fn their_x_to_mine(x: u8) -> (bool, u8) {\n    if x == NOWHERE {\n        (true, NOWHERE)\n    } else {\n        (x < WIDTH, std::wrapping_sub(WIDTH - 1, x) & WIDTH_MASK)\n    }\n}\n\npub fn can_move_to(distance: u16, x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> bool {\n    let mut can = distance <= (VIEW_DISTANCE as u16 * VIEW_DISTANCE as u16); //x <= advance;\n\n    for i in 0..MAX_OBSTACLES {\n        if !is_obstacle_traversible(obstacles[i]) & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    for i in 0..MAX_ENEMY_OBSTACLES {\n        if !is_obstacle_traversible(their_obstacles[i]) & (get_obstacle_x(their_obstacles[i]) == x) & (get_obstacle_y(their_obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    can\n}\n// pub fn their_x_to_mine(side: u1, x: i8) -> i8 {\n//     let mul = side as i8;\n//     mul * 31 + 16 + x\n// }\n\n// x * s -16 + y = 0 if s == 0 => y = 16\n// x * s -16 + y = 31 if s == 1 => x = 31\n// y = 31 * s + 16 + x\n// s = 0:\n// x = -16 => y = 0\n// x = 15 => y = 31\n// s = 1:\n// x = -16 => y = 31\n// x = 15 => y = 0\n\n// pub fn serialize_x(x: i8) -> (bool, u8) {\n//     let valid = (x >= -(WIDTH / 2) as i8) & (x < (WIDTH / 2) as i8);\n//     (valid, (x + (WIDTH / 2) as i8) as u8)\n// }\n\n// pub fn deserialize_x(x: u8) -> (bool, i8) {\n//     let valid = x < WIDTH;\n//     (valid, x as i8 - (WIDTH / 2) as i8)\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/map.nr"},"77":{"source":"// use crate::MAX_OBSTACLES;\n// use crate::{ HEIGHT, WIDTH };\n// use crate::{ EMPTY, WALL, WATER };\n// use crate::{ MAX_EVENTS }; // MAX_CHARACTERS\n// // use crate::{ RECEIVE_ATTACK };\n// // use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\n// use crate::{ SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\n// use crate::event::Event;\n// use crate::map::{ is_visible }; //is_neighbor\n// use dep::std;\n\n// pub struct Obstacle {\n//     pub id: u8,\n//     pub x: u8,             // 5 bit\n//     pub y: u8,             // 4 bit\n//     pub health: u8,        // 8 bit\n//     pub obstacle_type: u8, // 4 bit\n// }\n\n// pub impl Obstacle {\n//     pub fn serialize(self) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         assert(self.y < 0x10, f\"Obstacle y is too large\");\n//         assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n\n//         let packed_y = self.obstacle_type * 0x10 + self.y;\n//         [ self.x, packed_y, self.health]\n//     }\n\n//     pub fn is_obstacle_traversible(self) -> bool {\n//         (self.obstacle_type >= NON_EMPTY_WALKABLE_TILE_MIN) | (self.obstacle_type == EMPTY)\n//     }\n\n//     pub fn parse_their_obstacles(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let health = field[2];\n//         let o = Obstacle {\n//             id: id,\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn parse_obstacle(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let mut health = field[2];\n//         if (obstacle_type == WALL) | (obstacle_type == WATER) {\n//             let mut damage = 0;\n//             for i in 0..MAX_EVENTS {\n//                 damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n//             }\n//             if damage > (health as u16) {\n//                 health = 0;\n//             } else {\n//                 health -= (damage as u8);\n//             }\n//         }\n//         let o = Obstacle {\n//             id: id, // + (MAX_CHARACTERS as u8),\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//             //was_alive: was_alive,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn is_valid(self) -> bool {\n//         (self.x < WIDTH) & (self.y < HEIGHT)\n//     }\n\n//     pub fn parse_their_obstacles(serialized_obstacles: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_their_obstacles(id, serialized_obstacle));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn parse_my_obstacles(serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE], events: [Event; MAX_EVENTS]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_obstacle(id, serialized_obstacle, events));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn serialize_obstacles(side: u1, enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n//         let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n//         for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//             let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n//                 if is_visible(side, enemy_advance, obstacle.x) {\n//                     let serialized_obstacle = obstacle.serialize();\n//                     for k in 0..3 {\n//                         serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n//                     }\n//                 }\n//             }\n//             serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n//         }\n//         serialized_obstacles\n//     }\n\n//     pub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n//         // assert(side < 2, f\"Side is too large {side}\");\n//         let x = |x| x * (((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n//         [\n//             new_obstacle( 0, x(0), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 1, x(1), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 2, x(3), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 3, x(4), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 4, x(5), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle( 5, x(5), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle( 6, x(5), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle( 7, x(5), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 8, x(4), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 9, x(3), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(10, x(1), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(11, x(0), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(12, x(7), y: 0, obstacle_type: 200, WALL),\n//             new_obstacle(13, x(7), y: 1, obstacle_type: 200, WALL),\n//             new_obstacle(14, x(7), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle(15, x(7), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle(16, x(7), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle(17, x(7), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle(18, x(6), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(19, x(7), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(20, x(5), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(21, x(6), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(22, x(7), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(23, x(8), y: 9, obstacle_type: 255, WATER),\n//         ]\n//     }\n// }\n\n\nuse arenalib::MAX_OBSTACLES;\nuse arenalib::{ HEIGHT, WIDTH };\nuse arenalib::{ EMPTY, WALL, WATER };\nuse arenalib::{ MAX_EVENTS, MAX_HEALTH, MAX_OBSTACLE_TYPE, MAX_ENEMY_OBSTACLES }; // MAX_CHARACTERS\n// use crate::{ RECEIVE_ATTACK };\n// use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\nuse arenalib::{ SerializedArenaEnemyObstacles, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\nuse arenalib::NON_EMPTY_WALKABLE_TILE_MIN;\nuse arenalib::SerializedArenaObstacles;\nuse crate::event::Event;\nuse crate::map::{ is_visible, their_x_to_mine }; //is_neighbor\nuse dep::std;\nuse skplg::{softassert, NOWHERE};\nuse arenalib::SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE;\nuse arenalib::MAX_CHARACTERS;\n\n// pub type Obstacle = [u8; 5];\npub struct Obstacle {\n    pub id: u8,\n    pub x: u8,             // 5 bit\n    pub y: u8,             // 4 bit\n    pub health: u8,        // 8 bit\n    pub obstacle_type: u8, // 4 bit\n}\npub fn get_obstacle_id(obstacle: Obstacle) -> u8 {\n    obstacle.id //obstacle[0]\n}\npub fn get_obstacle_x(obstacle: Obstacle) -> u8 {\n    obstacle.x //[1]\n}\npub fn get_obstacle_y(obstacle: Obstacle) -> u8 {\n    obstacle.y //[2]\n}\npub fn get_obstacle_health(obstacle: Obstacle) -> u8 {\n    obstacle.health //[3]\n}\npub fn get_obstacle_type(obstacle: Obstacle) -> u8 {\n    obstacle.obstacle_type //[4]\n}\n\n#[export]\npub fn new_obstacle(id: u8, x: u8, y: u8, health: u8, obstacle_type: u8) -> pub (bool, Obstacle) {\n  let valid = ((x < WIDTH) | (x == NOWHERE)) & ((y < HEIGHT) | (y == NOWHERE)) & (health <= MAX_HEALTH) & (obstacle_type <= MAX_OBSTACLE_TYPE) & (id as u32 < (MAX_OBSTACLES + MAX_CHARACTERS));\n    // let mut valid = true;\n    // softassert!(quote { valid }, quote { (x < WIDTH) | (x == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid x: {x} >= {WIDTH}\" });\n    // softassert!(quote { valid }, quote { (y < HEIGHT) | (y == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid y: {y} >= {HEIGHT}\" });\n    // softassert!(quote { valid }, quote { health <= MAX_HEALTH }, quote { f\"Cannot create Obstacle: Invalid health: {health} > {MAX_HEALTH}\" });\n    // softassert!(quote { valid }, quote { obstacle_type <= MAX_OBSTACLE_TYPE }, quote { f\"Cannot create Obstacle: Invalid obstacle type: {obstacle_type} > {MAX_OBSTACLE_TYPE}\" }); //TODO: not sure if this or is_valid???\n    // (valid, [ id, x, y, health, obstacle_type ])\n    (valid, Obstacle { id: id, x: x, y: y, health: health, obstacle_type: obstacle_type })\n}\n\n#[test]\nfn test_new_obstacle() {\n  let (val, o) = new_obstacle(0, 0, 2, 0xc8, 0x06);\n  assert(val);\n  assert(o.id == 0);\n}\n\n// #[export]\n// pub struct FrontendObstacle {\n//   pub id: u8,\n//   pub x: u8,\n//   pub y: u8,\n\n// }\n\npub fn serialize_obstacle(obstacle: Obstacle) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n    // we could assert here, since obstacles can only be create with new_obstacle?!\n    // assert(self.y < 0x10, f\"Obstacle y is too large\");\n    // assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n    comptime {\n        let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let packed_y = get_obstacle_type(obstacle) * 0x10 + get_obstacle_y(obstacle);\n                [ get_obstacle_x(obstacle), packed_y, get_obstacle_health(obstacle)]\n            }\n        } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n                [ get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_health(obstacle), get_obstacle_type(obstacle)]\n            }\n        } else {\n            quote {\n                assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n            }\n        };\n        q\n    }\n}\n\npub fn is_obstacle_traversible(obstacle: Obstacle) -> bool {\n    (get_obstacle_type(obstacle) >= NON_EMPTY_WALKABLE_TILE_MIN) | (get_obstacle_type(obstacle) == EMPTY)\n}\n\npub fn parse_their_obstacle(id: u8, fld: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> (bool, Obstacle) {\n    comptime {\n        assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n    }\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let mut valid = true;\n    let x_raw = fld[0];\n    let (x_parsed_valid, x_parsed) = their_x_to_mine(x_raw);\n    softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to convert their x to mine of their obstacle {id}: {x_raw}\" });\n    let y = fld[1] & 0x0F;\n    let obstacle_type = (fld[1]) / 0x10;\n    let health = fld[2];\n    let (obstacle_valid, obstacle) = new_obstacle(id, x_parsed, y, health, obstacle_type);\n    softassert!(quote { valid }, quote { obstacle_valid }, quote { f\"Failed to create new obstacle {id}, {x_parsed}, {y}, {health}, {obstacle_type}\" });\n    (valid, obstacle)\n    // let o = Obstacle {\n    //     id: id,\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn parse_obstacle(id: u8, f: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> (bool, Obstacle) {\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let x = f[0];\n    // let mut y = f[1];\n    // let mut obstacle_type = f[1];\n    // comptime {\n    //     let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n    //         quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let y = f[1] & 0x0F;\n                let obstacle_type = (f[1]) / 0x10;\n    //         }\n    //     } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n    //         quote {\n    //             assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n    //             y = f[1];\n    //             obstacle_type = f[3];\n    //         }\n    //     } else {\n    //         quote {\n    //             assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n    //         }\n    //     };\n    //     q\n    // }\n    // let y = f[1]; // & 0x0F;\n    // let obstacle_type = f[3]; //f[1] / 0x10;// (f[1] & 0xF0) / 0x10;\n    let mut health = f[2];\n    //if (obstacle_type == WALL) | (obstacle_type == WATER) {\n        let mut damage = 0;\n        for i in 0..MAX_EVENTS {\n            damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n        }\n        if damage > (health as u16) {\n            health = 0;\n        } else {\n            health -= (damage as u8);\n        }\n    //}\n    new_obstacle(id, x, y, health, obstacle_type)\n    // let o = Obstacle {\n    //     id: id, // + (MAX_CHARACTERS as u8),\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    //     //was_alive: was_alive,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn is_obstacle_valid(obstacle: Obstacle) -> bool {\n    (get_obstacle_x(obstacle) < WIDTH) & (get_obstacle_y(obstacle) < HEIGHT)\n}\n\npub fn parse_their_obstacles(serialized_obstacles: SerializedArenaEnemyObstacles) -> (bool, [Obstacle; MAX_ENEMY_OBSTACLES]) {\n  let (dummy_obstacle_valid, dummy_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n  assert(dummy_obstacle_valid);\n    let mut obstacles: [Obstacle; MAX_ENEMY_OBSTACLES] = [dummy_obstacle; MAX_ENEMY_OBSTACLES];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n            obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j] = obstacle; //s.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    let serialized_obstacle_field = serialized_obstacles[SERIALIZED_OBSTACLES_ARRAY_SIZE].to_be_bytes::<32>();\n    assert(serialized_obstacle_field.len() == 32);\n    for j in 0..MAX_CHARACTERS {\n      let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n      // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n      let id = (MAX_OBSTACLES + j) as u8;\n      let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n      obstacles[MAX_OBSTACLES + j] = obstacle; //s.push_back(obstacle);\n      valid_result = valid_result & valid;\n    }\n    (valid_result, obstacles)\n}\n\npub fn parse_my_obstacles(serialized_obstacles: SerializedArenaObstacles, events: [Event; MAX_EVENTS]) -> (bool, [Obstacle; MAX_OBSTACLES]) {\n    let mut obstacles: [Obstacle] = &[];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    for i in 0..serialized_obstacles.len() {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            //let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_obstacle(id, serialized_obstacle, events);\n            obstacles = obstacles.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    (valid_result, obstacles.as_array())\n}\n\n#[export]\npub fn serialize_my_obstacles_for_me(obstacles: [Obstacle; MAX_OBSTACLES]) -> pub [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            let serialized_obstacle = serialize_obstacle(obstacle);\n            for k in 0..3 {\n                serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\n\npub fn serialize_my_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let serialized_obstacle = serialize_obstacle(obstacle);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\npub fn serialize_their_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) {\n    let mut valid_result = true;\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let parsed_x = their_x_to_mine(get_obstacle_x(obstacle));\n                valid_result = valid_result & parsed_x.0;\n                let mirrored_obstacle = new_obstacle(\n                    get_obstacle_id(obstacle),\n                    parsed_x.1,\n                    get_obstacle_y(obstacle),\n                    get_obstacle_health(obstacle),\n                    get_obstacle_type(obstacle)\n                );\n                valid_result = valid_result & mirrored_obstacle.0;\n                let serialized_obstacle = serialize_obstacle(mirrored_obstacle.1);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    (valid_result, serialized_obstacles)\n}\n\nfn get_x_of_side(side: u1, x: u8) -> u8 {\n    x * ((side as u8 + 1) as u1) as u8 + side as u8 * (WIDTH - 1 - x)\n}\n\n#[test]\nfn test_x() {\n    let x8s0 = get_x_of_side(0, 8);\n    assert(x8s0 == 8, f\"{x8s0} != 8\");\n    let x8s1 = get_x_of_side(1, 8);\n    assert(x8s1 == 23, f\"{x8s1} != 23\");\n}\n\npub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n    // assert(side < 2, f\"Side is too large {side}\");\n    let x = |x| get_x_of_side(side, x); //(((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n    [\n        new_obstacle( 0, x(0), 2, 200, WALL).1,\n        new_obstacle( 1, x(1), 2, 200, WALL).1,\n        new_obstacle( 2, x(3), 2, 200, WALL).1,\n        new_obstacle( 3, x(4), 2, 200, WALL).1,\n        new_obstacle( 4, x(5), 3, 200, WALL).1,\n        new_obstacle( 5, x(5), 4, 200, WALL).1,\n        new_obstacle( 6, x(5), 5, 200, WALL).1,\n        new_obstacle( 7, x(5), 7, 200, WALL).1,\n        new_obstacle( 8, x(4), 7, 200, WALL).1,\n        new_obstacle( 9, x(3), 7, 200, WALL).1,\n        new_obstacle(10, x(1), 7, 200, WALL).1,\n        new_obstacle(11, x(0), 7, 200, WALL).1,\n        new_obstacle(12, x(7), 0, 200, WALL).1,\n        new_obstacle(13, x(7), 1, 200, WALL).1,\n        new_obstacle(14, x(7), 2, 200, WALL).1,\n        new_obstacle(15, x(7), 3, 200, WALL).1,\n        new_obstacle(16, x(7), 4, 200, WALL).1,\n        new_obstacle(17, x(7), 5, 200, WALL).1,\n        new_obstacle(18, x(6), 8, 255, WATER).1,\n        new_obstacle(19, x(7), 8, 255, WATER).1,\n        new_obstacle(20, x(5), 9, 255, WATER).1,\n        new_obstacle(21, x(6), 9, 255, WATER).1,\n        new_obstacle(22, x(7), 9, 255, WATER).1,\n        new_obstacle(23, x(8), 9, 255, WATER).1,\n        // new_obstacle(24, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(25, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(26, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(27, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(28, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(29, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(30, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(31, x(0), 0, 255, EMPTY).1,\n    ]\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/obstacle.nr"},"78":{"source":"use skplg::{softassert, UNREADABLE_BYTES_PER_FIELD, NOWHERE};\nuse skpla::{ACTION_BYTE_SIZE, Action, new_action, get_action_actor, get_action_type, get_action_target_x, get_action_target_y};\nuse crate::SerializedArenaActions;\nuse crate::{MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER};\nuse crate::{WIDTH, HEIGHT};\nuse crate::WAIT;\n\npub global SERIALIZED_ACTION_BYTE_SIZE: u32 = ACTION_BYTE_SIZE;\npub global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4;\npub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n\n// comptime fn get_serialized_actions_array_size() -> u32 {\n//   let needed_usable_bytes = MAX_ACTIONS * ACTION_BYTE_SIZE;\n//   let usable_bytes_per_field = 32 - UNREADABLE_BYTES_PER_FIELD;\n//   let field_count = needed_usable_bytes / usable_bytes_per_field;\n//   if field_count * usable_bytes_per_field == needed_usable_bytes {\n//     field_count\n//   } else {\n//     field_count + 1\n//   }\n// }\n\n\n  pub fn parse_actions(max_actor_id: u8, fields: SerializedArenaActions) -> (bool, [Action; MAX_ACTIONS]) {\n    let mut valid = true;\n    softassert!(quote { valid }, quote { fields.len() == SERIALIZED_ACTIONS_ARRAY_SIZE }, quote { f\"{fields} does not have size {SERIALIZED_ACTIONS_ARRAY_SIZE}\" });\n    comptime {\n      assert(SERIALIZED_ACTION_BYTE_SIZE == 4);\n    }\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n\n      let mut actions: [Action] = &[];\n      assert(fields.len() == 1);\n      // for i in 0..1 {\n      let i = 0;\n          let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n          assert(split.len() == 32);\n          let mut serialized_actions_per_field = SERIALIZED_ACTIONS_PER_FIELD;\n          if serialized_actions_per_field * (i + 1) > MAX_ACTIONS {\n            serialized_actions_per_field = MAX_ACTIONS - serialized_actions_per_field * i;\n          }\n          assert(serialized_actions_per_field == SERIALIZED_ACTIONS_PER_FIELD);\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              let action_type = split[offset];\n              let actor = split[offset + 1];\n              let target_x = split[offset + 2];\n              let target_y = split[offset + 3];\n\n              softassert!(quote { valid }, quote { action_type as u32 <= MAX_ACTIONS_PER_CHARACTER }, quote { f\"Invalid action: action type {action_type} > {MAX_ACTIONS_PER_CHARACTER}\" });\n              softassert!(quote { valid }, quote { actor <= max_actor_id }, quote { f\"Invalid action: action actor {actor} > {max_actor_id}\" });\n              softassert!(quote { valid }, quote { (target_x < WIDTH) | (target_x == NOWHERE) }, quote { f\"Invalid action: action type {target_x} >= {WIDTH} and not {NOWHERE}\" });\n              softassert!(quote { valid }, quote { (target_y < HEIGHT) | (target_y == NOWHERE) }, quote { f\"Invalid action: action type {target_y} >= {HEIGHT} and not {NOWHERE}\" });\n\n              actions = actions.push_back(new_action(\n                  action_type,\n                  actor,\n                  target_x,\n                  target_y\n              ));\n              /*Action {\n                  action: split[offset],\n                  actor: split[offset + 1],\n                  target_x: split[offset + 2],\n                  target_y: split[offset + 3],\n              }*/\n          }\n      // }\n      // println(actions);\n      (valid, actions.as_array())\n  }\n\n  /**\n  * Warning: This function can throw!!!\n  */\n  pub fn serialize_actions(actor_id: u8, actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n      assert(actions.len() <= MAX_ACTIONS);\n\n      let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, actor_id, NOWHERE, NOWHERE); MAX_ACTIONS];\n      for i in 0..actions.len() {\n          actions_stuffed[i] = actions[i];\n      }\n\n      let mut fields: [Field] = &[];\n      for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n          let mut data: [u8; 32] = [0; 32];\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n              let action = actions_stuffed[index];\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              data[offset] = get_action_type(action);\n              data[offset + 1] = get_action_actor(action);\n              data[offset + 2] = get_action_target_x(action);\n              data[offset + 3] = get_action_target_y(action);\n          }\n          fields = fields.push_back(std::field::bytes32_to_field(data));\n      }\n      fields.as_array()\n  }\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/arenalib/src/actionSerDe.nr"},"90":{"source":"use dep::std::{append::Append};\nuse skplg::UNREADABLE_BYTES_PER_FIELD;\n\npub trait ActionDefinitionPartBuilder<T> { fn new() -> T; }\npub type DEF_ROW<T> = (Quoted, u8, T);\npub comptime fn get_def_register_value(register: Quoted, bytes: u32, bits: u8, bitsize: u8) -> Quoted {\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    if bitsize == 8 {\n      quote { $register[$bytes] }\n      // quote { ($register / $multiplier) as u8 }\n    } else {\n      let divisor = 1 << bits;\n      let mask = std::wrapping_sub(1 << bitsize, 1);\n      if bitsize == 1 {\n        // quote { (($register / $multiplier) as u1) == 1 }\n        quote { (($register[$bytes] as u8 & $divisor as u8) != 0 as u8) }\n      } else {\n        quote { (($register[$bytes] as u8 / $divisor as u8) & $mask as u8) }\n        // quote { (($register / $multiplier) as u8) & $mask as u8 }\n      }\n    }\n}\npub comptime fn build_over_def_array<Env, T>(array: [DEF_ROW<T>], base_index: u32, builder: fn[Env] (u32, u8, Quoted, u8, T) -> Quoted) -> Quoted {\n  let mut result = quote {};\n  \n  let mut bits: u8 = 0;\n  let mut bytes: u32 = base_index;\n\n  for i in 0..array.len() {\n    let (varname, bitsize, args) = array[i];\n    assert(bitsize <= 8, f\"Invalid bit size: {bitsize}\");\n    if (bits + bitsize) > 8 {\n      bytes += 1;\n      bits = 0;\n    }\n    assert(bits < 8, f\"bits must not reach 8 or higher: {bits}\");\n\n    let new_result = builder(bytes, bits, varname, bitsize, args);\n    result = quote { $result $new_result };\n\n    bits += bitsize;\n  }\n  result\n}\npub comptime fn derive_action_def_def_builder<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let mut params: [(Quoted, Type)] = &[];\n  let mut last_byte: u32 = 0;\n  let mut result: Quoted = build_over_def_array(array, 0, |bytes, bits, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { u8 }.as_type() } else { quote { u8 }.as_type() };\n    params = params.push_back((varname, t));\n    let mut r = quote {};\n    if bytes != last_byte {\n      r = r.append(quote { , });\n    } else if (bytes + bits as u32) != 0 {\n      r = r.append(quote { + });\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = r.append(quote { $varname  });\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = r.append(quote { $varname as u8 * $multiplier });\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = r.append(quote { (( $varname & $mask ) * $multiplier) });\n      }\n    }\n    last_byte = bytes;\n    r\n  });\n  f.set_parameters(params);\n\n  let return_type = f.return_type();\n\n  f.set_body(quote { $return_type { register: [ $result ] } }.as_expr().unwrap());\n  // println(f.body());\n}\npub comptime fn get_action_def_def_register_size<T>(array: [DEF_ROW<T>]) -> u32 {\n  let mut size = 0;\n  let _ = build_over_def_array(array, 0, |bytes, _, _, _, _|{\n    size = bytes;\n    quote {}\n  });\n  size + 1\n}\npub comptime fn get_action_def_def_register_element_type() -> Type {\n  quote { u8 }.as_type()\n}\npub comptime fn get_action_def_def_register_type<T>(array: [DEF_ROW<T>]) -> Type {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  quote { [$et; $size] }.as_type()\n}\npub comptime fn derive_action_def_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  // let size = get_action_def_requirements_register_size();\n  let fields = s.fields([]);\n  assert(fields.len() == 1);\n  s.set_fields([(fields[0].0, get_action_def_def_register_type(array))]);\n}\npub comptime fn derive_action_def_def_struct_new<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  let t = get_action_def_def_register_type(array);\n  f.set_return_type(t);\n  f.set_body(quote { ActionRequirement { [0 as $et; $size] } }.as_expr().unwrap());\n}\npub comptime fn derive_frontend_action_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  let mut fields: [(Quoted, Type)] = &[];\n  let _ = build_over_def_array(array, UNREADABLE_BYTES_PER_FIELD, |_, _, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    fields = fields.push_back((varname, t));\n    quote {}\n  });\n  s.set_fields(fields);\n}\npub comptime fn derive_frontend_action_def_struct_builder<T>(param_name: Quoted, base_index: u32, array: [DEF_ROW<T>]) -> Quoted {\n  // let mut params: [(Quoted, Type)] = &[];\n  let mut first = true;\n  let mut result: Quoted = build_over_def_array(array, base_index, |bytes, bits, varname, bitsize, _|{\n    // let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    // params = params.push_back((varname, t));\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    let mut r = quote {};\n    if !first {\n      r = quote { , };\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = quote { $r $varname: $param_name[$bytes] };\n      // r = quote { $r $varname: ($param_name / $multiplier) as u8 };\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = quote { $r $varname: ($param_name[$bytes] & $multiplier) != 0 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u1) == 1 };\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = quote { $r $varname: (( $param_name[$bytes] / $multiplier) & $mask ) as u8 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u8) & $mask as u8 };\n      }\n    }\n    first = false;\n    r\n  });\n  // f.set_parameters(params);\n\n  // let return_type = f.return_type();\n  // // f.set_return_type(return_type.as_type());\n  // f.set_return_data();\n  // f.set_return_public(true);\n  // // println(result);\n  // f.\nresult\n  // quote {  $result } };\n}\n\n// pub global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2; // u2\n\n// global YES: u8 = 1;\n// global NO: u8 = 0;\n// global MIN_STATUS: u8 = 0;\n// global MAX_STATUS: u8 = 15;\n\n// // pub type ActionDefinitionRegister = \n// pub fn build_action_def_requirements_none() -> ActionRequirement {\n//   build_action_def_requirements(\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     MIN_STATUS,\n//     MAX_STATUS,\n//     0 as u8,\n//     255 as u8)\n// }\n// pub fn build_action_def_pre_calc_effects_idle() -> ActionPreCalcEffect {\n//   build_action_def_pre_calc_effect(\n//     WAIT,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1)\n// }\n// // comptime fn no_requirements() -> CtString {\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1, \n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         0 as u8,\n// //         NO as u1)\n// // }\n// pub fn build_action_def_result_event_none() -> ActionResultEvent {\n//   build_action_def_result_event(\n//     0,\n//     0,\n//     ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//     NO_EVENT,\n//     NO_EVENT,\n//     0 as u8\n//   )\n// }\n// // comptime fn no_event() -> CtString {\n// //     build_action_event_def(NO_EVENT, NO_EVENT, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 0 as u8)\n// // }\n// pub fn build_wait_action_def() -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements_none(),\n//     build_action_def_pre_calc_effects_idle(),\n//     build_action_def_result_effects(\n//       0 as u8,\n//       0 as u8,\n//       1 as u8,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_wait_action_def() -> CtString {\n// //     build_action_def(\n// //         no_requirements(),\n// //         no_event(),\n// //         no_event(),\n// //         1 as u8,\n// //         0 as u8,\n// //         ACTION_RESULT_COORDINATES_IDX_SELF,\n// //         NO as u1,\n// //         WAIT\n// //     )\n// // }\n// // pub global WAIT_ACTION: ActionDefinition = comptime { let x = build_wait_action_def(); f\"[{x}]\".quoted_contents() };\n// pub fn build_sneak_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0 as u8,\n//       1 as u8),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0 as u8,\n//       0 as u8,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       YES as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_sneak_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     no_event(), // TODO: not sure if on-seen we should not send a move event instead - that way one could sneak and stay hidden, but not sneak while visible\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_move_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       1),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_MOVE,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_move_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_MOVE, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_cast_action(this_action_id: u8, energy: u8, class: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_CAST,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_cast_action(this_action_id: u8, energy: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_CAST, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_ritual_action(cast_action_id: u8, energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       RITUAL_ROUNDS_FOR_WIN,\n//       MAX_STATUS,\n//       0,\n//       255),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_ritual_action(this_action_id: u8, energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         RITUAL_ROUNDS_FOR_WIN,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 255 as u8),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 255 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1), // TODO: Maybe set this to handle friendly fire???\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     cast_action_id)\n// // }\n// pub fn build_search_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_search_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS, // should be max of shoot\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_DRAW,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_DRAW, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       draw_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     draw_action_id)\n// // }\n// pub fn build_disarm_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_disarm_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_set_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         ADD_OBSTACLE,\n//         TRAP,\n//         0),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_set_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         YES as u1),\n// //     no_event(),\n// //     build_action_event_def(ADD_OBSTACLE, TRAP, 0 as u8, 50 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n\n// // pub fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // fn get_action_needs_target_free_space(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// // }\n// // fn get_action_needs_target_is_not_self(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// // }\n// // fn get_action_needs_status_visible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// // }\n// // fn get_action_needs_status_invisible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// // }\n// // fn get_action_needs_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_sets_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_removes_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_max_range(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_MAX_RANGE]\n// // }\n// // fn get_action_needs_min_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MIN_STATUS]\n// // }\n// // fn get_action_needs_max_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MAX_STATUS]\n// // }\n// // fn get_action_needed_energy(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDED_ENERGY]\n// // }\n// // fn get_action_unseen_event_is_internal(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_EVENT_IS_TRAP] == 1\n// // }\n// // fn get_action_result_event_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_event_not_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_not_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_not_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_not_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_not_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_not_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_status_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// // }\n// // fn get_action_move_to_target(action: ActionDefinition) -> u1 {\n// //     action.register[action.base_index + ACTION_MOVE_TO_TARGET] as u1\n// // }\n// // fn get_action_is_continuous(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_IS_CONTINUOUS] == 1\n// // }\n// // fn get_action_needs_previous_action(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_PREVIOUS_ACTION] as u8\n// // }\n\n// // pub global ACTION_DEFINITION_SIZE: u32 = (ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 5) as u32; // 2 bytes for move_to_target and status_multiplier\n// // pub global ACTION_DEFINITION_REGISTER_SIZE: u32 = ACTION_DEFINITION_SIZE * (1 + (MAX_ACTIONS_PER_CHARACTER - 1) * (CLASS_COUNT - 1));\n\n// // fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // pub struct ActionDefinitionRegister {\n// //   register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinitionRegister {\n// //   pub fn new(register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinitionRegister {\n// //     ActionDefinitionRegister {\n// //       register: register\n// //     }\n// //   }\n\n// //   pub fn resolve_action(self, action: Action) -> ActionDefinition {\n// //     ActionDefinition {\n// //       base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //       action: action,\n// //       register: self.register\n// //     }\n// //   }\n// // }\n\n// // pub struct ActionDefinition {\n// //     base_index: u16,\n// //     action: Action,\n// //     register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinition {\n// //     pub fn new(action: Action, register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinition {\n// //         ActionDefinition {\n// //             base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //             action: action,\n// //             register: register\n// //         }\n// //     }\n// // }\n\n// // impl ResolvedAction for ActionDefinition {\n// //     fn get_action_needs_target_free_space(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: ActionDefinition) -> u1 {\n// //         self.register[self.base_index + ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n\n// // pub struct TestActionDefinition {\n// //     pub register: [u8; ACTION_DEFINITION_SIZE],\n// //     pub action: Action,\n// // }\n\n// // impl ResolvedAction for TestActionDefinition {\n// //     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n// //         self.register[ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n// // #[test]\n// // fn test_execute_action() {\n// //     let action = build_test_action_def!(build_move_action(4), quote { 1, 2, 3, 4 }); //new_action(1, 2, 3, 4);\n// //     let my_advance = 10;\n// //     let their_advance = 1;\n// //     let actor = Character {\n// //         id: 2,\n// //         x: 2,\n// //         y: 4,\n// //         target_x: 0,\n// //         target_y: 0,\n// //         health: 255,\n// //         damage_mod: 1,\n// //         last_action: WAIT,\n// //         class: MAGE,\n// //         is_hidden: 0 as u1,\n// //         has_been_seen: true,\n// //         status: 0,\n// //         actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]\n// //     };\n// //     let energy = 15;\n// //     let my_obstacles = get_default_obstacles(0);\n// //     let their_obstacles = get_default_obstacles(1);\n// //     let (valid, event, internal_event, c, result_energy) = execute_action(\n// //         action,\n// //         my_advance,\n// //         their_advance,\n// //         actor,\n// //         energy,\n// //         my_obstacles,\n// //         their_obstacles\n// //     );\n// //     assert(valid, \"valid\");\n// //     assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n// //     assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n// //     assert(event.x == action.get_action_target_x(), f\"{event}.target_x is not action target x\");\n// //     assert(event.y == action.get_action_target_y(), f\"{event}.target_y is not action target y\");\n// //     assert(c.x == event.x, f\"{c}.x is not action target x\");\n// //     assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n// //     assert(result_energy == 11, f\"{result_energy} != 11\");\n// // }\n\n// // #[export]\n// // pub fn build_action_register(actions: [])\n\npub type CharacterActionDefinition = [u8; 32];\npub type CharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [CharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedCharacterActionDefinition = Field;\npub type SerializedCharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedRosterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32, let MAX_CHARACTERS: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS];","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionDefinition.nr"},"91":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionRequirements::{get_action_def_requirements_base_index, get_action_def_requirements_byte_size};\nuse std::append::Append;\n\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_PRE_CALC_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { pre_calc_effect_continues_action }, 3, |continued_action|quote { let continues_action: bool = $continued_action as u8 == actor_last_action; }),\n    action_def_def(quote { pre_calc_effect_is_continuous }, 1, |is_continuous|quote { let is_continuous: bool = $is_continuous as bool; }),\n    action_def_def(quote { pre_calc_effect_interrupts }, 1, |is_interrupting|quote { let is_interrupting: bool = $is_interrupting as bool; }),\n    action_def_def(quote { pre_calc_effect_allow_retargeting }, 1, |allows_retargetting|quote { let not_interrupted_through_retargeting: bool = $allows_retargetting as bool | ((action_target_x == actor_target_x) & (action_target_y == actor_target_y)); })\n];\npub comptime fn get_action_def_pre_calc_base_index() -> u32 {\n  get_action_def_requirements_byte_size()+get_action_def_requirements_base_index()\n}\n\npub comptime fn get_action_def_pre_calc_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_PRE_CALC_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_pre_calc_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n// }\n#[derive_action_def_def_pre_calc_event_struct]\npub struct ActionPreCalcEffect {\n  pub register: [u8; 32]\n}\nimpl ActionPreCalcEffect {\n  #[derive_action_def_pre_calc_effect_struct_new]\n  pub fn new() -> ActionPreCalcEffect {\n    ActionPreCalcEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_pre_calc_effect_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_pre_calc_effect_builder]\npub fn build_action_def_pre_calc_effect() -> pub ActionPreCalcEffect { ActionPreCalcEffect::new() }\n\npub comptime fn apply_action_pre_calc_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_pre_calc_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_PRE_CALC_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  quote {\n    $result\n    is_not_interrupted = (\n      ((!is_continuous) as u8 * (!is_interrupting) as u8) + // that's the ID of the wait action => leave status, but not continuous\n      ((is_continuous) as u8 * continues_action as u8 * not_interrupted_through_retargeting as u8)\n    ) > 0;\n\n    actor_progress *= is_not_interrupted as u8;\n  }\n}\n\npub comptime fn set_action_def_pre_calc_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_pre_calc_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_pre_calc_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_pre_calc_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[derive_frontend_action_def_pre_calc_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefPreCalcEffects {}\n\n\npub comptime fn derive_frontend_action_def_pre_calc_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_pre_calc_base_index(), ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n  quote { FrontendActionDefPreCalcEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionPreCalcEffect.nr"},"92":{"source":"use skplg::{UNREADABLE_BYTES_PER_FIELD, softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse std::append::Append;\nuse crate::{actionDefinition::derive_frontend_action_def_struct, actionDefinition::derive_frontend_action_def_struct_builder};\n\n    // fn get_action_req_target_free_space(self) -> bool;\n    // fn get_action_req_target_is_not_self(self) -> bool;\n    // fn get_action_req_status_visible(self) -> bool;\n    // fn get_action_req_status_invisible(self) -> bool;\n    // fn get_action_req_status_hidden(self) -> bool;\n    // fn get_action_req_max_range(self) -> u8;\n    // fn get_action_req_min_status(self) -> u8;\n    // fn get_action_req_max_status(self) -> u8;\n    // fn get_action_req_energy(self) -> u8;\n    // fn get_action_req_previous_action(self) -> u8;\npub type ActionDefDefRequirementCheck = (Quoted, Quoted);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, expr: Quoted, msg: Quoted) -> DEF_ROW<ActionDefDefRequirementCheck> {\n    (varname, bit_size, (expr, msg))\n}\n// comptime global ACTION_DEF_DEF_FIELD_COUNT: u32 = 11;\nglobal ACTION_DEF_DEF_REQUIREMENTS: [DEF_ROW<ActionDefDefRequirementCheck>] = [\n    action_def_def(quote { action_req_target_free_space }, 1, quote { can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles) }, quote { f\"Target space cannot be moved to {action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" }),\n    action_def_def(quote { action_req_target_is_not_self }, 1, quote { (actor_x != action_target_x) | (actor_y != action_target_y) }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" }),\n    action_def_def(quote { action_req_status_visible }, 1, quote { actor_is_in_view_range & !actor_is_hidden },  quote { f\"Character must be fully visible for action {action_type}: in_view_range: {actor_is_in_view_range} & !hidden {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_invisible }, 1, quote { !actor_is_in_view_range | actor_is_hidden }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {actor_is_in_view_range} || hidden: {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_hidden }, 1, quote { actor_is_hidden }, quote { f\"Character needs to be hidden to perform action {action_type}\" }),\n    // action_def_def(quote { action_req_previous_action }, 3, quote { true }, quote { f\"\" }),\n    action_def_def(quote { action_req_min_progress }, 4, quote { action_req_min_progress as u8 <= actor_progress as u8 }, quote { f\"Character needs min progress {action_req_min_progress} to perform action {action_type}, but only has {actor_progress}\" }),\n    action_def_def(quote { action_req_max_progress }, 4, quote { action_req_max_progress as u8 >= actor_progress as u8 }, quote { f\"Character cannot have a higher progress than {action_req_max_progress} to perform action {action_type}: got {actor_progress}\" }),\n    action_def_def(quote { action_req_status }, 4, quote { (action_req_status as u8 == 0 as u8) | (action_req_status as u8 == actor_progress as u8) }, quote { f\"Character can only perform action {action_type} while having status {action_req_status}. Invalid status {actor_status}\" }),\n    // action_def_def(quote { action_req_required_energy }, 4, quote { action_req_required_energy <= energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_req_required_energy}\" }),\n    action_def_def(quote { action_req_max_range }, 8, quote { distance as u16 <= (action_req_max_range as u16) * (action_req_max_range as u16) }, quote { f\"Character is out of range! Distance: {distance} > {action_req_max_range}: {{{actor_x},{actor_y}}} - {{{action_target_x},{action_target_y}}} with {action_req_max_range}\" }),\n];\npub comptime fn get_action_def_requirements_base_index() -> u32 {\n  UNREADABLE_BYTES_PER_FIELD as u32\n}\n\npub comptime fn get_action_def_requirements_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_REQUIREMENTS)\n}\n\ncomptime fn derive_action_def_def_req_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n// comptime fn derive_action_def_requirements_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_REQUIREMENTS);\n// }\n\n#[derive_action_def_def_req_struct]\npub struct ActionRequirement {\n  pub register: [u8; 32]\n}\nimpl ActionRequirement {\n  #[derive_action_def_requirements_struct_new()]\n  pub fn new() -> ActionRequirement {\n    ActionRequirement { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_req_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[export]\n#[derive_action_def_def_req_builder]\npub fn build_action_def_requirements() -> pub ActionRequirement { ActionRequirement::new() }\n\npub comptime fn validate_action_requirements(valid_varname: Quoted, register: Quoted) -> Quoted {\n  let mut result = build_over_def_array(ACTION_DEF_DEF_REQUIREMENTS, get_action_def_requirements_base_index(), |bytes, bits, varname, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    // let varname = f\"action_requirement_{i}_is_valid\".quoted_contents();\n    let (checkexpr, msg) = args;\n    let check = if bitsize == 1 { quote { !($varname as bool) | ($checkexpr) } } else { quote { $checkexpr } };\n    let sa = softassert(valid_varname, check, msg);\n    quote {\n      let $varname = $expr;\n      $sa\n    }\n  });\n  // println(result);\n  // quote { assert(1==1); }\n  result\n}\n\npub comptime fn set_action_def_requirements_in_action_def(requirements: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_requirements_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_requirements_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $requirements.register[$i]; });\n    // result = quote { $result $action_def += $requirements.register[$i] as Field * $multiplier; };\n    // multiplier *= 2.pow_32(8);\n  }\n  // println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_requirements_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[derive_frontend_action_def_requirements_struct]\n#[derive(Default)]\npub struct FrontendActionDefRequirements {}\n\n\npub comptime fn derive_frontend_action_def_requirements_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_requirements_base_index(), ACTION_DEF_DEF_REQUIREMENTS);\n  // println(content);\n  quote { FrontendActionDefRequirements { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionRequirements.nr"},"93":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse skplg::softassert;\nuse crate::actionPreCalcEffect::{get_action_def_pre_calc_base_index, get_action_def_pre_calc_effects_byte_size};\nuse std::append::Append;\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { action_result_required_energy }, 4, |action_required_energy|{\n      let check = softassert(quote { is_valid }, quote { action_required_energy <= result_energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_required_energy}\" });\n      quote {\n        let action_required_energy = $action_required_energy;\n        $check\n        result_energy = std::wrapping_sub(result_energy, action_required_energy);\n      }\n    }),\n    action_def_def(quote { action_result_progress_increment }, 4, |progress_increment|quote { let action_result_effect_progress_increment: u32 = $progress_increment as u32; }),\n    action_def_def(quote { action_result_progress_multiplier }, 2, |progress_multiplier|quote { let action_result_effect_progress_multiplier: u32 = $progress_multiplier as u32; }),\n    action_def_def(quote { action_result_move_to_target }, 1, |move_to_target|quote { result_coords = coords[$move_to_target as u8]; }),\n    action_def_def(quote { action_result_hide }, 1, |hide|quote { let action_result_effect_hide: bool = $hide as bool; }),\n    action_def_def(quote { action_result_reveal }, 1, |leave_shadows|quote { let action_result_effect_leave_shadows: bool = $leave_shadows as bool; })\n];\npub comptime fn get_action_def_result_effect_base_index() -> u32 {\n  get_action_def_pre_calc_base_index() + get_action_def_pre_calc_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_result_effect_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n// }\n#[derive_action_def_def_result_effect_struct]\npub struct ActionResultEffect {\n  pub register: [u8; 32]\n}\nimpl ActionResultEffect {\n  //#[derive_action_def_result_effects_struct_new]\n  pub fn new() -> ActionResultEffect {\n    ActionResultEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_effects_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_result_effects_builder]\npub fn build_action_def_result_effects() -> pub ActionResultEffect { ActionResultEffect::new() }\n\npub comptime fn apply_action_result_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_effect_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n// println(result);\n  quote {\n    $result\n\n    let result_progress_raw = actor_progress as u32 * action_result_effect_progress_multiplier + action_result_effect_progress_increment;\n    //softassert!(quote { is_valid }, quote { result_progress_raw <= MAX_PROGRESS as u32 }, quote { f\"Invalid result progress: {result_progress_raw} > {MAX_PROGRESS}\" });\n    result_progress = result_progress_raw as u8;\n\n    result_is_hidden = (result_is_hidden & !action_result_effect_leave_shadows) | action_result_effect_hide;\n    result_is_visible = !result_is_hidden & is_visible(enemy_advance, result_coords.0);\n  }\n}\n\npub comptime fn set_action_def_result_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_result_effect_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_result_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[derive_frontend_action_def_result_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEffects {}\n\n\npub comptime fn derive_frontend_action_def_result_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_result_effect_base_index(), ACTION_DEF_DEF_RESULT_EFFECTS);\n  quote { FrontendActionDefResultEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEffect.nr"},"94":{"source":"// pub global ACTION_RESULT_EVENT_TYPE: u8 = 0;\n// pub global ACTION_RESULT_EVENT_SUBTYPE: u8 = 1;\n// pub global ACTION_RESULT_EVENT_VALUE_MULTIPLIER: u8 = 2;\n// pub global ACTION_RESULT_EVENT_VALUE_FIXED_ADDITION: u8 = 3;\n// pub global ACTION_RESULT_EVENT_COORD_IDX: u8 = 4;\n// pub global ACTION_RESULT_EVENT_RADIUS: u8 = 5;\n// pub comptime fn to_action_result_event(event_type: Quoted, subtype: Quoted, val_mul: Quoted, val_add: Quoted, coord_idx: Quoted, radius: Quoted) -> Quoted {\n//     quote { ($event_type, $subtype, $val_mul, $val_add, $coord_idx, $radius)}\n// }\n// pub comptime fn get_type_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_subtype_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_value_multiplier_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_value_addition_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n// pub comptime fn get_coord_idx_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.4 }\n// }\n// pub comptime fn get_radius_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.5 }\n// }\n// pub type ActionResultEventDefinition = (u8, u8, u8, u8, u8, u8);\n\nuse skplg::{softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionResultEffect::{get_action_def_result_effect_base_index, get_action_def_result_effects_byte_size};\n\npub type ActionDefDefResultEventRow = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefResultEventRow> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EVENTS: [DEF_ROW<ActionDefDefResultEventRow>] = [\n    action_def_def(quote { result_event_value_fixed_addition }, 8, |fixed_addition|quote { result_event_value += $fixed_addition as u32; }),\n    action_def_def(quote { result_event_value_scaled_by_progress }, 4, |factor|quote { result_event_value += ($factor as u32) * (actor_progress as u32); }),\n    action_def_def(quote { result_event_coords_idx }, 2, |coords_idx|{\n     let check = softassert(quote { is_valid }, quote { $coords_idx < 3 }, quote { f\"Invalid event coord idx: {result_event_coords_idx} does not fit in u8!\" });\n      quote {\n        let result_event_coords_idx: u8 = $coords_idx;\n        $check\n        result_event_coords = coords[result_event_coords_idx & 3];\n      }\n    }),\n    action_def_def(quote { result_event_type }, 4, |event_type|quote { result_event_type = $event_type; }),\n    action_def_def(quote { result_event_subtype }, 8, |event_subtype|quote { result_event_subtype = $event_subtype; }),\n    action_def_def(quote { result_event_radius }, 6, |event_radius|quote { result_event_radius = $event_radius; })\n];\ncomptime fn get_action_def_result_event_base_index() -> u32 {\n  get_action_def_result_effect_base_index() + get_action_def_result_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_event_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EVENTS)\n}\n\n\ncomptime fn derive_action_def_def_result_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EVENTS);\n// }\n#[derive_action_def_def_result_event_struct]\npub struct ActionResultEvent {\n  pub register: [u8; 32]\n}\nimpl ActionResultEvent {\n  #[derive_action_def_result_event_struct_new]\n  pub fn new() -> ActionResultEvent {\n    ActionResultEvent { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_event_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[export]\n#[derive_action_def_def_result_event_builder]\npub fn build_action_def_result_event() -> pub ActionResultEvent { ActionResultEvent::new() }\n\npub comptime fn build_result_event(event_idx: u32, events_collection_varname: Quoted, valid_varname: Quoted, register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_event_base_index();\n  let event_data_start_idx = base_index + event_idx * get_action_def_result_event_byte_size();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EVENTS, event_data_start_idx, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  //let value_valid_msg = f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\";\n  // let value_valid = softassert(valid_varname, quote { result_event_value <= 255 as u32 }, quote { f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\" });\n  let full_result = quote {\n    let event_idx = $event_idx as u8;\n    let mut result_event_type: u8 = 0;\n    let mut result_event_subtype: u8 = 0;\n    let mut result_event_coords: (u8,u8) = (NOWHERE, NOWHERE);\n    let mut result_event_value: u32 = 0;\n    let mut result_event_radius: u8 = 0;\n    $result\n    // $value_valid\n    if (result_event_value > 255) {\n      result_event_value = 255;\n    }\n\n    $events_collection_varname.push(build_subtype_value_event(\n      result_event_type,\n      actor_id,\n      result_event_coords.0,\n      result_event_coords.1,\n      result_event_value as u8,\n      result_event_subtype,\n      result_event_radius\n    ));\n  };\n  // println(full_result);\n  full_result\n}\n\npub comptime fn set_action_def_result_event_in_action_def(event: Quoted, event_count: u32, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let mut base_index = get_action_def_result_event_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  // println(\"start\");\n  for event_idx in 0..event_count {\n    let idx = event_idx * get_action_def_result_event_byte_size();\n    for i in 0..get_action_def_result_event_byte_size() {\n      let destination_idx = base_index + idx + i;\n      result = quote { $result $action_def[$destination_idx] = $event[$event_idx].register[$i]; };\n      // result = quote { $result $action_def += $event[$event_idx].register[$i] as Field * $multiplier; };\n      // multiplier *= 2;\n    }\n  }\n  //println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_event_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[derive_frontend_action_def_result_event_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEvent {}\n\n\npub comptime fn derive_frontend_action_def_result_event_struct_builder(param_name: Quoted, event_idx: u32) -> Quoted {\n  let idx = get_action_def_result_event_base_index() + event_idx * get_action_def_result_event_byte_size();\n  let content = derive_frontend_action_def_struct_builder(param_name, idx, ACTION_DEF_DEF_RESULT_EVENTS);\n  quote { FrontendActionDefResultEvent { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEvent.nr"}},"names":["calculate_turn"],"brillig_names":["directive_to_radix","directive_invert","directive_integer_quotient"]}