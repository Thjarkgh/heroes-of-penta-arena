{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":7286960511404957704,"abi":{"parameters":[{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"my_chars_input","type":{"kind":"field"},"visibility":"private"},{"name":"my_char_actions","type":{"kind":"array","length":30,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_obstacles_input","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"},{"name":"actions","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"move","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"enemy_advance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"enemy_objects","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"enemy_events","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_result_advance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"my_result_events","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_result_objects","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"gamestate_before_hash","type":{"kind":"field"},"visibility":"private"},{"name":"gamestate_after_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11167361122731473993":{"error_kind":"fmtstring","length":27,"item_types":[]},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"}}},"bytecode":"","debug_symbols":"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Gmn5bR6owLA7re63TKAC0+60/PYDBGn5TQKowLDXw+4n7leBGy0wjbT8jPkqMI20/Lz2KjCNtPzs8yow7U7L0REfB6bdadEc8d3RER8Hpr0eOjri48C010OaI747OuLjwDTScnTEx4FppEVzxHeaI77THPGd5ojvjo74kLQcHfFhYJojvtMc8Z3miO+OjvjwlHZ0xMeBaaRFc8R3miO+0xzxneaI7zRHfKc54rujIz4kLUdHfBy40QLTXg9pjvju6IiPT2kaadEc8Z3miO80R3ynOeI7zRHfaY74TnPEd0dHfEhajo74ODDt9ZDmiO80R3x3dMSHp7SjIz4OTCMtmiO+0xzxneaI7zRHfKc54jvNEd8dHfEhaTk64uPAtNdDmiO+0xzx3dERH5/SNNKiOeI7zRHfaY74QXPED5ojftAc8YPmiB+PxiKt4eiIjwPDXg8HzRE/aI744eiID09pR0d8HJhGWjRH/KA54gfNET9ojvhBc8QPmiN+ODriQ9JydMSHgWmO+EFzxA+aI344OuLDU9rRER8HppEWzRE/aI74QXPED5ojftAc8YPmiB+OjviQtBwd8XHgRgtMez2kOeKHoyM+PqVppEVzxA+aI37QHPGD5ogfNEf8oDniB80RPxwd8SFpOTri48C010OaI37QHPHD0REfntKOjvg4MI20aI74QXPED5ojftAc8YPmiB80R/xwdMSHpOXoiI8D014PaY74QXPED0dHfHxK00iL5ogfNEf8oDniB80RP2iO+EFzxA+aI344OuJD0nJ0xMeBaa+HNEf8oDnih6MjPjylHR3xcWAaadEc8YPmiB80R/ygOeIHzRE/aI744eiID0nL0REfBqY54gfNET9ojvjh6IgPT2lHR3wcmEZaNEf8oDniB80RP2iO+ElzxE+aI346OuIj0pqOjvg4cKMFhr0eTpojfjo64uNTGkZak+aInzRH/KQ54ifNET9pjvhJc8RPmiN+OjriQ9JydMTHgWGvh5PmiJ80R/x0dMSHp7SjIz4OTCMtmiN+0hzxk+aInzRH/KQ54ifNET8dHfEhaTk64uPAtNdDmiN+0hzx09ERH5/SNNKiOeInzRE/aY74SXPET5ojftIc8ZPmiJ+OjviQtBwd8XFg2ushzRE/aY746eiID09pR0d8HJhGWjRH/KQ54ifNET9pjvhJc8RPmiN+Ojri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IFmbGMdcKRZI1ibG3XOlWCBZmxh3z5VigWQpc6VYIFmaOMUCydrEuLfFFAskaxPjmCvFAsnaxDjmSrFAsjYxjrlSLJCsTYy750qxQLI2Me6eK8UCyVLmSrFAsjZxwyXGvS2mWCBZmxjHXH4LJDIxjrn8dkJkYhxz+a15yMS4ey6/zQ2ZGHfP5beMoZjLb+xCJsa9LfpNUojExW9lQiamMVfx24KQiWnMVR4Nl5jGXMVvV0Empt1zFb/1A5mYds9V/DYKFHP5zQ7IxLS3xeI3DiATN1xiHHP5WfllYhxz+bnzZWIcc/kZ7mVi3D2Xo4deJMbdc+E89MXRQy8S094Wi6OHXiSmvS0WnIe+OHroRWIcczl66EViHHPhPPQF56EvOA99wXnoi6OHPmYuRw99nBjnoS84D33BeeiLo4c+PqsdPfQiMY65cB76gvPQF5yHvuA89AXnoS84D31x9NDHzOXooReJGy4x7m0R56Evjh56cVbjmAvnoS84D33BeegLzkNfcB76gvPQF5yHvjh66GPmcvTQi8S4t0Wch77gPPTF0UMfn9WOHnqRGMdcOA99wXnoC85DX3Ae+oLz0Bech744euhj5nL00IvEuLdFnIe+4Dz0xdFDL85qHHPhPPQF56EvOA99wXnoC85DX3Ae+oLz0BdHD33MXI4eepEY97aI89AXnIe+OHrow7O6OnroRWIac1Wch77iPPT10XCJafdcFeehrzgPfXX00IfMVR099HFinIe+4jz0Feehr44e+visdvTQi8Q45sJ56CvOQ19xHvqK89BXnIe+4jz01dFDHzOXo4deJG64xLS3xYrz0FdHD704q3HMhfPQV5yHvuI89BXnoa84D33FeegrzkNfHT30MXM5euhFYtzbIs5DX3Ee+urooY/PakcPvUiMYy6ch77iPPQV56GvOA99xXnoK85DXx099DFzOXroRWLc2yLOQ19xHvrq6KEXZzWOuXAe+orz0Fech77iPPQV56GvOA99xXnoq6OHPmYuRw+9SIx7W8R56CvOQ18dPfTxWe3ooReJccyF89BXnIe+4jz0FeehrzgPfcV56Kujhz5mLkcPfZwY56GvOA99xXnoq6OHPj6rHT30IjGOuXAe+orz0Fech77iPPQV56GvOA99dfTQx8zl6KEXiRsuMe5tEeehr44eenFW45gL56FvOA99w3no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ysnqyHZ4KSNnWDlZHdkOAnVkO66TJ3aGlZPVkRsvsiF9qX+XDelLRebRV4aVk9WRefSVYeVkdWQefWVYOVn8vZxh5WR15MaLzLv7yrBysjoyj74yrJysjsyjrwwrJ6sj8+grw8rJ6siG9KUiN15k3t1XhpWTxfSVYeVkdWRD+lKRDelLRM6wcrI6Mo++MqycrI7Mo68MKyerI/PoK8PKyerIvLuvDCsnqyPz7r4yrJwspq8MKyerI/NeHjOsnKyO3HiRefSVYeVkdWQefWVYOVkdmUdfGVZOVkfm3X1lWDlZHZl395Vh5WQxfWVYOVkdmffymGHlZHVk3stjhpWTxSe238qJjsyjL78tEh2ZR19+iyE6Mu/uy2/XQ0fm3X35rW9I+vIb1FCRq99Gho6Me3msfksWOjKOvuqj8SLj6Kv6rULoyDj6qn7bDToy7u6r+i0s6Mi4u6/qt4Mg6ctv2kBHbrzIuJfH6rcpoCPz6MvP/K8j8+jLz8+vI/Poy8+iryPz7r4cXfcqMu/ui+e6r46uexUZ9/JYHV33IrKj615F5tGXo+teRebRl6PrXkXm0RfPdV95rvvKc91Xnuu+OrruBX05uu5VZN7LI891X3mu++roulcnNo++eK77ynPdV57rvvJc95Xnuq88133lue6ro+te0Jej615F5r088lz3lee6r46ue3FiO7ruVWQeffFc95Xnuq88133lue4rz3Vfea776ui6F/Tl6LoXkXmu+8pz3Vee6746uu7Fie3ouleRefTFc91Xnuu+8lz3lee6rzzXfeW57quj617Ql6PrXkVuvMi8l0ee6746uu7Vic2jL57rvvJc95Xnuq88133lue4rz3Vfea776ui6F/Tl6LpXkXkvjzzXfeO57puj6z4+sZuj615FxtFXezReZBx9NZ7rvvFc943num88131zdN0L+nJ03avIuJfHxnPdN57rvjm67tWJzaMvnuu+8Vz3jee6bzzXfeO57hvPdd94rvvm6LoX9OXouleRcS+Pjee6bzzXfXN03YsT29F1ryLz6Ivnum88133jue4bz3XfeK77xnPdN0fXvaAvR9e9iMxz3Tee677xXPfN0XUvTmxH172KzKMvnuu+8Vz3jee6bzzXfeO57hvPdd8cXfeCvhxd9ypy40XmvTzyXPfN0XWvTmweffFc943num88133jue4b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OrruBX05uu5FZJ7rvvJc95Xnuq+OrntxYju67lVkHn3xXPeV57qvPNd95bnuK891X3mu++rouhf05ei6V5EbLzLv5ZHnuq+Ornt1YvPoi+e6rzzXfeW57ivPdV95rvvKc91Xnuu+OrruBX05uu5VZN7LI891X3mu++rouhcntqPrXkXm0RfPdV95rvvKc91Xnuu+8lz3lee6r46ue0Ffjq57FZn38shz3Vee6746uu7Vic2jL57rvvJc95Xnum88133jue4bz3XfeK779mg0+mqOrnsVGffy2Hiu+8Zz3TdH1704sR1d9yoyj754rvvGc903nuu+8Vz3jee6bzzXfXN03Qv6cnTdi8g8133jue4bz3XfHF334sR2dN2ryDz64rnuG89133iu+8Zz3Tee677xXPfN0XUv6MvRda8iN15k3ssjz3XfHF336sTm0RfPdd94rvvGc903nuu+8Vz3jee6bzzXfXN03Qv6cnTdq8i8l0ee677xXPfN0XUvTmxH172KzKMvnuu+8Vz3jee6bzzXfeO57hvPdd8cXfeCvhxd9yoy7+WR57pvPNd9c3TdqxObR188133jue4bz3XfeK77xnPdN57rvvFc983RdS/oy9F1ryLzXh55rvvGc903R9e9OLEdXfcqMo++eK77xnPdN57rvvFc943num88131zdN0L+nJ03YvIPNd947nuG8913xxd9+LEdnTdq8g8+uK57hvPdd94rvvGc92fPNf9yXPdn46u+5i+TkfXvYrceJFxL48nz3V/Orru1YmNo6+T57o/ea77k+e6P3mu+5Pnuj95rvuT57o/HV33gr4cXfcqMu7l8eS57k+e6/50dN2LE9vRda8i8+iL57o/ea77k+e6P3mu+5Pnuj95rvvT0XUv6MvRda8i814eea77k+e6Px1d9+rE5tEXz3V/8lz3J891f/Jc9yfPdX/yXPcnz3V/OrruBX05uu5VZN7LI891f/Jc96ej616c2I6uexWZR1881/3Jc92fPNf9yXPdnzzX/clz3Z+OrntBX46uexGZ57o/ea77k+e6Px1d9+LE5rnuT0fXvYrMu/tydN2ryDz64rnuT0fXvfin7Oi6V5F59OXouleRGy8y7+7L0XWvIvPuvhxd9yqyH321cv6K3Ep/jZzCdX+d5flh+iEiX/Nx/Pzpax5/iPz6w6O09vOHR7nKm34yoNon+8nAdZ/sJwMEfrKftvsJ+8mAl5/sJwOLfrKfDOD6yX4yUO4n+8mAxB/sJ8VawSf72fwc97P5Oe5n83PcT9v9hP1sfo772fwc97P5Oe5n83Pcz+bnqJ8rxd7EJ/vZ/Bz3s/k57mfzc9xP2/2E/Wx+jvvZ/Bz3s/k57mfzc9zP5uewnxSLIZ/sZ/Nz3M/m57ifzc9xP82tH/Ubv1eKlZPFke0oV0e2A1f1669XipWTxZHt8FJGTrFysjiyHQTqyHZcJ0/sFCsniyM3XmRD+lL/LhvSl4rMo68UKyeLI/PoK8XKyeLIPPpKsXKy9ns5xcrJ4siNF5l395Vi5WRxZB59pVg5WRyZR18pVk4WR+bRV4qVk8WRDelLRW68yLy7rxQrJ2vpK8XKyeLIhvSlIhvSl4icYuVkcWQefaVYOVkcmUdfKVZOFkfm0VeKlZPFkXl3XylWThZH5t19pVg5WUtfKVZOFkfmvTymWDlZHLnxIvPoK8XKyeLIPPpKsXKyODKPvlKsnCyOzLv7SrFysjgy7+4rxcrJWvpKsXKyODLv5THFysniyLyXxxQrJ2tPbL+VEx2ZR19+WyQ6Mo++/BZDdGTe3ZffroeOzLv78lvfkPTlN6ghI/ttZOjIvJdHvyULHZlHX357Ezoyj778ViF0ZB59+W036Mi4u6/ut7CgI+PuvrrfDoKir+43baAjN15k3Mtj99sU0JFx9NX9zP86Mo++/Pz8OjKPvvws+joy7u6rO7ruVWTc3Vfnue67o+teRca9PHZH172I7Oi6V5F59OXouleRefTl6LpXkXn0xXPdd57rvvNc953nuu+OrntBX46uexWZ9/LIc913nuu+O7ru1YnNoy+e677zXPed57rvPNd957nuO89133mu++7ouhf05ei6V5F5L488133nue67o+tenNiOrnsVmUdfPNd957nuO89133mu+85z3Xee6747uu4FfTm67kVknuu+81z3nee6746ue3FiO7ruVWQeffFc953nuu88133nue47z3Xfea777ui6F/Tl6LpXkRsvMu/lkee6746ue3Vi8+iL57rvPNd957nuO89133mu+85z3Xee6747uu4FfTm67lVk3ssjz3Xfea777ui6Fye2o+teRebRF89133mu+85z3Xee677zXPed57ofjq77mL6Go+teRca9PA6e6348Gi8yjr6Go+teRcbR1+C57gfPdT94rvvBc90Pnut+8Fz3w9F1L+jL0XWvIuNeHgfPdT94rvvh6LoXJ7aj615F5tEXz3U/eK77wXPdD57rfvBc94Pnuh+OrntBX46uexGZ57ofPNf94Lnuh6PrXpzYjq57FZlHXzzX/eC57gfPdT94rvvBc90Pnut+OLruBX05uu5V5MaLzHt55Lnuh6PrXp3YPPriue4Hz3U/eK77wXPdD57rfvBc94Pnuh+OrntBX46uexWZ9/LIc90Pnut+OLruxYnt6LpXkXn0xXPdD57rfvBc94Pnuh//D3v/luU2rjZdo10SiQOBxq2+b9X+M5WqZQyE/b1YlJ+YuKsLDVsRZZORJDwnj3XfeKz75si6F+vLkXWvIvPePPJY943Hum+OrHt1xeatLx7rvvFY943Hum881n3jse4bj3XfeKz75si6F+vLkXWvIvPePPJY943Hum+OrHtxxXZk3avIvPXFY903Huu+8Vj3jce6bzzWfeOx7psj616sL0fW/Txy57HuO49133ms++7Iup9fsfsj8yLj1lfnse47j3Xfeaz7zmPddx7rvvNY992RdS/WlyPrXkXOvMi4N4+dx7rvjqx7dcXmrS8e677zWPedx7rvPNZ957HuO49133ms++7Iuhfry5F1ryLj3jx2Huu+81j33ZF1L67Yjqx7FZm3vnis+85j3Xce677zWPedx7rvPNZ9d2Tdi/XlyLpXkXlvHnms+85j3XdH1r26YvPWF49133ms+85j3Xce677zWPedx7rvPNZ9d2Tdi/XlyLpXkXlvHnms+85j3XdH1r24Yjuy7lVk3vrise47j3Xfeaz7zmPddx7rvvNY992RdS/WlyPrXkTmse47j3Xfeaz77si6F1dsR9a9isxbXzzWfeex7juPdd95rPvOY913Huu+O7LuxfpyZN2ryJkXmffmkce6746se3XF5q0vHuu+81j3nce67zzWfeex7juPdd95rPvuyLoX68uRda8i89484lj35wPHun9Gpq2vZ2Ta+npGpq2vZ+TMi0xbX8/ItDePz8i0Z1/PyLRnX8/ItGdf58ORdS/WlyPrXkWmvXl8Rqa9eXxGzrzIvPWFY90/I9OefT0j0559PSPznn05su5VZN6zL0fWvfq/zFtfjqx7FZl27usZmbe+HFn36orNe/blyLoXkR1Z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vDePPNZ95bHuqyPrXl2xeeuLx7qvPNZ95bHuLx7r/uKx7i8e6/7ise6vR6atr8uRda8i4948XjzW/cVj3V+OrHtxxXZk3avIvPXFY91fPNb9xWPdXzzW/cVj3V881v3lyLoX68uRdS8i81j3F491f/FY95cj615csR1Z9yoyb33xWPcXj3V/8Vj3F491f/FY9xePdX85su7F+nJk3avImReZ9+aRx7q/HFn36orNW1881v3FY91fPNb9xWPdXzzW/cVj3V881v3lyLoX68uRda8i89488lj3F491fzmy7sUV25F1ryLz1hePdX/xWPcXj3V/8Vj3F491f/FY95cj616sL0fWvYrMe/PIY91fPNb95ci6V1ds3vrise4vHuv+4rHuLx7r/uKx7i8e6/7ise4vR9a9WF+OrHsVmffmkce6v3is+8uRdS+u2I6sexWZt754rPuLx7q/eKz7i8e6v3is+4vHur8cWfdifTmy7kVkHuv+4rHuLx7r/nJk3YsrtiPrXkXmrS8e6/7ise4vHuv+4rHuG49133is++bIup+vr+bIuleRMy8y7s1j47HumyPrXl2xceur8Vj3jce6bzzWfeOx7huPdd94rPvGY903R9a9WF+OrHsVGffmsfFY943Hum+OrHtxxXZk3avIvPXFY903Huu+8Vj3jce6bzzWfeOx7psj616sL0fWvYrMe/PIY903Huu+ObLu1RWbt754rPvGY903Huu+8Vj3jce6bzzWfeOx7psj616sL0fWvYrMe/PIY903Huu+ObLuxRXbkXWvIvPWF49133is+8Zj3Tce677xWPeNx7pvjqx7sb4cWfciMo9133is+8Zj3TdH1r24Yjuy7lVk3vrise4bj3XfeKz7xmPdNx7rvvFY982RdS/WlyPrXkXOvMi8N4881n1zZN2rKzZvffFY943Hum881n3jse4bj3XfeKz7xmPdN0fWvVhfjqx7FZn35pHHum881n1zZN2LK7Yj615F5q0vHuu+8Vj3jce6bzzWfeOx7huPdd8dWffz9dUdWfcqMu7NY+ex7vsj8yLj1ld3ZN2ryLj11Xms+85j3Xce677zWPedx7rvPNZ9d2Tdi/XlyLpXkXFvHjuPdd95rPvuyLoXV2we6747su5VZN6zL0fWvYqceZF5z74cWffq/zJvfTmy7lVk3LmvzmPdd0fWvbhi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PNZ95rHusyPrXqwvR9a9isx788hj3Wce6z47su7VFZu3vnis+8xj3Wce677wWPeFx7ovPNZ94bHuyyPT1ldxZN2ryLg3j4XHui881n1xZN2LK7Yj615F5q0vHuu+8Fj3hce6LzzWfeGx7guPdV8cWfdifTmy7kVkHuu+8Fj3hce6L46se3HFdmTdq8i89cVj3Rce677wWPeFx7ovPNZ94bHuiyPrXqwvR9a9ipx5kXlvHnms++LIuldXbN764rHuC491X3is+8Jj3Rce677wWPeFx7ovjqx7sb4cWfcqMu/NI491X3is++LIuhdXbEfWvYrMW1881n3hse4Lj3VfeKz7wmPdFx7rvjiy7sX6cmTdq8i8N4881n3hse6LI+teXbF564vHui881n3hse4Lj3VfeKz7wmPdFx7rvjiy7sX6cmTdq8i8N4881n3hse6LI+teXLEdWfcqMm998Vj3hce6LzzWfeGx7guPdV94rPviyLoX68uRdS8i81j3hce6LzzWfXFk3YsrtiPrXkXmrS8e677wWPeFx7ovPNZ95bHuK491Xx1Z9/P1VR1Z9ypy5kXGvXmsPNZ9dWTdqys2bn1VHuu+8lj3lce6rzzWfeWx7iuPdV95rPvqyLoX68uRda8i4948Vh7rvvJY99WRdS+u2I6sexWZt754rPvKY91XHuu+8lj3lce6rzzWfXVk3Yv15ci6V5F5bx55rPvKY91XR9a9umLz1hePdV95rPvKY91XHuu+8lj3lce6rzzWfXVk3Yv15ci6V5F5bx55rPvKY91XR9a9uGI7su5VZN764rHuK491X3ms+8pj3Vce677yWPfVkXUv1pcj615E5rHuK491X3ms++rIuhdXbEfWvYrMW1881n3lse4rj3Vfeaz7ymPdVx7rvjqy7sX6cmTdq8iZF5n35pHHuq+OrHt1xeatLx7rvvJY95XHuq881n3lse4rj3Vfeaz76si6F+vLkXWvIvPePPJY95XHuq+OrHtxxXZk3avIvPXFY91XHuu+8lj3lce6rzzWfeWx7i9H1v18fV2OrHsVGffm8eKx7q9H5kXGra/LkXWvIuPW18Vj3V881v3FY91fPNb9xWPdXzzW/eXIuhfry5F1ryLj3jxePNb9xWPdX46se3HFdmTdq8i89cVj3V881v3FY91fPNb9xWPdXzzW/eXIuhfry5F1LyLzWPcXj3V/8Vj3lyPrXlyxHVn3KjJvffFY9xePdX/xWPcXj3V/8Vj3F491fzmy7sX6cmTdq8iZF5n35pHHur8cWffqis1bXzzW/cVj3V881v3FY91fPNb9xWPdXzzW/eXIuhfry5F1ryLz3jzyWPcXj3V/ObLuxRWbx7q/HFn3KnLmReY9+3Jk3avIvGdfjqx79X+Zt74cWfcqMu/cF491fzmy7sUV25F1ryLznn05su5VZL/1lc/yHTmf1yByhPVVy/n6MtchItf+OL4+Xfvxr8i/fridOX99uJ31HPQTYap9sJ8QFP1P9hNhBH6ynwiL8ZP9RJiXn+wn736m/UQYrp/sJ8LK/WQ/ESbxJ/vZ+3nez97P035CeBA+2c/ez/N+9n6e97P387yfvPuZ9rP387yfvZ/n/ez9PO9n7+d5P3s/z/ppIUwWn+xn7+d5P3s/z/vZ+3neT979TPvZ+3nez97P8372fp73s/fzvJ+9n6f9hHCRfLKfvZ/n/djtZ3Xit4WwnCyOnHmR7YarOv7aQlhOFke2m5c6st1i1JHtRqCMHMJysvaKHcJysjgyb32FsJws/ruceZF56yuE5WRxZN76CmE5WRyZt75CWE7W3pdDWE4WR+atrxCWk8WRMy8yb32FsJwsjsxbXyEsJ4sj89ZXCMvJ4siG60tFNlxfKjLv2VcIy8na9RXCcrI4suH6UpEN15eKbLi+VGTe+gphOVkcmbe+QlhOFkfmra8QlpPFkXnPvkJYThZH5j37CmE5Wbu+QlhO1kYOYTlZHJn35jGE5WRxZN76CmE5WRyZt75CWE4WR+atrxCWk8WRec++QlhOFkfmPfsKYTlZu75CWE4WR868yLw3jyEsJ4sj89aXn+VER+atLz8XiY7MW19+xhAdmffsy8/roSPznn352Tfk+vITaujIvDePftoLGdnPZKEj89aXn29CR+atLz8rhI7MW19+7gYdmffsy8+woCPjnn11Pw+CWl/dT22gI+PePHY/AYGOnHmRceur+5H/dWTc+up+fH4dmbe+/Cj6OjLu2Vd3ZN2ryLhnX53Huu+OrHsVGffmsTuy7lVk3JvHzmPdd0fWvYrMW1+OrHsVmbe+eKz7zmPddx7rvvNY992RdS/WlyPrXkTmse47j3Xfeaz77si6F1dsR9a9isxbXzzWfeex7juPdd95rPvOY913Huu+O7LuxfpyZN2ryJkXmffmkce6746se3XF5q0vHuu+81j3nce67zzWfeex7juPdd95rPvuyLoX68uRda8i89488lj3nce6746se3HFdmTdq8i89cVj3Xce677zWPedx7rvPNZ957HuuyPrXqwvR9a9isx788hj3Xce6747su7VFZu3vnis+85j3Xce677zWPedx7rvPNZ957HuuyPrXqwvR9a9isx788hj3Xce6747su7FFduRda8i89YXj3Xfeaz7zmPddx7rvvNY953Huu+OrHuxvhxZ99PI5YFj3T8j0948PiPT3jw+I9PW1zNy5kWmra9nZNr6ekamra9nZNqbx2dk2rOv8sCx7p+Rac++npF568uRda8iZ15k2pvHZ2Tam8dnZN76cmTdq8i89YVj3T8j89YXjnX/jMx79oVj3T8j8559ObLuxfpyZN2ryLQ3j8/IvDePONb9MzJvfTmy7lVk3vrCse6fkXnrC8e6f0bmPfvCse6fkXnPvhxZ92J9ObLuVWTem0cc6/4ZOfMi89aXI+teReatLxzr/hmZt75wrPtnZN6zLxzr/hmZ9+zLkXUv1pcj615F5r15xLHun5F5bx4dWffiiu3IuleReesLx7p/RuatLxzr/hmZ9+wLx7p/RuY9+3Jk3Yv15ci6F5FxrPtnZN6bRxzr/hmZt74cWfcqMm994Vj3z8i89YVj3T8j85594Vj3z8i8Z1+OrHuxvhxZ9ypy5kXmvXnEse6fkXnry5F1ryLz1heOdf+MzFtfONb9MzLv2ReOdf+MzHv25ci6F+vLkXWvIvPePPJY9wePdX84su7nV+zDkXWvIuPW1/HIvMi49XXwWPcHj3V/8Fj3B491fziy7sX6cmTdq8i4N48Hj3V/8Fj3hyPrXl2xeeuLx7o/eKz7g8e6P3is+4PHuj94rPuDx7o/HFn3Yn05su5VZNybx4PHuj94rPvDkXUvrtiOrHsVmbe+eKz7g8e6P3is+4PHuj94rPuDx7o/HFn3Yn05su5FZB7r/uCx7g8e6/5wZN2LK7Yj615F5q0vHuv+4LHuDx7r/uCx7g8e6/7gse4PR9a9WF+OrHsVOfMi89488lj3hyPrXl2xeeuLx7o/eKz7g8e6P3is+4PHuj94rPuDx7o/HFn3Yn05su5VZN6bRx7r/uCx7g9H1r24Yjuy7lVk3vrise4PHuv+4LHuDx7r/uCx7g8e6/5wZN2L9eXIuleReW8eeaz7g8e6PxxZ9+qKzVtfPNb9wWPdHzzW/cFj3R881v3BY90fPNb94ci6F+vLkXWvIvPePPJY9wePdX84su7nV+zTkXWvIuPW18lj3Z881v35yLzIuGdfJ491f/JY96cj636+vk5H1r2IzGPdnzzW/clj3Z+OrHtxxeax7k9H1r2KjHv2dTqy7lVk3vrise5PR9a9+L/syLpXkXnry5F1ryJnXmTesy9H1r2KzHv25ci6V5H91lc+y3fkfF6/Rg7Bun9+9deXaQ8RufbH8fXp2o9/Rf71w+3M+evD7aznoJ8IU+2T/UTYdZ/sJ8II/GQ/efcz7SfCvPxkPxG26Cf7iTBcP9lPhJX7yX4iTOIP9hPCVvDJfvZ+nvez9/O8n72f5/3k3c+0n72f5/3s/TzvZ+/neT97P8/72ft52k8I38Qn+9n7ed7P3s/zfvZ+nveTdz/TfvZ+nvez9/O8n72f5/3s/TzvZ+/naT8hjCGf7Gfv53k/ez/P+9n7ed5PdutHnvgNYTlZHNlu5erIdsNVHn8NYTlZHNluXsrIISwniyPbjUAd2W7XySt2CMvJ4siZF9lwfam/y4brS0Xmra8QlpPFkXnrK4TlZHFk3voKYTlZe18OYTlZHDnzIvOefYWwnCyOzFtfISwniyPz1lcIy8niyLz1FcJysjiy4fpSkTMvMu/ZVwjLydr1FcJysjiy4fpSkQ3X1zxyCmE5WRwZt75SCMvJ4si49ZUemRcZt75SCMvJ4si4Z18phOVkcWTcs68UwnKydn2FsJwsjox785hCWE4WR868yLz1FcJysjgyb32FsJwsjsxbXyEsJ4sj8559hbCcLI7Me/YVwnKydn2FsJwsjox785hCWE4WR8a9eUwhLCdrr9h+lhMdmbe+/FwkOjJvffkZQ3Rk3rMvP6+Hjsx79uVn35Dry0+oISP7OTJ0ZN6bRz+ThY7MW19+vgkdmbe+/KwQOjJvffm5G3Rk3rMvP8OCjsx79uXnQZDry09toCNnXmTem0c/p4COzFtffuR/HZm3vvz4/Doyb335UfR1ZN6zL0fWvYrMe/bFY90nR9a9isx78+jIuheRHVn3KjJvfTmy7lVk3vpyZN2ryLz1xWPdJx7rPvFY94nHuk+OrHuxvhxZ9yoy780jj3WfeKz75Mi6V1ds3vrise4Tj3WfeKz7xGPdJx7rPvFY94nHuk+OrHuxvhxZ9yoy780jj3WfeKz75Mi6n1+xsyPrXkXGra/MY91nHus+PzIvMu7ZV+ax7jOPdZ8dWffz9ZUdWfciMo91n3ms+8xj3WdH1r24Yjuy7lVk3vrise4zj3Wfeaz7zGPdZx7rPvNY99mRdS/WlyPrXkXOvMi4N4+Zx7rPjqx7dcXmrS8e6z7zWPeZx7rPPNZ95rHuM491n3ms++zIuhfry5F1ryLz3jzyWPeZx7rPjqx7ccV2ZN2ryLz1xWPdZx7rPvNY95nHus881n3mse6zI+terC9H1r2KzHvzyGPdZx7rPjuy7tUVm7e+eKz7zGPdZx7rPvNY95nHus881n3mse6zI+terC9H1r2KzHvzyGPdZx7rPjuy7sUV25F1ryLz1hePdZ95rPvMY91nHus+81j3mce6z46se7G+HFn3IjKPdZ95rPvMY91nR9a9uGI7su5VZN764rHuM491n3ms+8xj3Wce6z7zWPfZkXUv1pcj615FzrzIvDePPNZ9dmTdqys2b33xWPeFx7ovPNZ94bHuC491Xx6ZFxn37Ks4su7n66s4su5VZNybx8Jj3Rce6744su7FFduRda8i89YXj3VfeKz7wmPdFx7rvvBY94XHui+OrHuxvhxZ9yoy7s1j4bHuC491XxxZ9+qKzVtfPNZ94bHuC491X3is+8Jj3Rce677wWPfFkXUv1pcj615F5r155LHuC491XxxZ9+KK7ci6V5F564vHui881n3hse4Lj3VfeKz7wmPdF0fWvVhfjqx7EZnHui881n3hse6LI+teXLEdWfcqMm998Vj3hce6LzzWfeGx7guPdV94rPviyLoX68uRda8iZ15k3ptHHuu+OLLu1RWbt754rPvCY90XHuu+8Fj3hce6LzzWfeGx7osj616sL0fWvYrMe/PIY90XHuu+OLLuxRXbkXWvIvPWF491X3is+8Jj3Rce677wWPeFx7ovjqx7sb4cWfcqMu/NI491X3is++LIuldXbN764rHuC491X3is+8pj3Vce677yWPeVx7qvj0xbX9WRda8i4948Vh7rvvJY99WRdS+u2I6sexWZt754rPvKY91XHuu+8lj3lce6rzzWfXVk3Yv15ci6F5F5rPvKY91XHuu+OrLuxRXbkXWvIvPWF491X3ms+8pj3Vce677yWPeVx7qvjqx7sb4cWfcqcuZF5r155LHuqyPrXl2xeeuLx7qvPNZ95bHuK491X3ms+8pj3Vce6746su7F+nJk3avIvDePPNZ95bHuqyPrXlyxHVn3KjJvffFY95XHuq881n3lse4rj3Vfeaz76si6F+vLkXWvIvPePPJY95XHuq+OrHt1xeY9+3Jk3avIvGdfjqx7EdmRda8i8559ObLu1f9l3vpyZN2ryLxzXzzWfXVk3asrNu/ZlyPrXkR2ZN2ryH7rK5/lO3I+r0HkCOurpbfIXUSu/XF8fbr241+Rf/1wO3P++nA76znoJ8JU+2Q/efcz7SfCCPxkPxEW4yf7iTAvP9lPhC36yX4iDNcP9hPCKfDJfiJM4k/2s/fzvJ+9n+f95N3PtJ+9n+f97P0872fv53k/ez/P+9n7edbPFcIK8cl+9n6e97P387yfvZ/n/eTdz7SfvZ/n/ez9PO9n7+d5P3s/z/vZ+3naTwivxyf72ft53s/ez/N+9n6e95N3P9N+9n6e92O3n9WJ3yuE5WRxZLuVqyPbDVd1/PUKYTlZHNluXurIdotRR7YbgTpyxl2xQ1hOFkfmra8QlpPFf5cN15eKzFtfISwniyPz1lcIy8niyLz1FcJysva+HMJysjgyb32FsJwsjsx79hXCcrL2ih3CcrI4Mm99hbCcLI7MW18hLCeLIxuuLxXZcH2pyLxnXyEsJ2vXVwjLydrIISwniyMbri8V2XB9qci89RXCcrI4Mm99hbCcLI7MW18hLCeLI/OefYWwnCyOzHv2FcJysnZ9hbCcLI6ceZF5bx5DWE4WR+atrxCWk8WReesrhOVkcWTe+gphOVkcmffsK4TlZHFk3rOvEJaTtesrhOVkcWTem8cQlpO1kUNYThZH5q0vP8uJjsxbX34uEh2Zt778jCE6Mu/Zl5/XQ0fmPfvys2/I9eUn1NCReW8e/bQXOnLmReatLz/fhI7MW19+VggdGbe+mp+7QUfGPftqfoYFHRn37Ks9Mm19NT+1gY6Me/PY/AQEOjLuzWPz0wTIK7Yf+V9H5q0vPz6/jsxbX34UfR0Z9+yrObLuVWTcs6/GY903R9a9iOzIuleRcW8emyPrXkXmrS9H1r2KzFtfjqx7FZm3vnis+8Zj3Tce677xWPfNkXUv1pcj615FzrzIvDePPNZ9c2Tdqys2b33xWPeNx7pvPNZ947HuG49133is+8Zj3TdH1r1YX46sexWZ9+aRx7pvPNZ9c2Tdiyu2I+teReatLx7rvvFY943Hum881n3jse4bj3XfHFn3Yn05su5VZN6bRx7rvvFY982Rda+u2Lz1xWPdNx7rvvFY943Hum881n3jse4bj3XfHFn3Yn05su5VZN6bRx7rvvFY982RdS+u2I6sexWZt754rPvGY903Huu+8Vj3jce6bzzWfXNk3Yv15ci6F5F5rPvGY903Huu+ObLuxRXbkXWvIvPWF49133is+8Zj3Tce677zWPedx7rvjqz7+frqjqx7FTnzIuPePHYe6747su7VFRu3vjqPdd95rPvOY913Huu+81j3nce67zzWfXdk3Yv15ci6V5Fxbx47j3Xfeaz77si6F1dsR9a9isxbXzzWfeex7juPdd95rPvOY913Huu+O7LuxfpyZN2ryLw3jzzWfeex7rsj615dsXnri8e67zzWfeex7juPdd95rPvOY913Huu+O7LuxfpyZN2ryLw3jzzWfeex7rsj615csR1Z9yoyb33xWPedx7rvPNZ957HuO49133ms++7Iuhfry5F1LyLzWPedx7rvPNZ9d2Tdiyu2I+teReatLx7rvvNY953Huu881n3nse47j3XfHVn3Yn05su5V5MyLzHvzyGPdd0fWvbpi89YXj3Xfeaz7zmPddx7rvvNY953Huu881n13ZN2L9eXIuleReW8eeaz7zmPdd0fWvbhiO7LuVWTe+uKx7juPdd95rPvOY913Huu+41j39eHIup+ur2dk2rmvZ2Tam8dnZNqbx2fkzItMW1/PyLT19YxMW1/PyLT19YzMW1841v0zMu3Z1zMy7dnXMzLt2dczcsatL0fWvYpMe/P4jEx78/iMTHvz+IzMW1+OrHsVmbe+cKz7Z2Te+sKx7p+Rec++cKz7Z2Tesy9H1r1YX46sexEZx7p/Rua9ecSx7p+ReevLkXWvIvPWF451/4zMW1841v0zMu/ZF451/4zMe/blyLoX68uRda8iZ15k3ptHHOv+GZm3vhxZ9yoyb33hWPfPyLz1hWPdPyPznn3hWPfPyLxnX46se7G+HFn3KjLvzSOOdV8fONb9MzJvfTmy7lVk3vrCse6fkXnrC8e6f0bmPfvCse6fkXnPvhxZ92J9ObLuVWTem0cc6/4Z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rPuLx7q/eKz7y5F1L9aXI+teRea9eeSx7i8e6/5yZN2LK7Yj615F5q0vHuv+4rHuLx7r/uKx7i8e6/7ise4vR9a9WF+OrHsVmffmkce6v3is+8uRda+u2Lz1xWPdXzzW/cVj3V881v3FY91fPNb9xWPdX46se7G+HFn3KjLvzSOPdX/xWPeXI+teXLEdWfcqMm998Vj3F491f/FY9xePdX/xWPcXj3V/ObLuxfpyZN2LyDzW/cVj3V881v3lyLoXV2xH1r2KzFtfPNb9xWPdXzzW/cVj3V881v3FY91fjqx7sb4cWfcqcuZF5r155LHuL0fWvbpi89YXj3XfeKz7xmPdNx7rvvFY9+2ReZFxz76aI+t+vr6aI+teRca9eWw81n3jse6bI+teXLEdWfcqMm998Vj3jce6bzzWfeOx7huPdd94rPvmyLoX68uRda8i4948Nh7rvvFY982Rda+u2Lz1xWPdNx7rvvFY943Hum881n3jse4bj3XfHFn3Yn05su5VZN6bRx7rvvFY982RdS+u2I6sexWZt754rPvGY903Huu+8Vj3jce6bzzWfXNk3Yv15ci6F5F5rPvGY903Huu+ObLuxRXbkXWvIvPWF49133is+8Zj3Tce677xWPeNx7pvjqx7sb4cWfcqcuZF5r155LHumyPrXl2xeeuLx7pvPNZ947HuG49133is+8Zj3Tce6745su7F+nJk3avIvDePPNZ947HumyPrXlyxHVn3KjJvffFY943Hum881n3jse4bj3XfeKz75si6F+vLkXWvIvPePPJY943Hum+OrHt1xeatLx7rvvFY943Huu881n3nse47j3Xfeaz7/si09dUdWfcqMu7NY+ex7juPdd8dWffiiu3IuleReeuLx7rvPNZ957HuO49133ms+85j3XdH1r1YX46sexGZx7rvPNZ957HuuyPrXlyxHVn3KjJvffFY953Huu881n3nse47j3Xfeaz77si6F+vLkXWvImdeZN6bRx7rvjuy7tUVm7e+eKz7zmPddx7rvvNY953Huu881n3nse67I+terC9H1r2KzHvzyGPddx7rvjuy7sUV25F1ryLz1hePdd95rPvOY913Huu+81j3nce6746se7G+HFn3KjLvzSOPdd95rPvuyLpXV2ze+uKx7juPdd95rPvOY913Huu+81j3nce6746se7G+HFn3KjLvzSOPdd95rPvuyLoXV2xH1r2KzFtfPNZ957HuO49133ms+85j3Xce6747su7F+nJk3YvIPNZ957HuO4913x1Z9+KK7ci6V5F564vHuu881n3nse47jnV/PXCs+2dk2rOvZ2Ta+npGpp37ekbOvMi0N4/PyLQ3j8/ItPX1jExbX8/IvPWFY90/I/PWF451/4xMe/b1jJx5kWnPvp6ReevLkXWvItPePD4j0948Xg8c6/4Zmbe+cKz7Z2Tesy9H1r2KzHv25ci6V5F5z74cWffq/zJvfTmy7lVk2rmvZ2Te+nJk3YsrtiPrXkXmPftyZN2ryH7rK5/lO3I+r0HkCOvrqK8vU5+/1/zjx9Xb68u05wMB9fGajtd3r/nx/vGvjiLMtQ93FIKm/+mOIgzCT3cUYUH+jzvK5aejUgYdRZicn+4o745kRxFG7ac7irCC/8cd1fOno2t0zY4wmz/d0d7ZuqO9s+v1dj1q6deOQngTPt3R3tm6o72z69nfOhrc+0OoHD7dUbbrqD2f6f901Lrq6ErXz3fPddCR385e35Hfzl7fkd/OXt+R387+447KzzO2qx6Djvx29vKOQhgyPt2R385e35Hfzv7jjmp7++6Da3YIacenO8q7I9nR3tlXe7se/fvjXx3tna072jtbd7R39pV+nrFdfXTv3ztbdhTChfKHHR2Px6ujI12qo/b2M217O2L605Hhzl7ekeHOXt5RvJ3dBimyRYp4W3WUIt6aHKX4yN47X6/Dn//dRn9d29/5tdasmueS+LlaHY/3j/9/v88iT4f+fdbcXfvr48//zqLm47zq69r+/O82+Frn3/m10t/5tfLf+bXKR75W6T9f68qDr1X/zq91/Z1fq33ka7Xy87X66Gv1v/JrLQL8/+HX6o/8+lr9HFzl+/F3fq3z7/xa6e/8Wvnv/Frl7/xa9TNfK719rTr4Wtff+bXa3/m1+t/4tY7HZ67y6fz5WuUx+FrH3/m1zr/za6W/82stusrXn6OLvV2D36fc9PvUm36f66bfp930+/R7fp9FWF79+xw3/T7nTb9Puun3uel6cNx0PThuuh4cN10PjpuuB8dN14PzpuvBedP14LzpenDedD04b7oenDddD86brgfnTdeD86brwXnT9SDddD1IN10P0k3Xg3TT9SDddD1IN10P0k3Xg3TT9SDddD1IN10P8k3Xg3zT9SDfdD3IN10P8k3Xg3zT9SDfdD3IN10P8k3Xg3zT9aDcdD0oN10Pyk3Xg3LT9aDcdD0oN10Pyk3Xg3LT9aDcdD0oN10P6k3Xg3rT9aDedD2oN10P6k3Xg3rT9aDedD2oN10P6k3Xg3rT9eC66Xpw3XQ9uG66Hlw3XQ+um64H103Xg+um68F10/Xguul6cN10PWg3XQ/aTdeDdtP1oN10PWg3XQ/aTdeDdtP1oN10PWg3XQ/aTdeDftP1oN90Peg3XQ/6TdeDftP1oN90Peg3XQ/6TdeDftP1oN9zPTgfj5t+n+Om3+e86fdJN/0++abfp9z0+9Sbfp/rpt+n3fT73HQ9uOl84nnT+cTzpvOJ503nE8+bzieeN51PPG86n3jedD7xvOl84nnT+cTzpvOJ503nE8+bzieeN51PPG86n3jedD7xvOl84nnT+cTzpvOJ503nE8+bzieeN51PPG86n3jedD7xvOl84nnT+cTzpvOJ503nE8+bzieeN51PPG86n3jedD7xvOl84nnT+cTzpvOJ503nE8+bzieeN51PPG86n3jedD7xvOl84nnT+cTzpvOJ503nE8+bzieeN51PPG86n3jedD7xvOl84nnT+cTzpvOJ503nE8+bzieeN51PPG86n3jedD7xvOl84nnT+cTzpvOJ503nE8+bzieeN51PPG86n3jedD7xvOl84nnT+cTzpvOJ503nE8+bzieeN51PPG86n3jedD7xvOl84nnT+cTzpvOJ503nE8+bzieeN51PPG86n3jedD7xvOl84nnT+cTzpvOJ503nE8+bzieeN51PPG86n3jedD7xvOl84nnT+cR00/nEdNP5xHTT+cR00/nE9Mg3/T7lpt+n3vT7XDf9Pu2m3+em68FN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE9NN5xPTTecT003nE/NN5xPzTecT803nE/NN5xPzI9/0+5Sbfp960+9z3fT7tJt+n5uuBzedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PzDedT8w3nU/MN51PLDedTyw3nU8sN51PLDedTyyPfNPvU276fepNv8910+/Tbvp9broe3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0PrHcdD6x3HQ+sdx0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DuWXHg+1/pt/Eb/9++Fdut63cymlwvD7PxreNRg+r+encl3OpeH9vz/UeiSE6+HHf4j3nx7W81ihxbHCBWtNccmFY/2jZ0ifWox/bIPX+HssjT9dULauxPn08+bE04VNc+Lp4qA5MV1gm08tbk5MF9jmE2mbE0/3xoo58XRvfZgT0+1c80mSzYnpdq75/MHmxHQ713weXnNiup1rPkGtOTHdzjWfitWcmG7nmk86ak5Mt3PNp9c0J6bbueYTSZoT0+1c8ykTzYnpdq755IDmxHQ713waPHNiup1rPuGbOTHdzjWf2sycmG7nmk8RZk5Mt3PNp9oyJ2bbufJ8yipzYradK8+nfjInZtu58uLoJmbbufJ8KiJzYradK8+n9DEnptu55lPjmBPT7VzzKWbMiel2rvlULebEdDvXfMoTc2K6nWs+F4g5Md3ONZ/1wpyYbueaz+9gTky3c81nMjAnptu55uvsNyem27nmK7M3J6bbueYrhTcnptu55qtWNyem27nmqyc3J6bbuear+DYnptu55qvJNiem27nmq5o2J6bbuearazYnptu56AqVM12hcqYrVM6ObudydDuXo9u5PN3O5el2Lk+3c3m6nQvURz7SxHQ7l6fbuTzdzuXpdi66HvpM10Of6XroM10Pfabroc90PfSZroc+0/XQZ7oe+kzXQ5/peugzXQ99puuhz3Q99Jmuhz7T9dBnuh76TNdDn+l66DNdD32m66HPdD30ma6HPtP10Ge6HvpM10Of6XroM10Pfabroc90PfSZroc+0/XQZ7oe+kzXQ5/peugzXQ99puuhz3Q99Jmuhz7T9dBnth56v7D10B8Tk+1cx8RkO9cxMdnOdUzs6CYm27mOicl2rmNisp3rmJhs5zomptu52Hroj4npdi62HvpjYrqdi62H/piYbudi66E/Jqbbudh66I+J6XYuth76Y2K6nYuth/6YmG7nYuuhPyam27nYeuiPiel2LrYe+mNiup2LrYf+mJhu52LroT8mptu52Hroj4npdi62HvpjYrqdi62H/piYbudi66E/Jqbbudh66I+J6XYuth76Y2K6nYuth/6YmG7nYuuhPyam27nYeuiPiafbueJ+Tbwvu/XwPaXr4W4zDh62eI4Z9uV2FFf8sxd3/dHr7U8OJ/rplr9x0E+3hY6D3gl9K/TT7eX9oF/j+56NBfTTBYRx0E+XVMZBP11kGgf9dNmtH/T7G70roJ9PrDEOeqXZZuiVZpuhV5r9NfTxHalSIVLNJ18ZB73SbDP0SrPN0CvN/hr69L5mc+maVZpthl5pthX6+ZRF46BXmv0t9Hm50Oe1hF5pthl6pdlm6J3Qt0KvNPtL6I+//IxU+3L/CNSFXmn219C7N3pfQq80+y9+64volWaboVeabYV+PhlcP+hDutDnEnql2WbolWaboVeabYbeCf0voV/38+D76gvvUs1nLhwHvdJsM/RKs83QK802Q680+wH6eI0Z0rLc0X/RnM+c2ZSmMieSpmIkkqaS4Qc0035SCfk7zcKVFfw7GgafbkfZTvhO8NvBVzpsCF/5sCF8JcTfg399mu74OYcCfGXEhvCVEpvBX+dTA48EXxn031y4949QX/AVWRvCV8L9Pfg+3OCnAnwn+O3gK+H+Hnz3vnDDuhbgK+E2hK+E2xC+Em5D+Eq47eDPJ2IfCb4SbkP4SrgfwM8uXfB9usN/0VRkRdJ0ogmkqVD5Q5ohF2gqJSJpKvYhaSrHfULz+s5fyHEp0FQwA9LclLSQNBWdPqEZ3zTv5XgXTWUhJE1lISRNJ5o/e97MW4GmshCSprIQkqayEJKmshCSprIQkOauLISkqSyEpKkshKSpLISk6UQTSFNZ6DnN6MN5lhjuRazlt9/j1ZRw/JxvL9Wfb7/vik4N4Stp/R78sF/w053hBV/BrCF85bh28J1iX0P4SokN4StUNoSvDNoQvhP8dvCVcD+AHy5dbAy+8JkTp8iKpKkMiqSpUImkSZ4SvV+vh3/rYyo9fN9vhQa7T9+wfPH05MEPzpM8y8F5ksczOE/yxPUhz3A57o6fV1fg6cQTypM8F8F5kicjOE/ybPQxz+3G0xd4kqcjOE/lIyjPoHyE5TldPtr8BWi7u3iviadLMObE02UMc2JHNzFkT4/5elfl+DnFwt8T/tHfg9nr3i9fHv86ezIw++V6adTv70Pl/TxU6vFQ+d/8i8Tl3w/v0vW+nUsp/Tl8XP/R8FuD4fN6firX5Vwafv/3h1qTuyLZmvzy/tPDeh7LtThWuGCtKS65cKx/9AwZQ4vxj23wGn+PpfGnC8rWlTifft6ceLqwaU08n2zdnJgusM2nFjcnpgts84m0zYmne2PFnHi6tz7Miel2rvkkyebEdDvXfP5gc2K6nWs+D685Md3ONZ+g1pyYbueaT8VqTky3c80nHTUnZtu5tvn0mubEbDvXNp9I0pyYbefaFkc3MdvOtc0nBzQnZtu5tvk0eObEdDvXfMI3c2K6nWs+tZk5Md3ONZ8izJyYbueaT7VlTky3c82nrDInptu55lM/mRPT7VzzKZTMiel2rvlURObEdDvXfEofc2K6nWs+NY45Md3ONZ9ixpyYbueaT9ViTky3c82nPDEnptu55nOBmBPT7VzzWS/Miel2rvn8DubEdDvXfCYDc2K6nWu+zn5zYrqda74ye3Niup1rvlJ4c2K6nWu+anVzYrqda756cnNiup1rvopvc2K6nWu+mmxzYrqda76qaXNiup1rvrpmc2K6nYuuUHmjK1Te6AqVt0C3cwW6nSvQ7VyBbucKdDtXpNu5It3OFel2rki3c4F61EeamG7ninQ7F10P/UbXQ7/R9dBvdD30G10P/UbXQ7/R9dBvdD30G10P/UbXQ7/R9dBvdD30G10P/UbXQ7/R9dBvdD30G10P/UbXQ7/R9dBvdD30G10P/UbXQ7/R9dDvdD30O10P/U7XQ7/T9dDvi6ObmG3n2ul66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+p+uh3+l66He6Hvqdrod+n6+HPu7XxPuyWw/fU7oe7jbj4GGL55hhX25HccU/e3HXH73e/uTwQj9fIf446KfbQsdBP906PA766fbyftCv8X3PxgJ6J/St0E+XVMZBP11kGgf9dNmtH/T7G70roZ8uRI6DXmm2Ffr5VCPjoFea/TX08R2pUiFSzSdfGQe90mwz9E7oW6FXmv019Ol9zebSNas02wy90mwz9EqzzdArzf4W+rxc6PNaQD+fxGkc9EqzzdArzTZDrzT7S+iPv/yMVPty/wjUhd4J/W+hd2/0voReafZf/NYX0SvNNkOvNNsMvdLsr6EP6UKfS+iVZhuhd/Pp8cZBrzTbDL3S7G+hX/fz4PvqXQG90mwz9E7oW6FXmm2GXmm2GXql2Q/Qx2vMkJbljv5FUwEVSVOZE0hzPuNnU5pKhh/QTPtJJeTvNAtXVvDvaBh8uh1lO+ErGzaEr3TYEL4T/HbwlRB/D/71abrj5xwK8JURG8JXSmwIX6GyIXxl0H9z4d4/Qn3Cn0+YPBJ8Jdzfg+/DDX4qwFfCbQhfCff34Lv3hRvWtQDfCX47+Eq4DeEr4TaEr4TbEL4SbkP4Srjt4M+np/9N+NmlC75Pd/gvmoqsSJrKoEiaCpU/pBlygaYTTSBNxT4kTeW4T2he3/kLORY+aLUrmCFpKmkhaSo6fUIzvmney/FOmk5ZCElTWQhJU1noh8+beSvQVBZC0nSiCaSpLISkqSyEpKkshKSpLISkqSwEpOmVhZA0lYWQNJWFkDSVhZ7TjD6cZ4nhXsRafvs9Xk0Jx8/59lL9+fa7d4LfDr6S1u/BD/sFP90ZXvAVzBrCV45rCF+xryF8pcR28INCZUP4yqAN4SuyNoSvhPsB/HDpYmPwhc+cBCeaQJrKoEiaCpVImuQp0fv1evi3PqbSw/f9Vmiw+/QNy4snefCD8yTPcmiekTyewXmSJ64PeYbLcXf8vLoCT/IQBedJnovgPJ14QnmSZ6OPeW43nr7AkzwdwXkqH2F5Kh9heU6XjzZ/AdruLt5z4jRdgjEnni5jmBNPlwLMiSF7eszXuyrHzykW/h73j/4ezF73fvny+NfZk4HZL9dLo35/Hyrv56FCj4eK/+hfJP374Q/i5+14/P2pMHz+N8PnpcHweT0/letyLgyf139/qDW5K5KtyS/vPz2s57G2FscKF6w1xSUXjvWPniGzazH+sQ1e4++xNP50Qdm6EufTz5sTTxc2zYmni4PmxGyBzc+nFjcnZgtsfj6RtjnxdG+smBM7uonZdi4/nyTZnJht5/Lz+YPNiel2rvk8vObEdDvXfIJac2K6nWs+Fas5Md3ONZ901JyYbueaT69pTky3c80nkjQnptu55lMmmhPT7VzzyQHNiel2rvk0eObEdDvXfMI3c2K6nWs+tZk5Md3ONZ8izJyYbueaT7VlTky3c82nrDInptu55lM/mRPT7VzzKZTMiel2rvlURObEdDvXfEofc2K6nWs+NY45Md3ONZ9ixpyYbueaT9ViTky3c82nPDEnptu55nOBmBPT7VzzWS/Miel2rvn8DubEdDvXfCYDc2K6nWu+zn5zYrqda74ye3Niup1rvlJ4c2K6nWu+anVzYrqda756cnNiup1rvopvc2K6nWu+mmxzYrqda76qaXNiup1rvrpmc2K6nYuuUNnTFSp7ukJln+h2Lky181AT0+1ciW7nSnQ7V6LbuRLdzpXpdq5Mt3Nlup0r0+1coLL4kSam27noeug9XQ+9p+uh93Q99IGuhz7Q9dAHuh76QNdDHxZHNzHbzhXoeugDXQ99oOuhD3Q99IGuhz7Q9dAHuh76QNdDH+h66ANdD32g66EPdD30ga6HPtD10Ae6HvpA10Mf6HroA10PfaDroQ90PfSBroc+0PXQB7oe+kDXQx/oeugDXQ99oOuhD3Q99IGuhz7Q9dAHuh76QNdDH+h66ANdD32g66EPdD30ga6HPtD10Ae6HvpA10Mf6HroA10PfaDroQ90PfSBroc+0PXQB7oe+kDXQx/oeugDXQ99oOuhD3Q99IGuhz7Q9dAHuh76QNdDH+h66ANdD32g66EPdD30ga6HPtD10Ae6HvpA10Mf6HroA10PfaDroQ90PfSBroc+0PXQB7oe+kDXQx/oeugDXQ99oOuhD3Q99IGuhz7Q9dAHuh76QNdDH+h66MN8PfRxvybel916+J7S9XC3GQcPWzzHDPtyO4or/tmLu/7o9fYnhxP9dMvfOOin20KHQT+fImAc9NPt5f2gX+P7no0F9NMFhHHQT5dUxkHvhL4V+umyWz/o9zd6V0I/XYgcB73SbDP0SrPN0CvN/hr6+I5U6c9IFeeTr4yDXmm2GXql2WbolWZ/DX16X7M5FtA7oW+FXmm2GXql2WbolWZ/C31eLvR5LaFXmm2GXmm2Ffr5tFbjoFea/SX0x19+Rqp9uX8E6kKvNPtr6N0bvS+hV5r9F7/1RfRO6FuhV5pthl5p9tfQh3ShzyX0SrPN0CvNNkOvNNsK/XzCwG7Qr/t58H31hXep5jMXjoNeabYZeqXZZuid0LdCrzT7Afp4jRnSstzRv2gqoCJpRtEE0lSMRNJUMvyAZtpPKiF/p1m4soJ/R8Pg0+0o2wv+fGLTkeArHTaEr3zYEL4S4u/Bvz5Nd/ycQwG+E/x28JUSG8JXqGwIXxn031y4949QX/AVWRvCV8L9Pfg+3OCnP+HPp5EeCb4S7u/Bd+8LN6xrAb4SbkP4SrgN4TvBbwdfCbchfCXchvCVcBvCV8L9AH526YLv0x3+i6YiK5CmVwZF0lSo/CHNkAs0lRKRNBX7kDSdaH5A8/rOX8ix8EErr2CGpKmkhaSp6PQJzfimeS/Hu2gqCyFpKgsBaQZloR8+b+atQFNZCElTWQhJU1kISdOJJpCmshCSprIQkqayEJKmshCSprIQkGZUFkLSVBZ6TvN4/fI8yxEi453mnw/eQ7yaEo6f8+2l+vPt96jo1BC+ktbvwQ/7BT/dGV7wneC3g68c1xC+Yl9D+EqJDeErVDaErwzaDn5SZG0IXwn3A/jh0sUeL/cXPnOSFFmRNJVBkTSdaAJpkqdE79fr4d/6mEoP3/dbocHu0zcsL57kwQ/OkzzLwXmSxzM4T/LE9SHPcDnujp9X9yfPTB6i4DzJcxGcJ3kygvMkz0Yf89xuPH2BpxNPKE/lIyxP5SMsT0Q+2pb17R5e1n3B8dyWbfHXH725aJwkr9fEx897qj/8M8FyWtzF/n4XnZqSnMQSxjKLJYhlWhaxhLFcxfIxy/Ua8rjmCiw3sYSx3MUSxtKJJYylF8vHLPc3S1diGcQSxlK5B8dSuQfHUrnnOcv43tVTYVdflXtwLJV7cCyVe3AslXues0zvuycX7p7ViSWMpXIPjqVyD46lcs9jlvk9ZF5LLJV7cCyVe2AsN+UeHEvlnqcs9+VqEdkXtxZYKvc8Z+neLH2JpXLPj34viyydWMJYKvfgWCr3PGf5/qLFkksslXtwLJV7cCyVe2Asd+WexyzX/fyU8r76wuvqu3IPjqVyD46lcg+OpRNLGEvu3BOv79OEtPxZE5F27ihj4uFOJyYe7sBh4uHOEB/ajt8hInz7At2rCSw57hSBpsmdI9A0uZMEmiZ3lvgLmvdPllw0nWgCaXLniQ9p+nCjmQo0ueMHmiZ3WvmQprsabEJY1wJN7nCDpqksBKTplYWQNJWFkDSVhZA0lYWQNB01zezSRdOnO80XHu5wY+LhTismHu74cccTcgEPd54w8XAHBAtP4N747yLUWHirLXCv8CYe7p3cxMO9ZOf4xnP/Lv+FxwlPDQ/51mzhId+a6wrvFMi3ZgsP+dZs4SHfmg08UVtzFY+25ioebc1VPORbs4XHCU8ND/nWbOHR1lzFQ701fypZvr5Qc/ycby8unm+LReolG06TeicHC8BTol7h4TSpN344TeqAAKdJnSfgNJ1oAmlSpxU4TepwA6fJnYXCZW6IwRfe3E3c4cbEw51WLDyZO36YeGbLE/vbm5X3aJxk32/fF9x9+jbnC9BsEQEOaLatHw7ICVAd0Gy7+YeAwnXw/1zSrgBotnUbDmi2DRoOaLYdGg5oti36Y0DbDZD/A1CeznUNB0S+SduAyDdpG5AqOL8e/fc6+bw4sYSxlHoAx1LqARxLqQees6zr5LNU00CWUg/AWEo1DWQp9cBzlnWdfJZqGshSuQfH0okljKVyz3OWdZ18lmoayFK5B8dSuQfHUrnnOcu6Tj5LNQ1kqdyDY6ncg2Op3POYpaGTz1JNA1kq9+BYKvfgWCr3PGX5TYHu1gJL5Z7nLF1VJ5+lmv7Z72WJpVTTQJbKPTiWyj3PWdZ18lmqaSBLJ5Ywlso9OJbKPY9ZGgr0TC6xxrJU7sGxVO6BsSSXY2NZcucew2qfyV3XJh7udGLiccJTwyO99AsPQCSfpZeG0pReGklTemkkTemlf0jz/smSk6b00lCa0kt/QNOHG81UoCm9NJKm9NIf0DT00plcL42mqSyEpKkshKSpLISkqSyEpKksBKTJLt6+ecl9utN84SFXCFp4yBWCFh5yheANT8gFPE54anjIFYIWHikETzyx8FabxNt1PBJvV/GQi7fjG8/9u/wnHnbxtoWHfGu28Ei8feIpyG+zxNt1PE54angk3q7i0dZcxaOtuYpHW3MVD/nWbODhdl3beMi3ZguPtuYqHumlvx79SDp7faHm+DnfXlw83xaTXhpKU3rpD2gaQuQsvTSUJrdeGk2T20aNpsktrwbTJHddo2lSpxU4TepwA6fJnYUMq32eTrkNxsOdVkw83PHDxEMu27Z89pldtm0DIpdtG4DCwi7btgHRy7avbz2UfPYHIHrZtgVotg0aDsgJUB3QbFs01md/AJptj4YDIt+kbUDkm7QNSBWcX4/+a518WKSaBrKUegDHUuoBHEupB56zrOrkD5ZOLGEspR7AsZR6AMdS6oHnLKs6+YOl1AM4lso9MJZSTQNZKvc8Z1nVyR8slXtwLJV7cCydWMJYKvc8Z1nVyR8slXtwLJV7cCyVe3AslXses6zr5MMi1TSQpXIPjqVyD46lcs9Tlt8U6G4tsHRi+Zilq+nkD5bKPT/6vSyyVO7BsVTuwbFU7nnOsqqTP1gq98BYSjUNZKncg2Op3POYZV2BfrBU7sGxdGIJY6ncg2Op3INjyZ176lb7Aw93lDHxcKcTCw+5jdrEI730C8/fi+QPmtJLI2lKL42k6UQTSFN66R/SvH+y5KIpvTSSpvTSH9D04UYzFWhKL42kKb30BzTreumwkOul0TSVhZA0lYWQNJWFkDSdaAJpKgshaZIrBG9ecp/uNF94yBWCFh5yhaCFh1wheMMT8p942MXbFh5yhaCFRwrBE08svNUm8XYdjxOeGh5y8XZ847l/l//CQ741W3jIt2YLj8TbJ54/5bcHHom3a3gk3q7jkXi7ikdbcxWPtuYqHic8NTzkW7OFh3xrtvCQb80WHm3NVTzSS389+pF09vpCzfFzvr24eL4tJr00lKb00h/QrAuRD5rSSyNpcuul0TSdaAJpcsur0TS5XddomtRpBU6TOtzAaXJnobrVPqzTKbfBeLjTiomHO36YeMhl25bPfl2cANUBkcu2bUDksm0bEL1s+/rWQ9Fnv0q2bQGabYNGA5rOoA0HNNsWDfbZr9O5ruGAyDdpG5AToDogVXB+PfrvdfKrVNNAllIP4FhKPYBjKfXAc5Z1nfwq1TSQpdQDOJZSD+BYSj3wnGVdJ79KNQ1kqdyDY6ncg2Op3POcZV0nv0o1DWSp3ANjKdU0kKVyz3OWdZ38KtU0kKVyD46lE0sYS+WexywNnfwq1TSQpXIPjqVyD46lcs9Tlt8U6O5Ppe8q1fQHLF1VJ79KNf2z38siS+UeHEvlHhxLJ5aPWdZ18qtU00CWyj04lso9OJbKPY9ZGgr0lVxiDWVJbrzGslTuwbFU7sGx5M49htV+JXddm3i404mJhztwmHikl37hAYjkV+mloTSllwbSlF4aSlN66R/SvH+y5KIpvTSSpvTSH9D04UYzFWg60QTSlF76A5qGXnol10ujaSoLIWkqCyFpKgsBaZKrsdE0lYWQNMkVgjcvuU93mi885ApBC48TnhoecoXgDU/IBTzkCkELD7lC0MIjheCJJxbeapN4u4pH4u06HnLxdnzjuX+X/8JDvjVbeMi3ZguP03PPC09BfrtKvF3HI/F2FY/E21U82pqreLQ11/Bwm7RtPORbs4WHfGu28JBvzRYeJzw1PNJLfz36kXT2+kLN8XO+vbh4vi0mvTSUpvTSH9A0hMir9NJQmtx6aSzNjdxGjabJLa9G0+R2XaNpUqcVOE0nmkCa3FnIsNpv0ym3wXi404qJhzt+mHjIZduWz35jl23bgMhl2zYgctm2DYhetn1966Hos98k27YAzbZBwwHNtkPDAc22RYN99tt0rms4IPJN2gQ0nZUaDkgVnF+P/nud/CbVNJCl1AM4lk4sYSylHnjOsq6T36SaBrKUegDHUuoBHEupB56zrOvkN6mmgSyVe3AslXtwLJV7nrOs6+Q3qaaBLJV7cCyVe3AslXues6zr5DeppoEslXtgLKWaBrJU7nnM0tDJb1JNA1kq9+BYOrGEsVTuecrymwLdrQWWyj3PWbqqTn6Tavpnv5dFlso9OJbKPTCWUk1/wLKuk9+kmgayVO7BsVTuwbF0YvmUpaFA38gl1liWyj04lso9OJbKPTiW3LnHsNpv5K5rEw93OjHxcAcOE4/00i88AJH8Jr00lKb00kia0ksjaUov/UOa90+WXDSll0bSlF76A5o+3GimP2lKLw2lKb30BzQNvfRGrpdG01QWQtJ0ogmkqSyEpKkshKSpLISkSa4QvHnJfbrTfOEhVwgaeNjF2xYecoXgDU/IBTzkCkELD7lC0MLjpBB84YmFt9ok3q7jkXi7iodcvB3feO7f5b/wkG/NFh7yrdnAI/H2hacgv90k3q7jkXi7ikfi7SoeJzw1PNqaq3i0NVfxkG/NFh7yrdnCQ7411/Hs3DZqG4/00l+PfiSdvb5Qc/ycby8ubidN6aWRNKWX/oCmIUTeFyeaQJrcemk0TW4bNZomt7waTZPbdY2mSZ1W0DSn82i3pcmdhQyr/T6dchuMhzutmHic8NTwkMu2LZ/9zi7btgGRy7ZtQOSybRsQvWz7+tZD0We/S7ZtAZptg4YDmm2HhgOabYsG++z36VzXcEDkm7QNiHyTtgGpgvPr0X+vk9+lmgaylHoAxlKqaSBLqQees6zr5HeppoEspR7AsXRiCWMp9cBzlnWd/C7VNJClcg+OpXIPjqVyz3OWdZ38LtU0kKVyD46lcg+OpXLPc5Z1nfwu1TSQpXIPjqVyD46lcs9jloZOfpdqGshSuQfGUqppIEvlnqcsvynQ3VpgqdzznKWr6uR3qaZ/9ntZZOnEEsZSuQfHUrnnOcu6Tn6XahrIUrkHx1K5B8aS3EuNVKDv5BJrLEvlHhxL5R4cSyeWMJbcucew2u/krmsTD3c6MfFwBw4Tj/TSLzwAkfwuvTSUpvTSSJrSSyNpSi/9Q5r3T5ZcNJ1oAmlKL/0BTR9uNFOBpvTSSJrSS39A09BL7+R6aTRNZSEgTXJ5NZqmshCSprIQkqayEJKmk5f8RdOnO80XHnKFoIWHXCFo4SFXCN7whFzAQ64QtPCQKwQNPBJvX3hi4a02ibfreCTeruIhF2/HN577d/kvPE54anjIt2YLj8TbJ56S/Fbi7ToeibereCTeruBxEm/X8WhrruLR1lzFQ741W3ic8NTwkG/NFh5tzVU80kt/PfqRdPb6Qs3xc769uLidNKWXRtKUXvoDmoYQ2UkvDaXJrZdG0+S2UaNpcsur0TSdaAJpUqcVOE3qcAOnyZ2FDKu9m065DcbDnVYsPNPptsF4yGXbls/escu2bUDksm0bkBOgOiB62fb1rYeiz95Jtm0Bmm2DhgOabYeGA5ptiwb77N10rms4IPJN2gZEvknbgFTB+fXov9fJO6mmgSylHsCxlHoAx1Lqgecs6zp5J9U0kKXUAzCWUk0DWUo98JxlXSfvpJoGslTuwbF0YgljqdzznGVdJ++kmgayVO7BsVTuwbFU7nnOsq6Td1JNA1kq9+BYKvfgWCr3PGZp6OSdVNNAlso9OJbKPTiWyj1PWX5ToLu1wFK55zlLV9XJO6mmf/Z7WWIp1TSQpXIPjqVyz3OWdZ28k2oayNKJJYylcg+OpXLPY5aGAt2RS6yxLJV7cCyVe2AsyeXYWJbcucew2jty17WJhzudmHic8NTwSC/9wgMQyTvppaE0pZdG0pReGklTeukf0rx/suSkKb00lKb00h/Q9OFGMxVoSi+NpCm99Ac0Db20I9dLo2kqCyFpKgshaSoLIWkqCyFpKgsBabKLt29ecp/uNF94yBWCFh5yhaCFh1wheMMTcgGPE54aHnKFoIVHCsETTyy81Sbxdh2PxNtVPOTi7fjGc/8u/wuPZxdvW3jIt2YLj8TbJ56C/NZLvF3H44Snhkfi7Soebc1VPNqaq3i0NVfxkG/NBh5u17WNh3xrtvBoa67ikV7669GPpLPXF2qOn/PtxcXtpOlEE0hTeukPaBpCZC+9NJQmt14aTZPbRo2myS2vBtMkd12jaVKnFThN6nADp8mdhQyrvZ9OuQ3Gw51WTDzc8cPEQy7btnz2nl22bQMil22bgNhl2zYgetn29a2Hos/eS7ZtAZptg4YDcgJUBzTbFg322fvpXNdwQOSbtA2IfJO2AamC8+vRf6+T91JNA1lKPYBjKfUAjqXUA89Z1nXyXqppIEupB3AspR7AsZR64DnLuk7eSzUNZKncA2Mp1TSQpXLPc5Z1nbyXahrIUrkHx9KJJYylcs9zlnWdvJdqGshSuQfHUrkHx1K55zFLQyfvpZoGslTuwbFU7sGxVO55yvKbAt2tBZZOLB+zdFWdvJdq+me/l0WWyj04lso9OJbKPc9Z1nXyXqppHEuppoEslXtwLJV7HrM0FOieXGKNZenEEsZSuQfHUrkHx5I79xhWe0/uujbxcKcTCw+5jdrEI730Cw9AJO+ll4bSlF4aSdOJJpCm9NI/pHn/ZMlFU3ppJE3ppT+g6cONZirQlF4aSVN66Q9oGnppT66XRtNUFkLSVBZC0lQWQtJ0ogmkqSyEpEmuELx5yX2603zhIVcIWnjIFYIWHnKF4A1PyH/gCezibQsPuULQwiOF4IknLgU8Em9X8TjhqeEhF2/HN577d/kvPORbs4WHfGu28Ei8feIpyG+DxNtVPBJv1/FIvF3Fo625ikdbcxWPE54aHvKt2cJDvjVbeMi3ZguPtuYqHumlvx79SDp7faHm+DnfXlx8vS0WpJeG0pRe+gOahhA5SC8Npcmtl0bTdKIJpMktr0bT5HZdo2lSpxU4TepwA6fJnYUMq32YTrkNxsOdVkw83PHDxEMu27Z89oFdtm0DIpdt24DIZds2IHrZ9vWth6LPPki2bQGabYNGA5rOoA0HNNsWDfbZh+lc13BA5Ju0DcgJUB2QKji/Hv33Ovkg1TSQpdQDOJZSD+BYSj3wnGVdJx+kmgaylHoAx1LqARxLqQees6zr5INU00CWyj04lso9OJbKPc9Z1nXyQappIEvlHhhLqaaBLJV7nrOs6+SDVNNAlso9OJZOLGEslXseszR08kGqaSBL5R4cS+UeHEvlnqcsvynQ3Z9K3yDV9AcsXVUnH6Sa/tnvZZGlcg+OpXIPjqUTy8cs6zr5INU0kKVyD46lcg+OpXLPY5aGAj2QS6yhLMmN11iWyj04lso9OJbcucew2gdy17WJhzudmHi4A4eJR3rpFx6ASD5ILw2lKb00kKb00lCa0kv/kOb9kyUXTemlkTSll/6Apg83mqlA04kmkKb00h/QNPTSgVwvjaapLISkqSyEpKkshKMZydXYaJrKQkia5ArBm5fcpzvNFx5yhaCFxwlPDQ+5QvCGJ+QCHnKFoIWHXCFo4ZFC8MQTlwIeibdreCTeruMhF2/HN577d/kvPORbs4WHfGu28Dg997zwFOS3UeLtOh6Jt6t4JN6u4tHWXMWjrbmGh9ukbeMh35otPORbs4WHfGu28DjhqeGRXvrr0Y+ks9cXao6f8+3FxfNtMemloTSll/6ApiFEjtJLQ2ly66XBNMlt1Gia3PJqNE1u1zWaJnVagdN0ogmkyZ2FDKt9nE65DcbDnVZMPNzxw8RDLtu2fPaRXbZtAyKXbduAyGXbNiB62fb1rYeizz5Ktm0Bmm2DhgOabYeGA5ptiwb77ON0rms4IPJN2gQ0nZUaDkgVnF+P/nudfJRqGshS6gEcSyeWMJZSDzxnWdfJR6mmgSylHsCxlHoAx1Lqgecs6zr5KNU0kKVyD46lcg+OpXLPc5Z1nXyUahrIUrkHx1K5B8dSuec5y7pOPko1DWSp3ANjKdU0kKVyz2OWhk4+SjUNZKncg2PpxBLGUrnnKctvCnS3Flgq9zxn6ao6+SjV9M9+L4sslXtwLJV7YCylmv6AZV0nH6WaBrJU7sGxVO7BsXRi+ZSloUCP5BJrLEvlHhxL5R4cS+UeHEvu3GNY7SO569rEw51OTDzcgcPEI730Cw9AJB+ll4bSlF4aSVN6aSRN6aV/SPP+yZKLpvTSSJrSS39A04cbzfQHzSS9NJSm9NIf0DT00olcL42mqSyEpOlEE0hTWQhJU1kISVNZCEmTXCF485L7dKf5wkOuEDTwsIu3LTzkCsEbnpALeMgVghYecoWghcdJIfjCE5cCHom3q3gk3q7iIRdvxzee+3f5LzzkW7OFh3xrNvBIvH3hKchvk8TbdTwSb1fxSLxdxeOEp4ZHW3MVj7bmKh7yrdnCQ741W3jIt2YDD7eN2sYjvfTXox9JZ68v1Oz/fYDt/fDzbTHppaE0pZf+gKYhRE7SS0Npcuul0TS5bdRomtzyajRNbtc1miZ1WkHTnM6j3ZYmdxYyrPZpOuU2GA93WjHxOOGp4SGXbVs++8Qu27YBkcu2bUDksm0bEL1s+/rWQ9FnnyTbtgDNtkHDAc22Q8MBzbZFg332aTrXNRwQ+SZtAyLfpG1AquD8evTf6+STVNNAllIPwFhKNQ1kKfXAc5Z1nXySahrIUuoBHEsnljCWUg88Z1nXySeppoEslXtwLJV7cCyVe56zrOvkk1TTQJbKPTiWyj04lso9z1nWdfJJqmkgS+UeHEvlHhxL5Z7HLA2dfJJqGshSuQfGUqppIEvlnqcsvynQ3VpgqdzznKWr6uSTVNM/+70ssnRiCWOp3INjqdzznGVdJ5+kmgayVO7BsVTugbEk91IjFeiJXGKNZancg2Op3INj6cQSxpI79xhW+0TuujbxcKcTEw934DDxSC/9wgMQyWfppaE0pZdG0pReGklTeukf0rx/suSi6UQTSFN66Q9o+nCjmQo0pZdG0pRe+gOahl46k+ul0TSVhYA0yeXVaJrKQkiaykJImspCSJpOXvIXTZ/uNF94yBWCFh5yhaCFh1wheMMTcgEPuULQwkOuEDTwSLx94YlLAY/E21U8Em9X8ZCLt+Mbz/27/BceJzw1PORbs4VH4u0TT0F+myXeruOReLuKR+LtGh6Jt+t4tDVX8WhrruIh35otPE54anjIt2YLj7bmKh7ppb8e/Ug6e32h5vg5315cPN8Wk14aSlN66Q9oGkLkLL00lCa3XhpNk9tGjabJLa9G03SiCaRJnVbgNKnDDZwmdxYyrPZ5OuU2GA93WrHwTKfbBuMhl21bPvvMLtu2AZHLtm1AToDqgOhl29e3Hoo++yzZtgVotg0aDmi2HRoOaLYtGuyzz9O5ruGAyDdpGxD5Jm0DUgXn16P/XiefpZoGspR6AMdS6gEcS6kHnrOs6+SzVNNAllIPwFhKNQ1kKfXAc5Z1nXyWahrIUrkHx9KJJYylcs9zlnWdfJZqGshSuQfHUrkHx1K55znLuk4+SzUNZKncg2Op3INjqdzzmKWhk89STQNZKvfgWCr34Fgq9zxl+U2B7tYCS+We5yxdVSefpZr+2e9liaVU00CWyj04lso9z1nWdfJZqmkgSyeWMJbKPTiWyj2PWRoK9EwuscayVO7BsVTuAbGMC7kcG8uSO/fUrfYHHu4oY+LhTicmHic8NTzSS7/w/L1I/qApvTSSpvTSSJrSSyNpSi/9Q5r3T5acNKWXhtKUXvoDmj7caKYCTemlkTSll/6AZl0vfdB0ogmkqSyEpKkshKSpLISkqSyEpKksBKTJLt6+ecl9utN84SFXCFp4yBWCFh5yheANT8gFPE54anjIFYIWHikETzyx8FabxNt1PBJvV/GQi7fjG8/9u/wnHnbxtoWHfGu28Ei8feL5U3574JF4u4rHCU8Nj8TbVTzamqt4tDVX8WhrruIh35oNPNyuaxsP+dZs4dHWXMUjvfTXox9JZ68v1Bw/59uLi+fbYtJLQ2lKL/0BzboQ+aApvTSSJrdeGk2T20aNpsktrwbTJHddo2lSpxU4TepwA6fJnYXqVvsDjxOeGh7utGLi4Y4fJh5y2bbhsz8Akcu2bUDksm0TELts2wZEL9u+vvVQ8tkfgOhl2xag2TZoOCAnQHVAs23RWJ/9AWi2PRoOiHyTtgGRb9I2IFVwfj36r3XycZFqGshS6gEcS6kHcCylHnjOsqqTP1g6sYSxlHoAx1LqARxLqQees6zq5A+WUg/gWCr3wFhKNQ1kqdzznGVVJ3+wVO7BsVTuwbF0YgljqdzznGVVJ3+wVO7BsVTuwbFU7sGxVO55zLKuk4+LVNNAlso9OJbKPTiWyj1PWX5ToLu1wNKJ5WOWrqaTP1gq9/zo97LIUrkHx1K5B8dSuec5y6pO/mCp3INiuUo1DWSp3INjqdzzmKWhQF/JJdZYlk4sYSyVe3AslXtwLLlzj2G1X8ld1yYe7nRi4SG3UZt4pJd+4QGI5FfppaE0pZdG0nSiCaQpvfQPad4/WXLRlF4aSVN66Q9o+nCjmQo0pZdG0pRe+gOahl56JddLo2kqCyFpKgshaSoLIWk60QTSVBZC0iRXCN685D7dab7wkCsELTzkCkELD7lC8IYn5D/xsIu3LTzkCkELjxSCJ55YeKtN4u06Hic8NTzk4u34xnP/Lv+Fh3xrtvCQb80WHom3TzwF+e0q8XYVj8TbdTwSb1fxaGuu4tHWXMXjhKeGh3xrtvCQb80WHvKt2cKjrbmKR3rpr0c/ks5eX6g5fs63FxfPt8Wkl4bSlF76A5qGEHmVXhpKk1svjabpRBNIk1tejabJ7bpG06ROK3Ca1OEGTpM7CxlW+3U65TYYD3daMfFwxw8TD7ls2/LZr+yybRsQuWzbBkQu27YB0cu2r289FH32q2TbFqDZNmg0oOkM2nBAs23RYJ/9Op3rGg6IfJO2ATkBqgNSBefXo/9eJ79KNQ1kKfUAjqXUAziWUg88Z1nXya9STQNZSj2AYyn1AI6l1APPWdZ18qtU00CWyj04lso9OJbKPc9Z1nXyq1TTQJbKPTCWUk0DWSr3PGdZ18mvUk0DWSr34Fg6sYSxVO55zNLQya9STQNZKvfgWCr34Fgq9zxl+U2B7v5U+m5STX/A0lV18ptU0z/7vSyyVO7BsVTuwbF0YvmYZV0nv0k1DWSp3INjqdyDY6nc85iloUDfyCXWUJbkxmssS+UeHEvlHhxL7txjWO03cte1iYc7nZh4uAOHiUd66RcegEh+k14aSlN6aSBN6aWhNKWX/iHN+ydLLprSSyNpSi/9AU0fbjRTgaYTTSBN6aU/oGnopTdyvTSaprIQkqayEJKmshCQJrkaG01TWQhJk1whePOS+3Sn+cJDrhC08DjhqeEhVwje8IRcwEOuELTwkCsELTxSCJ54YuGtNom3q3gk3q7jIRdvxzee+3f5LzzkW7OFh3xrtvA4Pfe88BTkt5vE23U8Em9X8Ui8XcWjrbmKR1tzDQ+3SdvGQ741W3jIt2YLD/nWbOFxwlPDI73016MfSWevL9QcP+fbi4vn22LSS0NpSi/9AU1DiLxJLw2lya2XBtMkt1GjaXLLq9E0uV3XaJrUaQVO04kmkCZ3FjKs9tt0ym0wHu60YuLhjh8mHnLZtuWz39hl2zYgctm2DYhctm0DopdtX996KPrsN8m2LUCzbdBwQLPt0HBAs23RYJ/9Np3rGg6IfJM2AU1npYYDUgXn16P/Xie/STUNZCn1AI6lE0sYS6kHnrOs6+Q3qaaBLKUewLGUegDHUuqB5yzrOvlNqmkgS+UeHEvlHhxL5Z7nLOs6+U2qaSBL5R4cS+UeHEvlnucs6zr5TappIEvlHhTLXappIEvlnscsDZ38LtU0kKVyD46lE0sYS+Wepyy/KdDdWmCp3POcpavq5Heppn/2e1lkqdyDY6ncA2Mp1fQHLOs6+V2qaSBL5R4cS+UeHEsnlk9ZGgr0nVxijWWp3INjqdyDY6ncg2PJnXsMq/1O7ro28XCnExMPd+Aw8Ugv/cIDEMnv0ktDaUovjaQpvTSSpvTSP6R5/2TJRVN6aSRN6aU/oOnDjWb6k6b00lCa0kt/QNPQS+/kemk0TWUhJE0nmkCaykJImspCSJrKQkia5ArBm5fcpzvNFx5yhaCBh128beEhVwje8IRcwEOuELTwkCsELTxOCsEXnlh4q03i7ToeibereMjF2/GN5/5d/gsP+dZs4SHfmg08Em9feAry213i7ToeibereCTeruJxwlPDo625ikdbcxUP+dZs4SHfmi085FuzgYfbRm3jkV7669GPpLPXF2qOn/PtxcXzbTHppaE0pZf+gKYhRN6ll4bS5NZLo2ly26jRNLnl1Wia3K5rNE3qtIKmOZ1Huy1N7ixkWO336ZTbYDzcacXE44Snhodctm357Hd22bYNiFy2bQMil23bgOhl29e3Hoo++12ybQvQbBs0HNBsOzQc0GxbNNhnv0/nuoYDIt+kbUDkm7QNSBWcX4/+e538LtU0kKXUAzCWUk0DWUo98JxlXSe/SzUNZCn1AI6lE0sYS6kHnrOs6+R3qaaBLJV7cCyVe3AslXues6zr5J1U00CWyj04lso9OJbKPc9Z1nXybnFiCWOp3INjqdyDY6nc85iloZN3Uk0DWSr3wFhKNQ1kqdzzlOU3BbpbCyyVe56zdFWdvJNq+me/l0WWTixhLJV7cCyVe56zrOvknVTTQJbKPTiWyj0wluReaqQC3ZFLrLEslXtwLJV7cCydWMJYcucew2rvyF3XJh7udGLi4Q4cJh7ppV94ACJ5J700lKb00kia0ksjaUov/UOa90+WXDSdaAJpSi/9AU0fbjRTgab00kia0kt/QNPQSztyvTSaprIQkCa5vBpNU1kISVNZCElTWQhJ08lL/qLp053mCw+5QtDCQ64QtPCQKwRveEIu4CFXCFp4yBWCBh6Jty88sfBWm8TbdTwSb1fxkIu34xvP/bv8Fx4nPDU85FuzhUfi7RNPQX7rJN6u45F4u4pH4u0aHom363i0NVfxaGuu4iHfmi08TnhqeMi3ZguPtuYqHumlvx79SDp7faHm+DnfXlw83xaTXhpKU3rpD2gaQmQnvTSUJrdeGk2T20aNpsktr0bTdKIJpEmdVuA0qcMNnCZ3FjKs9m465TYYD3dasfBMp9sG4yGXbVs+e8cu27YBkcu2bUBOgOqA6GXb17ceij57J9m2BWi2DRoOaLYdGg5oti0a7LN307mu4YDIN2kbEPkmbQNSBefXo/9eJ++kmgaylHoAx1LqARxLqQees6zr5J1U00CWUg+gWHqppoEspR54zrKuk/dSTQNZKvfgWDqxhLFU7nnOsq6T91JNA1kq9+BYKvfgWCr3PGdZ18l7qaaBLJV7cCyVe3AslXseszR08l6qaSBL5R4cS+UeHEvlnqcsvynQ3VpgqdzznKWr6uS9VNM/+70ssZRqGshSuQfHUrnnOcu6Tt5LNQ1k6cQSxlK5B8dSuecxS0OB7skl1liWyj04lso9MJbkcmwsS+7cY1jtPbnr2sTDnU5MPE54anikl37hAYjkvfTSUJrSSyNpSi+NpCm99A9p3j9ZctKUXhpKU3rpD2j6cKOZCjSll0bSlF76A5qGXtqT66XRNJWFkDSVhZA0lYWQNJWFkDSVhYA02cXbNy+5T3eaLzzkCkELD7lC0MJDrhC84Qm5gMcJTw0PuULQwiOF4IknFt5qk3i7jkfi7SoecvF2fOO5f5f/xMMu3rbwkG/NFh6Jt088Bfmtl3i7jscJTw2PxNtVPNqaq3i0NVfxaGuu4iHfmg083K5rGw/51mzh0dZcxSO99NejH0lnry/UHD/n24uL59ti0ktDaUov/QFNQ4jspZeG0uTWS6Npctuo0TS55dVgmuSuazRN6rQCp0kdbuA0ubOQYbX30ym3wXi404qJhzt+mHjIZduWz96zy7ZtQOSybRMQu2zbBkQv276+9VD02XvJti1As23QcEBOgOqAZtuiwT57P53rGg6IfJO2AZFv0jYgVXB+PfrvdfJBqmkgS6kHcCylHsCxlHrgOcu6Tj4sTixhLKUewLGUegDHUuqB5yzrOvkg1TSQpXIPjKVU00CWyj3PWdZ18kGqaSBL5R4cSyeWMJbKPc9Z1nXyQappIEvlHhxL5R4cS+WexywNnXyQahrIUrkHx1K5B8dSuecpy28KdLcWWDqxfMzSVXXyQarpn/1eFlkq9+BYKvfgWCr3PGdZ18kHqaZxLKWaBrJU7sGxVO55zNJQoAdyiTWWpRNLGEvlHhxL5R4cS+7cY1jtA7nr2sTDnU4sPOQ2ahOP9NIvPACRfJBeGkpTemkkTSeaQJrSS/+Q5v2TJRdN6aWRNKWX/oCmDzeaqUBTemkkTemlP6Bp6KUDuV4aTVNZCElTWQhJU1kISdOJJpCmshCSJrlC8OYl9+lO84WHXCFo4SFXCFp4yBWCNzwh/4mHXbxt4SFXCFp4pBA88cTCW20Sb9fxOOGp4SEXb8c3nvt3+S885FuzhYd8a7bwSLx94inIb4PE21U8Em/X8Ui8XcWjrbmKR1tzFY8Tnhoe8q3ZwkO+NVt4yLdmC4+25ioe6aW/Hv1IOnt9oeb4Od9eXDzfFpNeGkpTeukPaBpC5CC9NJQmt14aTdOJJpAmt7waTZPbdY2mSZ1W4DSpww2cJncWMqz2YTrlNhgPd1ox8XDHDxMPuWzb8tkHdtm2DYhctm0DIpdt24DoZdvXtx6KPvsg2bYFaLYNGgwoTmfQhgOabYsG++zjdK5rOCDyTdoG5ASoDkgVnF+P/nudfJRqGshS6gEcS6kHcCylHnjOsq6Tj1JNA1lKPYBjKfUAjqXUA89Z1nXyUappIEvlHhxL5R4cS+We5yzrOvko1TSQpXIPjKVU00CWyj3PWdZ18lGqaSBL5R4cSyeWMJbKPY9ZGjr5KNU0kKVyD46lcg+OpXLPU5bfFOjuT6VvlGr6A5auqpOPUk3/7PeyyFK5B8dSuQfH0onlY5Z1nXyUahrIUrkHx1K5B8dSuecxS0OBHskl1lCW5MZrLEvlHhxL5R4cS+7cY1jtI7nr2sTDnU5MPNyBw8QjvfQLD0AkH6WXhtKUXhpIU3ppKE3ppX9I8/7Jkoum9NJImtJLf0DThxvNVKDpRBNIU3rpD2gaeulIrpdG01QWQtJUFkLSVBYC0iRXY6NpKgshaZIrBG9ecp/uNF94yBWCFh4nPDU85ArBG56QC3jIFYIWHnKFoIVHCsETTyy81SbxdhWPxNt1POTi7fjGc/8u/4WHfGu28JBvzRYep+eeF56C/DZKvF3HI/F2FY/E21U82pqreLQ11/Bwm7RtPORbs4WHfGu28JBvzRYeJzw1PNJLfz36kXT2+kLN8XO+vbh4vi0mvTSUpvTSH9A0hMhRemkoTW69NJgmuY0aTZNbXo2mye26RtOkTitwmk40gTS5s5BhtY/TKbfBeLjTiomHO36YeMhl25bPPrHLtm1A5LJtGxC5bNsGRC/bvr71UPTZp8UJUB3QbBs0HNBsOzQc0GxbNNhnn6ZzXcMBkW/SJqDprNRwQKrg/Hr03+vkk1TTQJZSD+BYOrGEsZR64DnLuk4+STUNZCn1AI6l1AM4llIPPGdZ18knqaaBLJV7cCyVe3AslXues6zr5JNU00CWyj04lso9OJbKPc9Z1nXySappIEvlHhhLqaaBLJV7HrM0dPJJqmkgS+UeHEsnljCWyj1PWX5ToLu1wFK55zlLV9XJJ6mmf/Z7WWSp3INjqdwDYynV9Acs6zr5JNU0kKVyD46lcg+OpRPLpywNBXoil1hjWSr34Fgq9+BYKvfgWHLnHsNqn8hd1yYe7nRi4uEOHCYe6aVfeAAi+SS9NJSm9NJImtJLI2lKL/1DmvdPllw0pZdG0pRe+gOaPtxopj9pSi8NpSm99Ac0Db10ItdLo2kqCyFpOtEE0lQWQtJUFkLSVBZC0iRXCN685D7dab7wkCsEDTzs4m0LD7lC8IYn5AIecoWghYdcIWjhcVIIvvDEwlttEm/X8Ui8XcVDLt6Obzz37/JfeMi3ZgsP+dZs4JF4+8JTkN8mibfreCTeruKReLuKxwlPDY+25ioebc1VPORbs4WHfGu28JBvzQYebhu1jUd66a9HP5LOXl+oOX7OtxcXz7fFpJeG0pRe+gOahhA5SS8Npcmtl0bT5LZRo2lyy6vRNLld12ia1GkFTDNP59FuS5M7CxlW+zydchuMhzutmHic8NTwkMu2LZ99Zpdt24DIZds2IHLZtg2IXrZ9feuh6LPPkm1bgGbboOGAZtuh4YBm26LBPvs8nesaDoh8k7YBkW/SNiBVcH49+u918lmqaSBLqQdgLKWaBrKUeuA5y7pOPks1DWQp9QCOpRNLGEupB56zrOvks1TTQJbKPTiWyj04lso9z1nWdfJZqmkgS+UeHEvlHhxL5Z7nLOs6+SzVNJClcg+OpXIPjqVyz2OWhk4+SzUNZKncA2Mp1TSQpXLPU5bfFOhuLbBU7nnO0lV18lmq6Z/9XhZZOrGEsVTuwbFU7nnOsq6Tz1JNA1kq9+BYKvfAWJJ7qZEK9EwuscayVO7BsVTuwbF0YgljyZ17DKt9Jnddm3i404mJhztwmHikl37hAYjks/TSUJrSSyNpSi+NpCm99A9p3j9ZctF0ogmkKb30BzR9uNFMBZrSSyNpSi/9AU1DL53J9dJomspCQJrk8mo0TWUhJE1lISRNZSEkTScv+YumT3eaLzzkCkELD7lC0MJDrhC84Qm5gIdcIWjhIVcIGngk3r7wxMJbbRJv1/FIvF3FQy7ejm889+/yX3ic8NTwkG/NFh6Jt088Bfltlni7jkfi7SoeibdreCTeruPR1lzFo625iod8a7bwOOGp4SHfmi082pqreKSX/nr0I+ns9YWa4+d8e3HxfFtMemkoTemlP6BZFyKnRXppKE1uvTSaJreNGk2TW16NpulEE0iTOq3AaVKHGzhN7ixUt9ofeLjDjYmHO61YeKbTbYPxkMu2DZ/9AYhctm0DIpdt24CcANUB0cu2r289lHz2ByB62bYFaLYNGg5oth0aDmi2LRrrs0/LdK5rOCDyTdoGRL5J24BUwfn16L/WyR8snVjCWEo9gGMp9QCOpdQDz1lWdfIHS6kHcCylHoCxlGoayFLqgecsqzr5g6XUAziWyj04lk4sYSyVe56zrOrkD5bKPTiWyj04lso9OJbKPc9ZVnXyxysfyj04lso9OJbKPTiWyj2PWdZ18gdLJ5Ywlso9OJbKPTiWyj1PWX5ToLu1wFK55zlLV9PJHyyVe370e1liKdU0kKVyD46lcs9zllWd/MFSuQfH0okljKVyD46lcs9jlnUF+sFSuQfHUrkHx1K5B8aSXI6NZcmde+pW+wMPd5Qx8XCnExOPE54aHumlX3j+XiR/0JReGklTemkkTemlkTSll/4hzfsnS06a0ktDaUov/QFNH240U4Gm9NJImtJLf0Czrpc+aDrRBNJUFkLSVBZC0lQWQtJUFkLSVBYC0mQXb9+85D7dab7wkCsELTzkCkELD7lC8IYn5AIeJzw1POQKQQuPFIInnlh4q03i7ToeibereMjF2/GN5/5d/hMPu3jbwkO+NVt4JN4+8fwpvz3wSLxdxeOEp4ZH4u0qHm3NVTzamqt4tDVX8ZBvzXU8K7fr2sZDvjVbeLQ1V/FIL/316EfS2esLNcfP+fbi4nbSdKIJpCm99Ac0DSHyKr00lCa3XhpNk9tGjabJLa8G0yR3XaNpUqcVOE3qcAOnyZ2FDKv9Op1yG4yHO62YeLjjh4mHXLZt+exXdtm2DYhctm0CYpdt24DoZdvXtx6KPvtVsm0L0GwbNByQE6A6oNm2aLDPfp3OdQ0HRL5J24DIN2kbkCo4vx799zr5VappIEupB3AspR7AsZR64DnLuk5+lWoayFLqARxLqQdwLKUeeM6yrpNfpZoGslTugbGUahrIUrnnOcu6Tn6VahrIUrkHx9KJJYylcs9zlnWd/CrVNJClcg+OpXIPjqVyz2OWhk5+lWoayFK5B8dSuQfHUrnnKctvCnS3Flg6sXzM0lV18qtU0z/7vSyyVO7BsVTuwbFU7nnOsq6TX6WaxrGUahrIUrkHx1K55zFLQ4G+kkussSydWMJYKvfgWCr34Fhy5x7Dar+Su65NPNzpxMJDbqM28Ugv/cIDEMmv0ktDaUovjaTpRBNIU3rpH9K8f7Lkoim9NJKm9NIf0PThRjMVaEovjaQpvfQHNA299Equl0bTVBZC0lQWQtJUFkLSdKIJpKkshKRJrhC8ecl9utN84SFXCFp4yBWCFh5yheANT8h/4mEXb1t4yBWCFh4pBE88sfBWm8TbdTxOeGp4yMXb8Y3n/l3+Cw/51mzhId+aLTwSb594SvJbibdreDaJt+t4JN6u4tHWXMWjrbmKxwlPDQ/51mzhId+aLTzkW7OFR1tzFY/00l+PfiSdvb5Qc/ycby8uvt4W26SXhtKUXvoDmoYQeZNeGkqTWy+NpulEE0iTW16NpsntukbTpE4rcJrU4QZOkzsLGVb7bTrlNhgPd1ox8XDHDxMPuWzb8tlv7LJtGxC5bNsGRC7btgHRy7avbz0UffabZNsWoNk2aDSg6QzacECzbdFgn/02nesaDoh8k7YBOQGqA1IF59ej/14nv0k1DWQp9QCOpdQDOJZSDzxnWdfJb1JNA1lKPYBjKfUAjqXUA89Z1nXym1TTQJbKPTiWyj04lso9z1nWdfKbVNNAlso9MJZSTQNZKvc8Z1nXyW9STQNZKvfgWDqxhLFU7nnM0tDJb1JNA1kq9+BYKvfgWCr3PGX5TYHu/lT6blJNf8DSVXXym1TTP/u9LLJU7sGxVO7BsXRi+ZhlXSe/STUNZKncg2Op3INjqdzzmKWhQN/IJdZQluTGayxL5R4cS+UeHEvu3GNY7Tdy17WJhzudmHi4A4eJR3rpFx6ASH6TXhpKU3ppIE3ppaE0pZf+Ic37J0sumtJLI2lKL/0BTR9uNFOBphNNIE3ppT+gaeilN3K9NJqmshCSprIQkqayEJAmuRobTVNZCEmTXCF485L7dKf5wkOuELTwOOGp4SFXCN7whFzAQ64QtPCQKwQtPFIInnhi4a02ibdreHaJt+t4yMXb8Y3n/l3+Cw/51mzhId+aLTxOzz0vPAX57S7xdh2PxNtVPBJvV/Foa67i0dZcw8Nt0rbxkG/NFh7yrdnCQ741W3ic8NTwSC/99ehH0tnrCzXHz/n24uJ20pReGklTeukPaBpC5F16aShNbr00mCa5jRpNk1tejabJ7bpG06ROK3CaTjSBNLmzkGG136dTboPxcKcVEw93/DDxkMu2LZ/9zi7btgGRy7ZtQOSybRsQvWz7+tZD0We/S7ZtAZptg4YDmm2HhgOabYsG++z36VzXcEDkm7QJaDorNRwQYpNe8zvyHcObb9Qfr0+9Hh32W5dPWEt/9rHKnTOsPm5/1qvsEMVz6xn2CWZwE8zgu58hOv+eIRQ+SwBR+LaeIU4wQ5pghjz+DBBFa+sZ+r+n7Rn6v6ftGfq/p+0Z+r+n7RkmuKf9BPe0n+Ce9hPc036CezpMcE+HCe7pMME9HSa4pyHKuNYzTHBPhwnu6TDBPR0muKfDBPd0nOCejhPc03GCezpOcE9DfEitZ5jgno4T3NNxgns6TnBPxwnu6TTBPZ0muKfTBPd0muCehohDWs8wwT2dJrin0wT3dJrgnk4T3NN5gns6T3BP5wnu6TzBPQ2pzG89wwT3dJ7gns4T3NN5gns6j39Pu2X8e9ot49/Tbhn/nnbL+Pe0W8a/p90y/j3tlvHvabeMf0+7Zfx72i0T3NPrBPf02uKeDn49Z4i3L4sVZ9jScratbun+7dZwTrANP8E+/ARu+Al89xO8v5GZ7t8ouyYIw08Qu59gf0/gShOk4SfI3U8Q3/+TU+F/8rYMP0H/d7I1Qf93sjVB/3dyev9PzoX/yZAey7YTdH8n53dfQ15LE3R/J5sT9H4n78tlY9gXtxYm6P1OPo79nsCXJuj9Tv72b1CaYO/9TrYn6P1O3pd3Fd2SSxP0fifbE/R+J9sT9H4n2xP0fifv634WWO+rL2x2e+93sj1B93eyOUH3d7I5QYM7OYZzgHRb1fLyOpJb+jvS2t+Rtv6OtLc40vJ6cAxr4UiuvyP5/o4U+jtSbHGkmzMi5vsz6+tQqcdDtUhVl54tbv7Pf7wmBVLGkdb+jrR1+NvUpK/J4OT6O5Lv70ihx9+m2B+n1N+R+nsGb1EttK3+eg13ze+q3nz+NrXoCrIPtfV4qL3HQ7kWh8pXXfS2pcKhfI+HCj0eKvZ4qCbP5u/XX7bCU2fu7kgtCmjcuwPerbd3Ra9/uhaNMvahGjyb7/l6D/84VOGXvEXni30o1+JQ4fzD3baUDuV7PFTo8VCxx0O1eH0lXldMTMu3l9Nfh8odHqpFVYl9qLXHQ23dhavU32ssTao+jCM1eC5fd3c9+nib/n2orbRMHG8LnU9n7nZFXu+ttejtAE8Qh58gDT9B7n2CtzTpeOHB/zlBi74O8ATr8BNsw0+wdz+BW64J4l6YwA0/Qfd3sjlB93eyOUH3d7IPtwkKnznK3d/J5gSj38l+Gf1O9svod7JfRr+T/TL6neyX0e9kv4x+J/tl9DvZL6PfyX4Z/U72S/d3sjXBOvydvA5/J6/D38lr/3eyNcHwd/I6/J28Dn8nr93fyeYEw9/J6/B38tb9nWxOMPydvA1/J2/D38ktWjjAEwx/J2/D38nb8Hfy1v2dbE4w/J28D38n793fyeYEw9/J+/B3cosWDvAE/d/J1gTD38n78HfyPvydvPf/frIxgRv+TnbD38mu+zvZnGD4O7lF4Qh4guHvZNf/nWxNMPyd7Ia/k93wd7Lv//1ka4Lh72Q//J3su7+TzQmGv5P98HeyH/5O9v3fydYEw9/Jfvg7OQx/J4f+30+2Jhj+Tg7D38ktyoDAEwx/J4fh7+Qw/J0c+r+TrQmGv5Pj8HdyHP5Ojv2/n2xNMPyd3KLSCTxB93eyOcHwd3Ic/k6Ow9/JcfjvJ6fh7+Q0/J2chr+T0/DfT25RzIW90frv8TIn6P5ONicY/k7uv8fLnGD4O3n4Hi8/QI+XcR8M0ONlTTD8nTx8j5fvv8fLutH67/EyJxi+M6T/Hi/zPhj9Tg7D93iF4Xu8wgA9XvX7IAzf4xWW0e/kMHyPV+i/x8u40cLwPV5h+B6v0H+Pl3UfDN/jFYbv8QrD93iFAXq8jPtg+B6vMHyPVxi+xyv03+Nl3WjD93iF4Xu8Qv89XtZ9MHyPVxi+xysM3+MVBujxMu6D4Xu8wvA9XmH4Hq/Qf4+XeaMNfycP3+MV+u/xsu6D4Xu8wvA9XmH4Hq8wQI+XcR8M3+MVhu/xCsP3eIX+e7ysG234Hq8wfI9X6L/Hy7oPhu/xCsP3eIXhe7zCAD1exn0wfI9XGL7HKwzf4xX67/GybrThe7zC8D1eof8eL+s+GL7HKwzf4xWG7/EKA/R4WffB8Hfy8D1eYfger9B/j5d1ow3f4xWG7/EK/fd4WffB8D1eYfgerzB8j1cYoMfLug+Gv5OH7/EKw/d4hf57vKwbbfgerzB8j1fov8fLug+G7/EKw/d4heF7vMIAPV7GfTB8j1cYvscrDN/jFfrv8bJutOF7vMLwPV6h/x4v6z4YvscrDN/jFYbv8QoD9HgZ98HwPV5h+B6vMHyPV+i/x8u60Ybv8QrD93iF/nu8zPtg+Dt5+B6vOHyPVxygx6t+H8The7zi8D1ecen+TjYnGP1OjsP3eMXhe7xi/z1e5n0w/J08fI9XHL7HKw7Q42XcB8P3eMXhe7zi8D1esf8eL+tGG77HKw7f4xX77/Gy7oPhe7zi8D1ecfgerzhAj5dxHwzf4xWH7/GKw/d4xf57vKwbbfgerzh8j1fsv8fLug+G7/GKw/d4xeF7vOIAPV7GfTB8j1ccvscrDt/jFfvv8TJvtOHv5OF7vGL/PV7WfTB8j1ccvscrDt/jFQfo8TLug+F7vOLwPV5x+B6v2H+Pl3WjDd/jFYfv8Yr993il1Z8TJF+aoPs72Zyg+zvZnKD7O9mcoPs7Ofl8TZBTYYLu72Rzgu7vZHOC7u9ka4L+e7xiiO8JcmGC7u9kc4Lu72RzguHv5P57vMwJhr+T++/xMicY/k7uv8fLnGD4O7n/Hi9zguHv5P57vMwJur+TzQmGv5P77/EyJxj+Tu6/x8ucYPg7uf8eL2uC/nu8zAm6v5PNCYa/k/vv8TIn6P5ONicY/k7uv8fLnGD4O7n/Hi9zguHv5P57vMwJhr+T++/xMicY/k7uv8fLnKD7O9mcYPg7uf8eL3OC4e/k/nu8jAlS/z1exn2Q+u/xMicY/U5O/fd4mROMfien/nu8zAm6v5PNCUa/k1P/PV7mBMPfyf33eJkTDH8n99/jZU4w/J3cf4+XOcHwd3L/PV7mBN3fyeYEw9/J/fd4WRP03+NlTtD/nWxNMPyd3H+PlznB8Hdy/z1e5gTD38n993iZE3R/J5sTDH8n99/jZU4w/J3cf4+XOcHwd3L/PV7mBMPfyf33eJkTDH8n99/jZU7Q/Z1sTdB/j5d1H/Tf42VOMPyd3H+PlznB8Hdy/z1e5gTD38n993iZEwx/J/ff42VN0H+PlznB8Hfy8D1eafgerzR8j1caoMfLuA+G7/FKw/d4peF7vFL/PV7WjTZ8j1cavscr9d/jZd0Hw/d4peF7vNLwPV5pgB4v4z4YvscrDd/jlYbv8Ur993hZN9rwPV5p+B6v1H+Pl3UfDN/jlYbv8UrD93ilAXq8rPtg+Dt5+B6vNHyPV+q/x8u60Ybv8UrD93il/nu8rPtg+B6vNHyPVxq+xysN0ONl3QfD38nD93il4Xu8Uv89XtaNNnyPVxq+xyv13+Nl3QfD93il4Xu80vA9XmmAHq/6fZCH7/HKw/d45eF7vHL/PV7GjZaX0e/kPHyPV+6/x8u4D/LwPV55+B6vPHyPVx6gx8u4D4bv8crD93jl4Xu8cv89XtaNNnyPVx6+xyv33+Nl3gfD38nD93jl4Xu88gA9XsZ9MHyPVx6+xysP3+OV++/xsm604Xu88vA9Xrn/Hi/zPhj+Th6+xysP3+OVB+jxMu6D4Xu88vA9Xnn4Hq/cf4+XdaMN3+OVh+/xyv33eFn3wfA9Xnn4Hq88fI9XHqDHy7gPhu/xysP3eOXhe7xy/z1e1o02fI9XHr7HK/ff42XdB8P3eOXhe7zy8D1eeYAeL+M+GL7HKw/f45WH7/HK/fd4mTfa8Hfy8D1euf8eL+s+GL7HKw/f45WH7/HKA/R4GffB8D1eefgerzx8j1fuv8fLutGG7/HKw/d45f57vKz7YPgerzx8j1cevscrD9DjZdwHw/d45eF7vPLwPV65/x4v60YbvscrD9/jlfvv8bLug+F7vPLwPV55+B6vPECPl3UfDH8nD9/jlYfv8cr993hZN9rwPV55+B6v3H+Pl3UfDN/jlYfv8crD93jlAXq8rPtg8Ds5L6P3eB0TDP795GOCwe/kY4LB7+Rjgu7vZHOCwe/kY4LB7+RjgsHv5GOCwb+ffEww/J08eo/XMcHwd/LoPV7HBMPfyaP3eB0TDN4Zckww/J08eo/XMcHwd/LoPV55GaDHy7gPRu/xOiYY/k4evcfrmGD4O3n0Hq9jgsE7Q44Jhr+TR+/xOiYY/k4evcfrmGD4O3n0Hq9jguHv5NF7vI4Jhr+TR+/xOiYYvDPkmGD4O3n0Hq+8jN7jdUww+PeTjwmGv5NH7/E6Jhj+Th69x+uYYPg7efQer2OCwTtDjgmGv5NH7/E6Jhj+Th69x+uYYPg7efQer2OC4e/k0Xu8jgmGv5NH7/E6Jhi8MyQv/fd4WffB6D1exwTD38mj93gdEwx/J4/e43VMMPydPHqP1zHB8Hfy6D1eeRm9x+uYoMGd7H08H338mO4TvA7V4JqNMZ73TozpjTWs56H2FofK16HS4guHcj0eqsH9FuJ2nml7Hykv55FCf0eK/R2pxZUSwnmmNaTSk0Hu8FBNyqLMQ609HqpFZAp5Px8d11w41N7joVyPh/I9Hip0uLS0aDwyl5YWJUb2oXKHS0uLqiHjOm7RHWQdaevvSHuHTwYtCnvM/3ctOnjsQ4Uenwz6281bVN9YR8q9HWltUU5jPRmsLfpmrP9369Lhayzr0uFrLOvi+vs17+4VlnXp7hWWdelwI1+XDjfytUUDSgzr68FpjX/+47WoNLGOtPZ3pK2/IzV4Dt/ils4/PPr1zyu4RTGIfSjf46FCj4fq8Zl8TR0uK2uHr62sLaow7EOtPR6qwfP5ltP5cuu+LOHP/30tOijsQ7keD+V7PFTo8MmzRZ+Dsbi0KGiwjtTfXr73t5e36ETYN7ec/+u26P78X9ei5sA+1N7joVyLQ8Xz03X7vhWeNFv0C9iHCj0eKvZ4qB5fZdlzh4dq8fX7PSZ3/vPF5P/852vxjfo9Bn8dKu6FQ209Hmrv8VCux0N1+O7n2uIL58Y25frbzF1/m7nrbzNv8aXtbY/nM/nm1ttF7M5DrS0O5bf6obYeD9XiM4lbXq6Hb/n2W3U9QzX5CvSDY/k+jxX6PFZ/z+m+v+d0399zeujv1ZbQ5F3Q8yWE43CFI239HWnv70iuvyO1eL3cb/n6w/f450Xc4sut9qEaPINvMVxvy6ZlLxwq9Xio3OGhWnxR1D7U2uOh+vtES5NvfhpHcv0dyfd3pP5eXYn9beKxv0089reJpyafLM/XJ8vDtv75ZJnWHg+19XiovcdDNXgW92k/X4fyyRdeh2rxjU/7UKHHQ8UeD9Xfs3nq79k89/e6Su7v0+W5x9fJW3zf0z5Ug2fy9b+P+50P35fbsa7XfbPv81ihz2PFPo/V3zN67u4ZfVu6e0bflu6e0belu1fKt6W7V8q3xfV3JN/fkTp8nXxr8Z1P+1Advk6+LR2+Tr6tHb5Ovq0dvk6+9ffNz23t7nXybXX9Ham718m3tbvXybe1u9fJt7W7PXxb+9vDtw5fJ9+2Dl8n37YOXyfftg5fJ99afNfTeqF12zp8nXzbOnydfNs6fJ18a6PjXhd/vdizrv6PF3u2No5t81htxNn2sdY+j9Xfbr73t5u3+N6ndaT+dvM9dPfCzx77O1Lq70i5uyO1+K6n+eJYi+962ofaOnzJx+09Hsr1eCjf46GavOt5vJlxLSvHy2F/LittjMH2sVKfx8pdHsv39+6n7+/dT9/fXu7728tbfOPTWFx8f+9++v72ct/fXt7iW57mctfie57moUKP73yGHt/5DD3u5qHH3bzNNz6rl0vo7xWW0N+7n6G/dz+b6Ea/iaDeL7Tm/TxU7vBQTaSg5qHWHg/VxA0Xr0OFtBYO1aKHJS7X21XHz277M+G1+Mbnk2P5Po8V+jxWf8/r/X37c+vv259b6u/1lSa2T/tXvInv88GxGjyr1/U0W4tvf1pH6s4rtKUmnzJfUjGsnztCij0eKvV4qNzhoVp8+/PBc1R/vs+tP9/nlvt7Jm/y7c8Hv0/9PZvn7ixxW3+uz63FNz6dv0TuLoRUeNLM/R1qb/GtT5fC+QqCS6l0qLXHQ209Hmrv8VANns3/a5Q+D5Vz6VC+x0O1+LT54s5DHWteuB/qzwfv27sUfrv1r8dwThCHnyANP0EefYIW31r1y/a/JngdqrvP3+z9fWd1b/GdVbvzY2/xvdUnx2rxan86XpY6H572mAvHCn0eq8UnK5N7l8Gn40micKzU57FavJebwrXirCkuhX/EFt9nfXIszLN7jOF9rOzvD3/9Pds/+nswz8M5Xa+J5Jyd8fD1+t7pui3vy2Ev/9H5+gDXsrhQ/6OPt0Gut5mPleH24Zz/8fA9vT/K4zbj4GG7fj3CdnvlJ7qTphNNIE0vmkCaQTSBNKNoPqYZ/XoePHrnCzSTaAJpZtHE0QR9BV80v2ius9Hc/IVnc+ufGzaolGCkiafLFObEjm5iyG4ecziPdfycYuHvCf/o7+nwk0X73uEni3ZMv4L9L+J6fIsZU5rwYPgW7xpbbzu26EGwD+X+vx5fVXW+y5cv3T96Om1SbmC/M+Cmy5nWPe2my4LWxH66vGZOTJepPF2m8nSZClSHMdLE073fYU483XsS5sTTvW9gTky3c3m6nSvQ7VyBbucKdDtXoNu5QMU1I01Mt3MFup0r0O1cgW7nCnQ7V6TbuSLdzhXpdq5It3OBCqZGmphu54p0O1ek27ki3c4V6XauRLdzJbqdK9HtXIlu5wJVwI00Md3Oleh2rkS3cyW6nSvR7VyZbufKdDtXptu5Mt3OBSprHGliup0r0+1cmW7nynQ7V2bbudzCtnO5hW3ncgvbzuUWtp3LLY5uYradyy1sO5db2HYut7DtXG6h27lWup1rpdu5Vrqda6XbuUAVwiNNTLdzrXQ710q3c610O9dKt3NtdDvXRrdzbXQ713yd3ubEjm5iup1rvv5qc2K6nWu+HmhzYrqda74+ZXNiup2LrvPY0XUeO7rOY7fT7Vw73c610+1cO93OtdPtXI5u53J0O5ej27kc3c4FKjsfaWK6ncvR7VyObuei66F3dD30jq6H3tH10Du6HnpH10Pv6HroHV0PvaProXd0PfSOrofe0fXQO7oeekfXQ+/oeugdXQ+9o+uhd3Q99I6uh97R9dA7uh56R9dD7+h66B1dD72j66F3dD30jq6H3tH10Du6HnpH10Pv6HroHV0PvaProXd0PfSOrofe0fXQO7oeekfXQ+/oeugdXQ+9o+uhd3Q99I6uh97R9dA7uh56R9dD7+h66B1dD72j66F3dD30jq6H3tH10Hu6HnpP10Pv6XroPV0PvV8c3cRsO5en66H3dD30nq6H3tP10Hu6HnpP10Pv6XroPV0Pvafrofd0PfSerofe0/XQe7oeek/XQ+/peug9XQ+9p+uh93Q99J6uh97T9dB7uh56T9dD7+l66D1dD72n66H3dD30nq6H3tP10Hu6HnpP10Pv6XroPV0Pvafrofd0PfR+vh76uF8T78tuPXxP6Xq424yDhzWtr0eHNd+O4k6a0+1zv0lzi+eYYV++0Sz92Yu7/uj19ieHE/10i+U46KfbcMdB74S+Ffrpdv5+0K/xvbXEAvrpwsc46KdLQeOgny6OjYN+ulzYD/r9jd4V0M8n7RgHvdJsM/RKs83QK83+Gvr4jlSpEKnmE7uMg15pthl6pdlm6JVmfw19el+zuXTNKs02Q6802wr9fDqkcdArzf4W+rxc6PNaQq802wy90mwz9E7oW6FXmv0l9Mdffkaqfbl/oOxCrzT7a+jdG70voVea/Re/9UX0SrPN0CvNtkI/n2iuH/QhXehzCb3SbDP0SrPN0CvNNkPvhP6X0K/7efB99YV3qeazIo6DXmm2GXql2WbolWaboVea/QB9vMYMaVnu6L9ozmflbEpTmRNJUzESSVPJ8AOaaT+phPydZuHKCv4dDcMB+v3w7YTvBL8dfKXDhvCVDxvCV0L8PfjXp+mOn+9VJxd8ZcSG8JUS28GfTzs8Enxl0H9z4d4/Qn3BV2RtCF8J9/fg+3CDnwrwneC3g6+E+3vw3fvCDYsvwFfC/Tfw17UAXwm3IXwl3IbwlXCbwQ/zSd5Hgq+E2xC+Em5D+Eq4H8DPLl3wfbrDf9F0ogmkqQyKpKlQ+UOaIRdoKiUiaSr2IWkqx31C8/rCZcjxz0+5hVXBDElTSQtJU9HpE5rxTfPeTHjRVBZC0nSiCaSpLPTD5828FWgqCyFpKgshaSoLIWkqCwFpbspCSJrKQkiaykJImspCSJpONIE0lYWQNJWFntOMPpxnieHeglt++z1eNRXHz/n2Uv359vum6NQQvpLW78EP+wU/3Rle8BXM2sHfleMawlfsawhfKbEhfIXKhvCd4LeDr8jaEL4SbkP4SrgfwA+XKDkGX/jAz67IiqSpDAqk6RQqkTTJU6L36/Xwb01kpYfv+63KY/fpG5YXT/LgB+dJnuXgPJ14QnmSJ64PeYbL7nj8vLoCT/IQBedJnovgPMmTEZwneTb6mOd24+n/5OnJ0xGcp/IRlqfyEZbndPlo8xeg7W6hviZ2dBNPlzHMiadLAebEkD095utdlePnFAt/T/pHfw9mr3u/fHn86+zJwOyX66VRv78PlffXocLS46HWf/MvErZ/P7xL1/t2LqVUGH7/R8O7BsPn9fxItMu5NLz/94dak7si2Zr88v7Tw3oeK7Q4VrhgrSkuuXCsf/QMGVKL8Y9t8Bp/j6XxpwvK1pU4n4LenHi6sGlOPF0cNCemC2zz6cXNiekC23wybXPi6d5YMSee7q0Pc2K6nWs+q7I5Md3ONZ+d2JyYbueaT9trTky3c80nqDUnptu55lOxmhPT7VzzSUfNiel2rvn0mubEdDvXfCJJc2K6nWs+ZaI5Md3ONZ8c0JyYbeeK82nwzInZdq44n/DNnJht54qLo5uYbeeK8xnFzInZdq44n5nLnJhu55rPcGVOTLdzzWeKMiem27nmMy6ZE9PtXPOZi8yJ6Xau+QxA5sR0O9d8Jh1zYrqdaz4jjTkx3c41n9nFnJhu55rPkGJOTLdzzecCMSem27nms16YE9PtXPP5HcyJ6Xau+UwG5sR0O9d8nf3mxHQ713xl9ubEdDvXfKXw5sR0O9d81ermxHQ713z15ObEdDvXfBXf5sR0O9d8NdnmxHQ713xV0+bEdDvXfHXN5sR0OxddoXKkK1SOdIXK0dPtXJ5u5/J0O1eg27kC3c4V6HauQLdzgfrIR5qYbucKdDtXoNu5At3ORddDH+l66CNdD32k66GPdD30ka6HPtL10Ee6HvpI10Mf6XroI10PfaTroY90PfSRroc+0vXQR7oe+kjXQx/peugjXQ99pOuhj3Q99JGuhz7S9dBHuh76SNdDH+l66CNdD32k66GPdD30ka6HPtL10Ce6HvpE10Of6HroE10PfVoc3cRsO1ei66FPdD30ia6HPtH10Ce6HvpE10Of6HroE10PfaLroU90PfSJroc+0fXQJ7oe+kTXQ5/oeugTXQ99ouuhT3Q99Imuhz7R9dAnuh76RNdDn+h66BNdD32i66FPdD30ia6HPtH10Ce6HvpE10Of6HroE10PfaLroU90PfSJroc+0fXQJ7oe+kTXQ5/oeugTXQ99ouuhT3Q99Imuhz7R9dAnuh76RNdDn+h66BNdD32i66FPdD30ia6HPtH10Ce6HvpE10Of6Hro03w99HG/Jt6X3Xr4ntL1cLcZBw9bPMcM+3I7iiv+2Yu7/uj19ieHE/10y9846KfbQsdB74S+Ffrp9vJ+0K/xfc/GAvrpAsI46KdLKuOgny4yjYN+uuzWD/r9jd4V0M8n1hgHvdJsM/RKs83QK83+Gvr4jlSpEKnmk6+Mg15pthl6pdlm6JVmfw19el+zuXTNKs02Q6802wr9fMqicdArzf4W+rxc6PNaQq802wy90mwz9E7oW6FXmv0l9Mdffkaqfbl/BOpCrzT7a+jdG70voVea/Re/9UX0SrPN0CvNtkI/nwyuH/QhXehzCb3SbDP0SrPN0CvNNkPvhP6X0K/7efB99YV3qeYzF46DXmm2GXql2WbolWaboVea/QB9vMYMaVnu6P+PZp7PnNmUpjInkqZiJJKmkuEHNNN+Ugn5O83ClRX8OxoGn25H2U74TvDbwVc6bAhf+bAhfCXE34N/fZru+DmHAnxlxIbwlRLbwZ9PDTwSfGXQf3Ph3j9CfcFXZG0IXwn39+D7cIOfCvCd4LeDr4T7e/Dd+8IN61qAr4TbEL4SbkP4SrgN4SvhtoM/n4h9JPhKuA3hK+F+AD+7dMH36Q7/RVORFUnTiSaQpkLlD2mGXKCplIikqdiHpKkc9wnN6zt/IcfCB602BTMgzV1JC0lT0ekTmvFN816Od9FUFkLSVBZC0nSi+bPnzbwVaCoLIWkqCyFpKgshaSoLIWkqCwFpOmUhJE1lISRNZSEkTWUhJE0nmkCaykLPaUYfzrPEcC9iLb/9Hq+mhOPnfHup/nz73Sk6NYSvpPV78MN+wU93hhd8BbOG8JXj2sH3in0N4SslNoSvUNkQvjJoQ/hO8NvBV8L9AH64dLEx+MJnTrwiK5KmMiiSpkIlkiZ5SvR+vR7+rY+p9PB9vxUa7D59w/LFM5AHPzhP8iwH50kez+A8yRPXhzzD5bg7fl5dgacTTyhP8lwE50mejOA8ybPRxzy3G09f4EmejuA8lY+gPKPyEZbndPlo8xeg7e7ivSaeLsGYE0+XMcyJHd3EkD095utdlePnFAt/T/hHfw9mr3u/fHn86+zJwOyX66VRv78PlffzUKnHQ+V/8y+Sln8/vEvX+3YupfTn8Gn9R8NvDYbP6/mp3P9OUBh+//eHWpO7Itma/PL+08N6Hsu1OFa4YK0pLrlwrH/0DJlCi/GPbfAaf4+l8acLytaVOJ9+3px4urBpTTyfbN2cmC6wzacWNyemC2zzibTNiad7Y8WceLq3PsyJ6Xau+STJ5sRcO5dflvn8webEXDvXfxNz7Vz/Tcy1c/03saObmGvn+m9irp3rv4m5dq7/Jubauf6bmG7nmk+vaU5Mt3PNJ5I0J6bbueZTJpoT0+1c88kBzYnpdq75NHjmxHQ713zCN3Niup1rPrWZOTHdzjWfIsycmG7nmk+1ZU5Mt3PNp6wyJ6bbueZTP5kT0+1c8ymUzInpdq75VETmxHQ713xKH3Niup1rPjWOOTHdzjWfYsacmG7nmk/VYk5Mt3PNpzwxJ6bbueZzgZgT0+1c81kvzInpdq75/A7mxHQ713wmA3Niup1rvs5+c2K6nWu+MntzYrqda75SeHNiup1rvmp1c2K6nWu+enJzYrqda76Kb3Niup1rvppsc2K6nWu+qmlzYrqda766ZnNiup2LrFD5v4npdi6yQuX/JqbbuSLdzhXpdq5It3NFup0r0e1ciW7nSnQ7V6LbuUA96iNNTLdzJbqdi6yH/r+J6XYush76Y2KyHvr/Jqbbuch66P+bmG7nIuuh/29iup2LrIf+v4npdi6yHvr/JmbbuVa6HvqVrod+peuhX+l66NfF0U3MtnOtdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD30K10P/UrXQ7/S9dCvdD3063w99HG/Jt6X3Xr4ntL1cLcZBw9bPMcM+3I7iiv+2Yu7/uj19ieHF/r5CvHHQT/dFjoO+unW4XHQT7eX94N+je97NhbQO6FvhX66pDIO+uki0zjop8tu/aDf3+hdCf10IXIc9EqzrdDPpxoZB73S7K+hj+9IlQqRaj75yjjolWaboXdC3wq90uyvoU/vazaXrlml2WbolWaboVeabYZeafa30OflQp/XP9Fv80mcxkGvNNsMvdJsM/RKs///76A//vIzUu3L/SNQF3on9L+F3r3R+xJ6pdl/8VtfRK802wy90mwz9Eqzv4Y+pAt9LqFXmm2Ffj493jjolWaboVea/S30634efF+9K6BXmm2G3gl9K/RKs83QK802Q680+wH6eI0Z0rLc0b9oKqAiaSpzAmnOZ/xsSlPJ8AOaaT+phPydZuHKCv4dDYNPt6NsJ3xlw4bwlQ4bwneC3w6+EuLvwb8+TXf8nEMBvjJiQ/hKiQ3hK1Q2hK8M+m8u3PtHqE/48wmTR4KvhPt78H24wU8F+Eq4DeEr4f4efPe+cMO6FuA7wW8HXwm3IXwl3IbwlXAbwlfCbQhfCbcd/Pn09L8JP7t0wffpDv9FU5EVSVMZFElTofKHNEMu0HSiCaSp2IekqRz3Cc3rO38hx8IHrZyCGZKmkhaSpqLTJzTjm+a9HO+k6ZWFkDSVhZA0lYV++LyZtwJNZSEkTSeaQJrKQkiaykJImspCSJrKQkiaykJAmkFZCElTWQhJU1kISVNZ6DnN6MN5lhjuRazlt9/j1ZRw/JxvL9Wfb78HJ/jt4Ctp/R78sF/w053hBV/BrCF85biG8BX7GsJXSmwHPypUNoSvDNoQviJrQ/hKuB/AD5cuNgZf+MxJdKIJpKkMiqSpUImkSZ4SvV+vh3/rYyo9fN9vhQa7T9+wvHiSBz84T/Ish+aZyOMZnCd54vqQZ7gcd8fPqyvwJA9RcJ7kuQjO04knlCd5NvqY53bj6Qs8ydMRnKfyEZan8hGW53T5aPMXoO3u4j0nztMlGHPi6TKGOfF0KcCcGLKnx3y9q3L8nGLh73H/6O/B7HXvly+Pf509GZj9cr006vf3ofJ+Hir0eKj4j/5F0r8f3qXrfTuXUioMn//J8PuyNBg+r+encl3Ofw6/L+u/P9Sa3BXJ1nT8C1wPD+t5rK3FscIFa01xyYVj7f/oV8W1GP/YBq/x91gaf7qgbFyJ+3z6eXPi6cKmOfF0cdCcmC2w7fOpxc2J2QLbPp9I25x4ujdWzIkd3cR0O9d8kmRzYrqdaz5/sDkx3c41n4fXnJhu55pPUGtOTLdzzadiNSem27nmk46aE9PtXPPpNc2J6Xau+USS5sR0O9d8ykRzYrqdaz45oDkx3c41nwbPnJhu55pP+GZOTLdzzac2Myem27nmU4SZE9PtXPOptsyJ6Xau+ZRV5sR0O9d86idzYrqdaz6Fkjkx3c41n4rInJhu55pP6WNOTLdzzafGMSem27nmU8yYE9PtXPOpWsyJ6Xau+ZQn5sR0O9d8LhBzYrqdaz7rhTkx3c41n9/BnJhu55rPZGBOTLdzzdfZb05Mt3PNV2ZvTky3c81XCm9OTLdzzVetbk5Mt3PNV09uTky3c81X8W1OTLdzzVeTbU5Mt3PNVzVtTky3c81X12xOTLdz0RUq73SFyjtdofKe6XYuTLXzUBPT7VyZbufKdDtXptu5MtvO5Ra2ncstbDuXW9h2Lrew7VxucXQTs+1cjq6H3tH10Du6HnpH10Pv6HroHV0PvaProXd0PfSOrofe0fXQO7oeekfXQ+/oeugdXQ+9o+uhd3Q99I6uh97R9dA7uh56R9dD7+h66B1dD72j66F3dD30jq6H3tH10Du6HnpH10Pv6HroHV0PvaProXd0PfSOrofe0fXQO7oeekfXQ+/oeugdXQ+9o+uhd3Q99I6uh97R9dA7uh56R9dD7+h66B1dD72j66F3dD30jq6H3tH10Du6HnpH10Pv6HroHV0PvaProXd0PfSOrofe0fXQO7oeekfXQ+/oeugdXQ+9o+uhd3Q99I6uh97R9dA7uh56R9dD7+h66B1dD72j66F3dD30jq6H3tH10Du6HnpH10Pv6HroHV0PvaProXd0PfSOrofe0fXQO7oeekfXQ+/oeugdXQ+9o+uhd3Q99I6uh97R9dA7uh56N18Pfdyvifdltx6+p3Q93G3GwcMWzzHDvtyO4op/9uKuP3q9/cnhRD/d8jcO+um20FHQ+/kUAeOgn24v7wf9Gt/3bCygny4gjIN+uqQyDnon9K3QT5fd+kG/v9G7EvrpQuQ46JVmm6FXmm2GXmn219DHd6RKhUg1n3xlHPRKs83QK802Q680+2vo0/uazYVrdj5BzzjolWaboVeabYZeafa30OflQp/XEnql2WbolWZboZ9PazUOeqXZX0J//OVnpNqX+0egLvRKs7+G3r3R+xJ6pdl/8VtfRO+EvhV6pdlm6JVmfw19SBf6XEKvNNsMvdJsM/RKs63QzycM7Ab9up8H31dfeJdqPnPhOOiVZpuhV5ptht4JfSv0SrMfoI/XmCEtyx39i6YCKpKmMieSpmIkkqaS4Qc0035SCfk7zcKVFfw7GgafbkfZXvDnE5uOBF/psCF85cOG8JUQfw/+9Wm64+ccCvCd4LeDr5TYEL5CZUP4yqD/5sK9f4T6gq/I2hC+Eu7vwffhBj/9CX8+jfRI8JVwfw++e1+4YV0L8JVwG8JXwm0I3wl+O/hKuA3hK+E2hK+E2xC+Eu4H8LNLF3yf7vBfNBVZgTSDMiiSpkLlD2mGXKCplIikqdiHpOlE8wOa13f+Qo6FD1oFBTMkTSUtJE1Fp09oxjfNezneRVNZCElTWQhIMyoL/fB5M28FmspCSJrKQkiaykJImk40gTSVhZA0lYWQNJWFkDSVhZA0lYWANJOyEJKmstBzmvF4WeP16BjuRazlt9/j1ZRw/JxvL9Wfb78nRaeG8JW0fg9+2C/46c7wgu8Evx185biG8BX7GsJXSmwIX6GyIXxl0HbwsyJrQ/hKuB/AD5cuNgZf+MxJVmRF0lQGRdJ0ogmkSZ4SvV+vh3/rYyo9fN9vhQb78cLe/eEvnuTBD86TPMvBeZLHMzhP8sT1Ic9wOe6On1f3B8+wkIcoOE/yXATnSZ6M4DzJs9HHPLcbT1/g6cQTylP5CMtT+QjLc7p8tPkL0HZ38V4TT5dgzImnyxjWxOt0KcCcGLKnx3y9q3L8nGLh79n+0d+D2eveL18e/zp7MjD75Xpp1O/vQ+X9PJTr8VD+H/2LhH8/vEvX+3YupVQYPv6j4VOD4fN6firX5VwaPv/7Q63JXZFsTX55/+lhfR1rW1ocK1yw1hSXXDjWP3qG3LYW4x/b4DX+HkvjTxeUrStxPv28OfF0YdOceLo4aE5MF9jmU4ubE9MFtvlE2ubE072xYk483Vsf5sR0O9d8kmRzYrqdaz5/sDkx3c41n4fXnJhu55pPUGtOTLdzzadiNSem27nmk46aE9PtXPPpNc2J6Xau+USS5sR0O9d8ykRzYrqdaz45oDkx3c41nwbPnJhu55pP+GZOTLdzzac2Myem27nmU4SZE9PtXPOptsyJ6Xau+ZRV5sR0O9d86idzYrqdaz6Fkjkx3c41n4rInJhu55pP6WNOTLdzzafGMSem27nmU8yYE9PtXPOpWsyJ6Xau+ZQn5sR0O9d8LhBzYrqdaz7rhTkx3c41n9/BnJhu55rPZGBOTLdzzdfZb05Mt3PNV2ZvTky3c81XCm9OTLdzzVetbk5Mt3PNV09uTsy2c8X5Kr7Nidl2rjhfTbY5MdvOFRdHNzHbzhXnq2s2J2bbuSJdoXKkK1SOdIXKcaXbuVa6nWul27lADdYjTUy3c610O9dKt3OtdDvXSrdzbXQ710a3c210OxddD32k66GPdD30ka6HPtL10Ee6HvpI10Mf6XroI10PfaTroY90PfSRroc+0vXQR7oe+kjXQx/peugjXQ99pOuhj3Q99JGuhz7S9dBHuh76SNdDH+l66CNdD32k66GPdD30ka6HPtL10Ee6HvpI10Mf6XroI10PfaTroY90PfSRroc+0vXQR7oe+kjXQx/peugjXQ99pOuhj3Q99JGuhz7S9dBHuh76SNdDH+l66CNdD32k66GPdD30ka6HPtL10Ee6HvpI10Mf6XroI10PfaTroY90PfSRroc+0vXQR7oe+kjXQx/peugjXQ99pOuhj3Q99JGuhz7S9dBHuh76SNdDH+l66CNdD32k66GPdD30ka6HPtL10Ce6HvpE10Of6HroE10PfVoc3cRsO1ei66FPdD30ia6HPtH10Ce6HvpE10Of6HroE10PfaLroU/z9dDH/Zp4X3br4XtK18PdZhw8bPEcM+zL7Siu+Gcv7vqj19ufHE700y1/46CfbgsdB/106/A46Kfby/tBv8b3PRv/RD+fNGEc9NMllXHQTxeZxkE/XXbrB/3+Ru9K6J3Qt0KvNNsMvdJsM/RKs7+GPr4jVSpEqvnkK+OgV5pthX4+Hc046JVmfw19el+zuXDNzifoGQe90mwz9E7oW6FXmv0t9Hm50Oe1hF5pthl6pdlm6JVmm6FXmv0l9Mdffkaqfbl/BOpEP5/oqx/07o3el9Arzf6L3/oieqXZZuiVZpuhd0L/W+hDutDnEnql2WbolWaboVeabYZeafa30K/7efB99YV3qeYzFw6Dfj6F4jjolWaboVeabYZeafYD9PEaM6RluaN/0XSiCaSpzImkqRiJpKlk+AHN4x35k2b+TrNwZQX/jobBp9tRthO+smFD+EqH7eDPp3sdCb4S4u/Bvz5Nd/ycQwG+MmJD+EqJDeE7wW8HXxn031y4949QX/AVWRvCV8L9Pfg+3OCnAnwl3IbwlXB/D757X7hhXf+EP59ceyT4SrgN4SvhNoSvhNsQvhP8dvCVcBvCV8L9AH526YLv0x3+i6YiK5KmMiiSpkLlD2mG/CfNpJSIpKnYh6SpHPcJzes7fyHHwgetkoIZkqYTTSBNRadPaMY3zXs53kVTWQhJU1kISVNZ6IfPm3kr0FQWAtLMykJImspCSJrKQkiaykJImk40gTSVhZA0lYWQNJWFkDSVhZA0lYWe04w+nGeJ4V7EWn77PV5NCcfP+fZS/evt9+MdfMFvB19J6/fgh/2Cn+4ML/gKZg3hK8c1hO8Evx18pcSG8BUqG8JXBm0IX5G1IXwl3A/gh0sXG4P/8zMneVVkRdJUBkXSVKhE0iRPid6v18O/9TGVHr7vt0KD3advWF48nXhCeZJnOThP8ngG50meuD7kGS7H3fHz6go8yUMUnCd5LkLz3MiTEZwneTb6mOd24+kLPMnTEZyn8hGWpxNPKE9EPtqW9e0eXtZ9wfHclm3x1x+9uWic5Hjp8Zz4+HlP9Yd/JlhOi7vY3++icLIMYgljGcUSxjKJJYxlFsvHLNdryOOa+5PlvogljOUqljCWm1jCWO5i+Zjl/mbpSiydWMJYKvfgWCr34Fgq9zxnGd+7eirs6rtyD46lcg+MpVPuwbFU7nnOMr3vnly4e5xyD46lcg+OpRNLGEvlnscs83vIvJZYKvfgWCr34Fgq9+BYKvc8ZbkvV4vIvrj1T5Zeuec5S/dm6UsslXt+9HtZZKncg2Op3INj6cTyMcv3Fy2WXGKp3INjqdyDY6ncg2Op3POY5bqfn1LeV194Xd0r98BYBuUeHEvlHhxL5R4cS+7cE6/v04S0FGoighOeGh7udGLi4Q4cJh7uDPGh7fgdIsK3L9CdTWCBO0WgaXLnCDDNyJ0k0DS5s8Rf0Lx/suSiyZ0m0DS588SHNH240UwFmk40gTS508qHNN3VYBPCuhZococbNE1lISRNZSEkTWUhIM2kLISkqSyEpMmdhbJLF02f7jRfeLjDjYnHCU8ND3f8uOMJuYCHO0+YeLgDgomHe+O/i1Bj4a22xL3CW3gy905u4uFesnN847l/l//CQ741W3jIt2YLj9NzzwtPQeGdM/nWbOEh35otPORbs4VHW3MVj7bm/41nXRZtzVU85FuzhYd8a7bwkG/NFh4nPDU81Fvzp5Ll6ws1x8/59uLidtKkXrLhNKl3cqwA/KBJvcLDaVJv/GiaK3VAgNOkzhNwmtTxA06TOq3AaTrRBNLkzkLhMjfE4Jc/o+LKHW5MPNxpxcTDHT9MPLPlif3tzcp7NE6y77fvC+4+fZvzC9A2W0SAA5pt64cDmm2RhwOabTf/EFC4Dv6fS9oVADkBqgOabYOGA5pth4YDmm2L/hjQdgPkC4Bm26PhgMg3aRPQdFZqOCBVcH49+q918gdLVXDiWEo9gGPpxBLGUuqB5yyrOvmDpdQDOJZSD+BYSj2AYyn1wHOWVZ38ukg1DWSp3INjqdyDY6nc85xlVSd/sHRiCWOp3INjqdyDY6nc85xlVSd/sFTuwbFU7oGxlGoayFK55zHLuk7+YKncg2Op3INj6cQSxlK55ynLbwp0txZYKvc8Z+lqOvmDpXLPj34viyyVe3AslXtgLKWa/oBlVSd/sFTuwbFU7sGxVO7BsXRi+ZRlXYF+sFTuwbFU7sGxVO7BsVTuwbHkzj11q/0xFXeUMfFwpxMTD3fgMPFIL/3C8/ci+QOCE00gTemlkTSll0bSlF76hzTvnyy5aEovjaQpvfQHNH240Ux/0pReGkpTeukPaNb10gdN7nCDpqkshKTpRBNIU1kISVNZCElTWQhJk1whePOS+3Sn+cJDrhA08LCLty085ArBG56QC3jIFYIWHnKFoIXHSSH4whMLb7VJvF3HI/F2FQ+5eDu+8dy/y3/hId+aLTzkW3Mdzyrx9oWnIL9dJd6u45F4u4pH4u0qHic8NTzamqt4tDVX8ZBvzRYe8q3ZwkO+NRt4uG3UNh7ppb8e/Ug6e32h5vg5315c3E6a0ksjaUov/QFNQ4i8Si8Npcmtl0bT5LZRo2lyy6vRNLld12ia1GkFTXM6j3ZbmtxZyLDar9Mpt8F4uNOKiccJTw0PuWzb8tmv7LJtGxC5bNsGRC7btgHRy7avbz0UffarZNsWoNk2aDig2XZoOKDZtmiwz36dznUNB0S+SduAyDdpG5AqOL8e/fc6+VWqaSBLqQdgLKWaBrKUeuA5y7pOfpVqGshS6gEcSyeWMJZSDzxnWdfJr1JNA1kq9+BYKvfgWCr3PGdZ18mvUk0DWSr34Fgq9+BYKvc8Z1nXya9STQNZKvfgWCr34Fgq9zxmaejkV6mmgSyVe2AspZoGslTuecrymwLdrQWWyj3PWbqqTn6Vavpnv5dFlk4sYSyVe3AslXues6zr5FeppoEslXtwLJV7YCzJvdRIBfpKLrHGslTuwbFU7sGxdGIJY8mdewyr/UruujbxcKcTEw934DDxSC/9wgMQya/SS0NpSi+NpCm9NJKm9NI/pHn/ZMlF04kmkKb00h/Q9OFGMxVoSi+NpCm99Ac0Db30Sq6XRtNUFgLSJJdXo2kqCyFpKgshaSoLIWk6eclfNH2603zhIVcIWnjIFYIWHnKF4A1PyAU85ApBCw+5QrCOZ5N4+8ITlwIeibereCTeruIhF2/HN577d/kvPE54anjIt2YLj8TbJ56C/HaTeLuOR+LtKh6Jt2t4JN6u49HWXMWjrbmKh3xrtvA44anhId+aLTzamqt4pJf+evQj6ez1hZrj53x7cXE7aUovjaQpvfQHNA0h8ia9NJQmt14aTZPbRo2myS2vRtN0ogmkSZ1W4DSpww2cJncWMqz223TKbTAe7rRi4ZlOtw3GQy7btnz2G7ts2wZELtu2ATkBqgOil21f33oo+uw3ybYtQLNt0HBAs+3QcECzbdFgn/02nesaDoh8k7YBkW/SNiBVcH49+u918ptU00CWUg/gWEo9gGMp9cBzlnWd/CbVNJCl1AMwllJNA1lKPfCcZV0nv0k1DWSp3INj6cQSxlK55znLuk5+k2oayFK5B8dSuQfHUrnnOcu6Tn6TahrIUrkHx1K5B8dSuecxS0Mnv0k1DWSp3INjqdyDY6nc85TlNwW6WwsslXues3RVnfwm1fTPfi9LLKWaBrJU7sGxVO55zrKuk9+kmgaydGIJY6ncg2Op3POYpaFA38gl1liWyj04lso9MJbkcmwsS+7cY1jtN3LXtYmHO52YeJzw1PBIL/3CAxDJb9JLQ2lKL42kKb00kqb00j+kef9kyUlTemkoTemlP6Dpw41mKtCUXhpJU3rpD2gaeumNXC+NpqkshKSpLISkqSyEpKkshKSpLISjubOLt29ecp/uNF94yBWCFh5yhaCFh1wheMMTcgGPE54aHnKFoIVHCsETT1wKeCTeruKReLuKh1y8Hd947t/lP/Gwi7ctPORbs4VH4u0TT0F+u0u8XcfjhKeGR+LtKh5tzVU82pqreLQ1V/GQb80GHm7XtY2HfGu28GhrruKRXvrr0Y+ks9cXao6f8+3FxfNtMemloTSll/6ApiFE3qWXhtLk1kujaXLbqNE0/197Z7vjOpBd11cSyeLXwwSB7TjBAAOPMbED5O3DSUtstm+pNqW7ccWqs/71zKhv66zWiHu3WGfFllebaQZ3Xbtphm4rdpqhy42dZuwuJKz2Q3PKbTOe2G1F4oldPySe4LJt5bMfosu2NaDgsm0JKLpsWwMKL9veTz1kffYDsm0FqLUEbQeUAFQG1FqKNvvsh+Zc13ZAwZO0BhQ8SWtArOD8evTv6+QHVNNGlqgHfCxRD/hYoh44z7Kskx9QTRtZoh7wsUQ94GOJeuA8y7JOfkA1bWRJ77GxRDVtZEnvOc+yrJMfUE0bWdJ7fCwTLG0s6T3nWZZ18gOqaSNLeo+PJb3Hx5Lec5ql0MkPqKaNLOk9Ppb0Hh9Les9Zlj8U6KnLsEywPM0yFXXyA6rp916XWZb0Hh9Leo+PJb3nPMuyTn5ANe1jiWrayJLe42NJ7znNUijQh+ASay/LBEsbS3qPjyW9x8cydu8RVvshuOta4ondThSe4DZqiQe99B2PQSQ/oJe20kQv7aSZoGmkiV76TZrHO0t2muilnTTRS79Ac5wONJcMTfTSTpropV+gKfTSKbhe2k2TLuSkSRdy0qQLOWkmaBpp0oWcNIMrBA9e8nE50rzjCa4QVHiCKwQVnuAKwQOeaf0VT3TxtsITXCGo8KAQfOCZbxk8iLeLeBJ4SniCi7fnbzzHs/w7nuCpWeEJnpoVHsTbDzwZ+W1CvF3Eg3i7jAfxdhEPqbmIh9RcxJPAU8ITPDUrPMFTs8ITPDUrPKTmIh700l+PPiWd3Q/UbF+vhz8uPj4WQy9tpYle+gWaQoic0EtbacbWS7tpJmgaacaWV7tpxnZdu2mGbit2mqHLjZ1m7C4krPapOeW2GU/stiLxxK4fEk9w2bby2afosm0NKLhsWwMKLtvWgMLLtvdTD1mffUK2rQC1lqDdgJozaNsBtZaizT771Jzr2g4oeJLWgBKAyoBYwfn16N/XySdU00aWqAd8LFEP+FiiHjjPsqyTT6imjSxRD/hYoh7wsUQ9cJ5lWSefUE0bWdJ7fCzpPT6W9J7zLMs6+YRq2siS3mNjiWrayJLec55lWSefUE0bWdJ7fCwTLG0s6T2nWQqdfEI1bWRJ7/GxpPf4WNJ7zrL8oUBPvyp9E6rpF1imok4+oZp+73WZZUnv8bGk9/hYJlieZlnWySdU00aW9B4fS3qPjyW95zRLoUBPwSXWVpbBjddelvQeH0t6j49l7N4jrPYpuOta4ondTiSe2IVD4kEvfcdjEMkn9NJWmuilfTRH9NJWmuil36R5vLNkp4le2kkTvfQLNMfpQHPJ0EzQNNJEL/0CTaGXHoPrpd006UJOmnQhJ026kJFmcDW2myZdyEkzuELw4CUflyPNO57gCkGFJ4GnhCe4QvCAZ1ozeIIrBBWe4ApBhQeF4APPfMvgQbxdwoN4u4wnuHh7/sZzPMu/4wmemhWe4KlZ4Um899zxZOS3I+LtMh7E20U8iLeLeEjNRTyk5hKe2CZtjSd4alZ4gqdmhSd4alZ4EnhKeNBLfz36lHR2P1Czfb0e/rj4+FgMvbSVJnrpF2gKIfKIXtpKM7Ze2kwzuI3aTTO2vNpNM7br2k0zdFux00zQNNKM3YWE1X5sTrltxhO7rUg8seuHxBNctq189mN02bYGFFy2rQEFl21rQOFl2/uph6zPfkS2rQC1lqDtgFrL0HZAraVos89+bM51bQcUPElLQM1Zqe2AWMH59ejf18mPqKaNLFEP+FgmWNpYoh44z7Kskx9RTRtZoh7wsUQ94GOJeuA8y7JOfkQ1bWRJ7/GxpPf4WNJ7zrMs6+RHVNNGlvQeH0t6j48lvec8y7JOfkQ1bWRJ77GxRDVtZEnvOc1S6ORHVNNGlvQeH8sESxtLes9Zlj8U6KnLsKT3nGeZijr5EdX0e6/LLEt6j48lvcfGEtX0CyzLOvkR1bSRJb3Hx5Le42OZYHmWpVCgj8El1l6W9B4fS3qPjyW9x8cydu8RVvspuOta4ondTiSe2IVD4kEvfcdjEMlPtwRNI0300k6a6KWdNNFLv0nzeGfJThO9tJMmeukXaI7TgebyK0300laa6KVfoCn00lNwvbSbJl3ISTNB00iTLuSkSRdy0qQLOWkGVwgevOTjcqR5xxNcISjwRBdvKzzBFYIHPNOawRNcIajwBFcIKjwJheAdz5z5qA3xdhkP4u0inuDi7fkbz/Es/44neGpWeIKnZoEH8faOJyO/nRBvl/Eg3i7iQbxdxJPAU8JDai7iITUX8QRPzQpP8NSs8ARPzQJPbBu1xoNe+uvRp6Sz+4Ga7ev18MfFx8di6KWtNNFLv0BTCJEn9NJWmrH10m6asW3Ubpqx5dVumrFd126aoduKm2ZzHu3P0ozdhYTVfmpOuW3GE7utSDwJPCU8wWXbymc/RZdta0DBZdsaUHDZtgYUXra9n3rI+uwnZNsKUGsJ2g6otQxtB9Raijb77KfmXNd2QMGTtAYUPElrQKzg/Hr07+vkJ1TTRpaoB2wsUU0bWaIeOM+yrJOfUE0bWaIe8LFMsLSxRD1wnmVZJz+hmjaypPf4WNJ7fCzpPedZlnXyE6ppI0t6j48lvcfHkt5znmVZJz+hmjaypPf4WNJ7fCzpPadZCp38hGrayJLeY2OJatrIkt5zluUPBXrqMizpPedZpqJOfkI1/d7rMssywdLGkt7jY0nvOc+yrJOfUE0bWdJ7fCzpPS6Wc3AvtVOBPgeXWHtZ0nt8LOk9PpYJljaWsXuPsNrPwV3XEk/sdiLxxC4cEg966Tseg0h+Ri9tpYle2kkTvbSTJnrpN2ke7yzZaSZoGmmil36B5jgdaC4ZmuilnTTRS79AU+il5+B6aTdNupCRZnB5tZsmXchJky7kpEkXctJMeMnvNMflSPOOJ7hCUOEJrhBUeIIrBA94pjWDJ7hCUOEJrhAUeBBv73jmzEdtiLfLeBBvF/EEF2/P33iOZ/l3PAk8JTzBU7PCg3j7gScjv50Rb5fxIN4u4kG8XcKDeLuMh9RcxENqLuIJnpoVngSeEp7gqVnhITUX8aCX/nr0KensfqBm+3o9/HHx8bEYemkrTfTSL9AUQuQZvbSVZmy9tJtmbBu1m2ZsebWbZoKmkWbotmKnGbrc2GnG7kLCaj83p9w244ndVhSe5nTbZjzBZdvKZz9Hl21rQMFl2xpQAlAZUHjZ9n7qIeuzn5FtK0CtJWg7oNYytB1Qayna7LOfm3Nd2wEFT9IaUPAkrQGxgvPr0b+vk59RTRtZoh7wsUQ94GOJeuA8y7JOfkY1bWSJesDGEtW0kSXqgfMsyzr5GdW0kSW9x8cywdLGkt5znmVZJz+jmjaypPf4WNJ7fCzpPedZlnXyM6ppI0t6j48lvcfHkt5zmqXQyc+opo0s6T0+lvQeH0t6z1mWPxToKaP0RTX9AstU1MnPqKbfe11mWC6opo0s6T0+lvSe8yzLOvkF1bSRZYKljSW9x8eS3nOapVCgL8El1l6W9B4fS3qPjWVwObaXZezeI6z2S3DXtcQTu51IPAk8JTzope94DCL5Bb20lSZ6aSdN9NJOmuil36R5vLPkQRO9tJUmeukXaI7TgeaSoYle2kkTvfQLNIVeegmul3bTpAs5adKFnDTpQk6adCEnTbqQkWZ08fbBSz4uR5p3PMEVggpPcIWgwhNcIXjAM60ZPAk8JTzBFYIKDwrBB54581Eb4u0yHsTbRTzBxdvzN57jWf4HnujibYUneGpWeBBvP/Bk5LcL4u0yngSeEh7E20U8pOYiHlJzEQ+puYgneGoWeGK7rjWe4KlZ4SE1F/Ggl/569Cnp7H6gZvt6Pfxx8fGxGHppK0300i/QFELkBb20lWZsvbSbZmwbtZtmbHm1mWZw17WbZui2YqcZutzYacbuQsJqvzSn3Dbjid1WJJ7Y9UPiCS7bVj77JbpsWwMKLtuWgKLLtjWg8LLt/dRD1me/INtWgFpL0HZACUBlQK2laLPPfmnOdW0HFDxJa0DBk7QGxArOr0f/vk5+QTVtZIl6wMcS9YCPJeqB8yzLOvkF1bSRJeoBH0vUAz6WqAfOsyzr5BdU00aW9B4bS1TTRpb0nvMsyzr5BdW0kSW9x8cywdLGkt5znmVZJ7+gmjaypPf4WNJ7fCzpPadZCp38imrayJLe42NJ7/GxpPecZflDgZ66DMsEy9MsU1Env6Kafu91mWVJ7/GxpPf4WNJ7zrMs6+RXVNM+lqimjSzpPT6W9J7TLIUCfQ0usfayTLC0saT3+FjSe3wsY/ceYbVfg7uuJZ7Y7UThCW6jlnjQS9/xGETyK3ppK0300k6aCZpGmuil36R5vLNkp4le2kkTvfQLNMfpQHPJ0EQv7aSJXvoFmkIvvQbXS7tp0oWcNOlCTpp0ISfNBE0jTbqQk2ZwheDBSz4uR5p3PMEVggpPcIWgwhNcIXjAM62/4oku3lZ4gisEFR4Ugg88c+ajNsTbZTwJPCU8wcXb8zee41n+HU/w1KzwBE/NCg/i7QeejPx2RbxdxIN4u4wH8XYRD6m5iIfUXMSTwFPCEzw1KzzBU7PCEzw1Kzyk5iIe9NJfjz4lnd0P1Gxfr4c/Lj4+FkMvbaWJXvoFmkKIvKKXttKMrZd200zQNNKMLa9204ztunbTDN1W7DRDlxs7zdhdSFjt1+aU22Y8sduKxBO7fkg8wWXbyme/Rpdta0DBZdsaUHDZtgYUXra9n3rI+uxXZNsKUGsJ2g2oOYO2HVBrKdrss1+bc13bAQVP0hpQAlAZECs4vx79+zr5FdW0kSXqAR9L1AM+lqgHzrMs6+RXVNNGlqgHfCxRD/hYoh44z7Ksk19RTRtZ0nt8LOk9Ppb0nvMsyzr5FdW0kSW9x8Syv6GaNrKk95xnWdTJbyzpPT6W9B4fywRLG0t6z2mWZZ38xpLe42NJ7/GxpPf4WNJ7zrL8oUBP3a8sUU2/wDKVdPLb4PSet16XWZb0Hh9Leo+PZYLlaZZFnfw2OL3Hx5Le42NJ7/GxpPecZllWoG+D03tsLIMbr70s6T0+lvQeH8vYvadstf/HDwRPCU/sdiLxxC4cEg966Tue3xfJb88PvbSTJnppI0300laa6KXfpHm8s2SniV7aSRO99As0x+lAc8nQTNA00kQv/QLNsl56oxm73Lhp0oWcNOlCTpp0ISPN4GpsN026kJNmcIXgwUs+LkeadzzBFYIKTwJPCU9wheABz7Rm8ARXCCo8wRWCCg8KwQeeOfNRG+LtIh7E22U8wcXb8zee41n+HU/w1KzwBE/NCk/iveeO51f57fajEW8X8SDeLuJBvF3EQ2ou4iE1l/DENmlrPMFTs8ITPDUrPMFTs8KTwFPCg17669GnpLP7gZrt6/Xwx8XHx2Lopa000Uu/QLMsRN5oopd20oytlzbTDG6jdtOMLa9204ztunbTDN1W7DQTNI00Y3ehstV+e3Kxy43EE7utSDyx64fEE1y2LXz2/S26bFsDCi7b1oCCy7Y1oPCy7f3UQ85nvwFKACoDai1B2wG1lqHtgFpL0V6f/QaotRxtBxQ8SUtAzVmp7YBYwfn16N/WyW8sWcHpY4l6wMcywdLGEvXAeZZFnfzGEvWAjyXqAR9L1AM+lqgHzrMs6uT7DtW0kSW9x8eS3uNjSe85z7Ksk+9uCZY2lvQeH0t6j48lvec8y7JOvkM1bWRJ77GxRDVtZEnvOc1S6OQ7VNNGlvQeH8sESxtLes9Zlj8U6KnLsKT3nGeZijr5DtX0e6/LLEt6j48lvcfGEtX0CyzLOvkO1bSRJb3Hx5Le42OZYHmWpVCgd8El1l6W9B4fS3qPjyW9x8cydu8RVvsuuOta4ondTiSe2IVD4kEvfcdjEMl36KWtNNFLO2mil3bSRC/9Js3jnSU7TfTSTpropV+gOU4HmsuvNNFLW2mil36BptBLd8H10m6adCEnzQRNI026kJMmXchJky7kpBlcIXjwko/LkeYdT3CFoMATXbyt8ARXCB7wTGsGT3CFoMITXCGo8CQUgnc8c+ajNsTbZTyIt4t4gou35288x7P8O57gqVnhCZ6aBR7E2zuejPy2Q7xdxoN4u4gH8XYRTwJPCQ+puYiH1FzEEzw1KzzBU7PCEzw1CzyxbdQaD3rpr0efks7uB2q2r9fDHxcfH4uhl7bSRC/9Ak0hRO7QS1tpxtZLu2nGtlG7acaWV7tpxnZdu2mGbitums15tD9LM3YXElb7rjnlthlP7LYi8STwlPAEl20rn30XXbatAQWXbWtAwWXbGlB42fZ+6iHrs++QbStArSVoO6DWMrQdUGsp2uyz75pzXdsBBU/SGlDwJK0BsYLz69G/r5PvUE0bWaIecLHsUU0bWaIeOM+yrJPvUU0bWaIe8LFMsLSxRD1wnmVZJ9+jmjaypPf4WNJ7fCzpPedZlnXyPappI0t6j48lvcfHkt5znmVZJ9+jmjaypPf4WNJ7fCzpPadZCp18j2rayJLeY2OJatrIkt5zluUPBXrqMizpPedZpqJOvkc1/d7rMssywdLGkt7jY0nvOc+yrJPvUU0bWdJ7fCzpPTaWwb3UTgV6H1xi7WVJ7/GxpPf4WCZY2ljG7j3Cat8Hd11LPLHbicQTu3BIPOil73gMIvkevbSVJnppJ0300k6a6KXfpHm8s2SnmaBppIle+gWa43SguWRoopd20kQv/QJNoZfug+ul3TTpQkaaweXVbpp0ISdNupCTJl3ISTPhJb/THJcjzTue4ApBhSe4QlDhCa4QPOCZ1gye4ApBhSe4QlDgQby945kzH7Uh3i7jQbxdxBNcvD1/4zme5d/xJPCU8ARPzQoP4u0Hnoz8tke8XcaDeLuIB/F2CQ/i7TIeUnMRD6m5iCd4alZ4EnhKeIKnZoWH1FzEg17669GnpLP7gZrt6/Xwx8XHx2Lopa000Uu/QFMIkXv00laasfXSbpqxbdRumrHl1W6aCZpGmqHbip1m6HJjpxm7Cwmrfd+cctuMJ3ZbUXia022b8QSXbSuffR9dtq0BBZdta0AJQGVA4WXb+6mHrM++R7atALWWoO2AWsvQdkCtpWizz35oznVtBxQ8SWtAwZO0BsQKzq9H/75OfrglWNpYoh7wsUQ94GOJeuA8y7JOfkA1bWSJesDGEtW0kSXqgfMsyzr5AdW0kSW9x8cywdLGkt5znmVZJz+gmjaypPf4WNJ7fCzpPedZlnXyA6ppI0t6j48lvcfHkt5zmqXQyQ+opo0s6T0+lvQeH0t6z1mWPxToqcuwpPecZ5mKOvkB1fR7r8scS1TTRpb0Hh9Les95lmWd/IBq2sgywdLGkt7jY0nvOc1SKNCH4BJrL0t6j48lvcfGMrgc28sydu8RVvshuOta4ondTiSeBJ4SHvTSdzwGkfyAXtpKE720kyZ6aSdN9NJv0jzeWfKgiV7aShO99As0x+lAc8nQRC/tpIle+gWaQi89BNdLu2nShZw06UJOmnQhJ026kJMmXchIM7p4++AlH5cjzTue4ApBhSe4QlDhCa4QPOCZ1gyeBJ4SnuAKQYUHheADz5z5qA3xdhkP4u0inuDi7fkbz/Es/wNPdPG2whM8NSs8iLcfeDLy2wHxdhlPAk8JD+LtIh5ScxEPqbmIh9RcxBM8NQs8sV3XGk/w1KzwkJqLeNBLfz36lHR2P1Czfb0e/rj4+FgMvbSVJnrpF2gKIfKAXtpKM7Ze2k0zto3aTTO2vNpMM7jr2k0zdFux0wxdbuw0Y3chYbUfmlNum/HEbisST+z6IfEEl20rn/0QXbatAQWXbStAKbpsWwMKL9veTz1kffYJ2bYC1FqCtgNKACoDai1Fm332qTnXtR1Q8CStAQVP0hoQKzi/Hv37OvmEatrIEvWAjyXqAR9L1APnWZZ18gnVtJEl6gEfS9QDPpaoB86zLOvkE6ppI0t6j40lqmkjS3rPeZZlnXxCNW1kSe/xsUywtLGk95xnWdbJJ1TTRpb0Hh9Leo+PJb3nNEuhk0+opo0s6T0+lvQeH0t6z1mWPxToqcuwTLA8zTIVdfIJ1fR7r8ssS3qPjyW9x8eS3nOeZVknn1BN+1iimjaypPf4WNJ7TrMUCvQUXGLtZZlgaWNJ7/GxpPf4WMbuPcJqn4K7riWe2O1E4Qluo5Z40Evf8RhE8gm9tJUmemknzQRNI0300m/SPN5ZstNEL+2kiV76BZrjdKC5ZGiil3bSRC/9Ak2hl07B9dJumnQhJ026kJMmXchJM0HTSJMu5KQZXCF48JKPy5HmHU9whaDCE1whqPAEVwge8Ezrr3iii7cVnuAKQYUHheADz5z5qA3xdhlPAk8JT3Dx9vyN53iWf8cTPDUrPMFTs8KDePuBJyO/TYi3i3gQb5fxIN4u4iE1F/GQmot4EnhKeIKnZoUneGpWeIKnZoWH1FzEg17669GnpLP7gZrt6/Xwx8XHx2Lopa000Uu/QFMIkRN6aSvN2HppN80ETSPN2PJqN83Yrms3zdBtxU4zdLmx04zdhYTVfmxOuW3GE7utSDyx64fEE1y2rXz24y0BqAwouGxbAwou29aAwsu291MPWZ/9iGxbAWotQbsBNWfQtgNqLUWbffZjc65rO6DgSVoDSgAqA2IF59ejf18nP6KaNrJEPeBjiXrAxxL1wHmWZZ38iGrayBL1gI8l6gEfS9QD51mWdfIjqmkjS3qPjyW9x8eS3nOeZVknP6KaNrKk99hYopo2sqT3nGdZ1smPqKaNLOk9PpYJljaW9J7TLIVOfkQ1bWRJ7/GxpPf4WNJ7zrL8oUBPvyp9R1TTL7BMRZ38iGr6vddlliW9x8eS3uNjmWB5mmVZJz+imjaypPf4WNJ7fCzpPadZCgX6GFxibWUZ3HjtZUnv8bGk9/hYxu49wmo/BnddSzyx24nEE7twSDzope94DCL5Eb20lSZ6aSNN9NJWmuil36R5vLNkp4le2kkTvfQLNMfpQHPJ0EzQNNJEL/0CTaGXHoPrpd006UJOmnQhJ026kJFmcDW2myZdyEkzuELw4CUflyPNO57gCkGFJ4GnhCe4QvCAZ1ozeIIrBBWe4ApBhQeF4APPnPmoDfF2EQ/i7TKe4OLt+RvP8Sz/jid4alZ4gqdmhSfx3nPHk5Hfjoi3y3gQbxfxIN4u4iE1F/GQmkt4Ypu0NZ7gqVnhCZ6aFZ7gqVnhSeAp4UEv/fXoU9LZ/UDN9vV6+OPi42Mx9NJWmuilX6AphMgjemkrzdh6aS/NKbiN2k0ztrzaTTO269pNM3RbsdNM0DTSjN2FhNV+ak65bcYTu61IPLHrh8QTXLatfPZTdNm2BhRctq0BBZdta0DhZdv7qYesz35Ctq0AtZag7YBay9B2QK2laLPPfmrOdW0HFDxJS0DNWantgFjB+fXo39fJT6imjSxRD/hYJljaWKIeOM+yrJOfUE0bWaIe8LFEPeBjiXrgPMuyTn5CNW1kSe/xsaT3+FjSe86zLOvkJ1TTRpb0Hh9Leo+PJb3nPMuyTn5CNW1kSe+xsUQ1bWRJ7znNUujkJ1TTRpb0Hh/LBEsbS3rPWZY/FOipy7Ck95xnmYo6+QnV9HuvyyxLeo+PJb3HxhLV9Assyzr5CdW0kSW9x8eS3uNjmWB5lqVQoE/BJdZelvQeH0t6j48lvcfHMnbvEVb7KbjrWuKJ3U4kntiFQ+JBL33HYxDJT+ilrTTRSztpopd20kQv/SbN450lO0300k6a6KVfoDlOB5rLrzTRS1tpopd+gabQS0/B9dJumnQhJ80ETSNNupCTJl3ISZMu5KQZXCF48JKPy5HmHU9whaDAE128rfAEVwge8ExrBk9whaDCE1whqPAkFIJ3PHPmozbE22U8iLeLeIKLt+dvPMez/Due4KlZ4QmemgUexNs7noz8dkK8XcaDeLuIB/F2EU8CTwkPqbmIh9RcxBM8NSs8wVOzwhM8NZfxzLFt1BoPeumvR5+Szu4Harav18MfF/sHTfTSTpropV+gKYTI8y1B00gztl7aTTO2jdpNM7a82k0ztuvaTTN0W3HTbM6j/VmasbuQsNrPzSm3zXhitxWJJ4GnhCe4bFv57Ofosm0NKLhsWwMKLtvWgMLLtvdTD1mf/YxsWwFqLUHbAbWWoe2AWkvRZp/93Jzr2g4oeJLWgIInaQ2IFZxfj/59nfyMatrIEvWAjSWqaSNL1APnWZZ18jOqaSNL1AM+lgmWNpaoB86zLOvkZ1TTRpb0Hh9Leo+PJb3nPMuyTn5GNW1kSe/xsaT3+FjSe86zLOvkZ1TTRpb0Hh9Leo+PJb3nNEuhk59RTRtZ0ntsLFFNG1nSe86y/KFAT12GJb3nPMtU1MnPqKbfe11mWSZY2ljSe3ws6T3nWZZ18jOqaSNLeo+PJb3HxjK4l9qpQJ+DS6y9LOk9Ppb0Hh/LBEsby9i9R1jt5+Cua4kndjuReGIXDokHvfQdj0EkP6OXttJEL+2kiV7aSRO99Js0j3eW7DQTNI000Uu/QHOcDjSXDE300k6a6KVfoCn00nNwvbSbJl3ISDO4vNpNky7kpEkXctKkCzlpJrzkd5rjcqR5xxNcIajwBFcIKjzBFYIHPNOawRNcIajwBFcICjyIt3c8c+ajNsTbZTyIt4t4gou35288x7P8O54EnhKe4KlZ4UG8/cCTk98i3i7jQbxdxIN4u4BnQbxdxkNqLuIhNRfxBE/NCk8CTwlP8NSs8JCai3jQS389+pR0dj9Qs329Hv642D9oopd20kQv/QJNIURe0EtbacbWS7tpxrZRu2nGlle7aSZoGmmGbit2mqHLjZ1m7C4krPZLc8ptM57YbUXhaU63bcYTXLatfPZLdNm2BhRctq0BJQCVAYWXbe+nHrI++wXZtgLUWoK2A2otQ9sBtZaizT77pTnXtR1Q8CStAQVP0hoQKzi/Hv37OvkF1bSRJeoBH0vUAz6WqAfOsyzr5BdU00aWqAdsLFFNG1miHjjPsqyTX1BNG1nSe3wsEyxtLOk951mWdfILqmkjS3qPjyW9x8eS3nOeZVknv6CaNrKk9/hY0nt8LOk9p1kKnfyCatrIkt7jY0nv8bGk95xl+UOBnroMS3rPeZapqJNfUE2/97rMsUQ1bWRJ7/GxpPecZ1nWyS+opo0sEyxtLOk9Ppb0ntMshQJ9CS6x9rKk9/hY0ntsLIPLsb0sY/ceYbVfgruuJZ7Y7UTiSeAp4UEvfcdjEMkv6KWtNNFLO2mil3bSRC/9Js3jnSUPmuilrTTRS79Ac5wONJcMTfTSTpropV+gKfTSS3C9tJsmXchJky7kpEkXctKkCzlp0oWMNKOLtw9e8nE50rzjCa4QVHiCKwQVnuAKwQOeac3gSeAp4QmuEFR4UAg+8MyZj9oQb5fxIN4u4gku3p6/8RzP8t/xrNHF2wpP8NSs8CDefuDJyG9XxNtlPAk8JTyIt4t4SM1FPKTmIh5ScxFP8NQs8MR2XWs8wVOzwkNqLuJBL/316FPS2f1Azfb1evjjYv+gmaBppIle+gWaQoi8ope20oytl3bTjG2jdtOMLa820wzuunbTDN1W7DRDlxs7zdhdSFjt1+aU22Y8sduKxBO7fkg8wWXbyme/Rpdta0DBZdsSUHTZtgYUXra9n3rI+uxXZNsKUGsJ2g4oAagMqLUUbfbZr825ru2AgidpDSh4ktaAWMH59ejf18mvqKaNLFEP+FiiHvCxRD1wnmVZJ7+imjayRD3gY4l6wMcS9cB5lmWd/Ipq2siS3mNjiWrayJLec55lWSe/opo2sqT3+FgmWNpY0nvOsyzr5FdU00aW9B4fS3qPjyW95zRLoZNfUU0bWdJ7fCzpPT6W9J6zLH8o0FOXYZlgeZplKurkV1TT770usyzpPT6W9B4fS3rPeZZlnfyKatrHEtW0kSW9x8eS3nOapVCgr8El1l6WCZY2lvQeH0t6j49l7N4jrPZrcNe1xBO7nSg8wW3UEg966Tseg0h+RS9tpYle2kkzQdNIE730mzSPd5bsNNFLO2mil36B5jgdaC4ZmuilnTTRS79AU+il1+B6aTdNupCTJl3ISZMu5KSZoGmkSRdy0gyuEDx4ycflSPOOJ7hCUOEJrhBUeIIrBA94pvW/4hlu0cXbCk9whaDCg0LwgWe+ZfAg3i7iSeAp4Qku3p6/8RzP8u94gqdmhSd4alZ4EG8/8Pwqv93wIN4u4UG8XcaDeLuIh9RcxENqLuJJ4CnhCZ6aFZ7gqVnhCZ6aFR5ScxEPeumvR5+Szu4Harav18MfF/s7TfTSVpropV+gWRYibzTRSztpxtZLu2kmaBppxpZXu2nGdl27aYZuK3aaocuNnWbsLlS22g+35pTbZjyx24rEE7t+SDzBZdvCZ/+PVYIAKgMKLtvWgILLtjWg8LLt/dRDzme/AQov21aAWkvQbkDNGbTtgFpL0V6f/QaotRxtBxQ8SWtACUBlQKzg/Hr0b+vkN5as4PSxRD3gY4l6wMcS9cB5lkWd/HBDNW1kiXrAxxL1gI8l6oHzLIs6+Y1lgqWNJb3Hx5Le42NJ7znPsqiT31jSe3ws6T02lqimjSzpPedZFnXy2/fTe3ws6T0+lgmWNpb0ntMsyzr57fvpPT6W9B4fS3qPjyW95yzLHwr01P3KEtX0CyxTSSe/saT3vPW6zLKk9/hY0nt8LBMsT7Ms6uQ3lvQeH0t6j48lvcfHkt5zmmVZgb6xpPfYWAY3XntZ0nt8LOk9Ppaxe0/Zar/hSeAp4YndTiSe2IVD4kEvfcfz+yL5jSZ6aSdN9NJGmuilrTTRS79J83hnyU4TvbSTJnrpF2iO04HmkqGZoGmkiV76BZplvfRGM3a5cdOkCzlp0oWcNOlCPppdcDW2myZdyEkzuELw4CUflyPNO57gCkGFJ4GnhCe4QvCAZ1ozeIIrBBWe4ApBhQeF4APPfMvgQbxdwoN4u4wnuHh7/sZzPMu/4wmemhWe4KlZ4Um899zxZOS3HeLtMh7E20U8iLeLeEjNRTyk5hKe2CZtjSd4alZ4gqdmhSd4alZ4EnhKeNBLfz36lHR2P1Czfb0e/rj4+FgMvbSVJnrpF2gKIXKHXtpKM7Ze2kwzuI3aTTO2vNpNM7br2k0zdFux00zQNNKM3YWE1b5rTrltxhO7rUg8seuHxBNctq189l102bYGFFy2rQEFl21rQOFl2/uph6zPvkO2rQC1lqDtgFrL0HZAraVos8++a851bQcUPElLQM1Zqe2AWMH59ejf18l3qKaNLFEP+FgmWNpYoh44z7Ksk+9QTRtZoh7wsUQ94GOJeuA8y7JOvkM1bWRJ7/GxpPf4WNJ7zrMs6+Q7VNNGlvQeH0t6j48lvec8y7JOvkM1bWRJ77GxRDVtZEnvOc1S6OQ7VNNGlvQeH8sESxtLes9Zlj8U6KnLsKT3nGeZijr5DtX0e6/LLEt6j48lvcfGEtX0CyzLOvkO1bSRJb3Hx5Le42OZYHmWpVCgd8El1l6W9B4fS3qPjyW9x8cydu8RVvsuuOta4ondTiSe2IVD4kEvfcdjEMl36KWtNNFLO2mil3bSRC/9Js3jnSU7TfTSTpropV+gOU4HmssvNHv00laa6KVfoCn00n1wvbSbJl3ISTNB00iTLuSkSRdy0qQLOWkGVwgevOTjcqR5xxNcISjwRBdvKzzBFYIHPNOawRNcIajwBFcIKjwJheAdz3zL4EG8XcSDeLuIJ7h4e/7GczzLv+MJnpoVnuCpWeBBvL3jychve8TbZTyIt4t4EG8X8STwlPCQmot4SM1FPMFTs8ITPDUrPMFTs8AT20at8aCX/nr0KensfqBm+3o9/HHx8bEYemkrTfTSL9AUQuQevbSVZmy9tJtmbBu1m2ZsebWbZmzXtZtm6LbiptmcR/uzNGN3IWG175tTbpvxxG4rEk8CTwlPcNm28tn30WXbGlBw2bYGFFy2rQGFl23vpx6yPvse2bYC1FqCtgNqLUPbAbWWos0++74517UdUPAkrQEFT9IaECs4vx79+zr5HtW0kSXqARtLVNNGlqgHzrMs6+R7VNNGlqgHfCwTLG0sUQ+cZ1nWyfeopo0s6T0+lvQeH0t6z3mWZZ18j2rayJLe42NJ7/GxpPecZ1nWyfeopo0s6T0+lvQeH0t6z2mWQiffo5o2sqT32FiimjaypPecZflDgZ66DEt6z3mWqaiT71FNv/e6zLJMsLSxpPf4WNJ7zrMs6+R7VNNGlvQeH0t6j41lcC+1U4HeB5dYe1nSe3ws6T0+lgmWNpaxe4+w2vfBXdcST+x2IvHELhwSD3rpOx6DSH5AL22liV7aSRO9tJMmeuk3aR7vLNlpJmgaaaKXfoHmOB1oLhma6KWdNNFLv0BT6KWH4HppN026kJFmcHm1myZdyEmTLuSkSRdy0kx4ye80x+VI844nuEJQ4QmuEFR4gisED3imNYMnuEJQ4QmuEBR4EG/veOZbBg/i7SIexNtFPMHF2/M3nuNZ/h1PAk8JT/DUrPAg3n7gychvB8TbZTyIt4t4EG+X8CDeLuMhNRfxkJqLeIKnZoUngaeEJ3hqVnhIzUU86KW/Hn1KOrsfqNm+Xg9/XHx8LIZe2koTvfQLNIUQeUAvbaUZWy/tphnbRu2mGVte7aaZoGmkGbqt2GmGLjd2mrG7kLDaD80pt814YrcVhac53bYZT3DZtvLZD9Fl2xpQcNm2BpQAVAYUXra9n3rI+uwHZNsKUGsJ2g6otQxtB9Raijb77IfmXNd2QMGTtAYUPElrQKzg/Hr07+vkB1TTRpaoB3wsUQ/4WKIeOM+yrJMfUE0bWaIesLFENW1kiXrgPMuyTn5ANW1kSe/xsUywtLGk95xnWdbJD6imjSzpPT6W9B4fS3rPeZZlnfyAatrIkt7jY0nv8bGk95xmKXTyA6ppI0t6j48lvcfHkt5zluUPBXrqMizpPedZpqJOfkA1/d7rMscS1bSRJb3Hx5Lec55lWSc/oJo2skywtLGk9/hY0ntOsxQK9CG4xNrLkt7jY0nvcbFMweXYXpaxe4+w2qfgrmuJJ3Y7kXgSeEp40Evf8RhE8gm9tJUmemknTfTSTpropd+kebyz5EETvbSVJnrpF2iO04HmkqGJXtpJE730CzSFXjoF10u7adKFnDTpQk6adCEnTbqQkyZdyEgzunj74CUflyPNO57gCkGFJ7hCUOEJrhA84JnWDJ4EnhKe4ApBhQeF4APPnPmoDfF2GQ/i7SKe4OLt+RvP8Sz/A0908bbCEzw1KzyItx94MvLbhHi7jCeBp4QH8XYRD6m5iIfUXMRDai7iCZ6aBZ7YrmuNJ3hqVnhIzUU86KW/Hn1KOrsfqNm+Xg9/XHx8LIZe2koTvfQLNIUQOaGXttKMrZd204xto3bTjC2vNtMM7rp20wzdVuw0Q5cbO83YXUhY7VNzym0znthtReKJXT8knuCybeWzT9Fl2xpQcNm2BBRdtq0BhZdt76cesj77hGxbAWotQdsBJQCVAbWWos0++9Sc69oOKHiS1oCCJ2kNyJOk19uwT7Gm268/x6Rh1j+n+0M/p/9DP8eRMrp13bfObV+vyfcC/sc/t+4j3NIkJl76fn+9L/1RLLJPnMJNPP6h19L0h37O/Id+zvKHfs4a7RVpkUfWNXEXbuI/dAUzSQr1z0l/6Of8oXdri/itrlfkHG7iJdzEf6hvrH+ob6x/qG+sf+jdeg3XNywCpLomHsNN/Ieaz/qHms/6h5rP+mfercdbtL4x3qL1jdFiDalrYkvz6W7d41jT9vXYZ35O+kM/x9J8uq7b3w06eTPR9hfs7vtWxtvwYz9f5pe4TOv++ljm2ygePq/LsD/81vfq4dPQPR4+T8d3sv7BaIKRZDTDSDJaYCQZrTBK4zejcfyVkUfk0DijDkaSUQ8jyWiA0dR/M5oz79keQULjjMjZmhE5e5oP70cZJdbYkbM1I3K2ZkTOlox6cvbUrwdGmXzUk7M1o/Zy9nIbDoyWVTGa9+OD29fHP8PujNrL2X5GCUaSUXs528+ovZz9MqPx+++Q89RlGLWXs/2M2svZfkbt5Ww7o6G9nP0yo/1s8/b1nHnPHtrL2X5G5GzNiJytGSUYLYf37GXNMCJna0bkbM2InK0ZkbPn4ftvtfOay5DkbMkoNZizu9ttf3g3zIrRcvjbyDKlDKMGc7adUYM5286owZzd7WrS7Wv9frR235/3r0PmcxGPbaBxRg3mbDuj+nL2nJmiviScm6K+rJqbor40mZlirCHvzek75M5TbooaEpmeoobMpKeoIdXoKVINUwzHKZbMFDUkAz1FDdfu5fY9xTJkmvVYw7VbT1HDtVtPUcO1W04xVXHtXo9T9Jkpqrh2yylquHYv0/g9Re6vf1MN1249RQ3Xbj1FDdduPUUV1+4p7VOsQ+Yu76mKa7ecooZr9zpN31OsuSlquHbLKeYart16ihqu3XqKGq7d67r/QXS9DZnGOtdw7dZT1HDt1lPUcO3WU9Rw7V6/E8g2ReavB3MN1249BecV5V6QmfOKktHCeUXNiPOKmhF7QeRekIW9IJpRgpFkxF4QzYi9IHJ3ysJeEM2InK0ZkbPlXpCVnK0ZkbM1I3K2ZkTOlvtlLLaD1hlxXlHuBVk5r6gZcV5RM+K8ombEeUW1F2S6sRdEM2IviGbEXhDNiL0gai/IdEswkozI2ZoROVszImervSBTgz4ZPyNytmTUoE/Gz4icrfbLTA36ZPyMWtwL4t2dMjXok/EzanEviJtRgznbvDtlatAn42fUYM62M2phY8pUofElN0V9WTU3RX1pMjdFCxtTpirMI3qKKjamyClqSDV6ihpyh9peM1VhwNBTtLAxZarCIqGnqOHaraeoYmOKnKKKa7fYXjNVYTPQU7SwMWWqwgigp6hjY4qaooptZ3KKKq7dYnvNVMVmej1FCxtTpiq2u+spqtiYIqeo4dqtp2hhY8pUxZZxPUUVG1PkFFVsO5NT1LHtrLy9Zqpiy7iegvOKai/IVMUO808z4ryiZpRgJBmxF0TtBZmq2B3/aUbsBdGM2AuiGbEXRO1OmarY2f9pRuRszYicrfaCTFXYDD7NKMFIMiJna0bkbLVfZqrCIvFpRpxXVHtBpioMGB9mVIVf49OMOK+oGXFeUe4FqcI88mlGCUaSEXtBNCP2gsi9IFUYXz7NiJytGZGzJaMGfTL2vSAN+mT8jMjZmhE5WzNKMFL7ZRr0yfgZtbgXxLw7pUGfjJ9Ri3tB3IwazNnu3SkN+mT8jBrM2XZGTWxMqdD4kpsiNTFFfWkyN0UTG1OqMI/oKarYmCKnqCHVqCnmKvwaanvNXIUBQ0/RwsaUuQqLhJ6ihmu3nqKKjSlyiiqu3WJ7zVyFzUBP0cLGlLkKI4Ccooqd/XqKKradySmquHaL7TVzFZvp9RQ1XLvVxpS5iu3ueooqNqbIKarYmCKnaGFjylzFlnE5RRVbxvUUVWw7k1PUse2svL1mrmLLuJ6ihmv3Z/eCzFXsMP80I84rakacV9SM2Aui9oLMVeyO/zCjKjbTf5oRe0E0I/aCqN0pcxU7+z/NKMFIMiJnq70gcxU2g08zImdrRuRszYicrfbLzFVYJD7NiPOKai/IXIUB49OMOK+oGSUYSUacV1R7QeYqzCOfZsReEM2IvSCaEXtB1F6QuQrjy6cZkbM1I3K2ZkTOVntB5gZ9Mn5G5GzNiJytGZGz1X6ZuUGfjJ9Ri3tBvLtT5gZ9Mn5GLe4FcTNqMGebd6fMDfpk/IwSjCSjFjamzBUaX3JT1JdVc1PUlyZzUzSxMaUK84ieooqNKXKKGlKNnqKG3CG311RhwNBTNLExpQqLhJ6ihmu3nqKKjSlyiiqu3Wp7TRU2Az1FExtTqjAC6Cnq2Jiipqjh2q2nqOLarbbXVLGZXk/RxMaUKra76ymq2JiipqhiQ7qeoomNKVVsGddTVLExRU5Rw7VbT1HHtjOxvaaKLeN6Cs4ryr0gVeww/zQjzisqRksV+9c/zYi9IGovyFLF7vhPM2IviGaUYCQZsRdE7U5ZqtjZ/2lG5GzNiJyt9oIsVdgMPsyoClfCpxmRszUjcrbaL7NUYZH4NKPE+SCxF2SpwoDxaUacV9SMOK+oGXFeUe0FWaowj3yYURVek08zYi+IZsReELUXZKnC+PJpRglGkhE5WzMiZ6u9IEuDPhk/I3K2ZkTOlowa9Mm498ssDfpk/Ixa3Avi3Z2yNOiT8TNKMJKMGszZ5t0pS4M+GT+jBnO2nVELG1OWCo0vmSkqdLLkpqgvTeamaGFjylKFeURPkZqYooZUo6eoIXeo7TVLFQYMPUULG1OWKiwScooqPA96iio2psgpqrh2i+01SxU2Az1FDddutTFlqcIIoKeoY2OKmqKKbWdyiiqu3WJ7zVLFZno5RRW749XGlKWK7e56iio2psgpqtiYIqeo4dqtNqYsVWwZ11NUsTFFTlHFtjM5RR3bzsrba5YqtozLKVxbxpfbPkWfknj4rVsfT6u/9cdjAnNu6H4fYuiPZ+WmxwxdAzP0DcwwNDBD+sQM/drtMwzdWp6h6/p1vwOgG45vAvNjirGJKabaphiXzBRzE1NYrtm37jbvT6sbbuWHd933s+oPHzIO+Ylvx/eBWTyTdej2Z7IOs3gmw3axfXzguX3djceH3wGt9b/5LQ2EgaWBMLA0EAaWoYVLkGth+YenqC4O5C5BSxNxwLOwvOELqWsX+kff/BoIA2sDYWBtIAysfQuXoLWJOODagf7ZS9DaRBzw7EBv+EK6zg28+TUQBtb6w8B6qz8MrLeugUvQemshDqy36uJA5hK03lqIA6tnzXS7F9L1NjXw5ld/GFhv9YeB9dZAGOhuLVyCuibiQFddHMhdgrom4oBn127DF9JubODNr4Ew0DUQBroGwkC3tnAJ6puIA311cSB3CeqbiAOehaMNX0hd20Y/+ebXNxAG+gbCQN9AGOiXJi5BTcSBobo4kLsEDU3EAc/WxYYvpEP9RxZW10rEj87QQBgYGggDQ3WHFbKXoCbiwFBdHMhdglITccCzlK/hC2mq/8jCmhoIA65dfx+doYEwkKo7rJC7BKUm4kCqLg5kL0FNxAHPnr+GL6Rj/UcW1rGBMDA2EAZcywM/OkMLqwzWsYk4MLawymAdm4gDntWBDV9IpwaOLEwNhIGpgTAwNRAGXNsIP3sJmpqIA1MLqwzWqYk4MLHZSFxIGziy0MCaw7WBNYdrA2sO17mFVQZrE4sO1/oWHeYuQU0sOlxnNhuVL6RzA0cWGlhzuDaw5nBtYM3hujSxyqCJRYdrfYsOc5egJhYdrgubjcoX0qWBIwsNrDlcG1hzuDaw5nBdm1hl0MSiw7W+RYe5S1ATiw7Xlc1G5Qvp2sCRhQbWHK4NrDlc619zmG63BlYZbFM0EAe2KRpYZbBN0UAc2KZIXEgLF9INUPVHFrYZqg8D2wzVh4FthurDwDZDA6sM0q2FRYfbFA2sMtimaCIOdGw2Kl9IPTsUP/vmV/+aw22GBsJA/WsOtxkaWGWwTdFEHKhv0WHuEtTCosNtCjYblS+kffVHFrYZGggD9a853GZoIAz0Dawy2KZoIg7Ut+gwdwlqYdHhNgWbjcoX0qH6IwvbDA2EgfrXHG4zNBAGhgZWGWxTNBEH6lt0mL0ENREHEpuNyhfSVP2RhW2GBsJA/WsOtxkaCAOpgVUG2xRNxIH6Fh1mL0FNxIHEZqPyhXSs/sjCNkMDYaD+NYfbDA2Egc+sOXRfglpYdLhN0cAqg22KJuLAyGYjcSFt4MhC/WsOtxkaCAP1rzncZmhglcE2RRNxoL5Fh7lLUAuLDrcp2GxUvpBODRxZqH/NYbrVv+Zwm6GBMDA3sMpgm6KJOFDfosPcJaiFRYfbFGw2Kl9I5waOLNS/5nCboYEwUP+aw22GJlYZtLDocJuiiVUGLSw63KZgs1H5QurZodgN/T5FNyxJPa3bsOxPa3vvEg+Xb35zAzMsDcyw1j+Dac3hqzN0t2cz3J9W94mn1fXfaLu0iLe9ddmfzPZ1f3jz7nMPn9dleDx8ufW9evjUr4+Hz9MyHh9+Z9TDSDIammO03IYDo0UinYdxZzSvXYZRgpFkNNbGaMhNMTUxxdzEFEsTU6wNTNHdbjVMMY7fUyxTZooqMpOcoopUI6eoInekfp9i7ZfyRXId0+MfX6fjM58fI6d4I1eRCl4aedqf+joNU2bkKiKEd+Qq8oZ35CrCiXfkKpLM229fw/zryF0Vsee133Lq9pHnMTNyFRnJO3IVgco7cnvpS46cmn77mjPv2F2D6Wv/9HCd+5QZucH0pUZuMH2pkRtMX2rkptPX3Gfesfv20pcc+TPpa+n2kftO3HGg73fp+r6JKYYmpki1TZG5a6frxyammJqYor28Id+WHXljeyLL4UmtSf0mzt809o9/7vE5f3+7HW8ezcJf+vnx6W+/DLdBPXwc95vwlnEZ1O9K3WPW9fXfF9QNtwZm6BqYoW9gho9EDXWPWWdaHNry/VPdUN19Lx9gVN1dNX/8/qluqO6enQ8wauGOoG5o4o6gVMUfZ+QU1d1FnZ2iuvucs1NU8ZmUuq/JtF/101NUkWrkFO19GKRuuEpN/3EmP3K8W3FSex8GqZHHBm/FUSM3eCuOGrm9W3HUPWZjvFtxTGtnqxq5wVtx1MgN3oqjRm47feXuMRvj3YozNpi+xMhTg+lLjdxg+lIjN52+sp/sT00fQ8uPnFq4r2mq7o6g7BTV3RGUnWKubYrcfU3T0sQUawtTzB/JG32avqeYftxEdX9a3TWfVn/Np+W4tnLX3DfPj1y4vXc6zWMDM9S/Ia+b69+Q182f2ZCn7pqbq7u/48/fEbZUd/fIBxi1t+HPfkfY0t6GPz+j6jb85e4OMm0f/vQULWzJ65YWtuR1Swtb8rqlis9f1J1aSxWZSU2xNrElr47NwtZbyOpYFOwducHbTsTNRXWs8fWOHG//Xh0rfL0jt33bSe6uuTqWA1tvLqpjk7Bz5L6OtcPekcPt3+vrWGjsvGuub3D7sbi5qL+leCOH27/Xt7j9WI0cbh9O3+D2YzlydffVZO7U6j+00Ng9RQtb8vquui15mTu1+q66LXnZKVITU3wkb6j7wPrP7OTVT2u+5tNi19z+cMNdc31X/665vq9/11zf179rru/r3zXX95fcNdd/aE9tTXeE9T275jQjds2pO8L6Ojb4fphRC7vm+r6FXXP90MKuuX5oYddcP7Swa64fWtg119exn1dO0cKuub6OHbfOW8j6OlbWekcOt2uur2NdrXXkOnbbekcOt2uur2NrrvOuub6OFbvWm4vq2MfrHTncrrm+wU2/cuRwu+b6Fjf9ipuLWtz0K0ZucdOvGjncrrm+7U2/2VvIGtz0K0dOLdypNbawa64fW9g1148t7JrrxxZ2zfVjC7vm+umSu+b66ZK75vrpkrvm+oldc/vDHXfNfWZJrPdOp6n+XXP9VP+uuX6qf9dcP11y11w/sWtO3hE2s2tOM2LXnLwjbGbXnGbUwq65/jOLdu1TtLBrrp9b2DXXzy3smuvnFnbN9XXs51VT1LFBV04RbtdcX8fKWu/I4XbN9XWsq/WOHG7XXF/HIlzvyOF2zfV1rNi13lxUxz5e68h1LO/1jhxv11zjm35zd821uOlX3FzU4qZfNXK8XXMtbvpVI8fbNdfgpl85cgu75oZbC7vmhlsLu+aGWwu75oZbC7vmhltqYopL7pobbpfcNTfcLrlrbrixa25/uOGuucG0JDbNaf81p8xtP4Npjav+OU8ufmm/t2r7OmVAPNltun06sL+Apy71mW8c3v3G9O43ju9+4/TkG2/T9zd2Q+Yb828GU9r/j9FPY5f5v+uT1ZAnvnF98xufLB488Y3dk2+c91fOlJbMK+fJir15XHaq8/b/w8w3Du9+Y3r3G8d3v3F68o3TTnUe55T5xvndn7i8+43rm9/4ZGfTiW/s3oQzvPvKGd595QzvvnKGd185w7uvnOHdV87w7itnePeVk9595aR3XzlPNkHM87S/Wc1Lt6oYtMWpPQYNPz87e6u0PdnW8PGnlT7+tHKF5MnWg48/remav8T5mk9rueYvcb3k03pyUv7Tv8Qnp9k//rQ+/y6f/SV+/l0++7Q+/y6f/SV+/l0++7Q+/y6f/SV+/l0++7Q+/y6f/SV+/l0+97Smz7/L536J0+ff5bNP65pZfrpmlp+umeWna2b56ZpZfrpmlp+umeWna2b5+ZpZfr5mlp+vmeXna2b5+ZpZfr5mlp+vmeXna2b5+ZpZfr5mll+umeWXa2b55ZpZfrlmll+umeWXa2b55ZpZfrlmll+umeWXa2b59ZpZfr1mll+vmeXXa2b59ZpZfr1mll+vmeXXa2b59ZpZfr1klk+3S2b5dLtklk+3S2b5dLtklk+3S2b5dLtklk+3S2b5dLtklk+3S2b5dLtklk/dJbN86i6Z5VN3ySyfuktm+dRdMsun7pJZPnWXzPKpu2SWT90ls3zqrpnl+2tm+f6aWb6/Zpbvr5nl+2tm+f6aWb6/Zpbvr5nl+2tm+f6aWX64ZpYfrpnlh2tm+eGaWX64ZpYfrpnlh2tm+eGaWf7ZGcwlfZ+IXH8ew//15/TrMj2O+29P8KaMKOPj397C8f7QPvsv9+tjL0I/3Mbyg7uh25dFHF8a+Qfful1ccZuW44PvZFbI5Mk8O0ULmWfHhCHz7Bw0ZJ4dxYbMs9PgkHl2IB0yz87EQ+bZsXzIJDLwMzJk4CdkRjLwMzJk4GdkyMDPyJCBn5FJkHlChgz8jAwZ+BkZMvAzMmTgZ2TIwE/ITGTgZ2TIwM/IkIGfkSEDPyOTIPOEDBn4GRky8DMyZOBnZMjAz8iQgZ+QmcnAz8iQgZ+RIQM/I0MGfkYmQeYJGTLwMzJk4GdkyMDPyJCBn5EhAz8hs5CBn5G5eAae9+ffz8Mghp3nxz/czev4u2QunoE/SObiGfiDZFKezLo+zOb9crv9KuFKz/ZE6m+c3v3G+d1vfHL9Xefu+7c//5CG/7ftP/zz3//y17/+5X/997/+7V/+6T/+8rd/+9/bN2//9f/5p7//5Z/++a//ev+P//M//+1fDv/rf/zff3/8L4/v//e//+1f/vV//Off//Uf/9L//9+2f/7/AQ==","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"// use crate::{ HEIGHT, WIDTH };\nuse arenalib::{ NO_EVENT, WAIT, SEE_MOVE, WIDTH };\nuse arenalib::{ MAX_ACTIONS, MAX_OBSTACLES };\nuse arenalib::{ SERIALIZED_ACTION_BYTE_SIZE, SERIALIZED_ACTIONS_ARRAY_SIZE, SERIALIZED_ACTIONS_PER_FIELD, VIEW_DISTANCE };\nuse skplg::{softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD};\nuse arenalib::{Action, get_action_actor, get_action_target_x, get_action_target_y, get_action_type, new_action};\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\nuse crate::character::Character;\nuse crate::event::Event;\nuse crate::event::{ build_subtype_value_event }; // , build_value_event\nuse crate::map::{ is_visible, get_distance, can_move_to };\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::{ get_default_obstacles };\nuse arenalib::{MAGE};\nuse arenalib::{MAX_ACTIONS_PER_CHARACTER, MAX_ENEMY_OBSTACLES};\n// use crate::ResolvedAction::ResolvedAction;\n// use crate::actionDefinition::{ build_move_action };\nuse arenalib::{apply_action_result_effects, apply_action_pre_calc_effects, validate_action_requirements, build_result_event};\nuse arenalib::arena_action_def_builder;\nuse super::obstacle::new_obstacle;\n\n// use crate::{ACTION_RESULT_COORDINATES_IDX_SELF, ACTION_RESULT_COORDINATES_IDX_TARGET, ACTION_RESULT_COORDINATES_IDX_INVISIBLE};\n// use crate::{SEE_CAST, SEE_DRAW, SEE_RITUAL, SEE_SEARCH_TRAP, RECEIVE_ATTACK, DISARMED_TRAP, ADD_OBSTACLE, WIN};\n// use crate::action_builder;\n\n\n\n// global ACTION_TYPE: u8 = 0;\n// global ACTION_ACTOR: u8 = 1;\n// global ACTION_TARGET_X: u8 = 2;\n// global ACTION_TARGET_Y: u8 = 3;\n\nglobal SEEN_EVENT_IDX: u32 = 1;\nglobal UNSEEN_EVENT_IDX: u32 = 0;\nglobal WORLD_EVENT_IDX: u32 = 2;\nglobal SELF_EVENT_IDX: u32 = 3;\n\npub fn execute_action(\n    action: Action,\n    enemy_advance: u8,\n    actor: Character,\n    mut energy: u8,\n    my_obstacles: [Obstacle; MAX_OBSTACLES],\n    their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]\n) -> (bool, Event, Event, Event, Character, u8) /*where T: ResolvedAction */{\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    //let action_def = c.resolve_action(action.register[action.base_index + ACTION_TYPE]);\n        //let mut result_event: Event = build_std_event(NO_EVENT, c.id, 0, 0);\n        //let mut result_char = c;\n        //let mut required_energy = 0;\n        let mut is_valid = true;\n        //let action_def = c.resolve_action(get_action_type(action));\n        // let mut result_valid = true;\n\n        // let need_sneak = get_action_type(action) == SNEAK;\n        //let can_sneak = c.can_sneak();\n        // let need_move = get_action_type(action) == MOVE | get_action_type(action) == SNEAK;\n        // let can_move = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles);\n        // let need_target_is_neighbor = get_action_type(action) == SNEAK | get_action_type(action) == MOVE | get_action_type(action) == ATTACK | get_action_type(action) == SEARCH | get_action_type(action) == DISARM_TRAP;\n        //let target_is_neighbor = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        // let need_target_is_not_self = get_action_type(action) == ATTACK | get_action_type(action) == SHOOT;\n        // let target_is_not_self = (c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action));\n        // let need_ritual = get_action_type(action) == RITUAL;\n        //let can_ritual = c.can_ritual();\n        // let need_search = get_action_type(action) == SEARCH;\n        //let can_search = c.can_search();\n        //let can_attack = is_neighbor & not_self;\n        // let need_can_cast_fireball = get_action_type(action) == CAST_FIREBALL;\n        // let min_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if get_action_type(action) == SHOOT {\n        //     MIN_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let max_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if (get_action_type(action) == DRAW) | (get_action_type(action) == SHOOT) {\n        //     MAX_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let need_check_status = get_action_type(action) == CAST_FIREBALL | get_action_type(action) == RITUAL | get_action_type(action) == DRAW | get_action_type(action) == SHOOT;\n        // let can_cast_fireball = c.can_cast_fireball(); // & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        // let can_draw = c.can_shoot(); // & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_shoot = c.can_shoot(); // & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_disarm = c.can_disarm();\n        // let is_valid =\n        //     (get_action_type(action) == WAIT) |\n        //     ((get_action_type(action) == SNEAK) & can_sneak & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == MOVE) & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == RITUAL) & can_ritual) |\n        //     ((get_action_type(action) == SEARCH) & can_search & target_is_neighbor) |\n        //     ((get_action_type(action) == ATTACK) & target_is_neighbor & target_is_not_self) |\n        //     ((get_action_type(action) == CAST_FIREBALL) & can_cast_fireball & result_char.status <= max_rounds_to_finish) |\n        //     ((get_action_type(action) == DRAW) & can_draw) |\n        //     ((get_action_type(action) == SHOOT) & can_shoot & target_is_not_self) |\n        //     ((get_action_type(action) == DISARM_TRAP) & can_disarm & target_is_neighbor);\n\n\n\n\n        // need to adapt status first in case of action interruption!\n\n    //let action_type = action.get_action_type(action);\n    //let action_def = c.resolve_action(action_type);\n    let action_type = get_action_type(action);\n\n    let actor_id = actor.get_id();\n    let actor_x = actor.get_x();\n    let actor_y = actor.get_y();\n    let actor_target_x = actor.get_target_x();\n    let actor_target_y = actor.get_target_y();\n    let actor_last_action = actor.get_last_action();\n    let (action_def_valid, action_def) = actor.get_action(action_type);\n    softassert!(quote { is_valid }, quote { action_def_valid }, quote { f\"Failed to fetch action def of {action_type}\" });\n\n    let action_target_x = get_action_target_x(action);\n    let action_target_y = get_action_target_y(action);\n    let distance = get_distance(actor_x, actor_y, action_target_x, action_target_y);\n\n    // let is_continuous = action.get_action_is_continuous();\n    // let is_not_interrupted = (\n    //     ((!is_continuous) & (action.get_action_result_status_multiplier() != 0)) | // that's the ID of the wait action => leave status, but not continuous\n    //     ((is_continuous) & (action.get_action_req_previous_action() == c.last_action) & (action_target_x == c.get_target_x()) & (action_target_y == c.get_target_y()))\n    // );\n\n\n    let mut actor_progress = actor.get_progress();\n    let mut actor_is_hidden = actor.get_is_hidden() == 1;\n    let actor_is_in_view_range = is_visible(enemy_advance, actor_x);\n    // let max_range_part = get_action_req_max_range(action) as u16;\n    // let mut actor_max_range = max_range_part * max_range_part;\n    let mut is_not_interrupted = true;\n    let mut actor_damage_mod = actor.get_damage_mod();\n    let mut actor_status = actor.get_status();\n    // ~200 gates\n    apply_action_pre_calc_effects!(quote { action_def });\n\n\n///////////////////////////\n    // ~4000 gates\n    validate_action_requirements!(quote { is_valid }, quote { action_def });\n    // // pub global ACTION_NEEDS_TARGET_FREE_SPACE: u8 = 0;  // u1\n    // let target_is_free_space_valid = !action.get_action_req_target_free_space() | can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles);\n    // softassert!(quote { is_valid }, quote { target_is_free_space_valid }, quote { f\"Target space ({action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" });\n    \n    // // pub global ACTION_NEEDS_TARGET_IS_NOT_SELF: u8 = 1; // u1\n    // let target_is_not_self_valid = !action.get_action_req_target_is_not_self() | (c_x != action_target_x) | (c_y != action_target_y);\n    // softassert!(quote { is_valid }, quote { target_is_not_self_valid }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" });\n\n    // // pub global ACTION_NEEDS_STATUS_HIDDEN: u8 = 4; // u1\n    // let char_is_hidden = c.is_hidden == 1;\n    // let char_is_hidden_valid = !action.get_action_req_status_hidden() | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_is_hidden_valid }, quote { f\"Character needs to be hidden to perform action {action_type}\" });\n    \n    // // pub global ACTION_NEEDS_STATUS_VISIBLE: u8 = 2; // u1\n    // let char_is_in_view_range = is_visible(enemy_advance, c_x);\n    // let char_is_fully_visible = char_is_in_view_range & !char_is_hidden;\n    // let char_is_fully_visible_valid = !action.get_action_req_status_visible() | char_is_fully_visible;\n    // softassert!(quote { is_valid }, quote { char_is_fully_visible_valid }, quote { f\"Character must be fully visible for action {action_type}: in_view_range: {char_is_in_view_range} & !hidden {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_NEEDS_STATUS_INVISIBLE: u8 = 3; // u1\n    // let char_invisible_valid = !action.get_action_req_status_invisible() | !char_is_in_view_range | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_invisible_valid }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {char_is_in_view_range} || hidden: {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_MAX_RANGE: u8 = 7; // u6 // TODO: max_range!\n    // let max_range_part = action.get_action_req_max_range() as u16;\n    // let max_range = max_range_part * max_range_part;\n    // let max_range_valid  = distance <= max_range;\n    // softassert!(quote { is_valid }, quote { max_range_valid }, quote { f\"Character is out of range! Distance: {distance} > {max_range}: {{{c_x},{c_y}}} - {{{action_target_x},{action_target_y}}} with {max_range_part}\" });\n\n    // // pub global ACTION_NEEDS_MIN_STATUS: u8 = 8; // u4\n    // let min_status = action.get_action_req_min_status();\n    // let min_status_valid = min_status <= status;\n    // softassert!(quote { is_valid }, quote { min_status_valid }, quote { f\"Character needs min status {min_status} to perform action {action_type}, but only has {status}\" });\n\n    // // pub global ACTION_NEEDS_MAX_STATUS: u8 = 9; // u4\n    // let max_status = action.get_action_req_max_status();\n    // let max_status_valid = max_status >= status;\n    // softassert!(quote { is_valid }, quote { max_status_valid }, quote { f\"Character cannot have a higher status than {max_status} to perform action {action_type}: got {status}\" });\n\n    // // pub global ACTION_NEEDED_ENERGY: u8 = 10;    // u4\n    // let required_energy = action.get_action_req_energy();\n    // let energy_valid = required_energy <= energy;\n    // softassert!(quote { is_valid }, quote { energy_valid }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {required_energy}\" });\n    //////////////////////\n    \n\n        let coords = [\n            (actor_x, actor_y),\n            (action_target_x, action_target_y),\n            (NOWHERE, NOWHERE),\n        ];\n\n    // pub global ACTION_RESULT_STATUS_MULTIPLIER: u8 =     ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT;     // u1\n    // pub global ACTION_RESULT_STATUS_FIXED_ADDITION: u8 = ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 1; // u4\n    // pub global ACTION_MOVE_TO_TARGET: u8 =               ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 2; // u1\n    // pub global ACTION_SETS_STATUS_HIDDEN: u8 = 5; // u1\n    // pub global ACTION_REMOVES_STATUS_HIDDEN: u8 = 6; // u1\n\n        // CALCULATE EVENTS\n        comptime {\n          assert(SEEN_EVENT_IDX == 1);\n          assert(UNSEEN_EVENT_IDX == 0);\n        }\n        //let result_event_idx = is_visible as u32;\n        let mut events: BoundedVec<Event, 4> = BoundedVec::new();\n        // 19000 gates\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        build_result_event!(0 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(1 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(2 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(3 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        assert(events.len() == 4);\n\n        // let seen_event_value = status as u32 * action.get_action_result_event_seen_value_status_multiplier() as u32 + action.get_action_result_event_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { seen_event_value <= 255 as u32 }, quote { f\"Invalid event value (seen): {seen_event_value} does not fit in u8!\" });\n\n        // let unseen_event_value = status as u32 * action.get_action_result_event_not_seen_value_status_multiplier() as u32 + action.get_action_result_event_not_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { unseen_event_value <= 255 as u32 }, quote { f\"Invalid event value (unseen): {unseen_event_value} does not fit in u8!\" });\n\n        // let seen_event_coords_idx = action.get_action_result_event_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { seen_event_coords_idx < 4 }, quote { f\"Invalid seen event coord idx: {seen_event_coords_idx} > 3\" });\n\n        // let seen_event_coords = coords[seen_event_coords_idx & 3];\n\n        // let unseen_event_coords_idx = action.get_action_result_event_not_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { unseen_event_coords_idx < 4 }, quote { f\"Invalid unseen event coord idx: {unseen_event_coords_idx} > 3\" });\n\n        // let unseen_event_coords = coords[unseen_event_coords_idx & 3];\n\n        // //let events = [\n        // let dummy_event =    build_subtype_value_event(NO_EVENT, c.get_id(), coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].0, coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].1, 0 as u8, 0 as u8, 0 as u8);\n        // let unseen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_not_seen_type(),\n        //         c.get_id(), \n        //         unseen_event_coords.0,\n        //         unseen_event_coords.1,\n        //         unseen_event_value as u8,\n        //         action.get_action_result_event_not_seen_subtype(),\n        //         action.get_action_result_event_not_seen_radius()\n        //     );\n        // let seen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_seen_type(),\n        //         c.get_id(), \n        //         seen_event_coords.0,\n        //         seen_event_coords.1,\n        //         seen_event_value as u8,\n        //         action.get_action_result_event_seen_subtype(),\n        //         action.get_action_result_event_seen_radius()\n        //     );\n        //];\n\n\n        // APPLY EFFECTS ON SELF\n        let mut result_energy = energy;\n        let mut result_coords = coords[0];\n        let mut result_progress = actor_progress;\n        let mut result_is_hidden = actor_is_hidden;\n        let mut result_is_visible = actor_is_in_view_range;\n        let mut result_damage_mod = actor_damage_mod;\n        let mut result_health = actor.get_health();\n        let mut result_status = actor_status;\n\n\n        // let energy = std::wrapping_sub(energy, action.get_action_req_energy());\n        // let status = actor_progress as u32 * action.get_action_result_status_multiplier() as u32 + action.get_action_result_status_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { status <= MAX_STATUS as u32 }, quote { f\"Invalid result status: {status} > {MAX_STATUS}\" });\n\n        // let final_coords = coords[action.get_action_move_to_target() as u8];\n        // // debug!(quote { println(f\"final_coords:{final_coords}\"); });\n        // let is_hidden = ((c.is_hidden == 1) & !action.get_action_result_effect_removes_status_hidden()) | action.get_action_result_effect_sets_status_hidden();\n        // let is_visible = !is_hidden & is_visible(enemy_advance, final_coords.0);\n        // 200 gates\n        apply_action_result_effects!(quote { action_def });\n\n// let result_coord_src = action_def[6] as u8;\n// let result_coord_src_fixed = result_coord_src & 4 as u8;\n// let result_coord = result_coord_src_fixed != 0 as u8;\n// let result_coord_cast = result_coord as u8;\n// println(f\"result coords: {result_coord_src} {result_coord_src_fixed} {result_coord} {result_coord_cast}\");\n// result_coords = coords[((action_def[6]as u8 / 4 as u8) == 1 as u8)as u8];\n        // let target_coords = [\n        //     (target_x, target_y),\n        //     (c.get_target_x(), c.get_target_y())\n        // ];\n\n        (\n            is_valid,\n            if result_is_visible { events.get_unchecked(SEEN_EVENT_IDX) } else { events.get_unchecked(UNSEEN_EVENT_IDX) },//events[1 + (is_visible as u8)],\n            events.get_unchecked(WORLD_EVENT_IDX),\n            events.get_unchecked(SELF_EVENT_IDX),//events[get_action_unseen_event_is_internal(action_def) as u8],\n            Character {\n                id: actor_id,\n                x: result_coords.0,\n                y: result_coords.1,\n                progress: result_progress, // status as u8,\n                is_hidden: result_is_hidden as u1, //is_hidden as u1,\n                has_been_seen: result_is_visible, //is_visible,\n                last_action: is_not_interrupted as u8 * actor.get_last_action() + (!is_not_interrupted) as u8 * action_type,\n                target_x: is_not_interrupted as u8 * actor.get_target_x() + (!is_not_interrupted) as u8 * action_target_x, // if is_not_interrupted { c.get_target_x() } else { get_action_target_x(action) };\n                target_y: is_not_interrupted as u8 * actor.get_target_y() + (!is_not_interrupted) as u8 * action_target_y,\n                class: actor.class,\n                damage_mod: result_damage_mod,\n                health: result_health,\n                status: result_status,\n                actions: actor.actions,\n            },\n            result_energy\n        )\n\n        // if get_action_type(action) == SNEAK {\n        //     //assert(c.can_sneak());\n        //     if !can_sneak { let actor_id = c.id; println(f\"Failed to execute action: Character {actor_id} cannot sneak\"); }\n        //     //assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     //assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_sneak() & can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);  \n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_sneak();\n        // }\n        // if get_action_type(action) == MOVE {\n        //     // assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);\n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_move();\n        //     result_char.has_been_seen = is_visible(enemy_advance, result_char.x);\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_MOVE, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        // }\n        // if get_action_type(action) == RITUAL {\n        //     //assert(c.can_ritual());\n        //     // result_valid = c.can_ritual();\n        //     result_char.status += 1;\n        //     if result_char.status >= RITUAL_ROUNDS_FOR_WIN {\n        //         result_event = build_std_event(WIN, c.id, 0, 0);\n        //     } else {\n        //         result_event = build_std_event(SEE_RITUAL, c.id, 0, 0);\n        //     }\n        //     required_energy = c.get_energy_per_ritual();\n        // }\n        // if get_action_type(action) == SEARCH {\n        //     // assert(c.can_search());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_search() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(SEE_SEARCH_TRAP, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_search();\n        // }\n        // if get_action_type(action) == ATTACK {\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_MELEE), ATTACK_MELEE);\n        //     required_energy = c.get_energy_per_attack();\n        // }\n        // // TODO: global SET_TRAP = 6 as u8;\n        // if get_action_type(action) == CAST_FIREBALL {\n        //     // assert(c.can_cast_fireball());\n        //     result_char.status += 1;\n        //     // assert(result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     // result_valid = c.can_cast_fireball() & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     if result_char.status >= FIREBALL_ROUNDS_FOR_CAST {\n        //         // TODO: handle friendly fire and destruction of own walls and own traps\n        //         result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_FIREBALL), ATTACK_FIREBALL);\n        //     } else {\n        //         if c.get_has_been_seen() {\n        //             result_event = build_subtype_value_event(SEE_CAST, c.id, get_action_target_x(action), get_action_target_y(action), 0, ATTACK_FIREBALL);\n        //         }\n        //     }\n        //     required_energy = c.get_energy_per_cast();\n        // }\n        // if get_action_type(action) == DRAW {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     // result_valid = c.can_shoot() & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     result_char.status += 1;\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_DRAW, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        //     required_energy = c.get_energy_per_draw();\n        // }\n        // if get_action_type(action) == SHOOT {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = c.can_shoot() & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     // TODO: check distance! abs(c.x - get_action_target_x(action)) + abs(c.y - get_action_target_y(action)) <= c.get_shoot_range()\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_RANGED), ATTACK_RANGED);\n        //     required_energy = c.get_energy_per_shoot();\n\n        // }\n        // // TODO: SET_TRAP\n        // if get_action_type(action) == DISARM_TRAP {\n        //     // assert(c.can_disarm());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_disarm() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(DESTROY, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_disarm();\n        // }\n        \n        // // assert(energy >= required_energy);\n        // let result_valid = is_valid & (energy >= required_energy);\n        // if result_valid {\n        //     energy -= required_energy;\n        // }\n        // // energy -= required_energy;\n        // (result_valid, result_event, result_char, energy)\n    }\n//}\n\n//global test_actions: [TestActionDefinition; 1] = [\n    // build_test_action_def!(build_wait_action_def(), quote { 0, 1, 3, 4 }),\n    //TestActionDefinition { register: build_test_action_def!(build_wait_action_def()), action: new_action(0, 1, 3, 4) },\n    // build_move_action(class_energy_per_move[ARCHER]),\n    //     build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n    //     build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n    //     build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n    //     build_wait_action_def(),\n    //     ,\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[RITUALIST]),\n    //     build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n    //     build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n    //     build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[ROGUE]),\n    //     build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n    //     build_sneak_action(class_energy_per_sneak[ROGUE]),\n    //     build_search_action(class_energy_per_search[ROGUE], 1),\n    //     build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n    //     build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[KNIGHT]),\n    //     build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[MAGE]),\n    //     build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n    //     build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n    //     build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n    //     build_wait_action_def(),\n    //     build_wait_action_def()\n    // ]\n// ]\n\n// pub fn create_test_action(action: Action) -> TestActionDefinition {\n//     TestActionDefinition {\n//         register: \n//     }\n// }\n\n// pub struct TestActionDefinition {\n//     pub register: [u8; ACTION_DEFINITION_SIZE],\n//     pub action: Action,\n// }\n\n// impl ResolvedAction for TestActionDefinition {\n//     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n//     }\n//     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n//     }\n//     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n//     }\n//     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n//     }\n//     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_MAX_RANGE]\n//     }\n//     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MIN_STATUS]\n//     }\n//     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MAX_STATUS]\n//     }\n//     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDED_ENERGY]\n//     }\n//     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_EVENT_IS_TRAP] == 1\n//     }\n//     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n//     }\n//     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n//         self.register[ACTION_MOVE_TO_TARGET] as u1\n//     }\n//     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_IS_CONTINUOUS] == 1\n//     }\n//     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n//     }\n\n//     fn get_action_target_x(self) -> u8 {\n//         get_action_target_x(self.action)\n//     }\n//     fn get_action_target_y(self) -> u8 {\n//         get_action_target_y(self.action)\n//     }\n//     fn get_action_type(self) -> u8 {\n//         get_action_type(self.action)\n//     }\n// }\n\n#[test]\nfn test_execute_action() {\n  // global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder = get_arena_action_def_builder();\n    let action_def = arena_action_def_builder.build_move_action(4); //, quote { 1, 2, 3, 4 }; //new_action(1, 2, 3, 4);\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let action = new_action(1, 2, 3, 4);\n    let their_advance = 30;\n    let mut actions = [[0; 32]; MAX_ACTIONS_PER_CHARACTER + 1];\n    actions[1] = action_def;\n    let actor = Character {\n        id: 2,\n        x: 2,\n        y: 4,\n        target_x: 0,\n        target_y: 0,\n        health: 255,\n        damage_mod: 1,\n        last_action: WAIT,\n        class: MAGE,\n        is_hidden: 0 as u1,\n        has_been_seen: true,\n        progress: 0,\n        status: 0,\n        actions: actions\n    };\n    let energy = 15;\n    let my_obstacles = get_default_obstacles(0);\n    let (no_obstacle_valid, no_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n    assert(no_obstacle_valid);\n    let their_obstacles = get_default_obstacles(1).as_slice().push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle);\n    let (valid, event, _, internal_event, c, result_energy) = execute_action(\n        action,\n        their_advance,\n        actor,\n        energy,\n        my_obstacles,\n        their_obstacles.as_array()\n    );\n    assert(valid, \"valid\");\n    assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n    assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n    assert(event.x == get_action_target_x(action), f\"{event}.target_x is not action target x\");\n    assert(event.y == get_action_target_y(action), f\"{event}.target_y is not action target y\");\n    assert(c.x == event.x, f\"{c}.x is not event {event}.x\");\n    assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n    assert(result_energy == 11, f\"{result_energy} != 11\");\n}\n\n\n\npub fn parse_actions(fields: [Field; SERIALIZED_ACTIONS_ARRAY_SIZE]) -> [Action; MAX_ACTIONS] {\n    comptime {\n        assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n        assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n        assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n    }\n\n    let mut actions: [Action] = &[];\n    for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n        let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n        //assert(split.len() == 32);\n        for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n            let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n            actions = actions.push_back(new_action(\n                split[offset],\n                split[offset + 1],\n                split[offset + 2],\n                split[offset + 3],\n            ));\n            /*Action {\n                action: split[offset],\n                actor: split[offset + 1],\n                target_x: split[offset + 2],\n                target_y: split[offset + 3],\n            }*/\n        }\n    }\n    actions.as_array()\n}\n\n/**\n* Warning: This function can throw!!!\n*/\n// pub fn serialize_actions(actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n//     comptime {\n//         assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n//         assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n//         assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n//     }\n\n//     assert(actions.len() <= MAX_ACTIONS);\n\n//     let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, 0, 0, 0); MAX_ACTIONS];\n//     for i in 0..actions.len() {\n//         actions_stuffed[i] = actions[i];\n//     }\n\n//     let mut fields: [Field] = &[];\n//     for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n//         let mut data: [u8; 32] = [0; 32];\n//         for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n//             let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n//             let action = actions_stuffed[index];\n//             let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n//             data[offset] = get_action_type(action);\n//             data[offset + 1] = get_action_actor(action);\n//             data[offset + 2] = get_action_target_x(action);\n//             data[offset + 3] = get_action_target_y(action);\n//         }\n//         fields = fields.push_back(std::field::bytes32_to_field(data));\n//     }\n//     fields.as_array()\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/action.nr"},"72":{"source":"\nuse arenalib::ARCHER;\nuse arenalib::KNIGHT;\nuse arenalib::MAGE;\nuse arenalib::RITUALIST;\nuse arenalib::ROGUE;\nuse arenalib::WIDTH;\nuse arenalib::HEIGHT;\nuse arenalib::{ CLASS_COUNT, PROGRESS_COUNT };\nuse arenalib::{ WAIT }; //, ATTACK_MELEE, ATTACK_FIREBALL, ATTACK_RANGED, MAX_FIREBALL_ROUNDS_FOR_CAST, MIN_FIREBALL_ROUNDS_FOR_CAST, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES, MAX_ACTIONS_PER_CHARACTER };\nuse arenalib::{ WIDTH_MASK, HEIGHT_MASK, CLASS_MASK, PROGRESS_MASK };\nuse arenalib::{ WIDTH_BITS, HEIGHT_BITS, CLASS_BITS, PROGRESS_BITS };\nuse crate::event::Event;\nuse crate::map::is_visible;\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::new_obstacle;\nuse skplg::{NOWHERE, debug, softassert};\nuse arenalib::{ActionDefinition};\nuse arenalib::{SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, SerializedArenaCharacterActionDefinitions, SerializedArenaCharacterActionDefinition};\n// use arenalib::{TRAP, ADD_OBSTACLE, WIN_BY_RITUAL, RITUAL_ROUNDS_FOR_WIN};\nuse arenalib::get_test_action_register;\nuse crate::event::{build_subtype_value_event, serialize_events};\nuse arenalib::NO_EVENT;\nuse arenalib::get_wait_action_def;\n\n\npub global SERIALIZED_CHARACTER_BYTES: u32 = 6;\npub type SerializedCharacter = [u8; SERIALIZED_CHARACTER_BYTES];\n\n// use skplam::{build_wait_action_def, build_shoot_action, build_draw_action, build_move_action, build_attack_action, build_cast_action, build_evocation_action, build_search_action, build_set_trap_action, build_sneak_action, build_ritual_action, build_disarm_trap_action};\n\n// this should be more efficient: for all the following: order is: UNKNOWN_CLASS, ARCHER, RITUALIST, ROGUE, KNIGHT, MAGE\nglobal class_damage_melee: [u8; 6] = [ 0, 32, 8, 24, 40, 16 ];\nglobal class_damage_ranged: [u8; 6] = [ 0, 24, 40, 16, 32, 8 ];\nglobal class_damage_fireball: [u8; 6] = [ 0, 0, 100, 50, 0, 100 ];\nglobal class_damage: [[u8; 6]; 3] = [ class_damage_melee, class_damage_ranged, class_damage_fireball ];\nglobal class_energy_per_attack: [u8; 6] = [ 0, 7, 7, 7, 6, 7 ];\nglobal class_energy_per_cast: [u8; 6] = [ 0, 255, 12, 255, 255, 6 ];\nglobal class_energy_per_disarm: [u8; 6] = [ 0, 255, 255, 12, 255, 255 ];\nglobal class_energy_per_move: [u8; 6] = [ 0, 3, 4, 3, 4, 4 ];\nglobal class_energy_per_ritual: [u8; 6] = [ 0, 255, 12, 255, 255, 255 ];\nglobal class_energy_per_search: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_sneak: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_draw: [u8; 6] = [ 0, 9, 255, 255, 255, 255 ];\nglobal class_energy_per_shoot: [u8; 6] = [ 0, 6, 255, 255, 255, 255 ];\nglobal resistances: [u16; 8 * 3] = [\n     0,  75, 100, 85,  50, 100, 20,  0, //,  255, 255, 0, 0, 0, 255, 255, 255 ], // Melee vs dummy, archer, ritualist, thief, knight, mage, wall, water, unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n     0,  80, 100, 90,  25, 100,  5,  0, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Ranged vs dummy, archer, ritualist, thief, knight, mage, wall, water\n     0,  80, 100, 90, 100,  90, 60, 50, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Fireball vs dummy, archer, ritualist, thief, knight, mage, wall, water\n];\n\nglobal trap_resistances: [u16; 8] = [ 0,  75, 100, 50,  75, 90, 5, 0]; //,  255, 255, 255, 255, 255, 255, 255, 255 ]; // Trap vs dummy, archer, ritualist, thief, knight, mage\n\n\n//global x: ActionDefinition = build_set_trap_action(1 as u8, 1 as u8);\n// TODO: move to character!\n// global ARCHER: u8 = 1;    WAIT, MOVE, ATTACK, DRAW, SHOOT\n// global RITUALIST: u8 = 2; WAIT, MOVE, ATTACK, CAST, RITUAL\n// global ROGUE: u8 = 3;     WAIT, MOVE, ATTACK, SNEAK, SEARCH, DISARM_TRAP, SET_TRAP\n// global KNIGHT: u8 = 4;    WAIT, MOVE, ATTACK\n// global MAGE: u8 = 5;      WAIT, MOVE, ATTACK, CAST, CAST_FIREBALL\n// global ACTION_DEFINITIONS: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER * CLASS_COUNT] = [\n//     // [[0 as u8; ACTION_DEFINITION_SIZE]; MAX_ACTIONS_PER_CHARACTER], // 0 for no action\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n    \n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ARCHER]),\n//         build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//         build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//         build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[RITUALIST]),\n//         build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//         build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//         build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ROGUE]),\n//         build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//         build_sneak_action(class_energy_per_sneak[ROGUE]),\n//         build_search_action(class_energy_per_search[ROGUE], 1),\n//         build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[KNIGHT]),\n//         build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[MAGE]),\n//         build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//         build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//         build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n//         WAIT_ACTION,\n//         WAIT_ACTION\n//     // ]\n// ];\n// global \n// pub fn get_test_action_register() -> [u8; ACTION_DEFINITION_REGISTER_SIZE] {\n//     build_action_def_reg!([\n//         [\n//             build_move_action(class_energy_per_move[ARCHER]),\n//             build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//             build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//             build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[RITUALIST]),\n//             build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//             build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//             build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[ROGUE]),\n//             build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//             build_sneak_action(class_energy_per_sneak[ROGUE]),\n//             build_search_action(class_energy_per_search[ROGUE], 1),\n//             build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//             build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[KNIGHT]),\n//             build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[MAGE]),\n//             build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//             build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//             build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST),\n//             build_wait_action_def(),\n//             build_wait_action_def()\n//         ]\n//     ])\n// }\n// pub fn get_test_action_register() -> SerializedArenaActionDefinitions {\n//   let action_builder = arena_action_def_builder;\n//      [\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER)),\n//             std::field::bytes32_to_field(action_builder.build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT)), // arche),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n            \n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST, 255)),\n//             std::field::bytes32_to_field(action_builder.build_ritual_action(3, class_energy_per_ritual[RITUALIST], RITUAL_ROUNDS_FOR_WIN, WIN_BY_RITUAL)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_sneak_action(class_energy_per_sneak[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_search_action(class_energy_per_search[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_set_trap_action(class_energy_per_disarm[ROGUE], 1, ADD_OBSTACLE, TRAP)),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[KNIGHT])),\n//            std::field::bytes32_to_field( action_builder.build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT])),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[MAGE], MAGE, 7)),\n//             std::field::bytes32_to_field(action_builder.build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def())\n//         ]\n// }\n\n// struct CharacterClass {\n//     class: u8,\n//     damage: u8,\n//     energy_per_attack: u8,\n//     energy_per_cast: u8,\n//     energy_per_disarm: u8,\n//     energy_per_move: u8,\n//     energy_per_ritual: u8,\n//     energy_per_search: u8,\n//     energy_per_sneak: u8,\n// }\n\npub struct Character {\n    pub id: u8,\n    pub x: u8, // 5 bit\n    pub y: u8, // 4 bit\n    pub class: u8, // 3 bit\n    pub progress: u8, // 0 = idle, 1-15 = continuing action => 4 bit\n    pub health: u8,\n    pub has_been_seen: bool,\n    pub is_hidden: u1,\n    pub target_x: u8,\n    pub target_y: u8,\n    pub damage_mod: u8,\n    pub last_action: u8,\n    pub status: u8,\n    // pub wait_action: ActionDefinition,\n    pub actions: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1], // BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER>,\n}\n\n// pub fn resolve_action(action: u8, class: u8) -> ActionDefinition {\n//     let mut idx = class as u32 * MAX_ACTIONS_PER_CHARACTER + action as u32;\n//     if idx >= (ACTION_DEFINITIONS.len()) {\n//         idx = 0;\n//     }\n//     // assert(action as u32 < MAX_ACTIONS_PER_CHARACTER);\n//     // assert(class as u32 < CLASS_COUNT);\n//     ACTION_DEFINITIONS[idx]\n// }\n//     pub fn resolve_action(action: Action) -> ActionDefinition {\n//         // let idx = get_action_base_index(self.get_id(), action);\n//         ActionDefinition::new(action, ACTION_DEFINITIONS)\n// //        (idx, ACTION_DEFINITIONS)\n//         //resolve_action(action, self.class)\n//         // let mut a = action as u32;\n//         // if a >= self.actions.len() { a = 0; }\n//         // self.actions[a] //.get_unchecked(a)\n//     }\n//global wait_action: ActionDefinition = buld_wait_action_def();\n\n// global wait_action: ActionDefinition = action_builder.build_wait_action_def();\n\nimpl Character {\n    // pub fn new(id: u8 x: u8, y: u8, class: u8, status: u8, health: u8, has_been_seen: u8)\n    /// May throw\n\n\n    pub fn get_id(self) -> u8 {\n        self.id\n    }\n\n    pub fn get_x(self) -> u8 {\n        self.x\n    }\n\n    pub fn get_y(self) -> u8 {\n        self.y\n    }\n\n    pub fn get_class(self) -> u8 {\n        self.class\n    }\n\n    pub fn get_progress(self) -> u8 {\n        self.progress\n    }\n\n    pub fn get_status(self) -> u8 {\n        self.status\n    }\n\n    pub fn get_health(self) -> u8 {\n        self.health\n    }\n\n    pub fn get_has_been_seen(self) -> bool {\n        self.has_been_seen\n    }\n\n    pub fn get_target_x(self) -> u8 {\n        self.target_x\n    }\n\n    pub fn get_target_y(self) -> u8 {\n        self.target_y\n    }\n\n    pub fn get_is_hidden(self) -> u1 {\n      self.is_hidden\n    }\n\n    pub fn get_damage_mod(self) -> u8 {\n      self.damage_mod\n    }\n\n    pub fn get_action(self, action_idx: u8) -> (bool, ActionDefinition) {\n      /*if action_idx == 0 {\n        (true, self.wait_action)\n      } else */if action_idx <= MAX_ACTIONS_PER_CHARACTER as u8 {\n        (true, self.actions[action_idx])\n      } else {\n        (false, self.actions[0])\n      }\n    }\n\n    // pub fn get_energy_per_attack(self) -> u8 {\n    //     class_energy_per_attack[self.class]\n    // }\n\n    // pub fn get_energy_per_cast(self) -> u8 {\n    //     class_energy_per_cast[self.class]\n    // }\n\n    // pub fn get_energy_per_disarm(self) -> u8 {\n    //     class_energy_per_disarm[self.class]\n    // }\n\n    // pub fn get_energy_per_move(self) -> u8 {\n    //     class_energy_per_move[self.class]\n    // }\n\n    // pub fn get_energy_per_ritual(self) -> u8 {\n    //     class_energy_per_ritual[self.class]\n    // }\n\n    // pub fn get_energy_per_search(self) -> u8 {\n    //     class_energy_per_search[self.class]\n    // }\n\n    // pub fn get_energy_per_sneak(self) -> u8 {\n    //     class_energy_per_sneak[self.class]\n    // }\n\n    // pub fn get_energy_per_draw(self) -> u8 {\n    //     class_energy_per_draw[self.class]\n    // }\n\n    // pub fn get_energy_per_shoot(self) -> u8 {\n    //     class_energy_per_shoot[self.class]\n    // }\n\n    // pub fn get_damage(self, attack_type: u8) -> u8 {\n    //     self.damage_mod + class_damage[attack_type][self.class]\n    // }\n\n    pub fn get_last_action(self) -> u8 {\n      self.last_action\n    }\n\n    // pub fn can_sneak(self) -> bool {\n    //     class_energy_per_sneak[self.class] != 255\n    // }\n\n    // pub fn can_ritual(self) -> bool {\n    //     class_energy_per_ritual[self.class] != 255\n    // }\n\n    // pub fn can_cast_fireball(self) -> bool {\n    //     class_energy_per_cast[self.class] != 255\n    // }\n\n    pub fn can_shoot(self) -> bool {\n        self.class == ARCHER\n    }\n    // pub fn can_disarm(self) -> bool {\n    //     class_energy_per_disarm[self.class] != 255\n    // }\n\n    // pub fn can_search(self) -> bool {\n    //     class_energy_per_search[self.class] != 255\n    // }\n\n    fn is_pos_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_target_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_class_valid(class: u8) -> bool { class as u32 <= CLASS_COUNT }\n    fn is_status_valid(status: u8) -> bool { status < PROGRESS_COUNT }\n\n    pub fn is_valid(self) -> bool {\n        Character::is_pos_valid(self.x, self.y) &\n        Character::is_target_valid(self.target_x, self.target_y) &\n        Character::is_class_valid(self.class) &\n        Character::is_status_valid(self.progress)\n    }\n\n    pub fn serialize(self) -> (SerializedCharacter, SerializedArenaCharacterActionDefinitions) {\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n        assert(self.is_valid());\n        let packed_x = self.x + (self.class << WIDTH_BITS);\n        let packed_y = self.y + (self.progress << HEIGHT_BITS);\n        let packed_target_x = (self.target_x & WIDTH_MASK) + ((self.is_hidden as u8) << WIDTH_BITS);\n        let packed_target_y = (self.target_y & HEIGHT_MASK) + ((self.last_action as u8) << HEIGHT_BITS);\n\n        // let serialized_action_defs = self.actions.map(|a|std::field::bytes32_to_field(a));\n        let serialized_action_defs = [\n          std::field::bytes32_to_field(self.actions[1]),\n          std::field::bytes32_to_field(self.actions[2]),\n          std::field::bytes32_to_field(self.actions[3]),\n          std::field::bytes32_to_field(self.actions[4]),\n          std::field::bytes32_to_field(self.actions[5]),\n          std::field::bytes32_to_field(self.actions[6])\n        ];\n        \n        ([packed_x, packed_y, self.health, packed_target_x, packed_target_y, self.damage_mod], serialized_action_defs)\n    }\n\n    pub fn to_obstacle(self) -> (bool, Obstacle) {\n        comptime {\n            assert(MAX_CHARACTERS < (255 - MAX_OBSTACLES));\n        }\n        assert(self.is_valid());\n        new_obstacle(self.id + (MAX_OBSTACLES as u8), self.x, self.y, self.health, self.class)\n        // Obstacle {\n        //     id: self.id + (MAX_CHARACTERS as u8),\n        //     x: self.x,\n        //     y: self.y,\n        //     obstacle_type: self.class,\n        //     health: self.health,\n        //     //was_alive: \n        // }\n    }\n\n    pub fn move(self, x: u8, y: u8) -> Character {\n        let mut c = self;\n        c.x = x;\n        c.y = y;\n        c\n    }\n\n    pub fn take_damage(self, attack_type: u8, dmg: u8) -> Character {\n        let damage_after_resistances = get_attack_damage_to_tile(attack_type, dmg as u32, self.class);\n        let mut c = self;\n        if damage_after_resistances > (c.health as u32) {\n            c.health = 0;\n        } else {\n            c.health -= (damage_after_resistances as u8);\n        }\n        c\n    }\n\n    pub fn set_status(self, status: u8) -> Character {\n        assert(status < PROGRESS_COUNT);\n        let mut c = self;\n        c.progress = status;\n        c\n    }\n\n    pub fn create_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n        // let mut actions: BoundedVec<ActionDefinition, 6> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..6 {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions.push(ACTION_DEFINITIONS[idx + i]);\n        //     }\n        // }\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: 0,\n            health: 0,\n            has_been_seen: false,\n            is_hidden: 0,\n            target_x: 255,\n            target_y: 255,\n            damage_mod: 0,//: class_damage[class],\n            last_action: WAIT,\n            status: 0, // TODO: status\n            actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1]// BoundedVec::new()\n        };\n        assert(c.is_valid());\n        c\n    }\n\n    pub fn parse(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool, Character) {\n        // these asserts could be disabled for production\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n\n        let mut is_valid = true;\n\n        let split: [u8; 32] = data.to_be_bytes::<32>();\n        assert(split.len() == 32);\n        let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n        let y_packed = split[2 + id * 6 + 1]; // 4 bit y, 4 bit status\n        let mut health = split[2 + id * 6 + 2] as u16;\n        let target_x_packed = split[2 + id * 6 + 3]; // 5 bit target x, 1 bit hidden, 1 bit has target, 1 bit unused\n        let target_y_packed = split[2 + id * 6 + 4]; // 4 bit target y, 4 bit last action\n        let damage_mod = split[2 + id * 6 + 5]; // last byte: for the moment, use to save damage_mod (buffs, etc)\n\n        let x = x_packed & WIDTH_MASK;\n        let y = y_packed & HEIGHT_MASK;\n        let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n        if !Character::is_class_valid(class) {\n            debug!(quote { println(f\"Invalid class {class}\"); });\n            class = 0;\n            is_valid = false;\n        }\n\n        let progress = (y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n        softassert!(quote { is_valid }, quote { Character::is_status_valid(progress) }, quote { f\"Invalid status {progress} during character parsing {id}\" });\n\n        let target_x = target_x_packed & WIDTH_MASK;\n        let target_y = target_y_packed & HEIGHT_MASK;\n        let last_action = (target_y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n\n        let is_visible = is_visible(enemy_advance, x); //((target_x_packed >> 5) & 1) as u1;\n        let is_hidden = ((target_x_packed >> WIDTH_BITS) & 1) as u1;\n\n        let mut damage: u16 = 0;\n        for i in 0..MAX_EVENTS {\n            let event = events[i];\n            damage += event.get_applied_damage_to_my_asset(x, y, class);\n            // if events[i].actor_id == id {\n            //     let event = events[i];\n            //     if event.actor_id == id {\n            //         damage += event.get_applied_damage_to_my_asset(x, y, class);\n            //     }\n            // }\n        }\n        if damage > health {\n            health = 0;\n        } else {\n            health -= damage;\n        }\n\n        // let mut actions = [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]; //: BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..MAX_ACTIONS_PER_CHARACTER {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions[i] = ACTION_DEFINITIONS[idx + i];\n        //     }\n        // }\n\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: progress,\n            health: health as u8,\n            has_been_seen: is_visible, // TODO \n            is_hidden: is_hidden,\n            target_x: target_x,\n            target_y: target_y,\n            damage_mod: damage_mod,\n            last_action: last_action,\n            actions: [\n              wait_action,\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 1].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 2].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 3].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 4].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 5].to_be_bytes::<32>()\n            ],\n            status: 0 // TODO: status\n        };\n        assert(c.is_valid());\n        (is_valid, c)\n    }\n}\n\n// unconstrained fn create_character_unconstrained(\n//   id: u8,\n//   x: u8,\n//   y: u8,\n//   class: u8,\n//   progress: u8,\n//   health: u8,\n//   has_been_seen: u8\n// )\n\nfn select_action_defs_of_character(actions: SerializedArenaActionDefinitions, char_id: u32) -> [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1] {\n  let mut result: [SerializedArenaCharacterActionDefinition] = &[std::field::bytes32_to_field(get_wait_action_def())];\n  let offset = char_id * MAX_ACTIONS_PER_CHARACTER;\n  for i in 0..MAX_ACTIONS_PER_CHARACTER {\n    result = result.push_back(actions[offset + i]);\n  }\n  result.as_array().map(|f|f.to_be_bytes())\n}\n\npub fn get_default_characters(side: u8) -> [Character; MAX_CHARACTERS] {\n    assert(side < 2, f\"Side is too large {side}\");\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let default_actions = get_test_action_register();\n\n    let x = |x| x * ((side + 1) % 2) + (WIDTH - 1 - x) * side;\n    [\n        Character { id: 0, x: x(2), y: 2, class: ARCHER, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 1), status: 0 },\n        Character { id: 1, x: x(2), y: 3, class: RITUALIST, health: 60, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 2), status: 0 },\n        Character { id: 2, x: x(2), y: 4, class: ROGUE, health: 80, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 3), status: 0 },\n        Character { id: 3, x: x(2), y: 5, class: KNIGHT, health: 120, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 4), status: 0 },\n        Character { id: 4, x: x(2), y: 6, class: MAGE, health: 40, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 5), status: 0 },\n    ]\n}\n\n#[export]\npub fn parse_characters(data: SerializedArenaCharacterRoster, actions_data: SerializedArenaActionDefinitions, events: [Event; MAX_EVENTS], enemy_advance: u8) -> pub (bool, [Character; MAX_CHARACTERS]) {\n    comptime { assert(MAX_CHARACTERS == 5); }\n\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut is_valid = true;\n\n    let wait_action = get_wait_action_def();\n\n    // no need to optimize, compiler automatically rolls this out\n    // let mut result: [Character; MAX_CHARACTERS] = [Character::create_character(0, 0, 0, 0), Character::create_character(1, 0, 0, 0), Character::create_character(2, 0, 0, 0), Character::create_character(3, 0, 0, 0), Character::create_character(4, 0, 0, 0)];\n    // for i in 0..(MAX_CHARACTERS as u8) {\n    //     let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action, events, enemy_advance);\n    //     is_valid &= curr_valid;\n    //     result[i] = curr_c;\n    // }\n\n        let (curr_valid, curr_c0) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[0] = curr_c0;\n        let (curr_valid, curr_c1) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[1] = curr_c1;\n        let (curr_valid, curr_c2) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[2] = curr_c2;\n        let (curr_valid, curr_c3) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[3] = curr_c3;\n        let (curr_valid, curr_c4) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[4] = curr_c4;\n    let result = [curr_c0, curr_c1, curr_c2, curr_c3, curr_c4];\n    (is_valid, result)\n}\n\npub fn get_test_my_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 100,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\npub fn get_test_their_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 255,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\n#[test]\nfn test_serialize_character() {\n    let mut character = Character {\n        id: 4,\n        x: 21,\n        y: 9,\n        class: 5,\n        progress: 9,\n        health: 129,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 31,\n        target_y: 9,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    };\n    let (field, _) = character.serialize();\n    assert(field[0] == (21 | (5 << 5)));\n    assert(field[1] == (9 | (9 << 4)));\n    assert(field[2] == 129);\n    assert(field[3] == 31); // TODO: why?\n    assert(field[4] == 9);\n    assert(field[5] == 0);\n}\n\n#[test]\nfn test_parse_character() {\n    let dummy_events = Event::get_test_dummy_events();\n    let data_array: [u8; 32] = [\n        0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        191 as u8, 249 as u8, 255 as u8, 255 as u8, 9 as u8, 255 as u8,\n        181 as u8, 153 as u8, 129 as u8, 127 as u8, 9 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n    ];\n    let data: Field = std::field::bytes32_to_field(data_array);\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    println(data);\n    assert(data == 0xbff9ffff09ffb599817f0900000000000000, f\"Failed assumption: data: {data} != 0xbff9ffff09ffb599817f0900000000000000\");\n    let (character_valid, character) = Character::parse(3, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_valid);\n    assert(character.get_id() == 3);\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 9);\n    assert(character.get_class() == 5);\n    assert(character.get_progress() == 9);\n    assert(character.get_health() == 129);\n    assert(character.get_has_been_seen());\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n\n    let (character_max_valid, character_max) = Character::parse(2, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_max_valid);\n    assert(character_max.get_id() == 2);\n    assert(character_max.get_x() == 31);\n    assert(character_max.get_y() == 9);\n    assert(character_max.get_class() == 5);\n    assert(character_max.get_progress() == 15);\n    assert(character_max.get_health() == 255);\n    assert(character_max.get_has_been_seen());\n    assert(character_max.get_target_x() == 31);\n    assert(character_max.get_target_y() == 9);\n\n    let (character_min_valid, character_min) = Character::parse(0, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_min_valid);\n    assert(character_min.get_id() == 0);\n    assert(character_min.get_x() == 0);\n    assert(character_min.get_y() == 0);\n    assert(character_min.get_class() == 0);\n    assert(character_min.get_progress() == 0);\n    assert(character_min.get_health() == 0);\n    assert(character_min.get_has_been_seen() == false);\n    assert(character_min.get_target_x() == 0);\n    assert(character_min.get_target_y() == 0);\n}\n\n#[test]\nfn test_parse_character_as_in_game() {\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    let data: Field = 0x1602ff1f09001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00;\n    let (character_valid, character) = Character::parse(0, data, dummy_actions, wait_action, Event::get_test_dummy_events(), 20);\n    assert(character_valid);\n    assert(character.get_id() == 0);\n    assert(character.get_x() == 22, character.get_x());\n    assert(character.get_y() == 2, character.get_y());\n    assert(character.get_class() == 0, character.get_class());\n    assert(character.get_progress() == 0, character.get_progress());\n    assert(character.get_health() == 255);\n    assert(character.get_has_been_seen() == true);\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n}\n\n#[export]\npub fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> pub (Field, SerializedArenaActionDefinitions) {\n    let mut result: [u8; 32] = [0; 32];\n    let mut actions: SerializedArenaActionDefinitions = [0; 30]; //&[].as_array();\n    for i in 0..MAX_CHARACTERS {\n        let (serialized_char_bytes, serialized_actions) = chars[i].serialize();\n        for j in 0..6 {\n            result[2 + i * 6 + j] = serialized_char_bytes[j];\n        }\n        for k in 0..MAX_ACTIONS_PER_CHARACTER {\n          actions[i * MAX_ACTIONS_PER_CHARACTER + k] = serialized_actions[k];\n        }\n    }\n    \n    (std::field::bytes32_to_field(result), actions)\n}\n\n/**\n* For now we will only take class into account.\n*/\npub fn get_attack_damage_to_tile(attack_type: u8, damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * resistances[attack_type * 8 + (class & 7)] as u32 / 100) as u32\n}\n\npub fn get_trap_damage_to_tile(damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * trap_resistances[class & 7] as u32 / 100) as u32\n}\n\n#[test]\nfn test_parse_character_round0() {\n  // let actions_data = .map(|f|f.to_be_bytes::<32>()).map(|f|std::field::bytes32_to_field(f));\n  let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let enemy_advance = 0x00;\n  let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0)\n  ];\n  let serialized_events = serialize_events(events);\n   println(f\"events: {serialized_events}\");\n\n  let parsed = parse_characters(data, [\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071020100a000020100a00000020000000002000000000000000,\n    0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n    0x023100081b161118120a010018120a01000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071008100a000008100a00000020000000002000000000000000,\n    0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n    0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071018100a000018100a00000020000000002000000000000000,\n    0x09f0000130060c002000000000200000000020000000002000000000000000,\n    0xf00001100610001005000100100500010020000000002000000000000000,\n    0xf00001301c0100100d000000100d00000020000000002000000000000000,\n    0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110061028100a000028100a00000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071010100a000010100a00000020000000002000000000000000,\n    0xf000071b1611002000000000000705000020000000002000000000000000,\n    0x6300061b161164150a020164150a02010020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000\n], events, enemy_advance);\n\n  assert(parsed.0);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/character.nr"},"74":{"source":"use arenalib::{ NO_EVENT, SEE_MOVE, RECEIVE_ATTACK, TRIGGERED_TRAP }; //, SEE_RITUAL, SEE_CAST, SEE_DRAW, SEE_SEARCH_TRAP, FOUND_TRAP\n// use crate::{ EMPTY, WALL };\nuse arenalib::{ EVENT_COUNT };\nuse arenalib::{ ATTACK_FIREBALL };\nuse arenalib::{ SERIALIZED_EVENT_BYTE_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD };\nuse arenalib::{ WIDTH };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS }; //, MAX_TRAPS\nuse arenalib::SerializedArenaEvents;\n// use crate::TRAPS_BUFFER_MASK;\nuse crate::map::get_distance;\n// use crate::character::Character;\nuse crate::character::{ get_attack_damage_to_tile, get_trap_damage_to_tile };\nuse crate::map::their_x_to_mine;\nuse skplg::{ debug, softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD };\n\npub struct Event {\n    pub event: u8,\n    pub actor_id: u8,\n    pub subtype: u8,\n    pub x: u8,\n    pub y: u8,\n    pub value: u8,\n    pub radius: u8,\n}\n\n\n    #[export]\n    pub fn parse_their_events(fields: SerializedArenaEvents) -> pub (bool, [Event; MAX_EVENTS]) {\n        comptime {\n            assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENT_BYTE_SIZE <= 32);\n            assert(SERIALIZED_EVENTS_ARRAY_SIZE * SERIALIZED_EVENTS_PER_FIELD == MAX_EVENTS);\n            assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n        }\n\n        let mut valid = true;\n        let mut events: [Event; MAX_EVENTS] = [Event::empty(0); MAX_EVENTS];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let split: [u8; 32] = fields[i].to_be_bytes::<32>(); //.to_be_bytes<32>();\n            //assert(split.len() == 32);\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                let raw_x = split[offset + 2];\n                let (x_parsed_valid, x_parsed) = their_x_to_mine(raw_x);\n                softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to calculate their_x_to_mine: {raw_x}\" });\n                events[i * SERIALIZED_EVENTS_PER_FIELD + j] = Event {\n                    event: split[offset],\n                    actor_id: split[offset + 1],\n                    x: x_parsed,\n                    y: split[offset + 3],\n                    value: split[offset + 4],\n                    subtype: split[offset + 5],\n                    radius: split[offset + 6],\n                };\n            }\n        }\n        (valid, events)\n    }\n    \n    #[export]\n    pub fn serialize_events(events: [Event; MAX_EVENTS]) -> pub SerializedArenaEvents {\n        assert(events.len() == MAX_EVENTS);\n        assert(MAX_EVENTS % SERIALIZED_EVENTS_PER_FIELD == 0);\n        assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n\n        let mut fields: [Field] = &[];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let mut data: [u8; 32] = [0; 32];\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let index = i * SERIALIZED_EVENTS_PER_FIELD + j;\n                let event = events[index];\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                data[offset] = event.event;\n                data[offset + 1] = event.actor_id;\n                data[offset + 2] = event.x;\n                data[offset + 3] = event.y;\n                data[offset + 4] = event.value;\n                data[offset + 5] = event.subtype;\n                data[offset + 6] = event.radius;\n            }\n            fields = fields.push_back(std::field::bytes32_to_field(data));\n        }\n        fields.as_array()\n    }\n    \n#[test]\nfn test_event_serde() {\n    let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 5, NO_EVENT, 1),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 6, NO_EVENT, 2),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 7, NO_EVENT, 3),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 8, NO_EVENT, 4)\n  ];\n\n  let serialized = serialize_events(events);\n  let (result_valid, result) = parse_their_events(serialized);\n  assert(result_valid);\n  assert(result[0].event == events[0].event);\n  assert(result[1].event == events[1].event);\n  assert(result[2].event == events[2].event);\n  assert(result[3].event == events[3].event);\n  assert(result[0].actor_id == events[0].actor_id);\n  assert(result[1].actor_id == events[1].actor_id);\n  assert(result[2].actor_id == events[2].actor_id);\n  assert(result[3].actor_id == events[3].actor_id);\n  assert(result[0].x == events[0].x);\n  assert(result[1].x == events[1].x);\n  assert(result[2].x == events[2].x);\n  assert(result[3].x == events[3].x);\n  assert(result[0].y == events[0].y);\n  assert(result[1].y == events[1].y);\n  assert(result[2].y == events[2].y);\n  assert(result[3].y == events[3].y);\n  assert(result[0].value == events[0].value);\n  assert(result[1].value == events[1].value);\n  assert(result[2].value == events[2].value);\n  assert(result[3].value == events[3].value);\n  assert(result[0].subtype == events[0].subtype);\n  assert(result[1].subtype == events[1].subtype);\n  assert(result[2].subtype == events[2].subtype);\n  assert(result[3].subtype == events[3].subtype);\n  assert(result[0].radius == events[0].radius);\n  assert(result[1].radius == events[1].radius);\n  assert(result[2].radius == events[2].radius);\n  assert(result[3].radius == events[3].radius);\n}\n    // fn affects_my_character(self, x: u8, y: u8) -> bool {\n    //     let distance = get_distance(self.x, self.y, x, y);\n    //     ((self.x == x) & (self.y == y)) | ((self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y))\n    // }\nimpl Event {\n    fn affects_my_obstacle(self, x: u8, y: u8) -> bool {\n        (self.x == x) & (self.y == y)\n    }\n\n    fn may_affect_my_other_characters(self) -> bool {\n        (self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL)\n    }\n\n    fn may_affect_my_obstacles(self) -> bool {\n        self.event == RECEIVE_ATTACK\n    }\n\n    /**\n    * For now we will only take class into account.\n    */\n    pub fn get_applied_damage_to_my_asset(self, x: u8, y: u8, tile: u8) -> u16 {\n        let mut damage = 0;\n        let radius = self.radius as u32;\n        let radius = radius * radius;\n    \n        if self.event == RECEIVE_ATTACK {\n            let distance = get_distance(self.x, self.y, x, y) as u32;\n            debug!(quote {\n                        // let event = self.event;\n                        // let actor = self.actor_id;\n                        // let self_x = self.x;\n                        // let self_y = self.y;\n                        // let val = self.value;\n                        // println(f\"GetAppliedDamageToMyAsset: Event({event}:{val} from {actor}@{self_x}|{self_y})@{x}|{y}: {distance} <= {radius}\");\n                    });\n            if distance <= radius {\n                let damage_raw = get_attack_damage_to_tile(self.subtype, self.value as u32, tile) as u32;\n                damage = damage_raw * (1 + radius - distance) / (radius + 1) as u32;\n                debug!(quote { println(f\"Deal damage: {damage_raw} * (1 + {radius} - {distance}) / ({radius} + 1) = {damage}\"); });\n            }\n            // if (self.x == x) & (self.y == y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile);\n            // } else if (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile) / 2;\n            // }\n        }\n        if self.event == TRIGGERED_TRAP {\n            damage = get_trap_damage_to_tile(self.value as u32, tile);\n        }\n        damage as u16\n    }\n\n    pub fn empty(actor_id: u8) -> Event {\n        Event {\n            event: NO_EVENT,\n            actor_id: actor_id,\n            x: 0,\n            y: 0,\n            value: 0,\n            subtype: 0,radius: 0\n        }\n    }\n\n    pub fn get_dummy_events() -> [Field; MAX_EVENTS] {\n        [0; MAX_EVENTS]\n    }\n\n    pub fn get_test_dummy_events() -> [Event; MAX_EVENTS] {\n        [Event::empty(0); MAX_EVENTS]\n    }\n}\n\npub fn build_std_event(event: u8, actor_id: u8, x: u8, y: u8) -> Event {\n    assert(event < EVENT_COUNT);\n    assert((actor_id as u32) < MAX_CHARACTERS);\n    assert((x < WIDTH) | (x == NOWHERE));\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: 0,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\n#[test]\nfn test_build_std_event() {\n    let event = build_std_event(SEE_MOVE, 1, 2, 3);\n    assert(event.event == SEE_MOVE);\n    assert(event.actor_id == 1);\n    assert(event.x == 2);\n    assert(event.y == 3);\n}\n\n#[test(should_fail)]\nfn test_build_std_event_fail() {\n    let event = build_std_event(EVENT_COUNT, 1, 2, 3);\n    assert(event.event == EVENT_COUNT);\n}\n\npub fn build_value_event(event: u8, actor_id: u8, x: u8, y: u8, value: u8) -> Event {\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\npub fn build_subtype_value_event(event_type: u8, actor_id: u8, x: u8, y: u8, value: u8, event_subtype: u8, radius: u8) -> Event {\n    Event {\n        event: event_type,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: event_subtype,\n        radius: radius,\n    }\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/event.nr"},"75":{"source":"mod common;\n// mod actionPreCalcEffect;\n// mod actionResultEvent;\n// mod actionResultEffect;\n// mod actionRequirements;\nmod action;\n// mod actionDefinitionRegister;\nmod bugs;\nuse arenalib::{ new_action };\npub use action::execute_action;\n// mod actionDefinition;\nmod character;\nuse character::{ Character };\nuse character::parse_characters;\nmod event;\nuse event::Event;\npub use event::{serialize_events, parse_their_events};\nmod obstacle;\nuse obstacle::Obstacle;\npub use obstacle::{ new_obstacle, parse_my_obstacles, parse_their_obstacles, get_obstacle_x, get_obstacle_y, get_obstacle_id, get_obstacle_type, get_obstacle_health, serialize_my_obstacles, get_default_obstacles };\nmod map;\nuse dep::std;\nuse obstacle::serialize_obstacle;\nuse obstacle::serialize_their_obstacles;\n// use action::ACTION_TARGET_X;\n// use action::ACTION_TARGET_Y;\n// use action::ACTION_TYPE;\nuse arenalib::{get_action_target_y, get_action_target_x, get_action_type};\nuse obstacle::serialize_my_obstacles_for_me;\nuse map::is_visible;\npub use arenalib::{SerializedArenaActionDefinitions, SerializedArenaActions, SerializedArenaCharacterRoster, SerializedArenaEnemyObstacles, SerializedArenaEvents, SerializedArenaObstacles};\nuse arenalib::arena_test_action_def_register;\nuse character::serialize_chars;\nuse skplg::{softassert, debug};\nuse arenalib::{serialize_actions, parse_actions};\n\nuse arenalib::{SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLE_BYTE_SIZE};\nuse arenalib::{WIDTH};\nuse arenalib::{MAX_ACTIONS, MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES};\nuse arenalib::{VIEW_DISTANCE};\nuse arenalib::{ARCHER, KNIGHT, ROGUE, MAGE, RITUALIST};\nuse arenalib::{MIN_FIREBALL_ROUNDS_FOR_CAST};\nuse arenalib::{SEE_MOVE, RECEIVE_ATTACK, NO_EVENT};\nuse arenalib::{ATTACK_FIREBALL, ATTACK_RANGED};\nuse arenalib::{WAIT};\nuse arenalib::get_wait_action_def;\nuse arenalib::get_test_action_register;\n\n// mod ResolvedAction;\n\n\n\n// #[export]\n// pub fn ext_can_move_to(x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle]) -> bool {\n//     assert(MAX_OBSTACLES == 24);\n//     let mut my_obstacles_parsed = Obstacle::parse_my_obstacles(my_obstacles, events).as_array();\n//     // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n//     // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n//     let enemy_objects_parsed = Obstacle::parse_their_obstacles(enemy_objects);\n\n//     let mut can = true;\n//     for i in 0..MAX_OBSTACLES {\n//         if !obstacles[i].is_traversible() & (obstacles[i].x == x) & (obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     for i in 0..their_obstacles.len() {\n//         if !their_obstacles[i].is_traversible() & (their_obstacles[i].x == x) & (their_obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     can\n// }\n\n// pub comptime global DEBUG: bool = false;\n// pub comptime fn debug(stmt: Quoted) -> Quoted {\n//     let debug_result = if DEBUG {\n//         stmt\n//     } else { quote {} };\n//     debug_result\n// }\n// pub comptime fn debugmsg<T>(msg: T) -> Quoted {\n//     debug!(quote { println($msg); })\n// }\n// pub comptime fn softassert(varname: Quoted, check: Quoted, msg: Quoted) -> Quoted {\n//     let result = if DEBUG {\n//         quote {\n//             $varname &= $check;\n//             if !($check) {\n//                 println($msg);\n//             }\n//         }\n//     } else {\n//         quote {\n//             $varname &= $check;\n//         }\n//     };\n//     result\n// }\n\n// // MAP\n// global WIDTH_BITS: u8 = 5;\n// global WIDTH_MASK: u8 = (1 << WIDTH_BITS) - 1;\n// global WIDTH: u8 = 1 << WIDTH_BITS;\n// global HEIGHT_BITS: u8 = 4;\n// global HEIGHT_MASK: u8 = (1 << HEIGHT_BITS) - 1;\n// global HEIGHT: u8 = 10;\n// // global NOWHERE: u8 = 255;\n\n// // CLASSES\n// //global UNKNOWN_CLASS: u8 = 0;\n// global ARCHER: u8 = 1;\n// global RITUALIST: u8 = 2;\n// global ROGUE: u8 = 3;\n// global KNIGHT: u8 = 4;\n// global MAGE: u8 = 5;\n// global CLASS_BITS: u8 = 3;\n// global CLASS_MASK: u8 = (1 << CLASS_BITS) - 1;\n// global CLASS_COUNT: u32 = 6;\n// global MAX_ACTIONS_PER_CHARACTER: u32 = 6;\n\n// // ACTIONS\n// global WAIT: u8 = 0;\n// //global SNEAK: u8 = 1;\n// //global MOVE: u8 = 2;          // => SEE_COLUMN (depr: MOVE)\n// //global RITUAL: u8 = 3;        // => SEE_RITUAL | WIN\n// //global SEARCH: u8 = 4;        // => SEE_SEARCH_TRAP\n// //global ATTACK: u8 = 5;        // => RECEIVE_ATTACK | DESTROY // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST: u8 = 6;          // => SEE_CAST // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST_FIREBALL: u8 = 7; // => RECEIVE_ATTACK // affects other characters if status == FIREBALL_ROUNDS_FOR_CAST\n// //global DRAW: u8 = 8;          // => SEE_DRAW\n// //global SHOOT: u8 = 9;         // => RECEIVE_ATTACK\n// //global TRIGGER_TRAP = 9;  // => TRIGGERED_TRAP ?????????\n// //global DISARM_TRAP: u8 = 10;  // => DESTROY\n// //global SET_TRAP: u8 = 11;\n// global ACTION_COUNT: u32 = 12;\n// pub global ACTION_RESULT_EVENT_COUNT: u32 = 4;\n// global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0;\n// global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1;\n// global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2;\n\n// // EVENTS\n// global NO_EVENT: u8 = 0 ;\n// // global DESTROY: u8 = 1;          // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //use coordinates to determine tile or trap that got destroyed and update map\n// //global DISCOVER = 2;         // actor_id = their_char or their_object when receive - handle to update enemy positions, got health & class (this is for all chars, not just the active one)\n// //global SEE_COLUMN = 2 ;      // y = the column the player sees => update objects list\n// global SEE_MOVE: u8 = 3 ;        // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //handle to update enemy positions => DISCOVER\n// //global SEE_SPELL = 4 ;       // actor_id = their_char when receive - need to handle effect via coordinates, => RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle my obstacles\n// global SEE_SEARCH_TRAP: u8 = 5 ; // actor_id = their_char when receive - need to create found trap event if there is a trap nearby => FOUND_TRAP\n// global SEE_RITUAL: u8 = 6 ;      // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_CAST: u8 = 7;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_DRAW: u8 = 8;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// //global RECEIVE_DAMAGE = 9;   // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client\n// global RECEIVE_ATTACK: u8 = 10;  // actor_id = 0 when receive - need to handle damage => // no need to events ... health of visible assets gets sent anyway and invisible ones will be updated during discovery //RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle in my obstacles\n// global TRIGGERED_TRAP: u8 = 11;  // actor_id = my_char when receive - need to handle damage (for now, later on we might want to handle other effects as well) => RECEIVE_DAMAGE\n// // global FOUND_TRAP: u8 = 12;      // actor_id = my_char when receive - no need to handle, only important to have on-chain for the client\n// global DISARMED_TRAP: u8 = 13;      // actor_id = their-char when receive - need to remove my trap from the map\n// global WIN: u8 = 14;\n// // global LOSE: u8 = 15;\n// global ADD_OBSTACLE: u8 = 4;\n// global EVENT_COUNT: u8 = 16;\n\n// // SUBTYPES:\n// global WIN_BY_RITUAL: u8 = 1;\n\n// // ATTACKS\n// global ATTACK_MELEE: u8 = 0;\n// global ATTACK_RANGED: u8 = 1;\n// global ATTACK_FIREBALL: u8 = 2;\n// // global ATTACK_COUNT: u8 = 3;\n// // TODO: instead of enum, use a global array of structs with damage, range, etc.\n\n\n// // TILES\n// global EMPTY: u8 = 0;\n// global WALL: u8 = 6;\n// global WATER: u8 = 7;\n// // global UNKNOWN_CLASS_TILE: u8 = 8;\n// global NON_EMPTY_WALKABLE_TILE_MIN: u8 = 9;\n// // global FLAG: u8 = 9;\n// global TRAP: u8 = 10;\n// // global TRAP_USED: u8 = 11;\n// // global TRAP_FOUND: u8 = 12;\n// // global BODY: u8 = 13;\n// // global BODY_LOOTED: u8 = 14;\n// // global FOG: u8 = 15;\n// global MAX_OBSTACLE_TYPE: u8 = 0x0f;\n// // global TILE_COUNT: u8 = 16;\n// // unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n// // STATUS\n// global RITUAL_ROUNDS_FOR_WIN: u8 = 15;\n// global MIN_FIREBALL_ROUNDS_FOR_CAST: u8 = 3;\n// global MAX_FIREBALL_ROUNDS_FOR_CAST: u8 = 6;\n// // global DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MIN_DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MAX_DRAW_ROUNDS_FOR_SHOOT: u8 = 3;\n// global PROGRESS_BITS: u8 = 4;\n// global PROGRESS_MASK: u8 = (1 << PROGRESS_BITS) - 1;\n// global PROGRESS_COUNT: u8 = 16 ; // just to be more in line with the other constants, actually used as a counter\n// global MAX_HEALTH: u8 = 255;\n\n// // GAMEPLAY\n// global VIEW_DISTANCE: u8 = 6;\n// // global MAX_TRAPS: u32 = 8; // note: only lowest bit of first byte of field is usable! => ! Field = 1 bit + 31 bytes!\n// // global TRAPS_BUFFER_SIZE: Field = 16;\n// // global TRAPS_BUFFER_MASK: Field = 15; // has to be 2^n - 1\n// global MAX_ACTIONS: u32 = 4;\n// global MAX_EVENTS: u32 = 4; // = MAX_ACTIONS // NO! handle traps in a different way (by passing as argument!)+ 4 (2 FOUND_TRAP + WIN/LOSE + 1 reserved)\n// global MAX_OBSTACLES: u32 = 24; // leave traps for now + MAX_TRAPS; // 24 + 8 player placeables\n// pub global MAX_CHARACTERS: u32 = 5;\n// global MIN_PROGRESS: u8 = 0;\n// pub global MAX_PROGRESS: u8 = PROGRESS_COUNT - 1;\n// global SERIALIZED_OBSTACLE_BYTE_SIZE: u32 = 3;//3\n// pub global SERIALIZED_OBSTACLES_ARRAY_SIZE: u32 = 3;//3 // TODO: we take 3 because 3 x 8 = MAX_OBSTACLES ... should assert on this (MAX_OBSTACLES + MAX_CHARACTERS + 7) / 8;\n// pub global SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE: u32 = SERIALIZED_OBSTACLES_ARRAY_SIZE + 1; // +1 because enemy characters are also serialized as obstacles\n// global SERIALIZED_OBSTACLES_PER_FIELD: u32 = 8;//8 // TODO: need to verify that SERIALIZED_OBSTACLES_ARRAY_SIZE * SERIALIZED_OBSTACLES_PER_FIELD = MAX_OBSTACLES!\n// global SERIALIZED_EVENT_BYTE_SIZE: u32 = 7;\n// pub global SERIALIZED_EVENTS_ARRAY_SIZE: u32 = 1; // MAX_EVENTS / SERIALIZED_EVENTS_PER_FIELD => 4 / 4 = 1\n// global SERIALIZED_EVENTS_PER_FIELD: u32 = 4; // 31 / 7 = 4\n// global SERIALIZED_ACTION_BYTE_SIZE: u32 = 5;\n// pub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n// global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4; // could be up to 6, but we only use 4\n\n\n// pub type SerializedArenaActionDefinitions = SerializedRosterActionDefinitions<MAX_ACTIONS_PER_CHARACTER, MAX_CHARACTERS>;\n// pub type SerializedArenaCharacterActionDefinitions = SerializedCharacterActionDefinitions<MAX_ACTIONS_PER_CHARACTER>;\n// pub type SerializedArenaCharacterActionDefinition = SerializedCharacterActionDefinition;\n// #[export]\n// fn tf(x: Field) -> (u32, [u8;32]) {\n//     let mut result: [u8;32] = [0;32];\n//     let bts = x.to_be_bytes::<32>();\n//     for j in 0..31 {\n//         result[j] = 2*j;//bts[j];\n//     }\n//     (32 , result)\n// }\n// i,\n// 20, 0 -> 25,\n// 25 -> 0, \n// x, 0, 0, d0,\n// x, 0, 0, 9d, 1, 0,\n// x, 0, 0, 1, 0, b4, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 91, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 23, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, d4, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, 66, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 50, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b9, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, c5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 55, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b2, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, e8, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2a, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, cb, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 9b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 5c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, a6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 86, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, d5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 38, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8e, 1, 0, 0, 1,\n// 0, 32, 1, 0, 1, 1, x, 0, 0, 1,\n// x, 0, 0, 1, x, 0, 0, 1, 0, 1, 1\n\n// i,\n// 20, 0, 1e -> 0, 0 -> 1e, 0\n// x, 0, 0, d0,\n// x, 0, 0, ba, 1, 0,\n// x, 0, 0, 1, 0, cf, 1, 0, 1, 1,\n\nfn get_actor_from_move(mut move: u32) -> u8 {\n    if (move % 2) == 1 {\n        move -= 1; //((move % 10) - 1) >> 1 // actually not needed ... but clearer this way\n    }\n    let single_digit: u32 = (move % 10 as u32) >> 1;\n    single_digit as u8\n}\n// 3, 1, 1, 1, 0, 1, 2, 0, 2, 8, 1, 0, 0, 1\n// 4, 2, 2, 0, x, 0, 0, 0, 4, a, 2, 0, 0, 2\n\n#[export]\npub fn hash_serialized_private_state(my_chars: SerializedArenaCharacterRoster, my_char_actions: SerializedArenaActionDefinitions, my_obstacles: SerializedArenaObstacles, secret: Field) -> pub Field {\n    // let my_chars_be_bytes: [u8; 32] = my_chars.to_be_bytes::<32>();\n    // assert(my_chars_be_bytes.len() == 32);\n    let gamestate_before_hash_calculated = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n    //let gamestate_before_hash_calculated_field = std::field::bytes32_to_field(gamestate_before_hash_calculated);\n    gamestate_before_hash_calculated\n}\n\n#[test]\nfn test_hash_match() {\n  let my_chars = 12345678901234567890;\n  let my_char_actions = [\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890\n  ];\n  let my_obstacles = [\n    12345678901234567890, 12345678901234567890, 12345678901234567890\n  ];\n  let secret = 12345678901234567890;\n\n  let hash1 = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n  let valid = hash_serialized_private_state(my_chars, my_char_actions, my_obstacles, secret);\n\n  assert(hash1 == valid, f\"{hash1} != {valid}\");\n}\n\n#[export]\nfn get_serialized_obstacle(id: u8, x: u8, y: u8, obstacle_type: u8) -> pub Field {\n    let mut result: [u8; 32] = [0; 32];\n    result[0] = id;\n    result[1] = x;\n    result[2] = y;\n    result[3] = obstacle_type;\n    std::field::bytes32_to_field(result)\n}\n\n// global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// global action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n\n\n#[export]\npub fn calculate_turn(\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions_input: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //mut my_obstacles_parsed: [[u8; 5]; 24],\n    actions_input: SerializedArenaActions,\n    // Common Inputs\n    move_input: u32, //pub\n    // Enemy Inputs\n    enemy_advance_input: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects_input: SerializedArenaEnemyObstacles, // pub\n    enemy_events_input: SerializedArenaEvents, // pub //MAX_EVENTS],\n\n) -> pub (bool, SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, [Obstacle; 24], u8, SerializedArenaEvents, SerializedArenaEnemyObstacles) {\n    let mut success = true;\n    \n// let action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n    //let actionRegister = ActionDefinitionRegister::new(my_char_actions_input);\n    // calculate enemy advance in our coordinates and shadow\n    // let (enemy_advance_valid, enemy_advance) = their_x_to_mine(enemy_advance);\n\n    // // more efficient to do this here, BUT leads to bad side effects for frontend (and it is not THAT costly)\n    // let enemy_advance = if enemy_advance_input >= WIDTH { 0 } else { WIDTH - enemy_advance_input - 1 };\n\n\n    // TODO: Validate map => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    let (events_valid, events) = parse_their_events(enemy_events_input);\n    softassert!(quote { success }, quote { events_valid }, quote { f\"Failed to parse their events {events}\" });\n\n    // let side = move as u1;\n    let (my_chars_valid, mut my_chars) = parse_characters(my_chars_input, my_char_actions_input, events, enemy_advance_input);\n    softassert!(quote { success }, quote { my_chars_valid }, quote { f\"Failed to parse my characters {my_chars}\" });\n\n    let actor_id = get_actor_from_move(move_input);\n    let mut actor = my_chars[actor_id]; //Character::parse(actor_id, my_chars, events);\n    \n    comptime {\n        assert(MAX_OBSTACLES == 24);\n    }\n\n    let (valid, my_obstacles_parsed) = parse_my_obstacles(my_obstacles_input, events);\n    softassert!(quote { success }, quote { valid }, quote { f\"Failed to parse my obstacles {my_obstacles_input}\" });\n    let mut my_obstacles_parsed: [Obstacle; MAX_OBSTACLES] = my_obstacles_parsed;\n\n    let (actions_valid, actions) = parse_actions(MAX_CHARACTERS as u8, actions_input); // actions.map(|action| Action::from_field(action));\n    softassert!(quote { success }, quote { actions_valid }, quote { f\"Failed to parse actions {actions_input}\" });\n    // let mut my_obstacles_parsed = my_obstacles_parsed.as_array();\n//    let (valid, mut my_obstacles_parsed) = parse_my_obstacles(my_obstacles, events).as_array();\n    // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n    let (enemy_objects_parsed_valid, enemy_objects_parsed) = parse_their_obstacles(enemy_objects_input);\n    softassert!(quote { success }, quote { enemy_objects_parsed_valid }, quote { f\"Failed to parse their obstacles {enemy_objects_input}\" });\n\n    let mut energy: u8 = 12;\n    let mut result_events_calculated: [Event] = &[];\n    for i in 0..MAX_ACTIONS {\n        // TODO: ensure that if actor committed suicide, it is not allowed to do any more actions\n        let action = actions[i];\n        //let resolved_action = actionRegister.resolve_action(action); //resolve_action(action);\n        let result = execute_action(action, enemy_advance_input, actor, energy, my_obstacles_parsed, enemy_objects_parsed);\n        //assert(result.0);\n        success &= result.0;\n        let result_event = result.1;\n        let internal_event = result.2;\n        actor = result.4;\n        energy = result.5;\n        \n        // 4461 / 5 = 892,2\n        my_chars = my_chars.map(|c| wb_apply_damage_to_char(c, result_event, actor));\n        // 16800 / 24 = 700\n        my_obstacles_parsed = my_obstacles_parsed.map(|obstacle| {\n            let (updated_obstacle_valid, updated_obstacle) = update_my_obstacle(obstacle, result_event);\n            //success = success & updated_obstacle_valid;\n            softassert!(quote { success }, quote { updated_obstacle_valid }, quote { f\"Failed to update my obstacle {obstacle}, {result_event}\" });\n            updated_obstacle\n        });\n\n        result_events_calculated = result_events_calculated.push_back(result_event);\n    }\n    let result_events_calculated = serialize_events(result_events_calculated.as_array());\n    assert(result_events_calculated.len() == SERIALIZED_EVENTS_ARRAY_SIZE);\n\n    // send death events => no need\n\n    // determine view range\n    let mut my_advance_calculated = 0;\n    for i in 0..MAX_CHARACTERS {\n        if my_chars[i].x > my_advance_calculated {\n            my_advance_calculated = my_chars[i].x;\n        }\n    }\n    my_advance_calculated += VIEW_DISTANCE;\n\n    let (serialized_characters, serialized_action_defs) = serialize_chars(my_chars);\n    let serialized_obstacles: [Field] = serialize_my_obstacles(enemy_advance_input, my_obstacles_parsed);\n    let (serialized_chars_as_obstacles_valid, serialized_chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance_input, my_chars);\n    // success = success & serialized_chars_as_obstacles_valid;\n    softassert!(quote { success }, quote { serialized_chars_as_obstacles_valid }, quote { f\"Failed to serialize chars as obstacles: {my_chars}\" });\n    let serialized_obstacles_for_enemy: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE] = serialized_obstacles.push_back(serialized_chars_as_obstacles).as_array();\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles_parsed);\n\n    (success, serialized_characters, serialized_action_defs, my_obstacles_parsed, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy)\n}\n\n\n\n#[export]\npub fn turn(\n    // verification_key: pub [Field; 114],\n    // proof: pub [Field; 93],\n    // public_inputs: pub [Field; 1 ],//+ 2 * SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE + 2 * SERIALIZED_EVENTS_ARRAY_SIZE],\n    // key_hash: pub Field,\n    // last_move: pub u32,\n    // last_enemy_advance: pub u8,\n    // last_enemy_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // last_events: pub [Field, SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_advance: pub u8,\n    // last_my_result_events: pub [Field; SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_result_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // Gamestate Hashes\n    // gamestate_before_hash: pub Field,\n    // gamestate_after_hash: pub Field,\n    // My Secret State\n    secret: Field,\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //my_obstacles: [[u8; 5]; 24],\n    actions: SerializedArenaActions,\n    // Common Inputs\n    move: u32, //pub\n    // Enemy Inputs\n    enemy_advance: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects: SerializedArenaEnemyObstacles, // pub\n    enemy_events: SerializedArenaEvents, // pub //MAX_EVENTS],\n    // My Results\n    my_result_advance: u8, // pub // 1 bit win, 1 bit lose, 1 bit reserved, 5 bits advance\n    my_result_events: SerializedArenaEvents, // pub\n    my_result_objects: SerializedArenaEnemyObstacles, // pub\n    // Gamestate Hashes\n    gamestate_before_hash: Field, // pub\n    gamestate_after_hash: Field, // pub\n) -> pub bool {\n    // Validate global constants (to make sure one didn't change one without updating dependet ones)\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    //let my_char_actions = arena_test_action_def_register;// get_test_action_register();\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(my_chars_input, my_char_actions, my_obstacles_input, secret);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    softassert!(quote { success }, quote { gamestate_before_hash == gamestate_before_hash_calculated_field }, quote { f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\" });\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        my_chars_input,\n        my_char_actions,\n        my_obstacles_input,\n        actions,\n        move,\n        enemy_advance,\n        enemy_objects,\n        enemy_events\n    );\n    softassert!(quote { success }, quote { turn_calc_valid }, quote { f\"Tun calculation failed\" });\n\n    // if side == 0 {\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x > my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated += VIEW_DISTANCE;\n    // } else {\n    //     my_advance_calculated = WIDTH - 1;\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x < my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated -= VIEW_DISTANCE;\n    // }\n    softassert!(quote { success }, quote { my_result_advance == my_advance_calculated }, quote { f\"Invalid result advance: {my_result_advance} != {my_advance_calculated}\" });\n\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        softassert!(quote { success }, quote { result_event_should == result_event_calculated }, quote { f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\" });\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    assert(my_result_objects.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE {\n        let my_result_object = my_result_objects[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        softassert!(quote { success }, quote { my_result_object == serialized_obstacle }, quote { f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\" });\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secret, serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    softassert!(quote { success }, quote { new_hash_bytes == gamestate_after_hash }, quote { f\"Invalid result hash: {new_hash_bytes} != {gamestate_after_hash}\" });\n    success\n}\n\nfn wb_apply_damage_to_char(mut c: Character, event: Event, actor: Character) -> Character {\n    if c.id == actor.id {\n        c = actor;\n    }\n    apply_damage_to_char(c, event)\n}\n\nfn apply_damage_to_char(c: Character, event: Event) -> Character {\n    let dmg = event.get_applied_damage_to_my_asset(c.x, c.y, c.class);\n    Character {\n        id: c.id,\n        x: c.x,\n        y: c.y,\n        class: c.class,\n        health: safe_subtract_dmg(c.health, dmg),\n        progress: c.progress,\n        target_x: c.target_x,\n        target_y: c.target_y,\n        has_been_seen: c.has_been_seen,\n        is_hidden: c.is_hidden,\n        damage_mod: c.damage_mod,\n        last_action: c.last_action,\n        actions: c.actions,\n        status: 0\n    }\n}\nfn update_my_obstacle(obstacle: Obstacle, event: Event) -> (bool, Obstacle) {\n    let dmg =\n        // event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle)) +\n        event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle));\n    new_obstacle(get_obstacle_id(obstacle), get_obstacle_x(obstacle), get_obstacle_y(obstacle), safe_subtract_dmg(get_obstacle_health(obstacle), dmg), get_obstacle_type(obstacle))\n    // Obstacle {\n    //     health: safe_subtract_dmg(obstacle.health, dmg),\n    //     id: obstacle.id,\n    //     x: obstacle.x,\n    //     y: obstacle.y,\n    //     obstacle_type: obstacle.obstacle_type,\n    // }\n}\n\nfn get_data_hash(secret: Field, characters: Field, character_actions: SerializedArenaActionDefinitions, obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> Field {\n  assert(character_actions.len() == 30);\n  assert(obstacles.len() == 3);\n  std::hash::poseidon2::Poseidon2::hash([\n    secret,\n    characters,\n    character_actions[0],\n    character_actions[1],\n    character_actions[2],\n    character_actions[3],\n    character_actions[4],\n    character_actions[5],\n    character_actions[6],\n    character_actions[7],\n    character_actions[8],\n    character_actions[9],\n    character_actions[10],\n    character_actions[11],\n    character_actions[12],\n    character_actions[13],\n    character_actions[14],\n    character_actions[15],\n    character_actions[16],\n    character_actions[17],\n    character_actions[18],\n    character_actions[19],\n    character_actions[20],\n    character_actions[21],\n    character_actions[22],\n    character_actions[23],\n    character_actions[24],\n    character_actions[25],\n    character_actions[26],\n    character_actions[27],\n    character_actions[28],\n    character_actions[29],\n    obstacles[0],\n    obstacles[1],\n    obstacles[2]\n  ], 2 + 30 + 3)\n}\n// fn get_data_hash(secret: [u8], characters: [u8], character_actions: [u8; ACTION_DEFINITION_REGISTER_SIZE], obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> [u8; 32] {\n//     assert(secret.len() == 32);\n//     assert(characters.len() == 32);\n\n//     let mut data: [u8; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE] = [0; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE];\n//     for i in 0..32 {\n//         data[i] = secret[i];\n//         data[i + 32] = characters[i];\n//     }\n//     let offset = 32 + 32;\n//     for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//         let obstacle: [u8; 32] = obstacles[i].to_be_bytes::<32>();\n//         assert(obstacle.len() == 32);\n//         for j in 0..32 {\n//             data[offset + i * 32 + j] = obstacle[j];\n//         }\n//     }\n//     let offset = 32 + 32 + 32 * SERIALIZED_OBSTACLES_ARRAY_SIZE;\n//     for i in 0..ACTION_DEFINITION_REGISTER_SIZE {\n//         data[offset + i] = character_actions[i];\n//     }\n//     // let offset = WIDTH * HEIGHT + 32 * 3;\n//     // for i in 0..10 {\n//     //     data[offset + i * 4] = (searched_traps[i] & 255) as u8;\n//     //     data[offset + i * 4 + 1] = ((searched_traps[i] >> 8) & 255) as u8;\n//     //     data[offset + i * 4 + 2] = ((searched_traps[i] >> 16) & 255) as u8;\n//     //     data[offset + i * 4 + 3] = ((searched_traps[i] >> 24) & 255) as u8;\n//     // }\n//     std::hash::blake3(data)\n// }\n\n// fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> Field {\n//     comptime {\n//         assert(MAX_CHARACTERS <= 5);\n//     }\n//     let mut result: [u8; 32] = [0; 32];\n//     for i in 0..MAX_CHARACTERS {\n//         let serialized = chars[i].serialize();\n//         for j in 0..6 {\n//             result[2 + i * 6 + j] = serialized[j];\n//         }\n//     }\n//     std::field::bytes32_to_field(result)\n// }\n\nfn serialize_chars_as_obstacles(enemy_advance: u8, chars: [Character; MAX_CHARACTERS]) -> (bool, Field) {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut result: [u8; 32] = [0; 32];\n    let mut valid_result = true;\n    for i in 0..MAX_CHARACTERS {\n        if (chars[i].is_hidden == 0) & is_visible(enemy_advance, chars[i].get_x()) {\n            let (valid, char_as_obstacle) = chars[i].to_obstacle();\n            let serialized = serialize_obstacle(char_as_obstacle);\n            valid_result = valid_result & valid;\n            result[2 + i * 3] = serialized[0];\n            result[2 + i * 3 + 1] = serialized[1];\n            result[2 + i * 3 + 2] = serialized[2];\n        }\n    }\n    (valid_result, std::field::bytes32_to_field(result))\n}\n\nfn safe_subtract_dmg(a: u8, b: u16) -> u8 {\n    let mut result = 0;\n    if (a as u16) > b {\n        result = a - (b as u8);\n    }\n    result\n}\n\nfn test_result_object_builder(enemy_advance: u8, chars: [Character; MAX_CHARACTERS], obs: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1]) {\n    let mut result: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        result[i] = obs[i];\n    }\n    let (valid, chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance, chars);\n    result[SERIALIZED_OBSTACLES_ARRAY_SIZE] = chars_as_obstacles;\n    (valid, result)\n}\n\n// fn test_helper_roster(actor: Character, mut chars: [Character; MAX_CHARACTERS]) -> [Character; MAX_CHARACTERS] {\n//     chars[actor.id] = actor;\n//     chars\n// }\n\n// fn test_helper_execute_move(move: u32, actor: Character, advances: [u8; 2], secret: [Field; 2], last_hashes: [Field; 2], chars: [[Character; MAX_CHARACTERS]; 2], obs: [[Obstacle; MAX_OBSTACLES]; 2], actions: [Action], my_events: [Event], their_events: [Event]) -> (u32, [Character; MAX_CHARACTERS], Field) {\n//     let side = move as u1;\n//     let other_side = (side as u8 + 1) as u1;\n//     let chars_after = test_helper_roster(actor, chars[side]);\n//     let my_obstacles_serialized = serialize_obstacles(advances[other_side], obs[side]);\n//     let secret_be_bytes: [u8; 32] = secret[side].to_be_bytes();\n//     assert(secret_be_bytes.len() == 32);\n//     let serialized_chars_after = serialize_chars(chars_after);\n//     let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes();\n//     assert(serialized_chars_after_be_bytes.len() == 32);\n//     let current_hash = std::field::bytes32_to_field(get_data_hash(secret_be_bytes, serialized_chars_after_be_bytes, my_obstacles_serialized)); \n\n//     let (enemy_objects_valid, enemy_objects) = test_result_object_builder(chars[other_side], serialize_obstacles(other_side, advances[side], obs[other_side]));\n//     assert(enemy_objects_valid, \"Invalid enemy objects\");\n//     let (my_result_objects_valid, my_result_objects) = test_result_object_builder(chars_after, my_obstacles_serialized);\n//     assert(my_result_objects_valid, \"Invalid my result objects\");\n\n//     let result = turn(\n//         secret[side],\n//         character::serialize_chars(chars[side]),\n//         my_obstacles_serialized,\n//         serialize_actions(actions),\n//         move,\n//         advances[other_side],\n//         enemy_objects,\n//         Event::serialize_events(their_events).as_array(),\n//         advances[side],\n//         Event::serialize_events(my_events).as_array(),\n//         my_result_objects,\n//         last_hashes[side],\n//         current_hash\n//     );\n//     assert(result, \"Invalid result\");\n\n//     (move + 1, chars_after, current_hash)\n// }\n\n// #[test]\n// fn test_main() {\n//     let secrets = [123456789, 9876543210];\n//     let mut chars = [ character::get_default_characters(0), character::get_default_characters(1) ];\n//     let mut obs = [ Obstacle::get_default_obstacles(0), Obstacle::get_default_obstacles(1) ];\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 2, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 3, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 4, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 5, target_y: 1 },\n//     ];\n//     let their_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let mut move = 0;\n//     let mut actor = chars[0][0].move(5, 1);\n//     let mut last_hashes = [ 0x12b8f97907a05ec6a77da3f70368fa3b02e166c74edab8ea0695d6f406146559, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n//     let mut advances = [2 + VIEW_DISTANCE, 29 - VIEW_DISTANCE];\n//     advances[0] = 5 + VIEW_DISTANCE;\n\n//     let mut side = move % 2;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 0 },\n//         Action { action: MOVE, actor: 0, target_x: 27, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(27, 0);\n//     advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 1, target_y: 3 },\n//         Action { action: MOVE, actor: 1, target_x: 0, target_y: 3 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(0, 3);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 2 },\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 1, target_x: 28, target_y: 1 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(28, 1);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n// }\n\n#[test]\nfn test_main_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions = arena_test_action_def_register.map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    println(secrets[side]);\n    println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    println(my_obstacles_serialized_for_me);\n    println(serialize_actions(actor.id, actions));\n    println(move);\n    println(advances[other_side]);\n    println(test_result_object_other_chars);\n    println(serialize_events(their_events));\n    println(advances[side]);\n    println(serialize_events(my_events));\n    println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let result = turn(\n        secrets[side],\n        serialized_chars_input,\n        serialized_char_actions_input,\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events),\n        advances[side],\n        serialize_events(my_events),\n        test_result_object_chars_after,\n        last_hashes[side],\n        current_hash\n    );\n    assert(result, \"Turn failed\");\n}\n\n\n#[test]\nfn test_calc_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000].map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    // println(secrets[side]);\n    // println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    // println(my_obstacles_serialized_for_me);\n    // println(serialize_actions(actor.id, actions));\n    // println(move);\n    // println(advances[other_side]);\n    // println(test_result_object_other_chars);\n    // println(serialize_events(their_events));\n    // println(advances[side]);\n    // println(serialize_events(my_events));\n    // println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n\n\n\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    let my_char_actions = arena_test_action_def_register; //get_test_action_register();\n    println(\"my_char_actions\");\n    println(my_char_actions);\n    println(\"serialized_char_actions_input\");\n    println(serialized_char_actions_input);\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    let gamestate_before_hash = last_hashes[side];\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(serialized_chars_input, my_char_actions, my_obstacles_serialized_for_me, secrets[side]);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        serialized_chars_input,\n        serialized_char_actions_input,\n        // get_test_action_register(),\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events)\n    );\n    assert(turn_calc_valid, f\"Tun calculation failed\");\n    assert(advances[side] == my_advance_calculated, f\"Invalid result advance:  != {my_advance_calculated}\");\n\nlet my_result_events: [Field; SERIALIZED_EVENTS_ARRAY_SIZE] = serialize_events(my_events);\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        assert(result_event_should == result_event_calculated, f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\");\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    for i in 0..test_result_object_chars_after.len() {\n        let my_result_object = test_result_object_chars_after[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        assert(my_result_object == serialized_obstacle, f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\");\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secrets[side], serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    assert(new_hash_bytes == current_hash, f\"Invalid result hash: {new_hash_bytes} != {current_hash}\");\n}\n\n// #[export]\n// pub fn setup_obstacles(\n    \n// )\n\n#[test]\nfn test_calc_turn_0() {\n  let my_chars = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0, 0, 0, 0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n\n  let result = calculate_turn(my_chars, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events);\n\n  assert(result.0);\n}\n\nfn test_turn_0() {\n  let secret = 0x075bcd15;\n  let my_chars_input = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0,0,0,0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n  let my_result_advance = 0x12;\n  let my_result_objects = [0,0,0,0];\n  let my_result_events = [0xffff0000000000ffff0000000000ffff0000000000ffff000000000000];\n  let initial_hash = 0x07a86579c9d2236bd1c02ced0660e9280e1d9a73146a0c9c8e4d8e27d64d6565;\n  let final_hash = 0x2c7492b9fc2adae465ec974b512f12b29b486e7c268cca2c304330eac57dd680;\n\n  let result = turn(secret, my_chars_input, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events, my_result_advance, my_result_events, my_result_objects, initial_hash, final_hash);\n\n  assert(result);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/lib.nr"},"76":{"source":"use arenalib::{ WIDTH, WIDTH_MASK, VIEW_DISTANCE, MAX_OBSTACLES, MAX_ENEMY_OBSTACLES };\nuse crate::obstacle::{ Obstacle, get_obstacle_y, get_obstacle_x, is_obstacle_traversible };\nuse skplg::NOWHERE;\n\n// pub fn is_neighbor(curr_x: u8, curr_y: u8, x: u8, y: u8) -> bool {\n//     // assert(curr_x < WIDTH);\n//     // assert(curr_y < HEIGHT);\n//     // assert(x < WIDTH);\n//     // assert(y < HEIGHT);\n//     // validating coordinates is not the job of this function\n//     // only avoid overflows!\n\n\n//     let shifted_curr_x = std::wrapping_add(curr_x, 1);\n//     let shifted_curr_y = std::wrapping_add(curr_y, 1);\n//     let shifted_x = std::wrapping_add(x, 1);\n//     let shifted_y = std::wrapping_add(y, 1);\n\n//     ((shifted_curr_x == shifted_x) & (std::wrapping_add(shifted_curr_y, 1) >= shifted_y) & (shifted_curr_y <= std::wrapping_add(shifted_y, 1))) |\n//     ((shifted_curr_y == shifted_y) & (std::wrapping_add(shifted_curr_x, 1) >= shifted_x) & (shifted_curr_x <= std::wrapping_add(shifted_x, 1)))\n// }\n\n// global DISTANCE_TABLE_HEIGHT: u32 = HEIGHT as u32;\n// global DISTANCE_TABLE_WIDTH: u32 = WIDTH as u32;\n\n// unconstrained fn distance_sqrt(x: u32) -> u32 {\n//     let mut result: u32 = 0;\n//     for i in 0..DISTANCE_TABLE_WIDTH {\n//         if i * i == x {\n//             result = i;\n//             break;\n//         }\n//     }\n//     result\n// }\n\n// fn d(a: u8, b: u8) -> u8 {\n//     let d = a as i32 - b as i32;\n//     let d2 = d * d;\n//     assert(d2 >= 0);\n//     let d2u = d2 as u32;\n//     let result = unsafe {\n//         let sq = distance_sqrt(d2u);\n//         assert(sq * sq == d2u);\n//         sq\n//     };\n//     assert(result < DISTANCE_TABLE_WIDTH);\n//     comptime { assert(DISTANCE_TABLE_WIDTH <= 256) };\n//     result as u8\n// }\n// global DISTANCE_TABLE: [[u8; DISTANCE_TABLE_WIDTH]; DISTANCE_TABLE_HEIGHT] = [\n//     [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 2,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ],\n//     [ 3,  3,  3,  4,  4,  5,  6,  7,  8,  9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ],\n// ]\n\nglobal MAX_DISTANCE: u32 = 0xff * 0xff;\n\npub fn get_distance(curr_x: u8, curr_y: u8, x: u8, y: u8) -> u16 {\n    // assert(curr_x < WIDTH);\n    // assert(curr_y < HEIGHT);\n    // assert(x < WIDTH);\n    // assert(y < HEIGHT);\n    // validating coordinates is not the job of this function\n    // only avoid overflows!\n\n    // let dx = unsafe {\n    //     let diff_\n    //     distance_sqrt(x)\n    // }\n\n    let dx = if curr_x > x { curr_x - x } else { x - curr_x } as u32;\n    let dy = if curr_y > y { curr_y - y } else { y - curr_y } as u32;\n\n    // let dx = curr_x as i16 - x as i16;\n    // let dy = curr_y as i16 - y as i16;\n\n    let distance = (dx * dx + dy * dy) as u32;\n    if distance > MAX_DISTANCE {\n      MAX_DISTANCE as u16\n    } else {\n      distance as u16\n    }\n}\n\n\npub fn is_visible(enemy_advance: u8, x: u8) -> bool {\n    //(x >= enemy_advance) == (side == 0)\n    x >= enemy_advance\n}\n\n// TODO: This is for the future - fireballs, etc. only if we have line of sight\n// pub fn is_visible(curr_x: u8, curr_y: u8, x: u8, y: u8, map: &Map) -> bool {\n//     assert(curr_x < WIDTH);\n//     assert(curr_y < HEIGHT);\n//     assert(x < WIDTH);\n//     assert(y < HEIGHT);\n\n//     let mut x = curr_x as f32;\n//     let mut y = curr_y as f32;\n//     let x2 = x + 0.5;\n//     let y2 = y + 0.5;\n//     let dx = x2 - x;\n//     let dy = y2 - y;\n//     let mut t = 0.0;\n//     let mut max_t = 1.0;\n//     let mut x = x;\n//     let mut y = y;\n\n//     while t < max_t {\n//         let x = x + dx * t;\n//         let y = y + dy * t;\n//         let x = x as u8;\n//         let y = y as u8;\n\n//         if map.is_wall(x, y) {\n//             return false;\n//         }\n\n//         t += 0.1;\n//     }\n\n//     true\n// }\n\npub fn their_x_to_mine(x: u8) -> (bool, u8) {\n    if x == NOWHERE {\n        (true, NOWHERE)\n    } else {\n        (x < WIDTH, std::wrapping_sub(WIDTH - 1, x) & WIDTH_MASK)\n    }\n}\n\npub fn can_move_to(distance: u16, x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> bool {\n    let mut can = distance <= (VIEW_DISTANCE as u16 * VIEW_DISTANCE as u16); //x <= advance;\n\n    for i in 0..MAX_OBSTACLES {\n        if !is_obstacle_traversible(obstacles[i]) & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    for i in 0..MAX_ENEMY_OBSTACLES {\n        if !is_obstacle_traversible(their_obstacles[i]) & (get_obstacle_x(their_obstacles[i]) == x) & (get_obstacle_y(their_obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    can\n}\n// pub fn their_x_to_mine(side: u1, x: i8) -> i8 {\n//     let mul = side as i8;\n//     mul * 31 + 16 + x\n// }\n\n// x * s -16 + y = 0 if s == 0 => y = 16\n// x * s -16 + y = 31 if s == 1 => x = 31\n// y = 31 * s + 16 + x\n// s = 0:\n// x = -16 => y = 0\n// x = 15 => y = 31\n// s = 1:\n// x = -16 => y = 31\n// x = 15 => y = 0\n\n// pub fn serialize_x(x: i8) -> (bool, u8) {\n//     let valid = (x >= -(WIDTH / 2) as i8) & (x < (WIDTH / 2) as i8);\n//     (valid, (x + (WIDTH / 2) as i8) as u8)\n// }\n\n// pub fn deserialize_x(x: u8) -> (bool, i8) {\n//     let valid = x < WIDTH;\n//     (valid, x as i8 - (WIDTH / 2) as i8)\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/map.nr"},"77":{"source":"// use crate::MAX_OBSTACLES;\n// use crate::{ HEIGHT, WIDTH };\n// use crate::{ EMPTY, WALL, WATER };\n// use crate::{ MAX_EVENTS }; // MAX_CHARACTERS\n// // use crate::{ RECEIVE_ATTACK };\n// // use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\n// use crate::{ SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\n// use crate::event::Event;\n// use crate::map::{ is_visible }; //is_neighbor\n// use dep::std;\n\n// pub struct Obstacle {\n//     pub id: u8,\n//     pub x: u8,             // 5 bit\n//     pub y: u8,             // 4 bit\n//     pub health: u8,        // 8 bit\n//     pub obstacle_type: u8, // 4 bit\n// }\n\n// pub impl Obstacle {\n//     pub fn serialize(self) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         assert(self.y < 0x10, f\"Obstacle y is too large\");\n//         assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n\n//         let packed_y = self.obstacle_type * 0x10 + self.y;\n//         [ self.x, packed_y, self.health]\n//     }\n\n//     pub fn is_obstacle_traversible(self) -> bool {\n//         (self.obstacle_type >= NON_EMPTY_WALKABLE_TILE_MIN) | (self.obstacle_type == EMPTY)\n//     }\n\n//     pub fn parse_their_obstacles(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let health = field[2];\n//         let o = Obstacle {\n//             id: id,\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn parse_obstacle(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let mut health = field[2];\n//         if (obstacle_type == WALL) | (obstacle_type == WATER) {\n//             let mut damage = 0;\n//             for i in 0..MAX_EVENTS {\n//                 damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n//             }\n//             if damage > (health as u16) {\n//                 health = 0;\n//             } else {\n//                 health -= (damage as u8);\n//             }\n//         }\n//         let o = Obstacle {\n//             id: id, // + (MAX_CHARACTERS as u8),\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//             //was_alive: was_alive,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn is_valid(self) -> bool {\n//         (self.x < WIDTH) & (self.y < HEIGHT)\n//     }\n\n//     pub fn parse_their_obstacles(serialized_obstacles: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_their_obstacles(id, serialized_obstacle));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn parse_my_obstacles(serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE], events: [Event; MAX_EVENTS]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_obstacle(id, serialized_obstacle, events));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn serialize_obstacles(side: u1, enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n//         let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n//         for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//             let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n//                 if is_visible(side, enemy_advance, obstacle.x) {\n//                     let serialized_obstacle = obstacle.serialize();\n//                     for k in 0..3 {\n//                         serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n//                     }\n//                 }\n//             }\n//             serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n//         }\n//         serialized_obstacles\n//     }\n\n//     pub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n//         // assert(side < 2, f\"Side is too large {side}\");\n//         let x = |x| x * (((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n//         [\n//             new_obstacle( 0, x(0), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 1, x(1), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 2, x(3), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 3, x(4), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 4, x(5), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle( 5, x(5), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle( 6, x(5), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle( 7, x(5), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 8, x(4), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 9, x(3), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(10, x(1), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(11, x(0), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(12, x(7), y: 0, obstacle_type: 200, WALL),\n//             new_obstacle(13, x(7), y: 1, obstacle_type: 200, WALL),\n//             new_obstacle(14, x(7), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle(15, x(7), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle(16, x(7), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle(17, x(7), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle(18, x(6), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(19, x(7), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(20, x(5), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(21, x(6), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(22, x(7), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(23, x(8), y: 9, obstacle_type: 255, WATER),\n//         ]\n//     }\n// }\n\n\nuse arenalib::MAX_OBSTACLES;\nuse arenalib::{ HEIGHT, WIDTH };\nuse arenalib::{ EMPTY, WALL, WATER };\nuse arenalib::{ MAX_EVENTS, MAX_HEALTH, MAX_OBSTACLE_TYPE, MAX_ENEMY_OBSTACLES }; // MAX_CHARACTERS\n// use crate::{ RECEIVE_ATTACK };\n// use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\nuse arenalib::{ SerializedArenaEnemyObstacles, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\nuse arenalib::NON_EMPTY_WALKABLE_TILE_MIN;\nuse arenalib::SerializedArenaObstacles;\nuse crate::event::Event;\nuse crate::map::{ is_visible, their_x_to_mine }; //is_neighbor\nuse dep::std;\nuse skplg::{softassert, NOWHERE};\nuse arenalib::SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE;\nuse arenalib::MAX_CHARACTERS;\n\n// pub type Obstacle = [u8; 5];\npub struct Obstacle {\n    pub id: u8,\n    pub x: u8,             // 5 bit\n    pub y: u8,             // 4 bit\n    pub health: u8,        // 8 bit\n    pub obstacle_type: u8, // 4 bit\n}\npub fn get_obstacle_id(obstacle: Obstacle) -> u8 {\n    obstacle.id //obstacle[0]\n}\npub fn get_obstacle_x(obstacle: Obstacle) -> u8 {\n    obstacle.x //[1]\n}\npub fn get_obstacle_y(obstacle: Obstacle) -> u8 {\n    obstacle.y //[2]\n}\npub fn get_obstacle_health(obstacle: Obstacle) -> u8 {\n    obstacle.health //[3]\n}\npub fn get_obstacle_type(obstacle: Obstacle) -> u8 {\n    obstacle.obstacle_type //[4]\n}\n\n#[export]\npub fn new_obstacle(id: u8, x: u8, y: u8, health: u8, obstacle_type: u8) -> pub (bool, Obstacle) {\n  let valid = ((x < WIDTH) | (x == NOWHERE)) & ((y < HEIGHT) | (y == NOWHERE)) & (health <= MAX_HEALTH) & (obstacle_type <= MAX_OBSTACLE_TYPE) & (id as u32 < (MAX_OBSTACLES + MAX_CHARACTERS));\n    // let mut valid = true;\n    // softassert!(quote { valid }, quote { (x < WIDTH) | (x == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid x: {x} >= {WIDTH}\" });\n    // softassert!(quote { valid }, quote { (y < HEIGHT) | (y == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid y: {y} >= {HEIGHT}\" });\n    // softassert!(quote { valid }, quote { health <= MAX_HEALTH }, quote { f\"Cannot create Obstacle: Invalid health: {health} > {MAX_HEALTH}\" });\n    // softassert!(quote { valid }, quote { obstacle_type <= MAX_OBSTACLE_TYPE }, quote { f\"Cannot create Obstacle: Invalid obstacle type: {obstacle_type} > {MAX_OBSTACLE_TYPE}\" }); //TODO: not sure if this or is_valid???\n    // (valid, [ id, x, y, health, obstacle_type ])\n    (valid, Obstacle { id: id, x: x, y: y, health: health, obstacle_type: obstacle_type })\n}\n\n#[test]\nfn test_new_obstacle() {\n  let (val, o) = new_obstacle(0, 0, 2, 0xc8, 0x06);\n  assert(val);\n  assert(o.id == 0);\n}\n\n// #[export]\n// pub struct FrontendObstacle {\n//   pub id: u8,\n//   pub x: u8,\n//   pub y: u8,\n\n// }\n\npub fn serialize_obstacle(obstacle: Obstacle) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n    // we could assert here, since obstacles can only be create with new_obstacle?!\n    // assert(self.y < 0x10, f\"Obstacle y is too large\");\n    // assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n    comptime {\n        let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let packed_y = get_obstacle_type(obstacle) * 0x10 + get_obstacle_y(obstacle);\n                [ get_obstacle_x(obstacle), packed_y, get_obstacle_health(obstacle)]\n            }\n        } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n                [ get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_health(obstacle), get_obstacle_type(obstacle)]\n            }\n        } else {\n            quote {\n                assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n            }\n        };\n        q\n    }\n}\n\npub fn is_obstacle_traversible(obstacle: Obstacle) -> bool {\n    (get_obstacle_type(obstacle) >= NON_EMPTY_WALKABLE_TILE_MIN) | (get_obstacle_type(obstacle) == EMPTY)\n}\n\npub fn parse_their_obstacle(id: u8, fld: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> (bool, Obstacle) {\n    comptime {\n        assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n    }\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let mut valid = true;\n    let x_raw = fld[0];\n    let (x_parsed_valid, x_parsed) = their_x_to_mine(x_raw);\n    softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to convert their x to mine of their obstacle {id}: {x_raw}\" });\n    let y = fld[1] & 0x0F;\n    let obstacle_type = (fld[1]) / 0x10;\n    let health = fld[2];\n    let (obstacle_valid, obstacle) = new_obstacle(id, x_parsed, y, health, obstacle_type);\n    softassert!(quote { valid }, quote { obstacle_valid }, quote { f\"Failed to create new obstacle {id}, {x_parsed}, {y}, {health}, {obstacle_type}\" });\n    (valid, obstacle)\n    // let o = Obstacle {\n    //     id: id,\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn parse_obstacle(id: u8, f: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> (bool, Obstacle) {\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let x = f[0];\n    // let mut y = f[1];\n    // let mut obstacle_type = f[1];\n    // comptime {\n    //     let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n    //         quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let y = f[1] & 0x0F;\n                let obstacle_type = (f[1]) / 0x10;\n    //         }\n    //     } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n    //         quote {\n    //             assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n    //             y = f[1];\n    //             obstacle_type = f[3];\n    //         }\n    //     } else {\n    //         quote {\n    //             assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n    //         }\n    //     };\n    //     q\n    // }\n    // let y = f[1]; // & 0x0F;\n    // let obstacle_type = f[3]; //f[1] / 0x10;// (f[1] & 0xF0) / 0x10;\n    let mut health = f[2];\n    //if (obstacle_type == WALL) | (obstacle_type == WATER) {\n        let mut damage = 0;\n        for i in 0..MAX_EVENTS {\n            damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n        }\n        if damage > (health as u16) {\n            health = 0;\n        } else {\n            health -= (damage as u8);\n        }\n    //}\n    new_obstacle(id, x, y, health, obstacle_type)\n    // let o = Obstacle {\n    //     id: id, // + (MAX_CHARACTERS as u8),\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    //     //was_alive: was_alive,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn is_obstacle_valid(obstacle: Obstacle) -> bool {\n    (get_obstacle_x(obstacle) < WIDTH) & (get_obstacle_y(obstacle) < HEIGHT)\n}\n\npub fn parse_their_obstacles(serialized_obstacles: SerializedArenaEnemyObstacles) -> (bool, [Obstacle; MAX_ENEMY_OBSTACLES]) {\n  let (dummy_obstacle_valid, dummy_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n  assert(dummy_obstacle_valid);\n    let mut obstacles: [Obstacle; MAX_ENEMY_OBSTACLES] = [dummy_obstacle; MAX_ENEMY_OBSTACLES];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n            obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j] = obstacle; //s.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    let serialized_obstacle_field = serialized_obstacles[SERIALIZED_OBSTACLES_ARRAY_SIZE].to_be_bytes::<32>();\n    assert(serialized_obstacle_field.len() == 32);\n    for j in 0..MAX_CHARACTERS {\n      let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n      // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n      let id = (MAX_OBSTACLES + j) as u8;\n      let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n      obstacles[MAX_OBSTACLES + j] = obstacle; //s.push_back(obstacle);\n      valid_result = valid_result & valid;\n    }\n    (valid_result, obstacles)\n}\n\npub fn parse_my_obstacles(serialized_obstacles: SerializedArenaObstacles, events: [Event; MAX_EVENTS]) -> (bool, [Obstacle; MAX_OBSTACLES]) {\n    let mut obstacles: [Obstacle] = &[];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    for i in 0..serialized_obstacles.len() {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            //let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_obstacle(id, serialized_obstacle, events);\n            obstacles = obstacles.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    (valid_result, obstacles.as_array())\n}\n\n#[export]\npub fn serialize_my_obstacles_for_me(obstacles: [Obstacle; MAX_OBSTACLES]) -> pub [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            let serialized_obstacle = serialize_obstacle(obstacle);\n            for k in 0..3 {\n                serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\n\npub fn serialize_my_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let serialized_obstacle = serialize_obstacle(obstacle);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\npub fn serialize_their_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) {\n    let mut valid_result = true;\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let parsed_x = their_x_to_mine(get_obstacle_x(obstacle));\n                valid_result = valid_result & parsed_x.0;\n                let mirrored_obstacle = new_obstacle(\n                    get_obstacle_id(obstacle),\n                    parsed_x.1,\n                    get_obstacle_y(obstacle),\n                    get_obstacle_health(obstacle),\n                    get_obstacle_type(obstacle)\n                );\n                valid_result = valid_result & mirrored_obstacle.0;\n                let serialized_obstacle = serialize_obstacle(mirrored_obstacle.1);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    (valid_result, serialized_obstacles)\n}\n\nfn get_x_of_side(side: u1, x: u8) -> u8 {\n    x * ((side as u8 + 1) as u1) as u8 + side as u8 * (WIDTH - 1 - x)\n}\n\n#[test]\nfn test_x() {\n    let x8s0 = get_x_of_side(0, 8);\n    assert(x8s0 == 8, f\"{x8s0} != 8\");\n    let x8s1 = get_x_of_side(1, 8);\n    assert(x8s1 == 23, f\"{x8s1} != 23\");\n}\n\npub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n    // assert(side < 2, f\"Side is too large {side}\");\n    let x = |x| get_x_of_side(side, x); //(((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n    [\n        new_obstacle( 0, x(0), 2, 200, WALL).1,\n        new_obstacle( 1, x(1), 2, 200, WALL).1,\n        new_obstacle( 2, x(3), 2, 200, WALL).1,\n        new_obstacle( 3, x(4), 2, 200, WALL).1,\n        new_obstacle( 4, x(5), 3, 200, WALL).1,\n        new_obstacle( 5, x(5), 4, 200, WALL).1,\n        new_obstacle( 6, x(5), 5, 200, WALL).1,\n        new_obstacle( 7, x(5), 7, 200, WALL).1,\n        new_obstacle( 8, x(4), 7, 200, WALL).1,\n        new_obstacle( 9, x(3), 7, 200, WALL).1,\n        new_obstacle(10, x(1), 7, 200, WALL).1,\n        new_obstacle(11, x(0), 7, 200, WALL).1,\n        new_obstacle(12, x(7), 0, 200, WALL).1,\n        new_obstacle(13, x(7), 1, 200, WALL).1,\n        new_obstacle(14, x(7), 2, 200, WALL).1,\n        new_obstacle(15, x(7), 3, 200, WALL).1,\n        new_obstacle(16, x(7), 4, 200, WALL).1,\n        new_obstacle(17, x(7), 5, 200, WALL).1,\n        new_obstacle(18, x(6), 8, 255, WATER).1,\n        new_obstacle(19, x(7), 8, 255, WATER).1,\n        new_obstacle(20, x(5), 9, 255, WATER).1,\n        new_obstacle(21, x(6), 9, 255, WATER).1,\n        new_obstacle(22, x(7), 9, 255, WATER).1,\n        new_obstacle(23, x(8), 9, 255, WATER).1,\n        // new_obstacle(24, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(25, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(26, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(27, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(28, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(29, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(30, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(31, x(0), 0, 255, EMPTY).1,\n    ]\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/obstacle.nr"},"78":{"source":"use skplg::{softassert, UNREADABLE_BYTES_PER_FIELD, NOWHERE};\nuse skpla::{ACTION_BYTE_SIZE, Action, new_action, get_action_actor, get_action_type, get_action_target_x, get_action_target_y};\nuse crate::SerializedArenaActions;\nuse crate::{MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER};\nuse crate::{WIDTH, HEIGHT};\nuse crate::WAIT;\n\npub global SERIALIZED_ACTION_BYTE_SIZE: u32 = ACTION_BYTE_SIZE;\npub global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4;\npub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n\n// comptime fn get_serialized_actions_array_size() -> u32 {\n//   let needed_usable_bytes = MAX_ACTIONS * ACTION_BYTE_SIZE;\n//   let usable_bytes_per_field = 32 - UNREADABLE_BYTES_PER_FIELD;\n//   let field_count = needed_usable_bytes / usable_bytes_per_field;\n//   if field_count * usable_bytes_per_field == needed_usable_bytes {\n//     field_count\n//   } else {\n//     field_count + 1\n//   }\n// }\n\n\n  pub fn parse_actions(max_actor_id: u8, fields: SerializedArenaActions) -> (bool, [Action; MAX_ACTIONS]) {\n    let mut valid = true;\n    softassert!(quote { valid }, quote { fields.len() == SERIALIZED_ACTIONS_ARRAY_SIZE }, quote { f\"{fields} does not have size {SERIALIZED_ACTIONS_ARRAY_SIZE}\" });\n    comptime {\n      assert(SERIALIZED_ACTION_BYTE_SIZE == 4);\n    }\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n\n      let mut actions: [Action] = &[];\n      assert(fields.len() == 1);\n      // for i in 0..1 {\n      let i = 0;\n          let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n          assert(split.len() == 32);\n          let mut serialized_actions_per_field = SERIALIZED_ACTIONS_PER_FIELD;\n          if serialized_actions_per_field * (i + 1) > MAX_ACTIONS {\n            serialized_actions_per_field = MAX_ACTIONS - serialized_actions_per_field * i;\n          }\n          assert(serialized_actions_per_field == SERIALIZED_ACTIONS_PER_FIELD);\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              let action_type = split[offset];\n              let actor = split[offset + 1];\n              let target_x = split[offset + 2];\n              let target_y = split[offset + 3];\n\n              softassert!(quote { valid }, quote { action_type as u32 <= MAX_ACTIONS_PER_CHARACTER }, quote { f\"Invalid action: action type {action_type} > {MAX_ACTIONS_PER_CHARACTER}\" });\n              softassert!(quote { valid }, quote { actor <= max_actor_id }, quote { f\"Invalid action: action actor {actor} > {max_actor_id}\" });\n              softassert!(quote { valid }, quote { (target_x < WIDTH) | (target_x == NOWHERE) }, quote { f\"Invalid action: action type {target_x} >= {WIDTH} and not {NOWHERE}\" });\n              softassert!(quote { valid }, quote { (target_y < HEIGHT) | (target_y == NOWHERE) }, quote { f\"Invalid action: action type {target_y} >= {HEIGHT} and not {NOWHERE}\" });\n\n              actions = actions.push_back(new_action(\n                  action_type,\n                  actor,\n                  target_x,\n                  target_y\n              ));\n              /*Action {\n                  action: split[offset],\n                  actor: split[offset + 1],\n                  target_x: split[offset + 2],\n                  target_y: split[offset + 3],\n              }*/\n          }\n      // }\n      // println(actions);\n      (valid, actions.as_array())\n  }\n\n  /**\n  * Warning: This function can throw!!!\n  */\n  pub fn serialize_actions(actor_id: u8, actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n      assert(actions.len() <= MAX_ACTIONS);\n\n      let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, actor_id, NOWHERE, NOWHERE); MAX_ACTIONS];\n      for i in 0..actions.len() {\n          actions_stuffed[i] = actions[i];\n      }\n\n      let mut fields: [Field] = &[];\n      for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n          let mut data: [u8; 32] = [0; 32];\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n              let action = actions_stuffed[index];\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              data[offset] = get_action_type(action);\n              data[offset + 1] = get_action_actor(action);\n              data[offset + 2] = get_action_target_x(action);\n              data[offset + 3] = get_action_target_y(action);\n          }\n          fields = fields.push_back(std::field::bytes32_to_field(data));\n      }\n      fields.as_array()\n  }\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/arenalib/src/actionSerDe.nr"},"90":{"source":"use dep::std::{append::Append};\nuse skplg::UNREADABLE_BYTES_PER_FIELD;\n\npub trait ActionDefinitionPartBuilder<T> { fn new() -> T; }\npub type DEF_ROW<T> = (Quoted, u8, T);\npub comptime fn get_def_register_value(register: Quoted, bytes: u32, bits: u8, bitsize: u8) -> Quoted {\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    if bitsize == 8 {\n      quote { $register[$bytes] }\n      // quote { ($register / $multiplier) as u8 }\n    } else {\n      let divisor = 1 << bits;\n      let mask = std::wrapping_sub(1 << bitsize, 1);\n      if bitsize == 1 {\n        // quote { (($register / $multiplier) as u1) == 1 }\n        quote { (($register[$bytes] as u8 & $divisor as u8) != 0 as u8) }\n      } else {\n        quote { (($register[$bytes] as u8 / $divisor as u8) & $mask as u8) }\n        // quote { (($register / $multiplier) as u8) & $mask as u8 }\n      }\n    }\n}\npub comptime fn build_over_def_array<Env, T>(array: [DEF_ROW<T>], base_index: u32, builder: fn[Env] (u32, u8, Quoted, u8, T) -> Quoted) -> Quoted {\n  let mut result = quote {};\n  \n  let mut bits: u8 = 0;\n  let mut bytes: u32 = base_index;\n\n  for i in 0..array.len() {\n    let (varname, bitsize, args) = array[i];\n    assert(bitsize <= 8, f\"Invalid bit size: {bitsize}\");\n    if (bits + bitsize) > 8 {\n      bytes += 1;\n      bits = 0;\n    }\n    assert(bits < 8, f\"bits must not reach 8 or higher: {bits}\");\n\n    let new_result = builder(bytes, bits, varname, bitsize, args);\n    result = quote { $result $new_result };\n\n    bits += bitsize;\n  }\n  result\n}\npub comptime fn derive_action_def_def_builder<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let mut params: [(Quoted, Type)] = &[];\n  let mut last_byte: u32 = 0;\n  let mut result: Quoted = build_over_def_array(array, 0, |bytes, bits, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { u8 }.as_type() } else { quote { u8 }.as_type() };\n    params = params.push_back((varname, t));\n    let mut r = quote {};\n    if bytes != last_byte {\n      r = r.append(quote { , });\n    } else if (bytes + bits as u32) != 0 {\n      r = r.append(quote { + });\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = r.append(quote { $varname  });\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = r.append(quote { $varname as u8 * $multiplier });\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = r.append(quote { (( $varname & $mask ) * $multiplier) });\n      }\n    }\n    last_byte = bytes;\n    r\n  });\n  f.set_parameters(params);\n\n  let return_type = f.return_type();\n\n  f.set_body(quote { $return_type { register: [ $result ] } }.as_expr().unwrap());\n  // println(f.body());\n}\npub comptime fn get_action_def_def_register_size<T>(array: [DEF_ROW<T>]) -> u32 {\n  let mut size = 0;\n  let _ = build_over_def_array(array, 0, |bytes, _, _, _, _|{\n    size = bytes;\n    quote {}\n  });\n  size + 1\n}\npub comptime fn get_action_def_def_register_element_type() -> Type {\n  quote { u8 }.as_type()\n}\npub comptime fn get_action_def_def_register_type<T>(array: [DEF_ROW<T>]) -> Type {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  quote { [$et; $size] }.as_type()\n}\npub comptime fn derive_action_def_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  // let size = get_action_def_requirements_register_size();\n  let fields = s.fields([]);\n  assert(fields.len() == 1);\n  s.set_fields([(fields[0].0, get_action_def_def_register_type(array))]);\n}\npub comptime fn derive_action_def_def_struct_new<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  let t = get_action_def_def_register_type(array);\n  f.set_return_type(t);\n  f.set_body(quote { ActionRequirement { [0 as $et; $size] } }.as_expr().unwrap());\n}\npub comptime fn derive_frontend_action_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  let mut fields: [(Quoted, Type)] = &[];\n  let _ = build_over_def_array(array, UNREADABLE_BYTES_PER_FIELD, |_, _, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    fields = fields.push_back((varname, t));\n    quote {}\n  });\n  s.set_fields(fields);\n}\npub comptime fn derive_frontend_action_def_struct_builder<T>(param_name: Quoted, base_index: u32, array: [DEF_ROW<T>]) -> Quoted {\n  // let mut params: [(Quoted, Type)] = &[];\n  let mut first = true;\n  let mut result: Quoted = build_over_def_array(array, base_index, |bytes, bits, varname, bitsize, _|{\n    // let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    // params = params.push_back((varname, t));\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    let mut r = quote {};\n    if !first {\n      r = quote { , };\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = quote { $r $varname: $param_name[$bytes] };\n      // r = quote { $r $varname: ($param_name / $multiplier) as u8 };\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = quote { $r $varname: ($param_name[$bytes] & $multiplier) != 0 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u1) == 1 };\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = quote { $r $varname: (( $param_name[$bytes] / $multiplier) & $mask ) as u8 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u8) & $mask as u8 };\n      }\n    }\n    first = false;\n    r\n  });\n  // f.set_parameters(params);\n\n  // let return_type = f.return_type();\n  // // f.set_return_type(return_type.as_type());\n  // f.set_return_data();\n  // f.set_return_public(true);\n  // // println(result);\n  // f.\nresult\n  // quote {  $result } };\n}\n\n// pub global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2; // u2\n\n// global YES: u8 = 1;\n// global NO: u8 = 0;\n// global MIN_STATUS: u8 = 0;\n// global MAX_STATUS: u8 = 15;\n\n// // pub type ActionDefinitionRegister = \n// pub fn build_action_def_requirements_none() -> ActionRequirement {\n//   build_action_def_requirements(\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     MIN_STATUS,\n//     MAX_STATUS,\n//     0 as u8,\n//     255 as u8)\n// }\n// pub fn build_action_def_pre_calc_effects_idle() -> ActionPreCalcEffect {\n//   build_action_def_pre_calc_effect(\n//     WAIT,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1)\n// }\n// // comptime fn no_requirements() -> CtString {\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1, \n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         0 as u8,\n// //         NO as u1)\n// // }\n// pub fn build_action_def_result_event_none() -> ActionResultEvent {\n//   build_action_def_result_event(\n//     0,\n//     0,\n//     ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//     NO_EVENT,\n//     NO_EVENT,\n//     0 as u8\n//   )\n// }\n// // comptime fn no_event() -> CtString {\n// //     build_action_event_def(NO_EVENT, NO_EVENT, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 0 as u8)\n// // }\n// pub fn build_wait_action_def() -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements_none(),\n//     build_action_def_pre_calc_effects_idle(),\n//     build_action_def_result_effects(\n//       0 as u8,\n//       0 as u8,\n//       1 as u8,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_wait_action_def() -> CtString {\n// //     build_action_def(\n// //         no_requirements(),\n// //         no_event(),\n// //         no_event(),\n// //         1 as u8,\n// //         0 as u8,\n// //         ACTION_RESULT_COORDINATES_IDX_SELF,\n// //         NO as u1,\n// //         WAIT\n// //     )\n// // }\n// // pub global WAIT_ACTION: ActionDefinition = comptime { let x = build_wait_action_def(); f\"[{x}]\".quoted_contents() };\n// pub fn build_sneak_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0 as u8,\n//       1 as u8),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0 as u8,\n//       0 as u8,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       YES as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_sneak_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     no_event(), // TODO: not sure if on-seen we should not send a move event instead - that way one could sneak and stay hidden, but not sneak while visible\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_move_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       1),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_MOVE,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_move_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_MOVE, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_cast_action(this_action_id: u8, energy: u8, class: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_CAST,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_cast_action(this_action_id: u8, energy: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_CAST, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_ritual_action(cast_action_id: u8, energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       RITUAL_ROUNDS_FOR_WIN,\n//       MAX_STATUS,\n//       0,\n//       255),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_ritual_action(this_action_id: u8, energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         RITUAL_ROUNDS_FOR_WIN,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 255 as u8),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 255 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1), // TODO: Maybe set this to handle friendly fire???\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     cast_action_id)\n// // }\n// pub fn build_search_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_search_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS, // should be max of shoot\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_DRAW,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_DRAW, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       draw_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     draw_action_id)\n// // }\n// pub fn build_disarm_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_disarm_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_set_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         ADD_OBSTACLE,\n//         TRAP,\n//         0),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_set_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         YES as u1),\n// //     no_event(),\n// //     build_action_event_def(ADD_OBSTACLE, TRAP, 0 as u8, 50 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n\n// // pub fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // fn get_action_needs_target_free_space(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// // }\n// // fn get_action_needs_target_is_not_self(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// // }\n// // fn get_action_needs_status_visible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// // }\n// // fn get_action_needs_status_invisible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// // }\n// // fn get_action_needs_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_sets_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_removes_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_max_range(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_MAX_RANGE]\n// // }\n// // fn get_action_needs_min_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MIN_STATUS]\n// // }\n// // fn get_action_needs_max_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MAX_STATUS]\n// // }\n// // fn get_action_needed_energy(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDED_ENERGY]\n// // }\n// // fn get_action_unseen_event_is_internal(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_EVENT_IS_TRAP] == 1\n// // }\n// // fn get_action_result_event_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_event_not_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_not_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_not_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_not_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_not_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_not_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_status_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// // }\n// // fn get_action_move_to_target(action: ActionDefinition) -> u1 {\n// //     action.register[action.base_index + ACTION_MOVE_TO_TARGET] as u1\n// // }\n// // fn get_action_is_continuous(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_IS_CONTINUOUS] == 1\n// // }\n// // fn get_action_needs_previous_action(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_PREVIOUS_ACTION] as u8\n// // }\n\n// // pub global ACTION_DEFINITION_SIZE: u32 = (ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 5) as u32; // 2 bytes for move_to_target and status_multiplier\n// // pub global ACTION_DEFINITION_REGISTER_SIZE: u32 = ACTION_DEFINITION_SIZE * (1 + (MAX_ACTIONS_PER_CHARACTER - 1) * (CLASS_COUNT - 1));\n\n// // fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // pub struct ActionDefinitionRegister {\n// //   register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinitionRegister {\n// //   pub fn new(register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinitionRegister {\n// //     ActionDefinitionRegister {\n// //       register: register\n// //     }\n// //   }\n\n// //   pub fn resolve_action(self, action: Action) -> ActionDefinition {\n// //     ActionDefinition {\n// //       base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //       action: action,\n// //       register: self.register\n// //     }\n// //   }\n// // }\n\n// // pub struct ActionDefinition {\n// //     base_index: u16,\n// //     action: Action,\n// //     register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinition {\n// //     pub fn new(action: Action, register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinition {\n// //         ActionDefinition {\n// //             base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //             action: action,\n// //             register: register\n// //         }\n// //     }\n// // }\n\n// // impl ResolvedAction for ActionDefinition {\n// //     fn get_action_needs_target_free_space(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: ActionDefinition) -> u1 {\n// //         self.register[self.base_index + ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n\n// // pub struct TestActionDefinition {\n// //     pub register: [u8; ACTION_DEFINITION_SIZE],\n// //     pub action: Action,\n// // }\n\n// // impl ResolvedAction for TestActionDefinition {\n// //     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n// //         self.register[ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n// // #[test]\n// // fn test_execute_action() {\n// //     let action = build_test_action_def!(build_move_action(4), quote { 1, 2, 3, 4 }); //new_action(1, 2, 3, 4);\n// //     let my_advance = 10;\n// //     let their_advance = 1;\n// //     let actor = Character {\n// //         id: 2,\n// //         x: 2,\n// //         y: 4,\n// //         target_x: 0,\n// //         target_y: 0,\n// //         health: 255,\n// //         damage_mod: 1,\n// //         last_action: WAIT,\n// //         class: MAGE,\n// //         is_hidden: 0 as u1,\n// //         has_been_seen: true,\n// //         status: 0,\n// //         actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]\n// //     };\n// //     let energy = 15;\n// //     let my_obstacles = get_default_obstacles(0);\n// //     let their_obstacles = get_default_obstacles(1);\n// //     let (valid, event, internal_event, c, result_energy) = execute_action(\n// //         action,\n// //         my_advance,\n// //         their_advance,\n// //         actor,\n// //         energy,\n// //         my_obstacles,\n// //         their_obstacles\n// //     );\n// //     assert(valid, \"valid\");\n// //     assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n// //     assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n// //     assert(event.x == action.get_action_target_x(), f\"{event}.target_x is not action target x\");\n// //     assert(event.y == action.get_action_target_y(), f\"{event}.target_y is not action target y\");\n// //     assert(c.x == event.x, f\"{c}.x is not action target x\");\n// //     assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n// //     assert(result_energy == 11, f\"{result_energy} != 11\");\n// // }\n\n// // #[export]\n// // pub fn build_action_register(actions: [])\n\npub type CharacterActionDefinition = [u8; 32];\npub type CharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [CharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedCharacterActionDefinition = Field;\npub type SerializedCharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedRosterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32, let MAX_CHARACTERS: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS];","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionDefinition.nr"},"91":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionRequirements::{get_action_def_requirements_base_index, get_action_def_requirements_byte_size};\nuse std::append::Append;\n\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_PRE_CALC_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { pre_calc_effect_continues_action }, 3, |continued_action|quote { let continues_action: bool = $continued_action as u8 == actor_last_action; }),\n    action_def_def(quote { pre_calc_effect_is_continuous }, 1, |is_continuous|quote { let is_continuous: bool = $is_continuous as bool; }),\n    action_def_def(quote { pre_calc_effect_interrupts }, 1, |is_interrupting|quote { let is_interrupting: bool = $is_interrupting as bool; }),\n    action_def_def(quote { pre_calc_effect_allow_retargeting }, 1, |allows_retargetting|quote { let not_interrupted_through_retargeting: bool = $allows_retargetting as bool | ((action_target_x == actor_target_x) & (action_target_y == actor_target_y)); })\n];\npub comptime fn get_action_def_pre_calc_base_index() -> u32 {\n  get_action_def_requirements_byte_size()+get_action_def_requirements_base_index()\n}\n\npub comptime fn get_action_def_pre_calc_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_PRE_CALC_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_pre_calc_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n// }\n#[derive_action_def_def_pre_calc_event_struct]\npub struct ActionPreCalcEffect {\n  pub register: [u8; 32]\n}\nimpl ActionPreCalcEffect {\n  #[derive_action_def_pre_calc_effect_struct_new]\n  pub fn new() -> ActionPreCalcEffect {\n    ActionPreCalcEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_pre_calc_effect_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_pre_calc_effect_builder]\npub fn build_action_def_pre_calc_effect() -> pub ActionPreCalcEffect { ActionPreCalcEffect::new() }\n\npub comptime fn apply_action_pre_calc_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_pre_calc_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_PRE_CALC_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  quote {\n    $result\n    is_not_interrupted = (\n      ((!is_continuous) as u8 * (!is_interrupting) as u8) + // that's the ID of the wait action => leave status, but not continuous\n      ((is_continuous) as u8 * continues_action as u8 * not_interrupted_through_retargeting as u8)\n    ) > 0;\n\n    actor_progress *= is_not_interrupted as u8;\n  }\n}\n\npub comptime fn set_action_def_pre_calc_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_pre_calc_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_pre_calc_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_pre_calc_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[derive_frontend_action_def_pre_calc_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefPreCalcEffects {}\n\n\npub comptime fn derive_frontend_action_def_pre_calc_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_pre_calc_base_index(), ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n  quote { FrontendActionDefPreCalcEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionPreCalcEffect.nr"},"92":{"source":"use skplg::{UNREADABLE_BYTES_PER_FIELD, softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse std::append::Append;\nuse crate::{actionDefinition::derive_frontend_action_def_struct, actionDefinition::derive_frontend_action_def_struct_builder};\n\n    // fn get_action_req_target_free_space(self) -> bool;\n    // fn get_action_req_target_is_not_self(self) -> bool;\n    // fn get_action_req_status_visible(self) -> bool;\n    // fn get_action_req_status_invisible(self) -> bool;\n    // fn get_action_req_status_hidden(self) -> bool;\n    // fn get_action_req_max_range(self) -> u8;\n    // fn get_action_req_min_status(self) -> u8;\n    // fn get_action_req_max_status(self) -> u8;\n    // fn get_action_req_energy(self) -> u8;\n    // fn get_action_req_previous_action(self) -> u8;\npub type ActionDefDefRequirementCheck = (Quoted, Quoted);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, expr: Quoted, msg: Quoted) -> DEF_ROW<ActionDefDefRequirementCheck> {\n    (varname, bit_size, (expr, msg))\n}\n// comptime global ACTION_DEF_DEF_FIELD_COUNT: u32 = 11;\nglobal ACTION_DEF_DEF_REQUIREMENTS: [DEF_ROW<ActionDefDefRequirementCheck>] = [\n    action_def_def(quote { action_req_target_free_space }, 1, quote { can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles) }, quote { f\"Target space cannot be moved to {action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" }),\n    action_def_def(quote { action_req_target_is_not_self }, 1, quote { (actor_x != action_target_x) | (actor_y != action_target_y) }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" }),\n    action_def_def(quote { action_req_status_visible }, 1, quote { actor_is_in_view_range & !actor_is_hidden },  quote { f\"Character must be fully visible for action {action_type}: in_view_range: {actor_is_in_view_range} & !hidden {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_invisible }, 1, quote { !actor_is_in_view_range | actor_is_hidden }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {actor_is_in_view_range} || hidden: {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_hidden }, 1, quote { actor_is_hidden }, quote { f\"Character needs to be hidden to perform action {action_type}\" }),\n    // action_def_def(quote { action_req_previous_action }, 3, quote { true }, quote { f\"\" }),\n    action_def_def(quote { action_req_min_progress }, 4, quote { action_req_min_progress as u8 <= actor_progress as u8 }, quote { f\"Character needs min progress {action_req_min_progress} to perform action {action_type}, but only has {actor_progress}\" }),\n    action_def_def(quote { action_req_max_progress }, 4, quote { action_req_max_progress as u8 >= actor_progress as u8 }, quote { f\"Character cannot have a higher progress than {action_req_max_progress} to perform action {action_type}: got {actor_progress}\" }),\n    action_def_def(quote { action_req_status }, 4, quote { (action_req_status as u8 == 0 as u8) | (action_req_status as u8 == actor_progress as u8) }, quote { f\"Character can only perform action {action_type} while having status {action_req_status}. Invalid status {actor_status}\" }),\n    // action_def_def(quote { action_req_required_energy }, 4, quote { action_req_required_energy <= energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_req_required_energy}\" }),\n    action_def_def(quote { action_req_max_range }, 8, quote { distance as u16 <= (action_req_max_range as u16) * (action_req_max_range as u16) }, quote { f\"Character is out of range! Distance: {distance} > {action_req_max_range}: {{{actor_x},{actor_y}}} - {{{action_target_x},{action_target_y}}} with {action_req_max_range}\" }),\n];\npub comptime fn get_action_def_requirements_base_index() -> u32 {\n  UNREADABLE_BYTES_PER_FIELD as u32\n}\n\npub comptime fn get_action_def_requirements_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_REQUIREMENTS)\n}\n\ncomptime fn derive_action_def_def_req_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n// comptime fn derive_action_def_requirements_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_REQUIREMENTS);\n// }\n\n#[derive_action_def_def_req_struct]\npub struct ActionRequirement {\n  pub register: [u8; 32]\n}\nimpl ActionRequirement {\n  #[derive_action_def_requirements_struct_new()]\n  pub fn new() -> ActionRequirement {\n    ActionRequirement { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_req_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[export]\n#[derive_action_def_def_req_builder]\npub fn build_action_def_requirements() -> pub ActionRequirement { ActionRequirement::new() }\n\npub comptime fn validate_action_requirements(valid_varname: Quoted, register: Quoted) -> Quoted {\n  let mut result = build_over_def_array(ACTION_DEF_DEF_REQUIREMENTS, get_action_def_requirements_base_index(), |bytes, bits, varname, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    // let varname = f\"action_requirement_{i}_is_valid\".quoted_contents();\n    let (checkexpr, msg) = args;\n    let check = if bitsize == 1 { quote { !($varname as bool) | ($checkexpr) } } else { quote { $checkexpr } };\n    let sa = softassert(valid_varname, check, msg);\n    quote {\n      let $varname = $expr;\n      $sa\n    }\n  });\n  // println(result);\n  // quote { assert(1==1); }\n  result\n}\n\npub comptime fn set_action_def_requirements_in_action_def(requirements: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_requirements_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_requirements_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $requirements.register[$i]; });\n    // result = quote { $result $action_def += $requirements.register[$i] as Field * $multiplier; };\n    // multiplier *= 2.pow_32(8);\n  }\n  // println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_requirements_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[derive_frontend_action_def_requirements_struct]\n#[derive(Default)]\npub struct FrontendActionDefRequirements {}\n\n\npub comptime fn derive_frontend_action_def_requirements_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_requirements_base_index(), ACTION_DEF_DEF_REQUIREMENTS);\n  // println(content);\n  quote { FrontendActionDefRequirements { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionRequirements.nr"},"93":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse skplg::softassert;\nuse crate::actionPreCalcEffect::{get_action_def_pre_calc_base_index, get_action_def_pre_calc_effects_byte_size};\nuse std::append::Append;\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { action_result_required_energy }, 4, |action_required_energy|{\n      let check = softassert(quote { is_valid }, quote { action_required_energy <= result_energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_required_energy}\" });\n      quote {\n        let action_required_energy = $action_required_energy;\n        $check\n        result_energy = std::wrapping_sub(result_energy, action_required_energy);\n      }\n    }),\n    action_def_def(quote { action_result_progress_increment }, 4, |progress_increment|quote { let action_result_effect_progress_increment: u32 = $progress_increment as u32; }),\n    action_def_def(quote { action_result_progress_multiplier }, 2, |progress_multiplier|quote { let action_result_effect_progress_multiplier: u32 = $progress_multiplier as u32; }),\n    action_def_def(quote { action_result_move_to_target }, 1, |move_to_target|quote { result_coords = coords[$move_to_target as u8]; }),\n    action_def_def(quote { action_result_hide }, 1, |hide|quote { let action_result_effect_hide: bool = $hide as bool; }),\n    action_def_def(quote { action_result_reveal }, 1, |leave_shadows|quote { let action_result_effect_leave_shadows: bool = $leave_shadows as bool; })\n];\npub comptime fn get_action_def_result_effect_base_index() -> u32 {\n  get_action_def_pre_calc_base_index() + get_action_def_pre_calc_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_result_effect_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n// }\n#[derive_action_def_def_result_effect_struct]\npub struct ActionResultEffect {\n  pub register: [u8; 32]\n}\nimpl ActionResultEffect {\n  //#[derive_action_def_result_effects_struct_new]\n  pub fn new() -> ActionResultEffect {\n    ActionResultEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_effects_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_result_effects_builder]\npub fn build_action_def_result_effects() -> pub ActionResultEffect { ActionResultEffect::new() }\n\npub comptime fn apply_action_result_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_effect_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n// println(result);\n  quote {\n    $result\n\n    let result_progress_raw = actor_progress as u32 * action_result_effect_progress_multiplier + action_result_effect_progress_increment;\n    //softassert!(quote { is_valid }, quote { result_progress_raw <= MAX_PROGRESS as u32 }, quote { f\"Invalid result progress: {result_progress_raw} > {MAX_PROGRESS}\" });\n    result_progress = result_progress_raw as u8;\n\n    result_is_hidden = (result_is_hidden & !action_result_effect_leave_shadows) | action_result_effect_hide;\n    result_is_visible = !result_is_hidden & is_visible(enemy_advance, result_coords.0);\n  }\n}\n\npub comptime fn set_action_def_result_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_result_effect_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_result_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[derive_frontend_action_def_result_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEffects {}\n\n\npub comptime fn derive_frontend_action_def_result_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_result_effect_base_index(), ACTION_DEF_DEF_RESULT_EFFECTS);\n  quote { FrontendActionDefResultEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEffect.nr"},"94":{"source":"// pub global ACTION_RESULT_EVENT_TYPE: u8 = 0;\n// pub global ACTION_RESULT_EVENT_SUBTYPE: u8 = 1;\n// pub global ACTION_RESULT_EVENT_VALUE_MULTIPLIER: u8 = 2;\n// pub global ACTION_RESULT_EVENT_VALUE_FIXED_ADDITION: u8 = 3;\n// pub global ACTION_RESULT_EVENT_COORD_IDX: u8 = 4;\n// pub global ACTION_RESULT_EVENT_RADIUS: u8 = 5;\n// pub comptime fn to_action_result_event(event_type: Quoted, subtype: Quoted, val_mul: Quoted, val_add: Quoted, coord_idx: Quoted, radius: Quoted) -> Quoted {\n//     quote { ($event_type, $subtype, $val_mul, $val_add, $coord_idx, $radius)}\n// }\n// pub comptime fn get_type_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_subtype_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_value_multiplier_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_value_addition_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n// pub comptime fn get_coord_idx_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.4 }\n// }\n// pub comptime fn get_radius_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.5 }\n// }\n// pub type ActionResultEventDefinition = (u8, u8, u8, u8, u8, u8);\n\nuse skplg::{softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionResultEffect::{get_action_def_result_effect_base_index, get_action_def_result_effects_byte_size};\n\npub type ActionDefDefResultEventRow = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefResultEventRow> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EVENTS: [DEF_ROW<ActionDefDefResultEventRow>] = [\n    action_def_def(quote { result_event_value_fixed_addition }, 8, |fixed_addition|quote { result_event_value += $fixed_addition as u32; }),\n    action_def_def(quote { result_event_value_scaled_by_progress }, 4, |factor|quote { result_event_value += ($factor as u32) * (actor_progress as u32); }),\n    action_def_def(quote { result_event_coords_idx }, 2, |coords_idx|{\n     let check = softassert(quote { is_valid }, quote { $coords_idx < 3 }, quote { f\"Invalid event coord idx: {result_event_coords_idx} does not fit in u8!\" });\n      quote {\n        let result_event_coords_idx: u8 = $coords_idx;\n        $check\n        result_event_coords = coords[result_event_coords_idx & 3];\n      }\n    }),\n    action_def_def(quote { result_event_type }, 4, |event_type|quote { result_event_type = $event_type; }),\n    action_def_def(quote { result_event_subtype }, 8, |event_subtype|quote { result_event_subtype = $event_subtype; }),\n    action_def_def(quote { result_event_radius }, 6, |event_radius|quote { result_event_radius = $event_radius; })\n];\ncomptime fn get_action_def_result_event_base_index() -> u32 {\n  get_action_def_result_effect_base_index() + get_action_def_result_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_event_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EVENTS)\n}\n\n\ncomptime fn derive_action_def_def_result_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EVENTS);\n// }\n#[derive_action_def_def_result_event_struct]\npub struct ActionResultEvent {\n  pub register: [u8; 32]\n}\nimpl ActionResultEvent {\n  #[derive_action_def_result_event_struct_new]\n  pub fn new() -> ActionResultEvent {\n    ActionResultEvent { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_event_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[export]\n#[derive_action_def_def_result_event_builder]\npub fn build_action_def_result_event() -> pub ActionResultEvent { ActionResultEvent::new() }\n\npub comptime fn build_result_event(event_idx: u32, events_collection_varname: Quoted, valid_varname: Quoted, register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_event_base_index();\n  let event_data_start_idx = base_index + event_idx * get_action_def_result_event_byte_size();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EVENTS, event_data_start_idx, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  //let value_valid_msg = f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\";\n  // let value_valid = softassert(valid_varname, quote { result_event_value <= 255 as u32 }, quote { f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\" });\n  let full_result = quote {\n    let event_idx = $event_idx as u8;\n    let mut result_event_type: u8 = 0;\n    let mut result_event_subtype: u8 = 0;\n    let mut result_event_coords: (u8,u8) = (NOWHERE, NOWHERE);\n    let mut result_event_value: u32 = 0;\n    let mut result_event_radius: u8 = 0;\n    $result\n    // $value_valid\n    if (result_event_value > 255) {\n      result_event_value = 255;\n    }\n\n    $events_collection_varname.push(build_subtype_value_event(\n      result_event_type,\n      actor_id,\n      result_event_coords.0,\n      result_event_coords.1,\n      result_event_value as u8,\n      result_event_subtype,\n      result_event_radius\n    ));\n  };\n  // println(full_result);\n  full_result\n}\n\npub comptime fn set_action_def_result_event_in_action_def(event: Quoted, event_count: u32, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let mut base_index = get_action_def_result_event_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  // println(\"start\");\n  for event_idx in 0..event_count {\n    let idx = event_idx * get_action_def_result_event_byte_size();\n    for i in 0..get_action_def_result_event_byte_size() {\n      let destination_idx = base_index + idx + i;\n      result = quote { $result $action_def[$destination_idx] = $event[$event_idx].register[$i]; };\n      // result = quote { $result $action_def += $event[$event_idx].register[$i] as Field * $multiplier; };\n      // multiplier *= 2;\n    }\n  }\n  //println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_event_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[derive_frontend_action_def_result_event_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEvent {}\n\n\npub comptime fn derive_frontend_action_def_result_event_struct_builder(param_name: Quoted, event_idx: u32) -> Quoted {\n  let idx = get_action_def_result_event_base_index() + event_idx * get_action_def_result_event_byte_size();\n  let content = derive_frontend_action_def_struct_builder(param_name, idx, ACTION_DEF_DEF_RESULT_EVENTS);\n  quote { FrontendActionDefResultEvent { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEvent.nr"}},"names":["turn"],"brillig_names":["directive_invert","directive_to_radix","directive_integer_quotient"]}