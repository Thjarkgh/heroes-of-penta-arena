{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":17057085426508199931,"abi":{"parameters":[{"name":"data","type":{"kind":"field"},"visibility":"private"},{"name":"actions_data","type":{"kind":"array","length":30,"type":{"kind":"field"}},"visibility":"private"},{"name":"events","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"event::Event","fields":[{"name":"event","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"actor_id","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"subtype","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"y","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"radius","type":{"kind":"integer","sign":"unsigned","width":8}}]}},"visibility":"private"},{"name":"enemy_advance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"boolean"},{"kind":"array","length":5,"type":{"kind":"struct","path":"character::Character","fields":[{"name":"id","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"y","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"class","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"progress","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"health","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"has_been_seen","type":{"kind":"boolean"}},{"name":"is_hidden","type":{"kind":"integer","sign":"unsigned","width":1}},{"name":"target_x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"target_y","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"damage_mod","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"last_action","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"status","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"actions","type":{"kind":"array","length":7,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}}]}}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"}}},"bytecode":"","debug_symbols":"","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"72":{"source":"\nuse arenalib::ARCHER;\nuse arenalib::KNIGHT;\nuse arenalib::MAGE;\nuse arenalib::RITUALIST;\nuse arenalib::ROGUE;\nuse arenalib::WIDTH;\nuse arenalib::HEIGHT;\nuse arenalib::{ CLASS_COUNT, PROGRESS_COUNT };\nuse arenalib::{ WAIT }; //, ATTACK_MELEE, ATTACK_FIREBALL, ATTACK_RANGED, MAX_FIREBALL_ROUNDS_FOR_CAST, MIN_FIREBALL_ROUNDS_FOR_CAST, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES, MAX_ACTIONS_PER_CHARACTER };\nuse arenalib::{ WIDTH_MASK, HEIGHT_MASK, CLASS_MASK, PROGRESS_MASK };\nuse arenalib::{ WIDTH_BITS, HEIGHT_BITS, CLASS_BITS, PROGRESS_BITS };\nuse crate::event::Event;\nuse crate::map::is_visible;\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::new_obstacle;\nuse skplg::{NOWHERE, debug, softassert};\nuse arenalib::{ActionDefinition};\nuse arenalib::{SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, SerializedArenaCharacterActionDefinitions, SerializedArenaCharacterActionDefinition};\n// use arenalib::{TRAP, ADD_OBSTACLE, WIN_BY_RITUAL, RITUAL_ROUNDS_FOR_WIN};\nuse arenalib::get_test_action_register;\nuse crate::event::{build_subtype_value_event, serialize_events};\nuse arenalib::NO_EVENT;\nuse arenalib::get_wait_action_def;\n\n\npub global SERIALIZED_CHARACTER_BYTES: u32 = 6;\npub type SerializedCharacter = [u8; SERIALIZED_CHARACTER_BYTES];\n\n// use skplam::{build_wait_action_def, build_shoot_action, build_draw_action, build_move_action, build_attack_action, build_cast_action, build_evocation_action, build_search_action, build_set_trap_action, build_sneak_action, build_ritual_action, build_disarm_trap_action};\n\n// this should be more efficient: for all the following: order is: UNKNOWN_CLASS, ARCHER, RITUALIST, ROGUE, KNIGHT, MAGE\nglobal class_damage_melee: [u8; 6] = [ 0, 32, 8, 24, 40, 16 ];\nglobal class_damage_ranged: [u8; 6] = [ 0, 24, 40, 16, 32, 8 ];\nglobal class_damage_fireball: [u8; 6] = [ 0, 0, 100, 50, 0, 100 ];\nglobal class_damage: [[u8; 6]; 3] = [ class_damage_melee, class_damage_ranged, class_damage_fireball ];\nglobal class_energy_per_attack: [u8; 6] = [ 0, 7, 7, 7, 6, 7 ];\nglobal class_energy_per_cast: [u8; 6] = [ 0, 255, 12, 255, 255, 6 ];\nglobal class_energy_per_disarm: [u8; 6] = [ 0, 255, 255, 12, 255, 255 ];\nglobal class_energy_per_move: [u8; 6] = [ 0, 3, 4, 3, 4, 4 ];\nglobal class_energy_per_ritual: [u8; 6] = [ 0, 255, 12, 255, 255, 255 ];\nglobal class_energy_per_search: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_sneak: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_draw: [u8; 6] = [ 0, 9, 255, 255, 255, 255 ];\nglobal class_energy_per_shoot: [u8; 6] = [ 0, 6, 255, 255, 255, 255 ];\nglobal resistances: [u16; 8 * 3] = [\n     0,  75, 100, 85,  50, 100, 20,  0, //,  255, 255, 0, 0, 0, 255, 255, 255 ], // Melee vs dummy, archer, ritualist, thief, knight, mage, wall, water, unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n     0,  80, 100, 90,  25, 100,  5,  0, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Ranged vs dummy, archer, ritualist, thief, knight, mage, wall, water\n     0,  80, 100, 90, 100,  90, 60, 50, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Fireball vs dummy, archer, ritualist, thief, knight, mage, wall, water\n];\n\nglobal trap_resistances: [u16; 8] = [ 0,  75, 100, 50,  75, 90, 5, 0]; //,  255, 255, 255, 255, 255, 255, 255, 255 ]; // Trap vs dummy, archer, ritualist, thief, knight, mage\n\n\n//global x: ActionDefinition = build_set_trap_action(1 as u8, 1 as u8);\n// TODO: move to character!\n// global ARCHER: u8 = 1;    WAIT, MOVE, ATTACK, DRAW, SHOOT\n// global RITUALIST: u8 = 2; WAIT, MOVE, ATTACK, CAST, RITUAL\n// global ROGUE: u8 = 3;     WAIT, MOVE, ATTACK, SNEAK, SEARCH, DISARM_TRAP, SET_TRAP\n// global KNIGHT: u8 = 4;    WAIT, MOVE, ATTACK\n// global MAGE: u8 = 5;      WAIT, MOVE, ATTACK, CAST, CAST_FIREBALL\n// global ACTION_DEFINITIONS: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER * CLASS_COUNT] = [\n//     // [[0 as u8; ACTION_DEFINITION_SIZE]; MAX_ACTIONS_PER_CHARACTER], // 0 for no action\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n    \n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ARCHER]),\n//         build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//         build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//         build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[RITUALIST]),\n//         build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//         build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//         build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ROGUE]),\n//         build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//         build_sneak_action(class_energy_per_sneak[ROGUE]),\n//         build_search_action(class_energy_per_search[ROGUE], 1),\n//         build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[KNIGHT]),\n//         build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[MAGE]),\n//         build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//         build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//         build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n//         WAIT_ACTION,\n//         WAIT_ACTION\n//     // ]\n// ];\n// global \n// pub fn get_test_action_register() -> [u8; ACTION_DEFINITION_REGISTER_SIZE] {\n//     build_action_def_reg!([\n//         [\n//             build_move_action(class_energy_per_move[ARCHER]),\n//             build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//             build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//             build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[RITUALIST]),\n//             build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//             build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//             build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[ROGUE]),\n//             build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//             build_sneak_action(class_energy_per_sneak[ROGUE]),\n//             build_search_action(class_energy_per_search[ROGUE], 1),\n//             build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//             build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[KNIGHT]),\n//             build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[MAGE]),\n//             build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//             build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//             build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST),\n//             build_wait_action_def(),\n//             build_wait_action_def()\n//         ]\n//     ])\n// }\n// pub fn get_test_action_register() -> SerializedArenaActionDefinitions {\n//   let action_builder = arena_action_def_builder;\n//      [\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER)),\n//             std::field::bytes32_to_field(action_builder.build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT)), // arche),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n            \n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST, 255)),\n//             std::field::bytes32_to_field(action_builder.build_ritual_action(3, class_energy_per_ritual[RITUALIST], RITUAL_ROUNDS_FOR_WIN, WIN_BY_RITUAL)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_sneak_action(class_energy_per_sneak[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_search_action(class_energy_per_search[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_set_trap_action(class_energy_per_disarm[ROGUE], 1, ADD_OBSTACLE, TRAP)),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[KNIGHT])),\n//            std::field::bytes32_to_field( action_builder.build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT])),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[MAGE], MAGE, 7)),\n//             std::field::bytes32_to_field(action_builder.build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def())\n//         ]\n// }\n\n// struct CharacterClass {\n//     class: u8,\n//     damage: u8,\n//     energy_per_attack: u8,\n//     energy_per_cast: u8,\n//     energy_per_disarm: u8,\n//     energy_per_move: u8,\n//     energy_per_ritual: u8,\n//     energy_per_search: u8,\n//     energy_per_sneak: u8,\n// }\n\npub struct Character {\n    pub id: u8,\n    pub x: u8, // 5 bit\n    pub y: u8, // 4 bit\n    pub class: u8, // 3 bit\n    pub progress: u8, // 0 = idle, 1-15 = continuing action => 4 bit\n    pub health: u8,\n    pub has_been_seen: bool,\n    pub is_hidden: u1,\n    pub target_x: u8,\n    pub target_y: u8,\n    pub damage_mod: u8,\n    pub last_action: u8,\n    pub status: u8,\n    // pub wait_action: ActionDefinition,\n    pub actions: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1], // BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER>,\n}\n\n// pub fn resolve_action(action: u8, class: u8) -> ActionDefinition {\n//     let mut idx = class as u32 * MAX_ACTIONS_PER_CHARACTER + action as u32;\n//     if idx >= (ACTION_DEFINITIONS.len()) {\n//         idx = 0;\n//     }\n//     // assert(action as u32 < MAX_ACTIONS_PER_CHARACTER);\n//     // assert(class as u32 < CLASS_COUNT);\n//     ACTION_DEFINITIONS[idx]\n// }\n//     pub fn resolve_action(action: Action) -> ActionDefinition {\n//         // let idx = get_action_base_index(self.get_id(), action);\n//         ActionDefinition::new(action, ACTION_DEFINITIONS)\n// //        (idx, ACTION_DEFINITIONS)\n//         //resolve_action(action, self.class)\n//         // let mut a = action as u32;\n//         // if a >= self.actions.len() { a = 0; }\n//         // self.actions[a] //.get_unchecked(a)\n//     }\n//global wait_action: ActionDefinition = buld_wait_action_def();\n\n// global wait_action: ActionDefinition = action_builder.build_wait_action_def();\n\nimpl Character {\n    // pub fn new(id: u8 x: u8, y: u8, class: u8, status: u8, health: u8, has_been_seen: u8)\n    /// May throw\n\n\n    pub fn get_id(self) -> u8 {\n        self.id\n    }\n\n    pub fn get_x(self) -> u8 {\n        self.x\n    }\n\n    pub fn get_y(self) -> u8 {\n        self.y\n    }\n\n    pub fn get_class(self) -> u8 {\n        self.class\n    }\n\n    pub fn get_progress(self) -> u8 {\n        self.progress\n    }\n\n    pub fn get_status(self) -> u8 {\n        self.status\n    }\n\n    pub fn get_health(self) -> u8 {\n        self.health\n    }\n\n    pub fn get_has_been_seen(self) -> bool {\n        self.has_been_seen\n    }\n\n    pub fn get_target_x(self) -> u8 {\n        self.target_x\n    }\n\n    pub fn get_target_y(self) -> u8 {\n        self.target_y\n    }\n\n    pub fn get_is_hidden(self) -> u1 {\n      self.is_hidden\n    }\n\n    pub fn get_damage_mod(self) -> u8 {\n      self.damage_mod\n    }\n\n    pub fn get_action(self, action_idx: u8) -> (bool, ActionDefinition) {\n      /*if action_idx == 0 {\n        (true, self.wait_action)\n      } else */if action_idx <= MAX_ACTIONS_PER_CHARACTER as u8 {\n        (true, self.actions[action_idx])\n      } else {\n        (false, self.actions[0])\n      }\n    }\n\n    // pub fn get_energy_per_attack(self) -> u8 {\n    //     class_energy_per_attack[self.class]\n    // }\n\n    // pub fn get_energy_per_cast(self) -> u8 {\n    //     class_energy_per_cast[self.class]\n    // }\n\n    // pub fn get_energy_per_disarm(self) -> u8 {\n    //     class_energy_per_disarm[self.class]\n    // }\n\n    // pub fn get_energy_per_move(self) -> u8 {\n    //     class_energy_per_move[self.class]\n    // }\n\n    // pub fn get_energy_per_ritual(self) -> u8 {\n    //     class_energy_per_ritual[self.class]\n    // }\n\n    // pub fn get_energy_per_search(self) -> u8 {\n    //     class_energy_per_search[self.class]\n    // }\n\n    // pub fn get_energy_per_sneak(self) -> u8 {\n    //     class_energy_per_sneak[self.class]\n    // }\n\n    // pub fn get_energy_per_draw(self) -> u8 {\n    //     class_energy_per_draw[self.class]\n    // }\n\n    // pub fn get_energy_per_shoot(self) -> u8 {\n    //     class_energy_per_shoot[self.class]\n    // }\n\n    // pub fn get_damage(self, attack_type: u8) -> u8 {\n    //     self.damage_mod + class_damage[attack_type][self.class]\n    // }\n\n    pub fn get_last_action(self) -> u8 {\n      self.last_action\n    }\n\n    // pub fn can_sneak(self) -> bool {\n    //     class_energy_per_sneak[self.class] != 255\n    // }\n\n    // pub fn can_ritual(self) -> bool {\n    //     class_energy_per_ritual[self.class] != 255\n    // }\n\n    // pub fn can_cast_fireball(self) -> bool {\n    //     class_energy_per_cast[self.class] != 255\n    // }\n\n    pub fn can_shoot(self) -> bool {\n        self.class == ARCHER\n    }\n    // pub fn can_disarm(self) -> bool {\n    //     class_energy_per_disarm[self.class] != 255\n    // }\n\n    // pub fn can_search(self) -> bool {\n    //     class_energy_per_search[self.class] != 255\n    // }\n\n    fn is_pos_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_target_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_class_valid(class: u8) -> bool { class as u32 <= CLASS_COUNT }\n    fn is_status_valid(status: u8) -> bool { status < PROGRESS_COUNT }\n\n    pub fn is_valid(self) -> bool {\n        Character::is_pos_valid(self.x, self.y) &\n        Character::is_target_valid(self.target_x, self.target_y) &\n        Character::is_class_valid(self.class) &\n        Character::is_status_valid(self.progress)\n    }\n\n    pub fn serialize(self) -> (SerializedCharacter, SerializedArenaCharacterActionDefinitions) {\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n        assert(self.is_valid());\n        let packed_x = self.x + (self.class << WIDTH_BITS);\n        let packed_y = self.y + (self.progress << HEIGHT_BITS);\n        let packed_target_x = (self.target_x & WIDTH_MASK) + ((self.is_hidden as u8) << WIDTH_BITS);\n        let packed_target_y = (self.target_y & HEIGHT_MASK) + ((self.last_action as u8) << HEIGHT_BITS);\n\n        // let serialized_action_defs = self.actions.map(|a|std::field::bytes32_to_field(a));\n        let serialized_action_defs = [\n          std::field::bytes32_to_field(self.actions[1]),\n          std::field::bytes32_to_field(self.actions[2]),\n          std::field::bytes32_to_field(self.actions[3]),\n          std::field::bytes32_to_field(self.actions[4]),\n          std::field::bytes32_to_field(self.actions[5]),\n          std::field::bytes32_to_field(self.actions[6])\n        ];\n        \n        ([packed_x, packed_y, self.health, packed_target_x, packed_target_y, self.damage_mod], serialized_action_defs)\n    }\n\n    pub fn to_obstacle(self) -> (bool, Obstacle) {\n        comptime {\n            assert(MAX_CHARACTERS < (255 - MAX_OBSTACLES));\n        }\n        assert(self.is_valid());\n        new_obstacle(self.id + (MAX_OBSTACLES as u8), self.x, self.y, self.health, self.class)\n        // Obstacle {\n        //     id: self.id + (MAX_CHARACTERS as u8),\n        //     x: self.x,\n        //     y: self.y,\n        //     obstacle_type: self.class,\n        //     health: self.health,\n        //     //was_alive: \n        // }\n    }\n\n    pub fn move(self, x: u8, y: u8) -> Character {\n        let mut c = self;\n        c.x = x;\n        c.y = y;\n        c\n    }\n\n    pub fn take_damage(self, attack_type: u8, dmg: u8) -> Character {\n        let damage_after_resistances = get_attack_damage_to_tile(attack_type, dmg as u32, self.class);\n        let mut c = self;\n        if damage_after_resistances > (c.health as u32) {\n            c.health = 0;\n        } else {\n            c.health -= (damage_after_resistances as u8);\n        }\n        c\n    }\n\n    pub fn set_status(self, status: u8) -> Character {\n        assert(status < PROGRESS_COUNT);\n        let mut c = self;\n        c.progress = status;\n        c\n    }\n\n    pub fn create_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n        // let mut actions: BoundedVec<ActionDefinition, 6> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..6 {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions.push(ACTION_DEFINITIONS[idx + i]);\n        //     }\n        // }\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: 0,\n            health: 0,\n            has_been_seen: false,\n            is_hidden: 0,\n            target_x: 255,\n            target_y: 255,\n            damage_mod: 0,//: class_damage[class],\n            last_action: WAIT,\n            status: 0, // TODO: status\n            actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1]// BoundedVec::new()\n        };\n        assert(c.is_valid());\n        c\n    }\n\n    pub fn parse(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool, Character) {\n        // these asserts could be disabled for production\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n\n      let (is_valid, c) = parse_unconstrained(id, data, actions_data, wait_action, events, enemy_advance);\n      // assert(c.)\n\n        assert(c.is_valid());\n        (is_valid, c)\n    }\n}\n\nfn parse_unconstrained(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool,Character) {\n          let mut is_valid = true;\n\n        let split: [u8; 32] = data.to_be_bytes::<32>();\n        assert(split.len() == 32);\n        let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n        let y_packed = split[2 + id * 6 + 1]; // 4 bit y, 4 bit status\n        let mut health = split[2 + id * 6 + 2] as u16;\n        let target_x_packed = split[2 + id * 6 + 3]; // 5 bit target x, 1 bit hidden, 1 bit has target, 1 bit unused\n        let target_y_packed = split[2 + id * 6 + 4]; // 4 bit target y, 4 bit last action\n        let damage_mod = split[2 + id * 6 + 5]; // last byte: for the moment, use to save damage_mod (buffs, etc)\n\n        let x = x_packed & WIDTH_MASK;\n        let y = y_packed & HEIGHT_MASK;\n        let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n        if !Character::is_class_valid(class) {\n            debug!(quote { println(f\"Invalid class {class}\"); });\n            class = 0;\n            is_valid = false;\n        }\n\n        let progress = (y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n        softassert!(quote { is_valid }, quote { Character::is_status_valid(progress) }, quote { f\"Invalid status {progress} during character parsing {id}\" });\n\n        let target_x = target_x_packed & WIDTH_MASK;\n        let target_y = target_y_packed & HEIGHT_MASK;\n        let last_action = (target_y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n\n        let is_visible = is_visible(enemy_advance, x); //((target_x_packed >> 5) & 1) as u1;\n        let is_hidden = ((target_x_packed >> WIDTH_BITS) & 1) as u1;\n\n        let mut damage: u16 = 0;\n        for i in 0..MAX_EVENTS {\n            let event = events[i];\n            damage += event.get_applied_damage_to_my_asset(x, y, class);\n            // if events[i].actor_id == id {\n            //     let event = events[i];\n            //     if event.actor_id == id {\n            //         damage += event.get_applied_damage_to_my_asset(x, y, class);\n            //     }\n            // }\n        }\n        if damage > health {\n            health = 0;\n        } else {\n            health -= damage;\n        }\n\n        // let mut actions = [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]; //: BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..MAX_ACTIONS_PER_CHARACTER {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions[i] = ACTION_DEFINITIONS[idx + i];\n        //     }\n        // }\n\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: progress,\n            health: health as u8,\n            has_been_seen: is_visible, // TODO \n            is_hidden: is_hidden,\n            target_x: target_x,\n            target_y: target_y,\n            damage_mod: damage_mod,\n            last_action: last_action,\n            actions: [\n              wait_action,\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 1].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 2].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 3].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 4].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 5].to_be_bytes::<32>()\n            ],\n            status: 0 // TODO: status\n        };\n        (is_valid, c)\n}\n\n// unconstrained fn create_character_unconstrained(\n//   id: u8,\n//   x: u8,\n//   y: u8,\n//   class: u8,\n//   progress: u8,\n//   health: u8,\n//   has_been_seen: u8\n// )\n\nfn select_action_defs_of_character(actions: SerializedArenaActionDefinitions, char_id: u32) -> [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1] {\n  let mut result: [SerializedArenaCharacterActionDefinition] = &[std::field::bytes32_to_field(get_wait_action_def())];\n  let offset = char_id * MAX_ACTIONS_PER_CHARACTER;\n  for i in 0..MAX_ACTIONS_PER_CHARACTER {\n    result = result.push_back(actions[offset + i]);\n  }\n  result.as_array().map(|f|f.to_be_bytes())\n}\n\npub fn get_default_characters(side: u8) -> [Character; MAX_CHARACTERS] {\n    assert(side < 2, f\"Side is too large {side}\");\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let default_actions = get_test_action_register();\n\n    let x = |x| x * ((side + 1) % 2) + (WIDTH - 1 - x) * side;\n    [\n        Character { id: 0, x: x(2), y: 2, class: ARCHER, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 1), status: 0 },\n        Character { id: 1, x: x(2), y: 3, class: RITUALIST, health: 60, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 2), status: 0 },\n        Character { id: 2, x: x(2), y: 4, class: ROGUE, health: 80, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 3), status: 0 },\n        Character { id: 3, x: x(2), y: 5, class: KNIGHT, health: 120, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 4), status: 0 },\n        Character { id: 4, x: x(2), y: 6, class: MAGE, health: 40, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 5), status: 0 },\n    ]\n}\n\n#[export]\npub fn parse_characters(data: SerializedArenaCharacterRoster, actions_data: SerializedArenaActionDefinitions, events: [Event; MAX_EVENTS], enemy_advance: u8) -> pub (bool, [Character; MAX_CHARACTERS]) {\n    comptime { assert(MAX_CHARACTERS == 5); }\n\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut is_valid = true;\n\n    let wait_action = get_wait_action_def();\n\n    // no need to optimize, compiler automatically rolls this out\n    // let mut result: [Character; MAX_CHARACTERS] = [Character::create_character(0, 0, 0, 0), Character::create_character(1, 0, 0, 0), Character::create_character(2, 0, 0, 0), Character::create_character(3, 0, 0, 0), Character::create_character(4, 0, 0, 0)];\n    // for i in 0..(MAX_CHARACTERS as u8) {\n    //     let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action, events, enemy_advance);\n    //     is_valid &= curr_valid;\n    //     result[i] = curr_c;\n    // }\n\n        let (curr_valid, curr_c0) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[0] = curr_c0;\n        let (curr_valid, curr_c1) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[1] = curr_c1;\n        let (curr_valid, curr_c2) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[2] = curr_c2;\n        let (curr_valid, curr_c3) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[3] = curr_c3;\n        let (curr_valid, curr_c4) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[4] = curr_c4;\n    let result = [curr_c0, curr_c1, curr_c2, curr_c3, curr_c4];\n    (is_valid, result)\n}\n\npub fn get_test_my_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 100,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\npub fn get_test_their_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 255,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\n#[test]\nfn test_serialize_character() {\n    let mut character = Character {\n        id: 4,\n        x: 21,\n        y: 9,\n        class: 5,\n        progress: 9,\n        health: 129,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 31,\n        target_y: 9,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    };\n    let (field, _) = character.serialize();\n    assert(field[0] == (21 | (5 << 5)));\n    assert(field[1] == (9 | (9 << 4)));\n    assert(field[2] == 129);\n    assert(field[3] == 31); // TODO: why?\n    assert(field[4] == 9);\n    assert(field[5] == 0);\n}\n\n#[test]\nfn test_parse_character() {\n    let dummy_events = Event::get_test_dummy_events();\n    let data_array: [u8; 32] = [\n        0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        191 as u8, 249 as u8, 255 as u8, 255 as u8, 9 as u8, 255 as u8,\n        181 as u8, 153 as u8, 129 as u8, 127 as u8, 9 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n    ];\n    let data: Field = std::field::bytes32_to_field(data_array);\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    println(data);\n    assert(data == 0xbff9ffff09ffb599817f0900000000000000, f\"Failed assumption: data: {data} != 0xbff9ffff09ffb599817f0900000000000000\");\n    let (character_valid, character) = Character::parse(3, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_valid);\n    assert(character.get_id() == 3);\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 9);\n    assert(character.get_class() == 5);\n    assert(character.get_progress() == 9);\n    assert(character.get_health() == 129);\n    assert(character.get_has_been_seen());\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n\n    let (character_max_valid, character_max) = Character::parse(2, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_max_valid);\n    assert(character_max.get_id() == 2);\n    assert(character_max.get_x() == 31);\n    assert(character_max.get_y() == 9);\n    assert(character_max.get_class() == 5);\n    assert(character_max.get_progress() == 15);\n    assert(character_max.get_health() == 255);\n    assert(character_max.get_has_been_seen());\n    assert(character_max.get_target_x() == 31);\n    assert(character_max.get_target_y() == 9);\n\n    let (character_min_valid, character_min) = Character::parse(0, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_min_valid);\n    assert(character_min.get_id() == 0);\n    assert(character_min.get_x() == 0);\n    assert(character_min.get_y() == 0);\n    assert(character_min.get_class() == 0);\n    assert(character_min.get_progress() == 0);\n    assert(character_min.get_health() == 0);\n    assert(character_min.get_has_been_seen() == false);\n    assert(character_min.get_target_x() == 0);\n    assert(character_min.get_target_y() == 0);\n}\n\n#[test]\nfn test_parse_character_as_in_game() {\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    let data: Field = 0x1602ff1f09001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00;\n    let (character_valid, character) = Character::parse(0, data, dummy_actions, wait_action, Event::get_test_dummy_events(), 20);\n    assert(character_valid);\n    assert(character.get_id() == 0);\n    assert(character.get_x() == 22, character.get_x());\n    assert(character.get_y() == 2, character.get_y());\n    assert(character.get_class() == 0, character.get_class());\n    assert(character.get_progress() == 0, character.get_progress());\n    assert(character.get_health() == 255);\n    assert(character.get_has_been_seen() == true);\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n}\n\n#[export]\npub fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> pub (Field, SerializedArenaActionDefinitions) {\n    let mut result: [u8; 32] = [0; 32];\n    let mut actions: SerializedArenaActionDefinitions = [0; 30]; //&[].as_array();\n    for i in 0..MAX_CHARACTERS {\n        let (serialized_char_bytes, serialized_actions) = chars[i].serialize();\n        for j in 0..6 {\n            result[2 + i * 6 + j] = serialized_char_bytes[j];\n        }\n        for k in 0..MAX_ACTIONS_PER_CHARACTER {\n          actions[i * MAX_ACTIONS_PER_CHARACTER + k] = serialized_actions[k];\n        }\n    }\n    \n    (std::field::bytes32_to_field(result), actions)\n}\n\n/**\n* For now we will only take class into account.\n*/\npub fn get_attack_damage_to_tile(attack_type: u8, damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * resistances[attack_type * 8 + (class & 7)] as u32 / 100) as u32\n}\n\npub fn get_trap_damage_to_tile(damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * trap_resistances[class & 7] as u32 / 100) as u32\n}\n\n#[test]\nfn test_parse_character_round0() {\n  // let actions_data = .map(|f|f.to_be_bytes::<32>()).map(|f|std::field::bytes32_to_field(f));\n  let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let enemy_advance = 0x00;\n  let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0)\n  ];\n  let serialized_events = serialize_events(events);\n   println(f\"events: {serialized_events}\");\n\n  let parsed = parse_characters(data, [\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071020100a000020100a00000020000000002000000000000000,\n    0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n    0x023100081b161118120a010018120a01000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071008100a000008100a00000020000000002000000000000000,\n    0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n    0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071018100a000018100a00000020000000002000000000000000,\n    0x09f0000130060c002000000000200000000020000000002000000000000000,\n    0xf00001100610001005000100100500010020000000002000000000000000,\n    0xf00001301c0100100d000000100d00000020000000002000000000000000,\n    0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110061028100a000028100a00000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071010100a000010100a00000020000000002000000000000000,\n    0xf000071b1611002000000000000705000020000000002000000000000000,\n    0x6300061b161164150a020164150a02010020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000\n], events, enemy_advance);\n\n  assert(parsed.0);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/character.nr"},"74":{"source":"use arenalib::{ NO_EVENT, SEE_MOVE, RECEIVE_ATTACK, TRIGGERED_TRAP }; //, SEE_RITUAL, SEE_CAST, SEE_DRAW, SEE_SEARCH_TRAP, FOUND_TRAP\n// use crate::{ EMPTY, WALL };\nuse arenalib::{ EVENT_COUNT };\nuse arenalib::{ ATTACK_FIREBALL };\nuse arenalib::{ SERIALIZED_EVENT_BYTE_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD };\nuse arenalib::{ WIDTH };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS }; //, MAX_TRAPS\nuse arenalib::SerializedArenaEvents;\n// use crate::TRAPS_BUFFER_MASK;\nuse crate::map::get_distance;\n// use crate::character::Character;\nuse crate::character::{ get_attack_damage_to_tile, get_trap_damage_to_tile };\nuse crate::map::their_x_to_mine;\nuse skplg::{ debug, softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD };\n\npub struct Event {\n    pub event: u8,\n    pub actor_id: u8,\n    pub subtype: u8,\n    pub x: u8,\n    pub y: u8,\n    pub value: u8,\n    pub radius: u8,\n}\n\n\n    #[export]\n    pub fn parse_their_events(fields: SerializedArenaEvents) -> pub (bool, [Event; MAX_EVENTS]) {\n        comptime {\n            assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENT_BYTE_SIZE <= 32);\n            assert(SERIALIZED_EVENTS_ARRAY_SIZE * SERIALIZED_EVENTS_PER_FIELD == MAX_EVENTS);\n            assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n        }\n\n        let mut valid = true;\n        let mut events: [Event; MAX_EVENTS] = [Event::empty(0); MAX_EVENTS];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let split: [u8; 32] = fields[i].to_be_bytes::<32>(); //.to_be_bytes<32>();\n            //assert(split.len() == 32);\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                let raw_x = split[offset + 2];\n                let (x_parsed_valid, x_parsed) = their_x_to_mine(raw_x);\n                softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to calculate their_x_to_mine: {raw_x}\" });\n                events[i * SERIALIZED_EVENTS_PER_FIELD + j] = Event {\n                    event: split[offset],\n                    actor_id: split[offset + 1],\n                    x: x_parsed,\n                    y: split[offset + 3],\n                    value: split[offset + 4],\n                    subtype: split[offset + 5],\n                    radius: split[offset + 6],\n                };\n            }\n        }\n        (valid, events)\n    }\n    \n    #[export]\n    pub fn serialize_events(events: [Event; MAX_EVENTS]) -> pub SerializedArenaEvents {\n        assert(events.len() == MAX_EVENTS);\n        assert(MAX_EVENTS % SERIALIZED_EVENTS_PER_FIELD == 0);\n        assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n\n        let mut fields: [Field] = &[];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let mut data: [u8; 32] = [0; 32];\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let index = i * SERIALIZED_EVENTS_PER_FIELD + j;\n                let event = events[index];\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                data[offset] = event.event;\n                data[offset + 1] = event.actor_id;\n                data[offset + 2] = event.x;\n                data[offset + 3] = event.y;\n                data[offset + 4] = event.value;\n                data[offset + 5] = event.subtype;\n                data[offset + 6] = event.radius;\n            }\n            fields = fields.push_back(std::field::bytes32_to_field(data));\n        }\n        fields.as_array()\n    }\n    \n#[test]\nfn test_event_serde() {\n    let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 5, NO_EVENT, 1),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 6, NO_EVENT, 2),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 7, NO_EVENT, 3),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 8, NO_EVENT, 4)\n  ];\n\n  let serialized = serialize_events(events);\n  let (result_valid, result) = parse_their_events(serialized);\n  assert(result_valid);\n  assert(result[0].event == events[0].event);\n  assert(result[1].event == events[1].event);\n  assert(result[2].event == events[2].event);\n  assert(result[3].event == events[3].event);\n  assert(result[0].actor_id == events[0].actor_id);\n  assert(result[1].actor_id == events[1].actor_id);\n  assert(result[2].actor_id == events[2].actor_id);\n  assert(result[3].actor_id == events[3].actor_id);\n  assert(result[0].x == events[0].x);\n  assert(result[1].x == events[1].x);\n  assert(result[2].x == events[2].x);\n  assert(result[3].x == events[3].x);\n  assert(result[0].y == events[0].y);\n  assert(result[1].y == events[1].y);\n  assert(result[2].y == events[2].y);\n  assert(result[3].y == events[3].y);\n  assert(result[0].value == events[0].value);\n  assert(result[1].value == events[1].value);\n  assert(result[2].value == events[2].value);\n  assert(result[3].value == events[3].value);\n  assert(result[0].subtype == events[0].subtype);\n  assert(result[1].subtype == events[1].subtype);\n  assert(result[2].subtype == events[2].subtype);\n  assert(result[3].subtype == events[3].subtype);\n  assert(result[0].radius == events[0].radius);\n  assert(result[1].radius == events[1].radius);\n  assert(result[2].radius == events[2].radius);\n  assert(result[3].radius == events[3].radius);\n}\n    // fn affects_my_character(self, x: u8, y: u8) -> bool {\n    //     let distance = get_distance(self.x, self.y, x, y);\n    //     ((self.x == x) & (self.y == y)) | ((self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y))\n    // }\nimpl Event {\n    fn affects_my_obstacle(self, x: u8, y: u8) -> bool {\n        (self.x == x) & (self.y == y)\n    }\n\n    fn may_affect_my_other_characters(self) -> bool {\n        (self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL)\n    }\n\n    fn may_affect_my_obstacles(self) -> bool {\n        self.event == RECEIVE_ATTACK\n    }\n\n    /**\n    * For now we will only take class into account.\n    */\n    pub fn get_applied_damage_to_my_asset(self, x: u8, y: u8, tile: u8) -> u16 {\n        let mut damage = 0;\n        let radius = self.radius as u32;\n        let radius = radius * radius;\n    \n        if self.event == RECEIVE_ATTACK {\n            let distance = get_distance(self.x, self.y, x, y) as u32;\n            debug!(quote {\n                        // let event = self.event;\n                        // let actor = self.actor_id;\n                        // let self_x = self.x;\n                        // let self_y = self.y;\n                        // let val = self.value;\n                        // println(f\"GetAppliedDamageToMyAsset: Event({event}:{val} from {actor}@{self_x}|{self_y})@{x}|{y}: {distance} <= {radius}\");\n                    });\n            if distance <= radius {\n                let damage_raw = get_attack_damage_to_tile(self.subtype, self.value as u32, tile) as u32;\n                damage = damage_raw * (1 + radius - distance) / (radius + 1) as u32;\n                debug!(quote { println(f\"Deal damage: {damage_raw} * (1 + {radius} - {distance}) / ({radius} + 1) = {damage}\"); });\n            }\n            // if (self.x == x) & (self.y == y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile);\n            // } else if (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile) / 2;\n            // }\n        }\n        if self.event == TRIGGERED_TRAP {\n            damage = get_trap_damage_to_tile(self.value as u32, tile);\n        }\n        damage as u16\n    }\n\n    pub fn empty(actor_id: u8) -> Event {\n        Event {\n            event: NO_EVENT,\n            actor_id: actor_id,\n            x: 0,\n            y: 0,\n            value: 0,\n            subtype: 0,radius: 0\n        }\n    }\n\n    pub fn get_dummy_events() -> [Field; MAX_EVENTS] {\n        [0; MAX_EVENTS]\n    }\n\n    pub fn get_test_dummy_events() -> [Event; MAX_EVENTS] {\n        [Event::empty(0); MAX_EVENTS]\n    }\n}\n\npub fn build_std_event(event: u8, actor_id: u8, x: u8, y: u8) -> Event {\n    assert(event < EVENT_COUNT);\n    assert((actor_id as u32) < MAX_CHARACTERS);\n    assert((x < WIDTH) | (x == NOWHERE));\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: 0,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\n#[test]\nfn test_build_std_event() {\n    let event = build_std_event(SEE_MOVE, 1, 2, 3);\n    assert(event.event == SEE_MOVE);\n    assert(event.actor_id == 1);\n    assert(event.x == 2);\n    assert(event.y == 3);\n}\n\n#[test(should_fail)]\nfn test_build_std_event_fail() {\n    let event = build_std_event(EVENT_COUNT, 1, 2, 3);\n    assert(event.event == EVENT_COUNT);\n}\n\npub fn build_value_event(event: u8, actor_id: u8, x: u8, y: u8, value: u8) -> Event {\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\npub fn build_subtype_value_event(event_type: u8, actor_id: u8, x: u8, y: u8, value: u8, event_subtype: u8, radius: u8) -> Event {\n    Event {\n        event: event_type,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: event_subtype,\n        radius: radius,\n    }\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/event.nr"},"76":{"source":"use arenalib::{ WIDTH, WIDTH_MASK, VIEW_DISTANCE, MAX_OBSTACLES, MAX_ENEMY_OBSTACLES };\nuse crate::obstacle::{ Obstacle, get_obstacle_y, get_obstacle_x, is_obstacle_traversible };\nuse skplg::NOWHERE;\n\n// pub fn is_neighbor(curr_x: u8, curr_y: u8, x: u8, y: u8) -> bool {\n//     // assert(curr_x < WIDTH);\n//     // assert(curr_y < HEIGHT);\n//     // assert(x < WIDTH);\n//     // assert(y < HEIGHT);\n//     // validating coordinates is not the job of this function\n//     // only avoid overflows!\n\n\n//     let shifted_curr_x = std::wrapping_add(curr_x, 1);\n//     let shifted_curr_y = std::wrapping_add(curr_y, 1);\n//     let shifted_x = std::wrapping_add(x, 1);\n//     let shifted_y = std::wrapping_add(y, 1);\n\n//     ((shifted_curr_x == shifted_x) & (std::wrapping_add(shifted_curr_y, 1) >= shifted_y) & (shifted_curr_y <= std::wrapping_add(shifted_y, 1))) |\n//     ((shifted_curr_y == shifted_y) & (std::wrapping_add(shifted_curr_x, 1) >= shifted_x) & (shifted_curr_x <= std::wrapping_add(shifted_x, 1)))\n// }\n\n// global DISTANCE_TABLE_HEIGHT: u32 = HEIGHT as u32;\n// global DISTANCE_TABLE_WIDTH: u32 = WIDTH as u32;\n\n// unconstrained fn distance_sqrt(x: u32) -> u32 {\n//     let mut result: u32 = 0;\n//     for i in 0..DISTANCE_TABLE_WIDTH {\n//         if i * i == x {\n//             result = i;\n//             break;\n//         }\n//     }\n//     result\n// }\n\n// fn d(a: u8, b: u8) -> u8 {\n//     let d = a as i32 - b as i32;\n//     let d2 = d * d;\n//     assert(d2 >= 0);\n//     let d2u = d2 as u32;\n//     let result = unsafe {\n//         let sq = distance_sqrt(d2u);\n//         assert(sq * sq == d2u);\n//         sq\n//     };\n//     assert(result < DISTANCE_TABLE_WIDTH);\n//     comptime { assert(DISTANCE_TABLE_WIDTH <= 256) };\n//     result as u8\n// }\n// global DISTANCE_TABLE: [[u8; DISTANCE_TABLE_WIDTH]; DISTANCE_TABLE_HEIGHT] = [\n//     [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 2,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ],\n//     [ 3,  3,  3,  4,  4,  5,  6,  7,  8,  9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ],\n// ]\n\nglobal MAX_DISTANCE: u32 = 0xff * 0xff;\n\npub fn get_distance(curr_x: u8, curr_y: u8, x: u8, y: u8) -> u16 {\n    // assert(curr_x < WIDTH);\n    // assert(curr_y < HEIGHT);\n    // assert(x < WIDTH);\n    // assert(y < HEIGHT);\n    // validating coordinates is not the job of this function\n    // only avoid overflows!\n\n    // let dx = unsafe {\n    //     let diff_\n    //     distance_sqrt(x)\n    // }\n\n    let dx = if curr_x > x { curr_x - x } else { x - curr_x } as u32;\n    let dy = if curr_y > y { curr_y - y } else { y - curr_y } as u32;\n\n    // let dx = curr_x as i16 - x as i16;\n    // let dy = curr_y as i16 - y as i16;\n\n    let distance = (dx * dx + dy * dy) as u32;\n    if distance > MAX_DISTANCE {\n      MAX_DISTANCE as u16\n    } else {\n      distance as u16\n    }\n}\n\n\npub fn is_visible(enemy_advance: u8, x: u8) -> bool {\n    //(x >= enemy_advance) == (side == 0)\n    x >= enemy_advance\n}\n\n// TODO: This is for the future - fireballs, etc. only if we have line of sight\n// pub fn is_visible(curr_x: u8, curr_y: u8, x: u8, y: u8, map: &Map) -> bool {\n//     assert(curr_x < WIDTH);\n//     assert(curr_y < HEIGHT);\n//     assert(x < WIDTH);\n//     assert(y < HEIGHT);\n\n//     let mut x = curr_x as f32;\n//     let mut y = curr_y as f32;\n//     let x2 = x + 0.5;\n//     let y2 = y + 0.5;\n//     let dx = x2 - x;\n//     let dy = y2 - y;\n//     let mut t = 0.0;\n//     let mut max_t = 1.0;\n//     let mut x = x;\n//     let mut y = y;\n\n//     while t < max_t {\n//         let x = x + dx * t;\n//         let y = y + dy * t;\n//         let x = x as u8;\n//         let y = y as u8;\n\n//         if map.is_wall(x, y) {\n//             return false;\n//         }\n\n//         t += 0.1;\n//     }\n\n//     true\n// }\n\npub fn their_x_to_mine(x: u8) -> (bool, u8) {\n    if x == NOWHERE {\n        (true, NOWHERE)\n    } else {\n        (x < WIDTH, std::wrapping_sub(WIDTH - 1, x) & WIDTH_MASK)\n    }\n}\n\npub fn can_move_to(distance: u16, x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> bool {\n    let mut can = distance <= (VIEW_DISTANCE as u16 * VIEW_DISTANCE as u16); //x <= advance;\n\n    for i in 0..MAX_OBSTACLES {\n        if !is_obstacle_traversible(obstacles[i]) & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    for i in 0..MAX_ENEMY_OBSTACLES {\n        if !is_obstacle_traversible(their_obstacles[i]) & (get_obstacle_x(their_obstacles[i]) == x) & (get_obstacle_y(their_obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    can\n}\n// pub fn their_x_to_mine(side: u1, x: i8) -> i8 {\n//     let mul = side as i8;\n//     mul * 31 + 16 + x\n// }\n\n// x * s -16 + y = 0 if s == 0 => y = 16\n// x * s -16 + y = 31 if s == 1 => x = 31\n// y = 31 * s + 16 + x\n// s = 0:\n// x = -16 => y = 0\n// x = 15 => y = 31\n// s = 1:\n// x = -16 => y = 31\n// x = 15 => y = 0\n\n// pub fn serialize_x(x: i8) -> (bool, u8) {\n//     let valid = (x >= -(WIDTH / 2) as i8) & (x < (WIDTH / 2) as i8);\n//     (valid, (x + (WIDTH / 2) as i8) as u8)\n// }\n\n// pub fn deserialize_x(x: u8) -> (bool, i8) {\n//     let valid = x < WIDTH;\n//     (valid, x as i8 - (WIDTH / 2) as i8)\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/map.nr"}},"names":["parse_characters"],"brillig_names":["directive_integer_quotient","directive_to_radix","directive_invert"]}