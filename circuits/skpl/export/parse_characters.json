{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":4424489185881907579,"abi":{"parameters":[{"name":"data","type":{"kind":"field"},"visibility":"private"},{"name":"actions_data","type":{"kind":"array","length":30,"type":{"kind":"field"}},"visibility":"private"},{"name":"events","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"event::Event","fields":[{"name":"event","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"actor_id","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"subtype","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"y","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"value","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"radius","type":{"kind":"integer","sign":"unsigned","width":8}}]}},"visibility":"private"},{"name":"enemy_advance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"boolean"},{"kind":"array","length":5,"type":{"kind":"struct","path":"character::Character","fields":[{"name":"id","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"y","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"class","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"progress","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"health","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"has_been_seen","type":{"kind":"boolean"}},{"name":"is_hidden","type":{"kind":"integer","sign":"unsigned","width":1}},{"name":"target_x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"target_y","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"damage_mod","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"last_action","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"status","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"actions","type":{"kind":"array","length":7,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}}]}}]},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"3P3djmTbkp7p3Usd82DYvxlvRRAESs0WCDRIQaSOiL53zV07MyJWhW+fXUWv8NfyLEn4ymm2K+Ozkeb5jPk//+l/+8//z//f//v/8V/+6//+3/77P/3H/9v//Kf/47/9v/7T//gv/+2/Xv+v//lPOv/8//ff/z//6b/+7f/53//Hf/r//o9/+o/aZfUf/uk//9f/7Z9/HfN//od/+t//y//xn//pP5b+n//3//BPdv5N/5X8m/4r/Tf9V/YP/quyz/9q/F/+V/5v+q/i/8p/1f/yv8p/039VD/+r8Yrf/9VEnK//1X/4/nGNnt8f1zzx/OM5R359Okfq48PSDz7c6v7rw62pXz/8t/J7d/mzunw/u8uX3eXr7vJtd/m+u/zYXX7uLn/31PXdU9d3T93YPXVj99SN3VM3dk/d2D11Y/fUjd1TN3ZP3dg9dWP31M3dUzd3T93cPXVz99TN3VM3d0/d3D11c/fUzd1TN3dP3do9desNU7fU+9enS9P/ZUWKq8hwFfk7Kprfny6TbxUFrqLEVVS4ihpX0dB+1vrgKsJldivtz1EbriJcZjcusxuX2Y3L7MZlduMye3CZPbjMHtw5e3Dn7MFl9uAye3CZPbjMHlxmz9AqknN4JQmvJNxRWw4ut+U4r6TglZS8kopXEi685fDSW3jpLbz0Fl56C25TIoI7dovgzt0iuIO3CC+9pXkl4fYloriFiShuYyLKS2/lpbfy0lt56a289Fbc3kSUd/ZW3tnbeGdv46W34RbeYrzNifE2J8bbnBgvvY2X3sZLb+Olt/PS23mbE+edvZ139nbnlcRLb+ftvZ23OXHe5sR5m5PgpXfw0jt46R289A5eegdvcxK8s3fwzt7BO3sHL72Tt/dO3uYkeZuT5G1OkpfeyUvv5KV38tI7eemdvM1J8c7exTt7F+/szROV8h5S+bwk3uakeJuT4m1OeKxSipfezUvv5qU3j1YKz1YKD1cKT1cKj1dK89K7eXtvnrAUHrEUnrGU4aX38NKbxyyF5yyFBy2FJy2FRy2FZy2VZy314NJbD27vrTxrqcd5JeE2J3pw6a0Hl97Ks5bKs5bKs5bKs5bKs5bKs5bKs5YqvPQW3N5bedZSedZSedZSlZfeyktvnrVUnrVUnrVUnrVUnrVUnrVUnrVU5aW34fbeyrOWyrOWyrOWarz0Nl5686yl8qyl8qyl8qyl8qyl8qyl8qylOi+932Mtn5fE25zwrKXyrKU6L72dl948a6k8a6k8a6k8a6k8a6k8a6k8a6nBS+/g7b151lJ51lJ51lKTl97JS2+etVSetVSetVSetVSetVSetVSetVTeuyuV9/JK5VlL5VlL5VlL5b3AUnlvsFSetVSetVSetVSetVSetVSetVSetdTmpXfz9t48a6k8a6k8a6nDS+/hpTfPWirPWirPWirPWirPWirPWirPWurg0tsObu9tPGtpPGtpPGtpB5fednDpbTxraTxraTxraTxraTxraTxraTxracJL7/dYy+cl4TYnxrOWxrOWJrz0Fl5686yl8ayl8ayl8ayl8ayl8ayl8aylKS+9Fbf3Np61NJ61NJ61NOOlt/HSm2ctjWctjWctjWctjWctjWctjWctzXnp7by9N89aGs9aGs9amvPS23npzbOWxrOWxrOWxrOWxrOWxrOWxrOWFrz0Dt7em2ctjWctjWctLXnpnbz05llL41lL41lL41lL41lL41lL41lLS156F2/vzbOWxrOWxrOWVrz0Ll5686yl8ayl8ayl8ayl8ayl8ayl8aylNS+932Mtn5fE25zwrKXxrKU1L72bl948a2k8a2k8a2k8a2k8a2k8a2k8a2nDS+/h7b151tJ51tJ51tIPLr394NLbDy69nWctnWctnWctnWctnWctnWctXXjpLbi9t/OspfOspfOspQsvvYWX3jxr6Txr6Txr6Txr6Txr6Txr6Txr6cpLb8XtvZ1nLZ1nLZ1nLd146W289OZZS+dZS+dZS+dZS+dZS+dZS+dZSzdeejtv782zls6zls6zlu689HZeevOspfOspfOspfOspfOspfOspfOspQcvvd9jLZ+XxNuc8Kyl86ylBy+9g5fePGvpPGvpPGvpPGvpPGvpPGvpPGvpyUvv5O29edbSedbSedbSi5fePGvpvPdaOu+9ll68s3fx0ptnLb146d289G5eejdv782zls57r6U37+zdvLN38/beb7GWrr9/8+uX9a2kl6S3SZ/fHzc98vXjf3vKa/jk7VPkR56iP/KUlyShqcznU/z7U/xHnhI/8pT8kafUa56S/fmUOd+e0j/ylPmBp8Rr8N3tU17zs3/9WH48xe4+LtVuvz5+/bq+F6XEooxYlBOLek1u2Zekd7HnH5/IXx+e7o+P6vy9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","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"72":{"source":"\nuse arenalib::ARCHER;\nuse arenalib::KNIGHT;\nuse arenalib::MAGE;\nuse arenalib::RITUALIST;\nuse arenalib::ROGUE;\nuse arenalib::WIDTH;\nuse arenalib::HEIGHT;\nuse arenalib::{ CLASS_COUNT, PROGRESS_COUNT };\nuse arenalib::{ WAIT }; //, ATTACK_MELEE, ATTACK_FIREBALL, ATTACK_RANGED, MAX_FIREBALL_ROUNDS_FOR_CAST, MIN_FIREBALL_ROUNDS_FOR_CAST, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES, MAX_ACTIONS_PER_CHARACTER };\nuse arenalib::{ WIDTH_MASK, HEIGHT_MASK, CLASS_MASK, PROGRESS_MASK };\nuse arenalib::{ WIDTH_BITS, HEIGHT_BITS, CLASS_BITS, PROGRESS_BITS };\nuse crate::event::Event;\nuse crate::map::is_visible;\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::new_obstacle;\nuse skplg::{NOWHERE, debug, softassert};\nuse arenalib::{arena_action_def_builder, ActionDefinition};\nuse arenalib::{SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, SerializedArenaCharacterActionDefinitions, SerializedArenaCharacterActionDefinition};\n// use arenalib::{TRAP, ADD_OBSTACLE, WIN_BY_RITUAL, RITUAL_ROUNDS_FOR_WIN};\nuse arenalib::get_test_action_register;\nuse super::event::build_subtype_value_event;\nuse arenalib::NO_EVENT;\nuse arenalib::get_wait_action_def;\n\n\npub global SERIALIZED_CHARACTER_BYTES: u32 = 6;\npub type SerializedCharacter = [u8; SERIALIZED_CHARACTER_BYTES];\n\n// use skplam::{build_wait_action_def, build_shoot_action, build_draw_action, build_move_action, build_attack_action, build_cast_action, build_evocation_action, build_search_action, build_set_trap_action, build_sneak_action, build_ritual_action, build_disarm_trap_action};\n\n// this should be more efficient: for all the following: order is: UNKNOWN_CLASS, ARCHER, RITUALIST, ROGUE, KNIGHT, MAGE\nglobal class_damage_melee: [u8; 6] = [ 0, 32, 8, 24, 40, 16 ];\nglobal class_damage_ranged: [u8; 6] = [ 0, 24, 40, 16, 32, 8 ];\nglobal class_damage_fireball: [u8; 6] = [ 0, 0, 100, 50, 0, 100 ];\nglobal class_damage: [[u8; 6]; 3] = [ class_damage_melee, class_damage_ranged, class_damage_fireball ];\nglobal class_energy_per_attack: [u8; 6] = [ 0, 7, 7, 7, 6, 7 ];\nglobal class_energy_per_cast: [u8; 6] = [ 0, 255, 12, 255, 255, 6 ];\nglobal class_energy_per_disarm: [u8; 6] = [ 0, 255, 255, 12, 255, 255 ];\nglobal class_energy_per_move: [u8; 6] = [ 0, 3, 4, 3, 4, 4 ];\nglobal class_energy_per_ritual: [u8; 6] = [ 0, 255, 12, 255, 255, 255 ];\nglobal class_energy_per_search: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_sneak: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_draw: [u8; 6] = [ 0, 9, 255, 255, 255, 255 ];\nglobal class_energy_per_shoot: [u8; 6] = [ 0, 6, 255, 255, 255, 255 ];\nglobal resistances: [u16; 8 * 3] = [\n     0,  75, 100, 85,  50, 100, 20,  0, //,  255, 255, 0, 0, 0, 255, 255, 255 ], // Melee vs dummy, archer, ritualist, thief, knight, mage, wall, water, unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n     0,  80, 100, 90,  25, 100,  5,  0, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Ranged vs dummy, archer, ritualist, thief, knight, mage, wall, water\n     0,  80, 100, 90, 100,  90, 60, 50, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Fireball vs dummy, archer, ritualist, thief, knight, mage, wall, water\n];\n\nglobal trap_resistances: [u16; 8] = [ 0,  75, 100, 50,  75, 90, 5, 0]; //,  255, 255, 255, 255, 255, 255, 255, 255 ]; // Trap vs dummy, archer, ritualist, thief, knight, mage\n\n\n//global x: ActionDefinition = build_set_trap_action(1 as u8, 1 as u8);\n// TODO: move to character!\n// global ARCHER: u8 = 1;    WAIT, MOVE, ATTACK, DRAW, SHOOT\n// global RITUALIST: u8 = 2; WAIT, MOVE, ATTACK, CAST, RITUAL\n// global ROGUE: u8 = 3;     WAIT, MOVE, ATTACK, SNEAK, SEARCH, DISARM_TRAP, SET_TRAP\n// global KNIGHT: u8 = 4;    WAIT, MOVE, ATTACK\n// global MAGE: u8 = 5;      WAIT, MOVE, ATTACK, CAST, CAST_FIREBALL\n// global ACTION_DEFINITIONS: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER * CLASS_COUNT] = [\n//     // [[0 as u8; ACTION_DEFINITION_SIZE]; MAX_ACTIONS_PER_CHARACTER], // 0 for no action\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n    \n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ARCHER]),\n//         build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//         build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//         build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[RITUALIST]),\n//         build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//         build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//         build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ROGUE]),\n//         build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//         build_sneak_action(class_energy_per_sneak[ROGUE]),\n//         build_search_action(class_energy_per_search[ROGUE], 1),\n//         build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[KNIGHT]),\n//         build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[MAGE]),\n//         build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//         build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//         build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n//         WAIT_ACTION,\n//         WAIT_ACTION\n//     // ]\n// ];\n// global \n// pub fn get_test_action_register() -> [u8; ACTION_DEFINITION_REGISTER_SIZE] {\n//     build_action_def_reg!([\n//         [\n//             build_move_action(class_energy_per_move[ARCHER]),\n//             build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//             build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//             build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[RITUALIST]),\n//             build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//             build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//             build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[ROGUE]),\n//             build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//             build_sneak_action(class_energy_per_sneak[ROGUE]),\n//             build_search_action(class_energy_per_search[ROGUE], 1),\n//             build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//             build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[KNIGHT]),\n//             build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[MAGE]),\n//             build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//             build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//             build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST),\n//             build_wait_action_def(),\n//             build_wait_action_def()\n//         ]\n//     ])\n// }\n// pub fn get_test_action_register() -> SerializedArenaActionDefinitions {\n//   let action_builder = arena_action_def_builder;\n//      [\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER)),\n//             std::field::bytes32_to_field(action_builder.build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT)), // arche),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n            \n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST, 255)),\n//             std::field::bytes32_to_field(action_builder.build_ritual_action(3, class_energy_per_ritual[RITUALIST], RITUAL_ROUNDS_FOR_WIN, WIN_BY_RITUAL)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_sneak_action(class_energy_per_sneak[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_search_action(class_energy_per_search[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_set_trap_action(class_energy_per_disarm[ROGUE], 1, ADD_OBSTACLE, TRAP)),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[KNIGHT])),\n//            std::field::bytes32_to_field( action_builder.build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT])),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[MAGE], MAGE, 7)),\n//             std::field::bytes32_to_field(action_builder.build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def())\n//         ]\n// }\n\n// struct CharacterClass {\n//     class: u8,\n//     damage: u8,\n//     energy_per_attack: u8,\n//     energy_per_cast: u8,\n//     energy_per_disarm: u8,\n//     energy_per_move: u8,\n//     energy_per_ritual: u8,\n//     energy_per_search: u8,\n//     energy_per_sneak: u8,\n// }\n\npub struct Character {\n    pub id: u8,\n    pub x: u8, // 5 bit\n    pub y: u8, // 4 bit\n    pub class: u8, // 3 bit\n    pub progress: u8, // 0 = idle, 1-15 = continuing action => 4 bit\n    pub health: u8,\n    pub has_been_seen: bool,\n    pub is_hidden: u1,\n    pub target_x: u8,\n    pub target_y: u8,\n    pub damage_mod: u8,\n    pub last_action: u8,\n    pub status: u8,\n    // pub wait_action: ActionDefinition,\n    pub actions: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1], // BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER>,\n}\n\n// pub fn resolve_action(action: u8, class: u8) -> ActionDefinition {\n//     let mut idx = class as u32 * MAX_ACTIONS_PER_CHARACTER + action as u32;\n//     if idx >= (ACTION_DEFINITIONS.len()) {\n//         idx = 0;\n//     }\n//     // assert(action as u32 < MAX_ACTIONS_PER_CHARACTER);\n//     // assert(class as u32 < CLASS_COUNT);\n//     ACTION_DEFINITIONS[idx]\n// }\n//     pub fn resolve_action(action: Action) -> ActionDefinition {\n//         // let idx = get_action_base_index(self.get_id(), action);\n//         ActionDefinition::new(action, ACTION_DEFINITIONS)\n// //        (idx, ACTION_DEFINITIONS)\n//         //resolve_action(action, self.class)\n//         // let mut a = action as u32;\n//         // if a >= self.actions.len() { a = 0; }\n//         // self.actions[a] //.get_unchecked(a)\n//     }\n//global wait_action: ActionDefinition = buld_wait_action_def();\n\n// global wait_action: ActionDefinition = action_builder.build_wait_action_def();\n\nimpl Character {\n    // pub fn new(id: u8 x: u8, y: u8, class: u8, status: u8, health: u8, has_been_seen: u8)\n    /// May throw\n\n\n    pub fn get_id(self) -> u8 {\n        self.id\n    }\n\n    pub fn get_x(self) -> u8 {\n        self.x\n    }\n\n    pub fn get_y(self) -> u8 {\n        self.y\n    }\n\n    pub fn get_class(self) -> u8 {\n        self.class\n    }\n\n    pub fn get_progress(self) -> u8 {\n        self.progress\n    }\n\n    pub fn get_status(self) -> u8 {\n        self.status\n    }\n\n    pub fn get_health(self) -> u8 {\n        self.health\n    }\n\n    pub fn get_has_been_seen(self) -> bool {\n        self.has_been_seen\n    }\n\n    pub fn get_target_x(self) -> u8 {\n        self.target_x\n    }\n\n    pub fn get_target_y(self) -> u8 {\n        self.target_y\n    }\n\n    pub fn get_is_hidden(self) -> u1 {\n      self.is_hidden\n    }\n\n    pub fn get_damage_mod(self) -> u8 {\n      self.damage_mod\n    }\n\n    pub fn get_action(self, action_idx: u8) -> (bool, ActionDefinition) {\n      /*if action_idx == 0 {\n        (true, self.wait_action)\n      } else */if action_idx <= MAX_ACTIONS_PER_CHARACTER as u8 {\n        (true, self.actions[action_idx])\n      } else {\n        (false, self.actions[0])\n      }\n    }\n\n    // pub fn get_energy_per_attack(self) -> u8 {\n    //     class_energy_per_attack[self.class]\n    // }\n\n    // pub fn get_energy_per_cast(self) -> u8 {\n    //     class_energy_per_cast[self.class]\n    // }\n\n    // pub fn get_energy_per_disarm(self) -> u8 {\n    //     class_energy_per_disarm[self.class]\n    // }\n\n    // pub fn get_energy_per_move(self) -> u8 {\n    //     class_energy_per_move[self.class]\n    // }\n\n    // pub fn get_energy_per_ritual(self) -> u8 {\n    //     class_energy_per_ritual[self.class]\n    // }\n\n    // pub fn get_energy_per_search(self) -> u8 {\n    //     class_energy_per_search[self.class]\n    // }\n\n    // pub fn get_energy_per_sneak(self) -> u8 {\n    //     class_energy_per_sneak[self.class]\n    // }\n\n    // pub fn get_energy_per_draw(self) -> u8 {\n    //     class_energy_per_draw[self.class]\n    // }\n\n    // pub fn get_energy_per_shoot(self) -> u8 {\n    //     class_energy_per_shoot[self.class]\n    // }\n\n    // pub fn get_damage(self, attack_type: u8) -> u8 {\n    //     self.damage_mod + class_damage[attack_type][self.class]\n    // }\n\n    pub fn get_last_action(self) -> u8 {\n      self.last_action\n    }\n\n    // pub fn can_sneak(self) -> bool {\n    //     class_energy_per_sneak[self.class] != 255\n    // }\n\n    // pub fn can_ritual(self) -> bool {\n    //     class_energy_per_ritual[self.class] != 255\n    // }\n\n    // pub fn can_cast_fireball(self) -> bool {\n    //     class_energy_per_cast[self.class] != 255\n    // }\n\n    pub fn can_shoot(self) -> bool {\n        self.class == ARCHER\n    }\n    // pub fn can_disarm(self) -> bool {\n    //     class_energy_per_disarm[self.class] != 255\n    // }\n\n    // pub fn can_search(self) -> bool {\n    //     class_energy_per_search[self.class] != 255\n    // }\n\n    fn is_pos_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_target_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_class_valid(class: u8) -> bool { class as u32 <= CLASS_COUNT }\n    fn is_status_valid(status: u8) -> bool { status < PROGRESS_COUNT }\n\n    pub fn is_valid(self) -> bool {\n        Character::is_pos_valid(self.x, self.y) &\n        Character::is_target_valid(self.target_x, self.target_y) &\n        Character::is_class_valid(self.class) &\n        Character::is_status_valid(self.progress)\n    }\n\n    pub fn serialize(self) -> (SerializedCharacter, SerializedArenaCharacterActionDefinitions) {\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n        assert(self.is_valid());\n        let packed_x = self.x + (self.class << WIDTH_BITS);\n        let packed_y = self.y + (self.progress << HEIGHT_BITS);\n        let packed_target_x = (self.target_x & WIDTH_MASK) + ((self.is_hidden as u8) << WIDTH_BITS);\n        let packed_target_y = (self.target_y & HEIGHT_MASK) + ((self.last_action as u8) << HEIGHT_BITS);\n\n        // let serialized_action_defs = self.actions.map(|a|std::field::bytes32_to_field(a));\n        let serialized_action_defs = [\n          std::field::bytes32_to_field(self.actions[1]),\n          std::field::bytes32_to_field(self.actions[2]),\n          std::field::bytes32_to_field(self.actions[3]),\n          std::field::bytes32_to_field(self.actions[4]),\n          std::field::bytes32_to_field(self.actions[5]),\n          std::field::bytes32_to_field(self.actions[6])\n        ];\n        \n        ([packed_x, packed_y, self.health, packed_target_x, packed_target_y, self.damage_mod], serialized_action_defs)\n    }\n\n    pub fn to_obstacle(self) -> (bool, Obstacle) {\n        comptime {\n            assert(MAX_CHARACTERS < (255 - MAX_OBSTACLES));\n        }\n        assert(self.is_valid());\n        new_obstacle(self.id + (MAX_OBSTACLES as u8), self.x, self.y, self.health, self.class)\n        // Obstacle {\n        //     id: self.id + (MAX_CHARACTERS as u8),\n        //     x: self.x,\n        //     y: self.y,\n        //     obstacle_type: self.class,\n        //     health: self.health,\n        //     //was_alive: \n        // }\n    }\n\n    pub fn move(self, x: u8, y: u8) -> Character {\n        let mut c = self;\n        c.x = x;\n        c.y = y;\n        c\n    }\n\n    pub fn take_damage(self, attack_type: u8, dmg: u8) -> Character {\n        let damage_after_resistances = get_attack_damage_to_tile(attack_type, dmg as u16, self.class);\n        let mut c = self;\n        if damage_after_resistances > (c.health as u16) {\n            c.health = 0;\n        } else {\n            c.health -= (damage_after_resistances as u8);\n        }\n        c\n    }\n\n    pub fn set_status(self, status: u8) -> Character {\n        assert(status < PROGRESS_COUNT);\n        let mut c = self;\n        c.progress = status;\n        c\n    }\n\n    pub fn create_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n        // let mut actions: BoundedVec<ActionDefinition, 6> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..6 {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions.push(ACTION_DEFINITIONS[idx + i]);\n        //     }\n        // }\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: 0,\n            health: 0,\n            has_been_seen: false,\n            is_hidden: 0,\n            target_x: 255,\n            target_y: 255,\n            damage_mod: 0,//: class_damage[class],\n            last_action: WAIT,\n            status: 0, // TODO: status\n            actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1]// BoundedVec::new()\n        };\n        assert(c.is_valid());\n        c\n    }\n\n    pub fn parse(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool, Character) {\n        // these asserts could be disabled for production\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n\n        let mut is_valid = true;\n\n        let split: [u8; 32] = data.to_be_bytes::<32>();\n        assert(split.len() == 32);\n        let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n        let y_packed = split[2 + id * 6 + 1]; // 4 bit y, 4 bit status\n        let mut health = split[2 + id * 6 + 2] as u16;\n        let target_x_packed = split[2 + id * 6 + 3]; // 5 bit target x, 1 bit hidden, 1 bit has target, 1 bit unused\n        let target_y_packed = split[2 + id * 6 + 4]; // 4 bit target y, 4 bit last action\n        let damage_mod = split[2 + id * 6 + 5]; // last byte: for the moment, use to save damage_mod (buffs, etc)\n\n        let x = x_packed & WIDTH_MASK;\n        let y = y_packed & HEIGHT_MASK;\n        let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n        if !Character::is_class_valid(class) {\n            debug!(quote { println(f\"Invalid class {class}\"); });\n            class = 0;\n            is_valid = false;\n        }\n\n        let progress = (y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n        softassert!(quote { is_valid }, quote { Character::is_status_valid(progress) }, quote { f\"Invalid status {progress} during character parsing {id}\" });\n\n        let target_x = target_x_packed & WIDTH_MASK;\n        let target_y = target_y_packed & HEIGHT_MASK;\n        let last_action = (target_y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n\n        let is_visible = is_visible(enemy_advance, x); //((target_x_packed >> 5) & 1) as u1;\n        let is_hidden = ((target_x_packed >> WIDTH_BITS) & 1) as u1;\n\n        let mut damage: u16 = 0;\n        for i in 0..MAX_EVENTS {\n            let event = events[i];\n            damage += event.get_applied_damage_to_my_asset(x, y, class);\n            // if events[i].actor_id == id {\n            //     let event = events[i];\n            //     if event.actor_id == id {\n            //         damage += event.get_applied_damage_to_my_asset(x, y, class);\n            //     }\n            // }\n        }\n        if damage > health {\n            health = 0;\n        } else {\n            health -= damage;\n        }\n\n        // let mut actions = [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]; //: BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..MAX_ACTIONS_PER_CHARACTER {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions[i] = ACTION_DEFINITIONS[idx + i];\n        //     }\n        // }\n\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: progress,\n            health: health as u8,\n            has_been_seen: is_visible, // TODO \n            is_hidden: is_hidden,\n            target_x: target_x,\n            target_y: target_y,\n            damage_mod: damage_mod,\n            last_action: last_action,\n            actions: [\n              wait_action,\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 1].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 2].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 3].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 4].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 5].to_be_bytes::<32>()\n            ],\n            status: 0 // TODO: status\n        };\n        assert(c.is_valid());\n        (is_valid, c)\n    }\n}\n\n// unconstrained fn create_character_unconstrained(\n//   id: u8,\n//   x: u8,\n//   y: u8,\n//   class: u8,\n//   progress: u8,\n//   health: u8,\n//   has_been_seen: u8\n// )\n\nfn select_action_defs_of_character(actions: SerializedArenaActionDefinitions, char_id: u32) -> [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1] {\n  let mut result: [SerializedArenaCharacterActionDefinition] = &[std::field::bytes32_to_field(get_wait_action_def())];\n  let offset = char_id * MAX_ACTIONS_PER_CHARACTER;\n  for i in 0..MAX_ACTIONS_PER_CHARACTER {\n    result = result.push_back(actions[offset + i]);\n  }\n  result.as_array().map(|f|f.to_be_bytes())\n}\n\npub fn get_default_characters(side: u8) -> [Character; MAX_CHARACTERS] {\n    assert(side < 2, f\"Side is too large {side}\");\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let default_actions = get_test_action_register();\n\n    let x = |x| x * ((side + 1) % 2) + (WIDTH - 1 - x) * side;\n    [\n        Character { id: 0, x: x(2), y: 2, class: ARCHER, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 1), status: 0 },\n        Character { id: 1, x: x(2), y: 3, class: RITUALIST, health: 60, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 2), status: 0 },\n        Character { id: 2, x: x(2), y: 4, class: ROGUE, health: 80, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 3), status: 0 },\n        Character { id: 3, x: x(2), y: 5, class: KNIGHT, health: 120, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 4), status: 0 },\n        Character { id: 4, x: x(2), y: 6, class: MAGE, health: 40, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 5), status: 0 },\n    ]\n}\n\n#[export]\npub fn parse_characters(data: SerializedArenaCharacterRoster, actions_data: SerializedArenaActionDefinitions, events: [Event; MAX_EVENTS], enemy_advance: u8) -> pub (bool, [Character; MAX_CHARACTERS]) {\n    comptime { assert(MAX_CHARACTERS == 5); }\n\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut is_valid = true;\n\n    let wait_action = get_wait_action_def();\n\n    // no need to optimize, compiler automatically rolls this out\n    // let mut result: [Character; MAX_CHARACTERS] = [Character::create_character(0, 0, 0, 0), Character::create_character(1, 0, 0, 0), Character::create_character(2, 0, 0, 0), Character::create_character(3, 0, 0, 0), Character::create_character(4, 0, 0, 0)];\n    // for i in 0..(MAX_CHARACTERS as u8) {\n    //     let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action, events, enemy_advance);\n    //     is_valid &= curr_valid;\n    //     result[i] = curr_c;\n    // }\n\n        let (curr_valid, curr_c0) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[0] = curr_c0;\n        let (curr_valid, curr_c1) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[1] = curr_c1;\n        let (curr_valid, curr_c2) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[2] = curr_c2;\n        let (curr_valid, curr_c3) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[3] = curr_c3;\n        let (curr_valid, curr_c4) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[4] = curr_c4;\n    let result = [curr_c0, curr_c1, curr_c2, curr_c3, curr_c4];\n    (is_valid, result)\n}\n\npub fn get_test_my_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 100,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\npub fn get_test_their_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 255,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\n#[test]\nfn test_serialize_character() {\n    let mut character = Character {\n        id: 4,\n        x: 21,\n        y: 9,\n        class: 5,\n        progress: 9,\n        health: 129,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 31,\n        target_y: 9,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    };\n    let (field, _) = character.serialize();\n    assert(field[0] == (21 | (5 << 5)));\n    assert(field[1] == (9 | (9 << 4)));\n    assert(field[2] == 129);\n    assert(field[3] == 31); // TODO: why?\n    assert(field[4] == 9);\n    assert(field[5] == 0);\n}\n\n#[test]\nfn test_parse_character() {\n    let dummy_events = Event::get_test_dummy_events();\n    let data_array: [u8; 32] = [\n        0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        191 as u8, 249 as u8, 255 as u8, 255 as u8, 9 as u8, 255 as u8,\n        181 as u8, 153 as u8, 129 as u8, 127 as u8, 9 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n    ];\n    let data: Field = std::field::bytes32_to_field(data_array);\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    println(data);\n    assert(data == 0xbff9ffff09ffb599817f0900000000000000, f\"Failed assumption: data: {data} != 0xbff9ffff09ffb599817f0900000000000000\");\n    let (character_valid, character) = Character::parse(3, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_valid);\n    assert(character.get_id() == 3);\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 9);\n    assert(character.get_class() == 5);\n    assert(character.get_progress() == 9);\n    assert(character.get_health() == 129);\n    assert(character.get_has_been_seen());\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n\n    let (character_max_valid, character_max) = Character::parse(2, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_max_valid);\n    assert(character_max.get_id() == 2);\n    assert(character_max.get_x() == 31);\n    assert(character_max.get_y() == 9);\n    assert(character_max.get_class() == 5);\n    assert(character_max.get_progress() == 15);\n    assert(character_max.get_health() == 255);\n    assert(character_max.get_has_been_seen());\n    assert(character_max.get_target_x() == 31);\n    assert(character_max.get_target_y() == 9);\n\n    let (character_min_valid, character_min) = Character::parse(0, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_min_valid);\n    assert(character_min.get_id() == 0);\n    assert(character_min.get_x() == 0);\n    assert(character_min.get_y() == 0);\n    assert(character_min.get_class() == 0);\n    assert(character_min.get_progress() == 0);\n    assert(character_min.get_health() == 0);\n    assert(character_min.get_has_been_seen() == false);\n    assert(character_min.get_target_x() == 0);\n    assert(character_min.get_target_y() == 0);\n}\n\n#[test]\nfn test_parse_character_as_in_game() {\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    let data: Field = 0x1602ff1f09001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00;\n    let (character_valid, character) = Character::parse(0, data, dummy_actions, wait_action, Event::get_test_dummy_events(), 20);\n    assert(character_valid);\n    assert(character.get_id() == 0);\n    assert(character.get_x() == 22, character.get_x());\n    assert(character.get_y() == 2, character.get_y());\n    assert(character.get_class() == 0, character.get_class());\n    assert(character.get_progress() == 0, character.get_progress());\n    assert(character.get_health() == 255);\n    assert(character.get_has_been_seen() == true);\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n}\n\n#[export]\npub fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> pub (Field, SerializedArenaActionDefinitions) {\n    let mut result: [u8; 32] = [0; 32];\n    let mut actions: SerializedArenaActionDefinitions = [0; 30]; //&[].as_array();\n    for i in 0..MAX_CHARACTERS {\n        let (serialized_char_bytes, serialized_actions) = chars[i].serialize();\n        for j in 0..6 {\n            result[2 + i * 6 + j] = serialized_char_bytes[j];\n        }\n        for k in 0..MAX_ACTIONS_PER_CHARACTER {\n          actions[i * MAX_ACTIONS_PER_CHARACTER + k] = serialized_actions[k];\n        }\n    }\n    \n    (std::field::bytes32_to_field(result), actions)\n}\n\n/**\n* For now we will only take class into account.\n*/\npub fn get_attack_damage_to_tile(attack_type: u8, damage: u16, class: u8) -> u16 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * resistances[attack_type * 8 + (class & 7)] / 100) as u16\n}\n\npub fn get_trap_damage_to_tile(damage: u16, class: u8) -> u16 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * trap_resistances[class & 7] / 100) as u16\n}\n\n#[test]\nfn test_parse_character_round0() {\n  // let actions_data = .map(|f|f.to_be_bytes::<32>()).map(|f|std::field::bytes32_to_field(f));\n  let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let enemy_advance = 0x08;\n  let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0)\n  ];\n   println(f\"events: {events}\");\n\n  let parsed = parse_characters(data, [\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071020100a000020100a00000020000000002000000000000000,\n    0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n    0x023100081b161118120a010018120a01000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071008100a000008100a00000020000000002000000000000000,\n    0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n    0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071018100a000018100a00000020000000002000000000000000,\n    0x09f0000130060c002000000000200000000020000000002000000000000000,\n    0xf00001100610001005000100100500010020000000002000000000000000,\n    0xf00001301c0100100d000000100d00000020000000002000000000000000,\n    0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110061028100a000028100a00000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071010100a000010100a00000020000000002000000000000000,\n    0xf000071b1611002000000000000705000020000000002000000000000000,\n    0x6300061b161164150a020164150a02010020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000\n], events, enemy_advance);\n\n  assert(parsed.0);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/character.nr"},"74":{"source":"use arenalib::{ NO_EVENT, SEE_MOVE, RECEIVE_ATTACK, TRIGGERED_TRAP }; //, SEE_RITUAL, SEE_CAST, SEE_DRAW, SEE_SEARCH_TRAP, FOUND_TRAP\n// use crate::{ EMPTY, WALL };\nuse arenalib::{ EVENT_COUNT };\nuse arenalib::{ ATTACK_FIREBALL };\nuse arenalib::{ SERIALIZED_EVENT_BYTE_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD };\nuse arenalib::{ WIDTH };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS }; //, MAX_TRAPS\nuse arenalib::SerializedArenaEvents;\n// use crate::TRAPS_BUFFER_MASK;\nuse crate::map::get_distance;\n// use crate::character::Character;\nuse crate::character::{ get_attack_damage_to_tile, get_trap_damage_to_tile };\nuse crate::map::their_x_to_mine;\nuse skplg::{ debug, softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD };\n\npub struct Event {\n    pub event: u8,\n    pub actor_id: u8,\n    pub subtype: u8,\n    pub x: u8,\n    pub y: u8,\n    pub value: u8,\n    pub radius: u8,\n}\n\n\n    #[export]\n    pub fn parse_their_events(fields: SerializedArenaEvents) -> pub (bool, [Event; MAX_EVENTS]) {\n        comptime {\n            assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENT_BYTE_SIZE <= 32);\n            assert(SERIALIZED_EVENTS_ARRAY_SIZE * SERIALIZED_EVENTS_PER_FIELD == MAX_EVENTS);\n            assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n        }\n\n        let mut valid = true;\n        let mut events: [Event; MAX_EVENTS] = [Event::empty(0); MAX_EVENTS];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let split: [u8; 32] = fields[i].to_be_bytes::<32>(); //.to_be_bytes<32>();\n            //assert(split.len() == 32);\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                let raw_x = split[offset + 2];\n                let (x_parsed_valid, x_parsed) = their_x_to_mine(raw_x);\n                softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to calculate their_x_to_mine: {raw_x}\" });\n                events[i * SERIALIZED_EVENTS_PER_FIELD + j] = Event {\n                    event: split[offset],\n                    actor_id: split[offset + 1],\n                    x: x_parsed,\n                    y: split[offset + 3],\n                    value: split[offset + 4],\n                    subtype: split[offset + 5],\n                    radius: split[offset + 6],\n                };\n            }\n        }\n        (valid, events)\n    }\n    \n    #[export]\n    pub fn serialize_events(events: [Event; MAX_EVENTS]) -> pub SerializedArenaEvents {\n        assert(events.len() == MAX_EVENTS);\n        assert(MAX_EVENTS % SERIALIZED_EVENTS_PER_FIELD == 0);\n        assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n\n        let mut fields: [Field] = &[];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let mut data: [u8; 32] = [0; 32];\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let index = i * SERIALIZED_EVENTS_PER_FIELD + j;\n                let event = events[index];\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                data[offset] = event.event;\n                data[offset + 1] = event.actor_id;\n                data[offset + 2] = event.x;\n                data[offset + 3] = event.y;\n                data[offset + 4] = event.value;\n                data[offset + 5] = event.subtype;\n                data[offset + 6] = event.radius;\n            }\n            fields = fields.push_back(std::field::bytes32_to_field(data));\n        }\n        fields.as_array()\n    }\n    \n    // fn affects_my_character(self, x: u8, y: u8) -> bool {\n    //     let distance = get_distance(self.x, self.y, x, y);\n    //     ((self.x == x) & (self.y == y)) | ((self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y))\n    // }\nimpl Event {\n    fn affects_my_obstacle(self, x: u8, y: u8) -> bool {\n        (self.x == x) & (self.y == y)\n    }\n\n    fn may_affect_my_other_characters(self) -> bool {\n        (self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL)\n    }\n\n    fn may_affect_my_obstacles(self) -> bool {\n        self.event == RECEIVE_ATTACK\n    }\n\n    /**\n    * For now we will only take class into account.\n    */\n    pub fn get_applied_damage_to_my_asset(self, x: u8, y: u8, tile: u8) -> u16 {\n        let mut damage = 0;\n        let radius = self.radius as u16;\n        let radius = radius * radius;\n    \n        if self.event == RECEIVE_ATTACK {\n            let distance = get_distance(self.x, self.y, x, y);\n            debug!(quote {\n                        // let event = self.event;\n                        // let actor = self.actor_id;\n                        // let self_x = self.x;\n                        // let self_y = self.y;\n                        // let val = self.value;\n                        // println(f\"GetAppliedDamageToMyAsset: Event({event}:{val} from {actor}@{self_x}|{self_y})@{x}|{y}: {distance} <= {radius}\");\n                    });\n            if distance <= radius {\n                let damage_raw = get_attack_damage_to_tile(self.subtype, self.value as u16, tile) as u16;\n                damage = damage_raw * (1 + radius - distance) / (radius + 1) as u16;\n                debug!(quote { println(f\"Deal damage: {damage_raw} * (1 + {radius} - {distance}) / ({radius} + 1) = {damage}\"); });\n            }\n            // if (self.x == x) & (self.y == y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile);\n            // } else if (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile) / 2;\n            // }\n        }\n        if self.event == TRIGGERED_TRAP {\n            damage = get_trap_damage_to_tile(self.value as u16, tile);\n        }\n        damage as u16\n    }\n\n    pub fn empty(actor_id: u8) -> Event {\n        Event {\n            event: NO_EVENT,\n            actor_id: actor_id,\n            x: 0,\n            y: 0,\n            value: 0,\n            subtype: 0,radius: 0\n        }\n    }\n\n    pub fn get_dummy_events() -> [Field; MAX_EVENTS] {\n        [0; MAX_EVENTS]\n    }\n\n    pub fn get_test_dummy_events() -> [Event; MAX_EVENTS] {\n        [Event::empty(0); MAX_EVENTS]\n    }\n}\n\npub fn build_std_event(event: u8, actor_id: u8, x: u8, y: u8) -> Event {\n    assert(event < EVENT_COUNT);\n    assert((actor_id as u32) < MAX_CHARACTERS);\n    assert((x < WIDTH) | (x == NOWHERE));\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: 0,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\n#[test]\nfn test_build_std_event() {\n    let event = build_std_event(SEE_MOVE, 1, 2, 3);\n    assert(event.event == SEE_MOVE);\n    assert(event.actor_id == 1);\n    assert(event.x == 2);\n    assert(event.y == 3);\n}\n\n#[test(should_fail)]\nfn test_build_std_event_fail() {\n    let event = build_std_event(EVENT_COUNT, 1, 2, 3);\n    assert(event.event == EVENT_COUNT);\n}\n\npub fn build_value_event(event: u8, actor_id: u8, x: u8, y: u8, value: u8) -> Event {\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\npub fn build_subtype_value_event(event_type: u8, actor_id: u8, x: u8, y: u8, value: u8, event_subtype: u8, radius: u8) -> Event {\n    Event {\n        event: event_type,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: event_subtype,\n        radius: radius,\n    }\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/event.nr"},"76":{"source":"use arenalib::{ WIDTH, WIDTH_MASK, VIEW_DISTANCE, MAX_OBSTACLES };\nuse crate::obstacle::{ Obstacle, get_obstacle_y, get_obstacle_x, is_obstacle_traversible };\nuse skplg::NOWHERE;\n\n// pub fn is_neighbor(curr_x: u8, curr_y: u8, x: u8, y: u8) -> bool {\n//     // assert(curr_x < WIDTH);\n//     // assert(curr_y < HEIGHT);\n//     // assert(x < WIDTH);\n//     // assert(y < HEIGHT);\n//     // validating coordinates is not the job of this function\n//     // only avoid overflows!\n\n\n//     let shifted_curr_x = std::wrapping_add(curr_x, 1);\n//     let shifted_curr_y = std::wrapping_add(curr_y, 1);\n//     let shifted_x = std::wrapping_add(x, 1);\n//     let shifted_y = std::wrapping_add(y, 1);\n\n//     ((shifted_curr_x == shifted_x) & (std::wrapping_add(shifted_curr_y, 1) >= shifted_y) & (shifted_curr_y <= std::wrapping_add(shifted_y, 1))) |\n//     ((shifted_curr_y == shifted_y) & (std::wrapping_add(shifted_curr_x, 1) >= shifted_x) & (shifted_curr_x <= std::wrapping_add(shifted_x, 1)))\n// }\n\n// global DISTANCE_TABLE_HEIGHT: u32 = HEIGHT as u32;\n// global DISTANCE_TABLE_WIDTH: u32 = WIDTH as u32;\n\n// unconstrained fn distance_sqrt(x: u32) -> u32 {\n//     let mut result: u32 = 0;\n//     for i in 0..DISTANCE_TABLE_WIDTH {\n//         if i * i == x {\n//             result = i;\n//             break;\n//         }\n//     }\n//     result\n// }\n\n// fn d(a: u8, b: u8) -> u8 {\n//     let d = a as i32 - b as i32;\n//     let d2 = d * d;\n//     assert(d2 >= 0);\n//     let d2u = d2 as u32;\n//     let result = unsafe {\n//         let sq = distance_sqrt(d2u);\n//         assert(sq * sq == d2u);\n//         sq\n//     };\n//     assert(result < DISTANCE_TABLE_WIDTH);\n//     comptime { assert(DISTANCE_TABLE_WIDTH <= 256) };\n//     result as u8\n// }\n// global DISTANCE_TABLE: [[u8; DISTANCE_TABLE_WIDTH]; DISTANCE_TABLE_HEIGHT] = [\n//     [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 2,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ],\n//     [ 3,  3,  3,  4,  4,  5,  6,  7,  8,  9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ],\n// ]\n\npub fn get_distance(curr_x: u8, curr_y: u8, x: u8, y: u8) -> u16 {\n    // assert(curr_x < WIDTH);\n    // assert(curr_y < HEIGHT);\n    // assert(x < WIDTH);\n    // assert(y < HEIGHT);\n    // validating coordinates is not the job of this function\n    // only avoid overflows!\n\n    // let dx = unsafe {\n    //     let diff_\n    //     distance_sqrt(x)\n    // }\n\n    let dx = if curr_x > x { curr_x - x } else { x - curr_x } as u16;\n    let dy = if curr_y > y { curr_y - y } else { y - curr_y } as u16;\n\n    // let dx = curr_x as i16 - x as i16;\n    // let dy = curr_y as i16 - y as i16;\n\n    (dx * dx + dy * dy) as u16\n}\n\n\npub fn is_visible(enemy_advance: u8, x: u8) -> bool {\n    //(x >= enemy_advance) == (side == 0)\n    x >= enemy_advance\n}\n\n// TODO: This is for the future - fireballs, etc. only if we have line of sight\n// pub fn is_visible(curr_x: u8, curr_y: u8, x: u8, y: u8, map: &Map) -> bool {\n//     assert(curr_x < WIDTH);\n//     assert(curr_y < HEIGHT);\n//     assert(x < WIDTH);\n//     assert(y < HEIGHT);\n\n//     let mut x = curr_x as f32;\n//     let mut y = curr_y as f32;\n//     let x2 = x + 0.5;\n//     let y2 = y + 0.5;\n//     let dx = x2 - x;\n//     let dy = y2 - y;\n//     let mut t = 0.0;\n//     let mut max_t = 1.0;\n//     let mut x = x;\n//     let mut y = y;\n\n//     while t < max_t {\n//         let x = x + dx * t;\n//         let y = y + dy * t;\n//         let x = x as u8;\n//         let y = y as u8;\n\n//         if map.is_wall(x, y) {\n//             return false;\n//         }\n\n//         t += 0.1;\n//     }\n\n//     true\n// }\n\npub fn their_x_to_mine(x: u8) -> (bool, u8) {\n    if x == NOWHERE {\n        (true, NOWHERE)\n    } else {\n        (x < WIDTH, std::wrapping_sub(WIDTH - 1, x) & WIDTH_MASK)\n    }\n}\n\npub fn can_move_to(distance: u16, x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle]) -> bool {\n    let mut can = distance <= (VIEW_DISTANCE as u16 * VIEW_DISTANCE as u16); //x <= advance;\n\n    for i in 0..MAX_OBSTACLES {\n        if !is_obstacle_traversible(obstacles[i]) & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    for i in 0..their_obstacles.len() {\n        if !is_obstacle_traversible(their_obstacles[i]) & (get_obstacle_x(their_obstacles[i]) == x) & (get_obstacle_y(their_obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    can\n}\n// pub fn their_x_to_mine(side: u1, x: i8) -> i8 {\n//     let mul = side as i8;\n//     mul * 31 + 16 + x\n// }\n\n// x * s -16 + y = 0 if s == 0 => y = 16\n// x * s -16 + y = 31 if s == 1 => x = 31\n// y = 31 * s + 16 + x\n// s = 0:\n// x = -16 => y = 0\n// x = 15 => y = 31\n// s = 1:\n// x = -16 => y = 31\n// x = 15 => y = 0\n\n// pub fn serialize_x(x: i8) -> (bool, u8) {\n//     let valid = (x >= -(WIDTH / 2) as i8) & (x < (WIDTH / 2) as i8);\n//     (valid, (x + (WIDTH / 2) as i8) as u8)\n// }\n\n// pub fn deserialize_x(x: u8) -> (bool, i8) {\n//     let valid = x < WIDTH;\n//     (valid, x as i8 - (WIDTH / 2) as i8)\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/map.nr"},"96":{"source":"pub global NOWHERE: u8 = 255;\npub global UNREADABLE_BYTES_PER_FIELD: u32 = 1;\npub comptime global DEBUG: bool = true;\npub comptime fn debug(stmt: Quoted) -> Quoted {\n    let debug_result = if DEBUG { stmt } else { quote {} };\n    debug_result\n}\npub comptime fn debugmsg<T>(msg: T) -> Quoted {\n    debug!(quote { println($msg); })\n}\npub comptime fn softassert(varname: Quoted, check: Quoted, msg: Quoted) -> Quoted {\n    let result = if DEBUG {\n        quote {\n            $varname &= $check;\n            if !($check) {\n                println($msg);\n            }\n        }\n    } else {\n        quote {\n            $varname &= $check;\n        }\n    };\n    result\n}\n\n////////////////////\n\n// global WIDTH_MASK: u8 = 31;\n// global CLASS_MASK: u8 = 7;\n// global WIDTH_BITS: u8 = 5;\n// global MAX_CHARACTERS: u32 = 5;\n// struct Character {\n//     pub x: u8, // 5 bit\n//     pub class: u8, // 3 bit\n//     pub actions: [[u8; 32]; 7],\n// }\n// impl Character {\n//     fn is_class_valid(class: u8) -> bool {\n//         class as u32 <= 5\n//     }\n\n//     pub fn is_valid(self) -> bool {\n//         let mut valid = true;\n//         let x = self.x;\n//         let class = self.class;\n//         println(x);\n//         valid &= Character::is_class_valid(class);\n//         valid\n//     }\n\n//     fn parse(\n//         id: u8,\n//         data: Field,\n//         actions_data: [Field; 30],\n//         wait_action: [u8; 32],\n//     ) -> (bool, Character) {\n//         let mut is_valid = true;\n\n//         let split: [u8; 32] = data.to_be_bytes::<32>();\n//         assert(split.len() == 32);\n//         let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n\n//         let x = x_packed & WIDTH_MASK;\n//         let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n//         if !Character::is_class_valid(class) {\n//             class = 0;\n//             is_valid = false;\n//         }\n\n//         let c = Character {\n//             x: x,\n//             class: class,\n//             actions: [\n//                 wait_action,\n//                 actions_data[id * 6 as u8].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 1].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 2].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 3].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 4].to_be_bytes::<32>(),\n//                 actions_data[id * 6 as u8 + 5].to_be_bytes::<32>(),\n//             ],\n//         };\n//         (is_valid, c)\n//     }\n// }\n\n// fn create_character(x: u8, class: u8) -> Character {\n//     let c = Character { x: x, class: class, actions: [[0 as u8; 32]; 7] };\n//     assert(c.is_valid());\n//     c\n// }\n// fn parse_characters(data: Field, actions_data: [Field; 30]) -> (bool, [Character; MAX_CHARACTERS]) {\n//     let mut is_valid = true;\n\n//     let wait_action = [\n//         0 as u8, 0 as u8, 240 as u8, 0 as u8, 63 as u8, 0 as u8, 0 as u8, 1 as u8, 0 as u8,\n//         32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n//         32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n//         0 as u8, 0 as u8, 0 as u8,\n//     ];\n\n//     // no need to optimize, compiler automatically rolls this out\n//     let mut result: [Character; MAX_CHARACTERS] = [\n//         create_character(0, 0),\n//         create_character(0, 0),\n//         create_character(0, 0),\n//         create_character(0, 0),\n//         create_character(0, 0),\n//     ];\n//     for i in 0..(MAX_CHARACTERS as u8) {\n//         let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action);\n//         is_valid &= curr_valid;\n//         result[i] = curr_c;\n//     }\n\n//     // let (curr_valid, curr_c) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[0] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[1] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[2] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[3] = curr_c;\n//     // let (curr_valid, curr_c) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n//     // is_valid &= curr_valid;\n//     // result[4] = curr_c;\n//     (is_valid, result)\n// }\n\n// #[test]\n// fn test_parse_character_round0() {\n//     let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n\n//     let parsed = parse_characters(\n//         data,\n//         [\n//             0x03f00001300314002000000000100300000020000000002000000000000000,\n//             0x02f0000110071020100a000020100a00000020000000002000000000000000,\n//             0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n//             0x023100081b161118120a010018120a01000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0x03f00001300414002000000000100300000020000000002000000000000000,\n//             0x02f0000110071008100a000008100a00000020000000002000000000000000,\n//             0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n//             0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0x03f00001300314002000000000100300000020000000002000000000000000,\n//             0x02f0000110071018100a000018100a00000020000000002000000000000000,\n//             0x09f0000130060c002000000000200000000020000000002000000000000000,\n//             0xf00001100610001005000100100500010020000000002000000000000000,\n//             0xf00001301c0100100d000000100d00000020000000002000000000000000,\n//             0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n//             0x03f00001300414002000000000100300000020000000002000000000000000,\n//             0x02f0000110061028100a000028100a00000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0x03f00001300414002000000000100300000020000000002000000000000000,\n//             0x02f0000110071010100a000010100a00000020000000002000000000000000,\n//             0xf000071b1611002000000000000705000020000000002000000000000000,\n//             0x6300061b161164150a020164150a02010020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//             0xf0003f000001002000000000200000000020000000002000000000000000,\n//         ],\n//     );\n//     assert(parsed.0);\n// }\n\n// // #[test]\n// // fn test_create_character_0() {\n// //   let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n// //   let enemy_advance = 0x08;\n// //   let events = [0 as u8, 0 as u8, 0 as u8, 0 as u8];\n// //   println(events);\n\n// //   let actions_data = [\n// //     0x03f00001300314002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071020100a000020100a00000020000000002000000000000000,\n// //     0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n// //     0x023100081b161118120a010018120a01000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0x03f00001300414002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071008100a000008100a00000020000000002000000000000000,\n// //     0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n// //     0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0x03f00001300314002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071018100a000018100a00000020000000002000000000000000,\n// //     0x09f0000130060c002000000000200000000020000000002000000000000000,\n// //     0xf00001100610001005000100100500010020000000002000000000000000,\n// //     0xf00001301c0100100d000000100d00000020000000002000000000000000,\n// //     0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n// //     0x03f00001300414002000000000100300000020000000002000000000000000,\n// //     0x02f0000110061028100a000028100a00000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0x03f00001300414002000000000100300000020000000002000000000000000,\n// //     0x02f0000110071010100a000010100a00000020000000002000000000000000,\n// //     0xf000071b1611002000000000000705000020000000002000000000000000,\n// //     0x6300061b161164150a020164150a02010020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000,\n// //     0xf0003f000001002000000000200000000020000000002000000000000000\n// // ];\n// //   comptime { assert(5 <= 5); }\n\n// //     let enemy_advance = if enemy_advance >= 32 { 0 } else { 32 - enemy_advance - 1 };\n// //     let mut is_valid = true;\n\n// //     let wait_action = [0 as u8, 0 as u8, 240 as u8, 0 as u8, 63 as u8, 0 as u8, 0 as u8, 1 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 32 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8];\n\n// // let mut result: [Character; 5] = [create_character(0, 0, 0, 0), create_character(1, 0, 0, 0), create_character(2, 0, 0, 0), create_character(3, 0, 0, 0), create_character(4, 0, 0, 0)];\n// //     //for i in 0..(5 as u8) {\n// //         let (curr_valid, curr_c) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[0] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[1] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[2] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[3] = curr_c;\n// //         let (curr_valid, curr_c) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n// //         is_valid &= curr_valid;\n// //         result[4] = curr_c;\n// //    // }\n// //     assert(is_valid);\n// //     // assert(result[0].x == 0);\n// // }\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplg/src/lib.nr"}},"names":["parse_characters"],"brillig_names":["print_unconstrained","print_unconstrained","print_unconstrained","directive_integer_quotient","directive_to_radix","directive_invert"]}