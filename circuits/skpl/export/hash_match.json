{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":8255409921515214511,"abi":{"parameters":[{"name":"my_chars","type":{"kind":"field"},"visibility":"private"},{"name":"my_char_actions","type":{"kind":"array","length":899,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"my_obstacles","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"},{"name":"secret_be_bytes","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"private"},"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"68":{"source":"mod common;\nmod action;\nuse action::{ new_action, parse_actions, serialize_actions };\nuse action::execute_action;\nmod character;\nuse character::{ Character, get_test_action_register };\nuse character::parse_characters;\nmod event;\npub use event::Event;\nmod obstacle;\nuse obstacle::Obstacle;\npub use obstacle::{ new_obstacle, parse_my_obstacles, parse_their_obstacles, get_obstacle_x, get_obstacle_y, get_obstacle_id, get_obstacle_type, get_obstacle_health, serialize_my_obstacles, get_default_obstacles };\nmod map;\nuse dep::std;\nuse obstacle::serialize_obstacle;\nuse obstacle::serialize_their_obstacles;\n// use action::ACTION_TARGET_X;\n// use action::ACTION_TARGET_Y;\n// use action::ACTION_TYPE;\nuse action::get_action_target_y;\nuse action::get_action_target_x;\nuse action::get_action_type;\nmod actionDefinition;\nuse actionDefinition::{ ActionDefinitionRegister };\npub use actionDefinition::ACTION_DEFINITION_REGISTER_SIZE;\nuse obstacle::serialize_my_obstacles_for_me;\nuse map::is_visible;\n\nmod ResolvedAction;\n\n\n\n// #[export]\n// pub fn ext_can_move_to(x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle]) -> bool {\n//     assert(MAX_OBSTACLES == 24);\n//     let mut my_obstacles_parsed = Obstacle::parse_my_obstacles(my_obstacles, events).as_array();\n//     // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n//     // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n//     let enemy_objects_parsed = Obstacle::parse_their_obstacles(enemy_objects);\n\n//     let mut can = true;\n//     for i in 0..MAX_OBSTACLES {\n//         if !obstacles[i].is_traversible() & (obstacles[i].x == x) & (obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     for i in 0..their_obstacles.len() {\n//         if !their_obstacles[i].is_traversible() & (their_obstacles[i].x == x) & (their_obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     can\n// }\n\npub comptime global DEBUG: bool = false;\npub comptime fn debug(stmt: Quoted) -> Quoted {\n    let debug_result = if DEBUG {\n        stmt\n    } else { quote {} };\n    debug_result\n}\npub comptime fn debugmsg<T>(msg: T) -> Quoted {\n    debug!(quote { println($msg); })\n}\npub comptime fn softassert(varname: Quoted, check: Quoted, msg: Quoted) -> Quoted {\n    let result = if DEBUG {\n        quote {\n            $varname &= $check;\n            if !($check) {\n                println($msg);\n            }\n        }\n    } else {\n        quote {\n            $varname &= $check;\n        }\n    };\n    result\n}\n\n// MAP\nglobal WIDTH_BITS: u8 = 5;\nglobal WIDTH_MASK: u8 = (1 << WIDTH_BITS) - 1;\nglobal WIDTH: u8 = 1 << WIDTH_BITS;\nglobal HEIGHT_BITS: u8 = 4;\nglobal HEIGHT_MASK: u8 = (1 << HEIGHT_BITS) - 1;\nglobal HEIGHT: u8 = 10;\nglobal NOWHERE: u8 = 255;\n\n// CLASSES\n//global UNKNOWN_CLASS: u8 = 0;\nglobal ARCHER: u8 = 1;\nglobal RITUALIST: u8 = 2;\nglobal ROGUE: u8 = 3;\nglobal KNIGHT: u8 = 4;\nglobal MAGE: u8 = 5;\nglobal CLASS_BITS: u8 = 3;\nglobal CLASS_MASK: u8 = (1 << CLASS_BITS) - 1;\nglobal CLASS_COUNT: u32 = 6;\nglobal MAX_ACTIONS_PER_CHARACTER: u32 = 7;\n\n// ACTIONS\nglobal WAIT: u8 = 0;\n//global SNEAK: u8 = 1;\n//global MOVE: u8 = 2;          // => SEE_COLUMN (depr: MOVE)\n//global RITUAL: u8 = 3;        // => SEE_RITUAL | WIN\n//global SEARCH: u8 = 4;        // => SEE_SEARCH_TRAP\n//global ATTACK: u8 = 5;        // => RECEIVE_ATTACK | DESTROY // affects my obstacles; TODO: with more attack types might also affect other own characters\n//global CAST: u8 = 6;          // => SEE_CAST // affects my obstacles; TODO: with more attack types might also affect other own characters\n//global CAST_FIREBALL: u8 = 7; // => RECEIVE_ATTACK // affects other characters if status == FIREBALL_ROUNDS_FOR_CAST\n//global DRAW: u8 = 8;          // => SEE_DRAW\n//global SHOOT: u8 = 9;         // => RECEIVE_ATTACK\n//global TRIGGER_TRAP = 9;  // => TRIGGERED_TRAP ?????????\n//global DISARM_TRAP: u8 = 10;  // => DESTROY\n//global SET_TRAP: u8 = 11;\nglobal ACTION_COUNT: u32 = 12;\n\n// EVENTS\nglobal NO_EVENT: u8 = 0 ;\n// global DESTROY: u8 = 1;          // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //use coordinates to determine tile or trap that got destroyed and update map\n//global DISCOVER = 2;         // actor_id = their_char or their_object when receive - handle to update enemy positions, got health & class (this is for all chars, not just the active one)\n//global SEE_COLUMN = 2 ;      // y = the column the player sees => update objects list\nglobal SEE_MOVE: u8 = 3 ;        // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //handle to update enemy positions => DISCOVER\n//global SEE_SPELL = 4 ;       // actor_id = their_char when receive - need to handle effect via coordinates, => RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle my obstacles\nglobal SEE_SEARCH_TRAP: u8 = 5 ; // actor_id = their_char when receive - need to create found trap event if there is a trap nearby => FOUND_TRAP\n// global SEE_RITUAL: u8 = 6 ;      // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\nglobal SEE_CAST: u8 = 7;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\nglobal SEE_DRAW: u8 = 8;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n//global RECEIVE_DAMAGE = 9;   // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client\nglobal RECEIVE_ATTACK: u8 = 10;  // actor_id = 0 when receive - need to handle damage => // no need to events ... health of visible assets gets sent anyway and invisible ones will be updated during discovery //RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle in my obstacles\nglobal TRIGGERED_TRAP: u8 = 11;  // actor_id = my_char when receive - need to handle damage (for now, later on we might want to handle other effects as well) => RECEIVE_DAMAGE\n// global FOUND_TRAP: u8 = 12;      // actor_id = my_char when receive - no need to handle, only important to have on-chain for the client\nglobal DISARMED_TRAP: u8 = 13;      // actor_id = their-char when receive - need to remove my trap from the map\nglobal WIN: u8 = 14;\n// global LOSE: u8 = 15;\nglobal ADD_OBSTACLE: u8 = 4;\nglobal EVENT_COUNT: u8 = 16;\n\n// SUBTYPES:\nglobal WIN_BY_RITUAL: u8 = 1;\n\n// ATTACKS\nglobal ATTACK_MELEE: u8 = 0;\nglobal ATTACK_RANGED: u8 = 1;\nglobal ATTACK_FIREBALL: u8 = 2;\n// global ATTACK_COUNT: u8 = 3;\n// TODO: instead of enum, use a global array of structs with damage, range, etc.\n\n\n// TILES\nglobal EMPTY: u8 = 0;\nglobal WALL: u8 = 6;\nglobal WATER: u8 = 7;\n// global UNKNOWN_CLASS_TILE: u8 = 8;\nglobal NON_EMPTY_WALKABLE_TILE_MIN: u8 = 9;\n// global FLAG: u8 = 9;\nglobal TRAP: u8 = 10;\n// global TRAP_USED: u8 = 11;\n// global TRAP_FOUND: u8 = 12;\n// global BODY: u8 = 13;\n// global BODY_LOOTED: u8 = 14;\n// global FOG: u8 = 15;\nglobal MAX_OBSTACLE_TYPE: u8 = 0x0f;\n// global TILE_COUNT: u8 = 16;\n// unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n// STATUS\nglobal RITUAL_ROUNDS_FOR_WIN: u8 = 15;\nglobal MIN_FIREBALL_ROUNDS_FOR_CAST: u8 = 3;\nglobal MAX_FIREBALL_ROUNDS_FOR_CAST: u8 = 6;\n// global DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\nglobal MIN_DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\nglobal MAX_DRAW_ROUNDS_FOR_SHOOT: u8 = 3;\nglobal STATUS_BITS: u8 = 4;\nglobal STATUS_MASK: u8 = (1 << STATUS_BITS) - 1;\nglobal STATUS_COUNT: u8 = 16 ; // just to be more in line with the other constants, actually used as a counter\nglobal MAX_HEALTH: u8 = 255;\n\n// GAMEPLAY\nglobal VIEW_DISTANCE: u8 = 6;\n// global MAX_TRAPS: u32 = 8; // note: only lowest bit of first byte of field is usable! => ! Field = 1 bit + 31 bytes!\n// global TRAPS_BUFFER_SIZE: Field = 16;\n// global TRAPS_BUFFER_MASK: Field = 15; // has to be 2^n - 1\nglobal MAX_ACTIONS: u32 = 4;\nglobal MAX_EVENTS: u32 = 4; // = MAX_ACTIONS // NO! handle traps in a different way (by passing as argument!)+ 4 (2 FOUND_TRAP + WIN/LOSE + 1 reserved)\nglobal MAX_OBSTACLES: u32 = 24; // leave traps for now + MAX_TRAPS; // 24 + 8 player placeables\npub global MAX_CHARACTERS: u32 = 5;\npub global MAX_STATUS: u8 = STATUS_COUNT - 1;\nglobal SERIALIZED_OBSTACLE_BYTE_SIZE: u32 = 3;//3\npub global SERIALIZED_OBSTACLES_ARRAY_SIZE: u32 = 3;//3 // TODO: we take 3 because 3 x 8 = MAX_OBSTACLES ... should assert on this (MAX_OBSTACLES + MAX_CHARACTERS + 7) / 8;\npub global SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE: u32 = SERIALIZED_OBSTACLES_ARRAY_SIZE + 1; // +1 because enemy characters are also serialized as obstacles\nglobal SERIALIZED_OBSTACLES_PER_FIELD: u32 = 8;//8 // TODO: need to verify that SERIALIZED_OBSTACLES_ARRAY_SIZE * SERIALIZED_OBSTACLES_PER_FIELD = MAX_OBSTACLES!\nglobal SERIALIZED_EVENT_BYTE_SIZE: u32 = 7;\npub global SERIALIZED_EVENTS_ARRAY_SIZE: u32 = 1; // MAX_EVENTS / SERIALIZED_EVENTS_PER_FIELD => 4 / 4 = 1\nglobal SERIALIZED_EVENTS_PER_FIELD: u32 = 4; // 31 / 7 = 4\nglobal SERIALIZED_ACTION_BYTE_SIZE: u32 = 5;\npub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\nglobal SERIALIZED_ACTIONS_PER_FIELD: u32 = 4; // could be up to 6, but we only use 4\nglobal UNREADABLE_BYTES_PER_FIELD: u32 = 1;\n\n// #[export]\n// fn tf(x: Field) -> (u32, [u8;32]) {\n//     let mut result: [u8;32] = [0;32];\n//     let bts = x.to_be_bytes::<32>();\n//     for j in 0..31 {\n//         result[j] = 2*j;//bts[j];\n//     }\n//     (32 , result)\n// }\n// i,\n// 20, 0 -> 25,\n// 25 -> 0, \n// x, 0, 0, d0,\n// x, 0, 0, 9d, 1, 0,\n// x, 0, 0, 1, 0, b4, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 91, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 23, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, d4, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, 66, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 50, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b9, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, c5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 55, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b2, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, e8, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2a, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, cb, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 9b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 5c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, a6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 86, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, d5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 38, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8e, 1, 0, 0, 1,\n// 0, 32, 1, 0, 1, 1, x, 0, 0, 1,\n// x, 0, 0, 1, x, 0, 0, 1, 0, 1, 1\n\n// i,\n// 20, 0, 1e -> 0, 0 -> 1e, 0\n// x, 0, 0, d0,\n// x, 0, 0, ba, 1, 0,\n// x, 0, 0, 1, 0, cf, 1, 0, 1, 1,\n\n#[export]\nfn get_actor_from_move(mut move: u32) -> u8 {\n    if (move % 2) == 1 {\n        move -= 1; //((move % 10) - 1) >> 1 // actually not needed ... but clearer this way\n    }\n    let single_digit: u32 = (move % 10 as u32) >> 1;\n    single_digit as u8\n}\n// 3, 1, 1, 1, 0, 1, 2, 0, 2, 8, 1, 0, 0, 1\n// 4, 2, 2, 0, x, 0, 0, 0, 4, a, 2, 0, 0, 2\n\n#[export]\npub fn hash_match(my_chars: Field, my_char_actions: [u8; ACTION_DEFINITION_REGISTER_SIZE], my_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE], secret_be_bytes: [u8; 32]) -> Field {\n    let my_chars_be_bytes: [u8; 32] = my_chars.to_be_bytes::<32>();\n    assert(my_chars_be_bytes.len() == 32);\n    let gamestate_before_hash_calculated = get_data_hash(secret_be_bytes, my_chars_be_bytes, my_char_actions, my_obstacles);\n    let gamestate_before_hash_calculated_field = std::field::bytes32_to_field(gamestate_before_hash_calculated);\n    gamestate_before_hash_calculated_field\n}\n\n#[export]\nfn get_serialized_obstacle(id: u8, x: u8, y: u8, obstacle_type: u8) -> Field {\n    let mut result: [u8; 32] = [0; 32];\n    result[0] = id;\n    result[1] = x;\n    result[2] = y;\n    result[3] = obstacle_type;\n    std::field::bytes32_to_field(result)\n}\n\n#[export]\npub fn calculate_turn(\n    my_chars_input: Field,\n    my_char_actions_input: [u8; ACTION_DEFINITION_REGISTER_SIZE],\n    my_obstacles_input: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE],\n    //mut my_obstacles_parsed: [[u8; 5]; 24],\n    actions_input: [Field; SERIALIZED_ACTIONS_ARRAY_SIZE],\n    // Common Inputs\n    move_input: u32, //pub\n    // Enemy Inputs\n    enemy_advance_input: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects_input: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE], // pub\n    enemy_events_input: [Field; SERIALIZED_EVENTS_ARRAY_SIZE], // pub //MAX_EVENTS],\n\n) -> (bool, Field, [u8; ACTION_DEFINITION_REGISTER_SIZE], [[u8; 5];24], u8, [Field; SERIALIZED_EVENTS_ARRAY_SIZE], [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE]) {\n    let mut success = true;\n\n    let actionRegister = ActionDefinitionRegister::new(my_char_actions_input);\n    // calculate enemy advance in our coordinates and shadow\n    // let (enemy_advance_valid, enemy_advance) = their_x_to_mine(enemy_advance);\n    let enemy_advance = if enemy_advance_input >= WIDTH { 0 } else { WIDTH - enemy_advance_input - 1 };\n\n\n    // TODO: Validate map => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    let (events_valid, events) = Event::parse_their_events(enemy_events_input);\n    softassert!(quote { success }, quote { events_valid }, quote { f\"Failed to parse their events {events}\" });\n\n    // let side = move as u1;\n    let (my_chars_valid, mut my_chars) = parse_characters(my_chars_input, events, enemy_advance);\n    softassert!(quote { success }, quote { my_chars_valid }, quote { f\"Failed to parse my characters {my_chars}\" });\n\n    let actor_id = get_actor_from_move(move_input);\n    let mut actor = my_chars[actor_id]; //Character::parse(actor_id, my_chars, events);\n    \n    let actions = parse_actions(actions_input); // actions.map(|action| Action::from_field(action));\n    \n    comptime {\n        assert(MAX_OBSTACLES == 24);\n    }\n\n    let (valid, my_obstacles_parsed) = parse_my_obstacles(my_obstacles_input, events);\n    softassert!(quote { success }, quote { valid }, quote { f\"Failed to parse my obstacles {my_obstacles_input}\" });\n    let mut my_obstacles_parsed: [Obstacle; MAX_OBSTACLES] = my_obstacles_parsed.as_array();\n\n    // let mut my_obstacles_parsed = my_obstacles_parsed.as_array();\n//    let (valid, mut my_obstacles_parsed) = parse_my_obstacles(my_obstacles, events).as_array();\n    // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n    let (enemy_objects_parsed_valid, enemy_objects_parsed) = parse_their_obstacles(enemy_objects_input);\n    softassert!(quote { success }, quote { enemy_objects_parsed_valid }, quote { f\"Failed to parse their obstacles {enemy_objects_input}\" });\n\n    let mut energy: u8 = 12;\n    let mut result_events_calculated: [Event] = &[];\n    for i in 0..MAX_ACTIONS {\n        // TODO: ensure that if actor committed suicide, it is not allowed to do any more actions\n        let action = actions[i];\n        let resolved_action = actionRegister.resolve_action(action); //resolve_action(action);\n        let result = execute_action(resolved_action, enemy_advance, actor, energy, my_obstacles_parsed, enemy_objects_parsed);\n        //assert(result.0);\n        success &= result.0;\n        let result_event = result.1;\n        let internal_event = result.2;\n        actor = result.3;\n        energy = result.4;\n        \n        // 4461 / 5 = 892,2\n        my_chars = my_chars.map(|c| wb_apply_damage_to_char(c, result_event, actor));\n        // 16800 / 24 = 700\n        my_obstacles_parsed = my_obstacles_parsed.map(|obstacle| {\n            let (updated_obstacle_valid, updated_obstacle) = update_my_obstacle(obstacle, result_event);\n            //success = success & updated_obstacle_valid;\n            softassert!(quote { success }, quote { updated_obstacle_valid }, quote { f\"Failed to update my obstacle {obstacle}, {result_event}\" });\n            updated_obstacle\n        });\n\n        result_events_calculated = result_events_calculated.push_back(result_event);\n    }\n    let result_events_calculated = Event::serialize_events(result_events_calculated);\n    assert(result_events_calculated.len() == SERIALIZED_EVENTS_ARRAY_SIZE);\n\n    // send death events => no need\n\n    // determine view range\n    let mut my_advance_calculated = 0;\n    for i in 0..MAX_CHARACTERS {\n        if my_chars[i].x > my_advance_calculated {\n            my_advance_calculated = my_chars[i].x;\n        }\n    }\n    my_advance_calculated += VIEW_DISTANCE;\n\n    let serialized_characters = serialize_chars(my_chars);\n    let serialized_obstacles: [Field] = serialize_my_obstacles(enemy_advance, my_obstacles_parsed);\n    let (serialized_chars_as_obstacles_valid, serialized_chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance, my_chars);\n    // success = success & serialized_chars_as_obstacles_valid;\n    softassert!(quote { success }, quote { serialized_chars_as_obstacles_valid }, quote { f\"Failed to serialize chars as obstacles: {my_chars}\" });\n    let serialized_obstacles_for_enemy: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE] = serialized_obstacles.push_back(serialized_chars_as_obstacles).as_array();\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles_parsed);\n\n    (success, serialized_characters, my_char_actions_input, my_obstacles_parsed, my_advance_calculated, result_events_calculated.as_array(), serialized_obstacles_for_enemy)\n}\n\n#[export]\npub fn turn(\n    // verification_key: pub [Field; 114],\n    // proof: pub [Field; 93],\n    // public_inputs: pub [Field; 1 ],//+ 2 * SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE + 2 * SERIALIZED_EVENTS_ARRAY_SIZE],\n    // key_hash: pub Field,\n    // last_move: pub u32,\n    // last_enemy_advance: pub u8,\n    // last_enemy_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // last_events: pub [Field, SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_advance: pub u8,\n    // last_my_result_events: pub [Field; SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_result_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // Gamestate Hashes\n    // gamestate_before_hash: pub Field,\n    // gamestate_after_hash: pub Field,\n    // My Secret State\n    secret: Field,\n    my_chars_input: Field,\n    //my_char_actions: [u8; ACTION_DEFINITION_REGISTER_SIZE],\n    my_obstacles_input: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE],\n    //my_obstacles: [[u8; 5]; 24],\n    actions: [Field; SERIALIZED_ACTIONS_ARRAY_SIZE],\n    // Common Inputs\n    move: u32, //pub\n    // Enemy Inputs\n    enemy_advance: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE], // pub\n    enemy_events: [Field; SERIALIZED_EVENTS_ARRAY_SIZE], // pub //MAX_EVENTS],\n    // My Results\n    my_result_advance: u8, // pub // 1 bit win, 1 bit lose, 1 bit reserved, 5 bits advance\n    my_result_events: [Field; SERIALIZED_EVENTS_ARRAY_SIZE], // pub\n    my_result_objects: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE], // pub\n    // Gamestate Hashes\n    gamestate_before_hash: Field, // pub\n    gamestate_after_hash: Field, // pub\n) -> pub bool {\n    // Validate global constants (to make sure one didn't change one without updating dependet ones)\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    let my_char_actions = get_test_action_register();\n\n    let mut success = true;\n    let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_match(my_chars_input, my_char_actions, my_obstacles_input, secret_be_bytes);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    softassert!(quote { success }, quote { gamestate_before_hash == gamestate_before_hash_calculated_field }, quote { f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\" });\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        my_chars_input,\n        my_char_actions,\n        my_obstacles_input,\n        actions,\n        move,\n        enemy_advance,\n        enemy_objects,\n        enemy_events\n    );\n    softassert!(quote { success }, quote { turn_calc_valid }, quote { f\"Tun calculation failed\" });\n\n    // if side == 0 {\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x > my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated += VIEW_DISTANCE;\n    // } else {\n    //     my_advance_calculated = WIDTH - 1;\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x < my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated -= VIEW_DISTANCE;\n    // }\n    softassert!(quote { success }, quote { my_result_advance == my_advance_calculated }, quote { f\"Invalid result advance: {my_advance} != {my_advance_calculated}\" });\n\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        softassert!(quote { success }, quote { result_event_should == result_event_calculated }, quote { f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\" });\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secret_be_bytes, serialized_characters_be_bytes, my_char_actions_after, my_obstacles_serialized_for_me);\n    let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    for i in 0..my_result_objects.len() {\n        let my_result_object = my_result_objects[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        softassert!(quote { success }, quote { my_result_object == serialized_obstacle }, quote { f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\" });\n    }\n    softassert!(quote { success }, quote { new_hash == gamestate_after_hash }, quote { f\"Invalid result hash: {new_hash} != {gamestate_after_hash}\" });\n    success\n}\n\nfn wb_apply_damage_to_char(mut c: Character, event: Event, actor: Character) -> Character {\n    if c.id == actor.id {\n        c = actor;\n    }\n    apply_damage_to_char(c, event)\n}\n\nfn apply_damage_to_char(c: Character, event: Event) -> Character {\n    let dmg = event.get_applied_damage_to_my_asset(c.x, c.y, c.class);\n    Character {\n        id: c.id,\n        x: c.x,\n        y: c.y,\n        class: c.class,\n        health: safe_subtract_dmg(c.health, dmg),\n        status: c.status,\n        target_x: c.target_x,\n        target_y: c.target_y,\n        has_been_seen: c.has_been_seen,\n        is_hidden: c.is_hidden,\n        damage_mod: c.damage_mod,\n        last_action: c.last_action,\n        actions: c.actions\n    }\n}\nfn update_my_obstacle(obstacle: Obstacle, event: Event) -> (bool, Obstacle) {\n    let dmg =\n        // event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle)) +\n        event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle));\n    new_obstacle(get_obstacle_id(obstacle), get_obstacle_x(obstacle), get_obstacle_y(obstacle), safe_subtract_dmg(get_obstacle_health(obstacle), dmg), get_obstacle_type(obstacle))\n    // Obstacle {\n    //     health: safe_subtract_dmg(obstacle.health, dmg),\n    //     id: obstacle.id,\n    //     x: obstacle.x,\n    //     y: obstacle.y,\n    //     obstacle_type: obstacle.obstacle_type,\n    // }\n}\n\nfn get_data_hash(secret: [u8], characters: [u8], character_actions: [u8; ACTION_DEFINITION_REGISTER_SIZE], obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> [u8; 32] {\n    assert(secret.len() == 32);\n    assert(characters.len() == 32);\n\n    let mut data: [u8; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE] = [0; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE];\n    for i in 0..32 {\n        data[i] = secret[i];\n        data[i + 32] = characters[i];\n    }\n    let offset = 32 + 32;\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let obstacle: [u8; 32] = obstacles[i].to_be_bytes::<32>();\n        assert(obstacle.len() == 32);\n        for j in 0..32 {\n            data[offset + i * 32 + j] = obstacle[j];\n        }\n    }\n    let offset = 32 + 32 + 32 * SERIALIZED_OBSTACLES_ARRAY_SIZE;\n    for i in 0..ACTION_DEFINITION_REGISTER_SIZE {\n        data[offset + i] = character_actions[i];\n    }\n    // let offset = WIDTH * HEIGHT + 32 * 3;\n    // for i in 0..10 {\n    //     data[offset + i * 4] = (searched_traps[i] & 255) as u8;\n    //     data[offset + i * 4 + 1] = ((searched_traps[i] >> 8) & 255) as u8;\n    //     data[offset + i * 4 + 2] = ((searched_traps[i] >> 16) & 255) as u8;\n    //     data[offset + i * 4 + 3] = ((searched_traps[i] >> 24) & 255) as u8;\n    // }\n    std::hash::blake3(data)\n}\n\nfn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> Field {\n    comptime {\n        assert(MAX_CHARACTERS <= 5);\n    }\n    let mut result: [u8; 32] = [0; 32];\n    for i in 0..MAX_CHARACTERS {\n        let serialized = chars[i].serialize();\n        for j in 0..6 {\n            result[2 + i * 6 + j] = serialized[j];\n        }\n    }\n    std::field::bytes32_to_field(result)\n}\n\nfn serialize_chars_as_obstacles(enemy_advance: u8, chars: [Character; MAX_CHARACTERS]) -> (bool, Field) {\n    let mut result: [u8; 32] = [0; 32];\n    let mut valid_result = true;\n    for i in 0..MAX_CHARACTERS {\n        if (chars[i].is_hidden == 0) & is_visible(enemy_advance, chars[i].get_x()) {\n            let (valid, char_as_obstacle) = chars[i].to_obstacle();\n            let serialized = serialize_obstacle(char_as_obstacle);\n            valid_result = valid_result & valid;\n            result[2 + i * 3] = serialized[0];\n            result[2 + i * 3 + 1] = serialized[1];\n            result[2 + i * 3 + 2] = serialized[2];\n        }\n    }\n    (valid_result, std::field::bytes32_to_field(result))\n}\n\nfn safe_subtract_dmg(a: u8, b: u16) -> u8 {\n    let mut result = 0;\n    if (a as u16) > b {\n        result = a - (b as u8);\n    }\n    result\n}\n\nfn test_result_object_builder(enemy_advance: u8, chars: [Character; MAX_CHARACTERS], obs: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1]) {\n    let mut result: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        result[i] = obs[i];\n    }\n    let (valid, chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance, chars);\n    result[SERIALIZED_OBSTACLES_ARRAY_SIZE] = chars_as_obstacles;\n    (valid, result)\n}\n\n// fn test_helper_roster(actor: Character, mut chars: [Character; MAX_CHARACTERS]) -> [Character; MAX_CHARACTERS] {\n//     chars[actor.id] = actor;\n//     chars\n// }\n\n// fn test_helper_execute_move(move: u32, actor: Character, advances: [u8; 2], secret: [Field; 2], last_hashes: [Field; 2], chars: [[Character; MAX_CHARACTERS]; 2], obs: [[Obstacle; MAX_OBSTACLES]; 2], actions: [Action], my_events: [Event], their_events: [Event]) -> (u32, [Character; MAX_CHARACTERS], Field) {\n//     let side = move as u1;\n//     let other_side = (side as u8 + 1) as u1;\n//     let chars_after = test_helper_roster(actor, chars[side]);\n//     let my_obstacles_serialized = serialize_obstacles(advances[other_side], obs[side]);\n//     let secret_be_bytes: [u8; 32] = secret[side].to_be_bytes();\n//     assert(secret_be_bytes.len() == 32);\n//     let serialized_chars_after = serialize_chars(chars_after);\n//     let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes();\n//     assert(serialized_chars_after_be_bytes.len() == 32);\n//     let current_hash = std::field::bytes32_to_field(get_data_hash(secret_be_bytes, serialized_chars_after_be_bytes, my_obstacles_serialized)); \n\n//     let (enemy_objects_valid, enemy_objects) = test_result_object_builder(chars[other_side], serialize_obstacles(other_side, advances[side], obs[other_side]));\n//     assert(enemy_objects_valid, \"Invalid enemy objects\");\n//     let (my_result_objects_valid, my_result_objects) = test_result_object_builder(chars_after, my_obstacles_serialized);\n//     assert(my_result_objects_valid, \"Invalid my result objects\");\n\n//     let result = turn(\n//         secret[side],\n//         character::serialize_chars(chars[side]),\n//         my_obstacles_serialized,\n//         serialize_actions(actions),\n//         move,\n//         advances[other_side],\n//         enemy_objects,\n//         Event::serialize_events(their_events).as_array(),\n//         advances[side],\n//         Event::serialize_events(my_events).as_array(),\n//         my_result_objects,\n//         last_hashes[side],\n//         current_hash\n//     );\n//     assert(result, \"Invalid result\");\n\n//     (move + 1, chars_after, current_hash)\n// }\n\n// #[test]\n// fn test_main() {\n//     let secrets = [123456789, 9876543210];\n//     let mut chars = [ character::get_default_characters(0), character::get_default_characters(1) ];\n//     let mut obs = [ Obstacle::get_default_obstacles(0), Obstacle::get_default_obstacles(1) ];\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 2, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 3, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 4, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 5, target_y: 1 },\n//     ];\n//     let their_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let mut move = 0;\n//     let mut actor = chars[0][0].move(5, 1);\n//     let mut last_hashes = [ 0x12b8f97907a05ec6a77da3f70368fa3b02e166c74edab8ea0695d6f406146559, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n//     let mut advances = [2 + VIEW_DISTANCE, 29 - VIEW_DISTANCE];\n//     advances[0] = 5 + VIEW_DISTANCE;\n\n//     let mut side = move % 2;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 0 },\n//         Action { action: MOVE, actor: 0, target_x: 27, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(27, 0);\n//     advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 1, target_y: 3 },\n//         Action { action: MOVE, actor: 1, target_x: 0, target_y: 3 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(0, 3);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 2 },\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 1, target_x: 28, target_y: 1 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(28, 1);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n// }\n\n#[test]\nfn test_main_fireball_ff() {\n    let secrets = [123456789, 9876543210];\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, status: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER] },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER] },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER] },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER] },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, status: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER] },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, status: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER] },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER] },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER] },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER] },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER] },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event] = &[\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event] = &[\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        status: 0,\n        actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x118fec2c103f254f64c0bf927eaf0a2cab59e21e5e1d5121b2dd7ae234b25965, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(31 - advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let serialized_chars_after = serialize_chars(chars_after);\n    let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = std::field::bytes32_to_field(get_data_hash(secret_be_bytes, serialized_chars_after_be_bytes, get_test_action_register(), my_obstacles_serialized_for_me)); \n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(31 - advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(31 - advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(31 - advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    println(secrets[side]);\n    println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    println(my_obstacles_serialized_for_me);\n    println(serialize_actions(actions));\n    println(move);\n    println(advances[other_side]);\n    println(test_result_object_other_chars);\n    println(Event::serialize_events(their_events));\n    println(advances[side]);\n    println(Event::serialize_events(my_events));\n    println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n    let result = turn(\n        secrets[side],\n        character::serialize_chars(chars[side]),\n        // get_test_action_register(),\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        Event::serialize_events(their_events).as_array(),\n        advances[side],\n        Event::serialize_events(my_events).as_array(),\n        test_result_object_chars_after,\n        last_hashes[side],\n        current_hash\n    );\n    assert(result, \"Turn failed\");\n}\n\n\n#[export]\npub fn setup_obstacles(\n    \n)","path":"/home/andreas/git_repositories/heroes-of-penta/noir-react-native-starter-main/circuits/skpl/src/lib.nr"}},"names":["hash_match"],"brillig_names":["directive_to_radix","directive_invert","directive_integer_quotient"]}