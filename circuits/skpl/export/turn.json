{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":3549748264779980348,"abi":{"parameters":[{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"my_chars_input","type":{"kind":"field"},"visibility":"private"},{"name":"my_char_actions","type":{"kind":"array","length":30,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_obstacles_input","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"},{"name":"actions","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"move","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"enemy_advance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"enemy_objects","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"enemy_events","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_result_advance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"my_result_events","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_result_objects","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"gamestate_before_hash","type":{"kind":"field"},"visibility":"private"},{"name":"gamestate_after_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11167361122731473993":{"error_kind":"fmtstring","length":27,"item_types":[]},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"}}},"bytecode":"","debug_symbols":"","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"// use crate::{ HEIGHT, WIDTH };\nuse arenalib::{ NO_EVENT, WAIT, SEE_MOVE, WIDTH, HEIGHT };\nuse arenalib::{ MAX_ACTIONS, MAX_OBSTACLES };\nuse arenalib::{ SERIALIZED_ACTION_BYTE_SIZE, SERIALIZED_ACTIONS_ARRAY_SIZE, SERIALIZED_ACTIONS_PER_FIELD, VIEW_DISTANCE };\nuse skplg::{softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD};\nuse arenalib::{Action, get_action_actor, get_action_target_x, get_action_target_y, get_action_type, new_action};\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\nuse crate::character::Character;\nuse crate::event::Event;\nuse crate::event::{ build_subtype_value_event }; // , build_value_event\nuse crate::map::{ is_visible, get_distance, can_move_to };\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::{ get_default_obstacles };\nuse arenalib::{MAGE};\nuse arenalib::{MAX_ACTIONS_PER_CHARACTER, MAX_ENEMY_OBSTACLES, MAX_CHARACTERS};\n// use crate::ResolvedAction::ResolvedAction;\n// use crate::actionDefinition::{ build_move_action };\nuse arenalib::{apply_action_result_effects, apply_action_pre_calc_effects, validate_action_requirements, build_result_event};\nuse arenalib::arena_action_def_builder;\nuse super::{map::get_distance_from_parts, map::get_distance_part, map::is_distance_within_viewing_range, obstacle::new_obstacle, map::get_free_map};\nuse arenalib::MAX_HEALTH;\n\n// use crate::{ACTION_RESULT_COORDINATES_IDX_SELF, ACTION_RESULT_COORDINATES_IDX_TARGET, ACTION_RESULT_COORDINATES_IDX_INVISIBLE};\n// use crate::{SEE_CAST, SEE_DRAW, SEE_RITUAL, SEE_SEARCH_TRAP, RECEIVE_ATTACK, DISARMED_TRAP, ADD_OBSTACLE, WIN};\n// use crate::action_builder;\n\n\n\n// global ACTION_TYPE: u8 = 0;\n// global ACTION_ACTOR: u8 = 1;\n// global ACTION_TARGET_X: u8 = 2;\n// global ACTION_TARGET_Y: u8 = 3;\n\nglobal SEEN_EVENT_IDX: u32 = 1;\nglobal UNSEEN_EVENT_IDX: u32 = 0;\nglobal WORLD_EVENT_IDX: u32 = 2;\nglobal SELF_EVENT_IDX: u32 = 3;\n\npub fn execute_action(\n    action: Action,\n    enemy_advance: u8,\n    actor: Character,\n    mut energy: u8,\n    my_char_obstacles: [Obstacle; MAX_CHARACTERS],\n    my_obstacles: [Obstacle; MAX_OBSTACLES],\n    their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]\n) -> (bool, Event, Event, Event, Character, u8) /*where T: ResolvedAction */{\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    //let action_def = c.resolve_action(action.register[action.base_index + ACTION_TYPE]);\n        //let mut result_event: Event = build_std_event(NO_EVENT, c.id, 0, 0);\n        //let mut result_char = c;\n        //let mut required_energy = 0;\n        let mut is_valid = true;\n        //let action_def = c.resolve_action(get_action_type(action));\n        // let mut result_valid = true;\n\n        // let need_sneak = get_action_type(action) == SNEAK;\n        //let can_sneak = c.can_sneak();\n        // let need_move = get_action_type(action) == MOVE | get_action_type(action) == SNEAK;\n        // let can_move = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles);\n        // let need_target_is_neighbor = get_action_type(action) == SNEAK | get_action_type(action) == MOVE | get_action_type(action) == ATTACK | get_action_type(action) == SEARCH | get_action_type(action) == DISARM_TRAP;\n        //let target_is_neighbor = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        // let need_target_is_not_self = get_action_type(action) == ATTACK | get_action_type(action) == SHOOT;\n        // let target_is_not_self = (c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action));\n        // let need_ritual = get_action_type(action) == RITUAL;\n        //let can_ritual = c.can_ritual();\n        // let need_search = get_action_type(action) == SEARCH;\n        //let can_search = c.can_search();\n        //let can_attack = is_neighbor & not_self;\n        // let need_can_cast_fireball = get_action_type(action) == CAST_FIREBALL;\n        // let min_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if get_action_type(action) == SHOOT {\n        //     MIN_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let max_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if (get_action_type(action) == DRAW) | (get_action_type(action) == SHOOT) {\n        //     MAX_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let need_check_status = get_action_type(action) == CAST_FIREBALL | get_action_type(action) == RITUAL | get_action_type(action) == DRAW | get_action_type(action) == SHOOT;\n        // let can_cast_fireball = c.can_cast_fireball(); // & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        // let can_draw = c.can_shoot(); // & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_shoot = c.can_shoot(); // & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_disarm = c.can_disarm();\n        // let is_valid =\n        //     (get_action_type(action) == WAIT) |\n        //     ((get_action_type(action) == SNEAK) & can_sneak & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == MOVE) & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == RITUAL) & can_ritual) |\n        //     ((get_action_type(action) == SEARCH) & can_search & target_is_neighbor) |\n        //     ((get_action_type(action) == ATTACK) & target_is_neighbor & target_is_not_self) |\n        //     ((get_action_type(action) == CAST_FIREBALL) & can_cast_fireball & result_char.status <= max_rounds_to_finish) |\n        //     ((get_action_type(action) == DRAW) & can_draw) |\n        //     ((get_action_type(action) == SHOOT) & can_shoot & target_is_not_self) |\n        //     ((get_action_type(action) == DISARM_TRAP) & can_disarm & target_is_neighbor);\n\n\n\n\n        // need to adapt status first in case of action interruption!\n\n    //let action_type = action.get_action_type(action);\n    //let action_def = c.resolve_action(action_type);\n    let action_type = get_action_type(action);\n\n    let actor_id = actor.get_id();\n    let actor_x = actor.get_x();\n    let actor_y = actor.get_y();\n    let actor_target_x = actor.get_target_x();\n    let actor_target_y = actor.get_target_y();\n    let actor_last_action = actor.get_last_action();\n    let (action_def_valid, action_def) = actor.get_action(action_type);\n    softassert!(quote { is_valid }, quote { action_def_valid }, quote { f\"Failed to fetch action def of {action_type}\" });\n\n    let action_target_x = get_action_target_x(action);\n    let action_target_y = get_action_target_y(action);\n    let distance = get_distance(actor_x, actor_y, action_target_x, action_target_y);\n\n    // let is_continuous = action.get_action_is_continuous();\n    // let is_not_interrupted = (\n    //     ((!is_continuous) & (action.get_action_result_status_multiplier() != 0)) | // that's the ID of the wait action => leave status, but not continuous\n    //     ((is_continuous) & (action.get_action_req_previous_action() == c.last_action) & (action_target_x == c.get_target_x()) & (action_target_y == c.get_target_y()))\n    // );\n\n\n    let mut actor_progress = actor.get_progress();\n    let mut actor_is_hidden = actor.get_is_hidden() == 1;\n    let actor_is_in_view_range = is_visible(enemy_advance, actor_x);\n    // let max_range_part = get_action_req_max_range(action) as u16;\n    // let mut actor_max_range = max_range_part * max_range_part;\n    let mut is_not_interrupted = true;\n    let mut actor_damage_mod = actor.get_damage_mod();\n    let mut actor_status = actor.get_status();\n    // ~200 gates\n    apply_action_pre_calc_effects!(quote { action_def });\n\n    let mut obst = my_obstacles.as_slice();\n    for i in 0..MAX_CHARACTERS {\n      obst = obst.push_back(my_char_obstacles[i]);\n    }\n        let could_move_to_target = can_move_to(distance, action_target_x, action_target_y, obst.as_array(), their_obstacles);\n\n\n///////////////////////////\n    // ~4000 gates\n    validate_action_requirements!(quote { is_valid }, quote { action_def });\n    // // pub global ACTION_NEEDS_TARGET_FREE_SPACE: u8 = 0;  // u1\n    // let target_is_free_space_valid = !action.get_action_req_target_free_space() | can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles);\n    // softassert!(quote { is_valid }, quote { target_is_free_space_valid }, quote { f\"Target space ({action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" });\n    \n    // // pub global ACTION_NEEDS_TARGET_IS_NOT_SELF: u8 = 1; // u1\n    // let target_is_not_self_valid = !action.get_action_req_target_is_not_self() | (c_x != action_target_x) | (c_y != action_target_y);\n    // softassert!(quote { is_valid }, quote { target_is_not_self_valid }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" });\n\n    // // pub global ACTION_NEEDS_STATUS_HIDDEN: u8 = 4; // u1\n    // let char_is_hidden = c.is_hidden == 1;\n    // let char_is_hidden_valid = !action.get_action_req_status_hidden() | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_is_hidden_valid }, quote { f\"Character needs to be hidden to perform action {action_type}\" });\n    \n    // // pub global ACTION_NEEDS_STATUS_VISIBLE: u8 = 2; // u1\n    // let char_is_in_view_range = is_visible(enemy_advance, c_x);\n    // let char_is_fully_visible = char_is_in_view_range & !char_is_hidden;\n    // let char_is_fully_visible_valid = !action.get_action_req_status_visible() | char_is_fully_visible;\n    // softassert!(quote { is_valid }, quote { char_is_fully_visible_valid }, quote { f\"Character must be fully visible for action {action_type}: in_view_range: {char_is_in_view_range} & !hidden {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_NEEDS_STATUS_INVISIBLE: u8 = 3; // u1\n    // let char_invisible_valid = !action.get_action_req_status_invisible() | !char_is_in_view_range | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_invisible_valid }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {char_is_in_view_range} || hidden: {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_MAX_RANGE: u8 = 7; // u6 // TODO: max_range!\n    // let max_range_part = action.get_action_req_max_range() as u16;\n    // let max_range = max_range_part * max_range_part;\n    // let max_range_valid  = distance <= max_range;\n    // softassert!(quote { is_valid }, quote { max_range_valid }, quote { f\"Character is out of range! Distance: {distance} > {max_range}: {{{c_x},{c_y}}} - {{{action_target_x},{action_target_y}}} with {max_range_part}\" });\n\n    // // pub global ACTION_NEEDS_MIN_STATUS: u8 = 8; // u4\n    // let min_status = action.get_action_req_min_status();\n    // let min_status_valid = min_status <= status;\n    // softassert!(quote { is_valid }, quote { min_status_valid }, quote { f\"Character needs min status {min_status} to perform action {action_type}, but only has {status}\" });\n\n    // // pub global ACTION_NEEDS_MAX_STATUS: u8 = 9; // u4\n    // let max_status = action.get_action_req_max_status();\n    // let max_status_valid = max_status >= status;\n    // softassert!(quote { is_valid }, quote { max_status_valid }, quote { f\"Character cannot have a higher status than {max_status} to perform action {action_type}: got {status}\" });\n\n    // // pub global ACTION_NEEDED_ENERGY: u8 = 10;    // u4\n    // let required_energy = action.get_action_req_energy();\n    // let energy_valid = required_energy <= energy;\n    // softassert!(quote { is_valid }, quote { energy_valid }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {required_energy}\" });\n    //////////////////////\n    \n\n        let coords = [\n            (actor_x, actor_y),\n            (action_target_x, action_target_y),\n            (NOWHERE, NOWHERE),\n        ];\n\n    // pub global ACTION_RESULT_STATUS_MULTIPLIER: u8 =     ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT;     // u1\n    // pub global ACTION_RESULT_STATUS_FIXED_ADDITION: u8 = ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 1; // u4\n    // pub global ACTION_MOVE_TO_TARGET: u8 =               ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 2; // u1\n    // pub global ACTION_SETS_STATUS_HIDDEN: u8 = 5; // u1\n    // pub global ACTION_REMOVES_STATUS_HIDDEN: u8 = 6; // u1\n\n        // CALCULATE EVENTS\n        comptime {\n          assert(SEEN_EVENT_IDX == 1);\n          assert(UNSEEN_EVENT_IDX == 0);\n        }\n        //let result_event_idx = is_visible as u32;\n        let mut events: BoundedVec<Event, 4> = BoundedVec::new();\n        // 19000 gates\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        build_result_event!(0 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(1 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(2 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(3 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        assert(events.len() == 4);\n\n        // let seen_event_value = status as u32 * action.get_action_result_event_seen_value_status_multiplier() as u32 + action.get_action_result_event_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { seen_event_value <= 255 as u32 }, quote { f\"Invalid event value (seen): {seen_event_value} does not fit in u8!\" });\n\n        // let unseen_event_value = status as u32 * action.get_action_result_event_not_seen_value_status_multiplier() as u32 + action.get_action_result_event_not_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { unseen_event_value <= 255 as u32 }, quote { f\"Invalid event value (unseen): {unseen_event_value} does not fit in u8!\" });\n\n        // let seen_event_coords_idx = action.get_action_result_event_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { seen_event_coords_idx < 4 }, quote { f\"Invalid seen event coord idx: {seen_event_coords_idx} > 3\" });\n\n        // let seen_event_coords = coords[seen_event_coords_idx & 3];\n\n        // let unseen_event_coords_idx = action.get_action_result_event_not_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { unseen_event_coords_idx < 4 }, quote { f\"Invalid unseen event coord idx: {unseen_event_coords_idx} > 3\" });\n\n        // let unseen_event_coords = coords[unseen_event_coords_idx & 3];\n\n        // //let events = [\n        // let dummy_event =    build_subtype_value_event(NO_EVENT, c.get_id(), coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].0, coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].1, 0 as u8, 0 as u8, 0 as u8);\n        // let unseen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_not_seen_type(),\n        //         c.get_id(), \n        //         unseen_event_coords.0,\n        //         unseen_event_coords.1,\n        //         unseen_event_value as u8,\n        //         action.get_action_result_event_not_seen_subtype(),\n        //         action.get_action_result_event_not_seen_radius()\n        //     );\n        // let seen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_seen_type(),\n        //         c.get_id(), \n        //         seen_event_coords.0,\n        //         seen_event_coords.1,\n        //         seen_event_value as u8,\n        //         action.get_action_result_event_seen_subtype(),\n        //         action.get_action_result_event_seen_radius()\n        //     );\n        //];\n\n\n        // APPLY EFFECTS ON SELF\n        let mut result_energy = energy;\n        let mut result_coords = coords[0];\n        let mut result_progress = actor_progress;\n        let mut result_is_hidden = actor_is_hidden;\n        let mut result_is_visible = actor_is_in_view_range;\n        let mut result_damage_mod = actor_damage_mod;\n        let mut result_health = actor.get_health();\n        let mut result_status = actor_status;\n\n\n        // let energy = std::wrapping_sub(energy, action.get_action_req_energy());\n        // let status = actor_progress as u32 * action.get_action_result_status_multiplier() as u32 + action.get_action_result_status_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { status <= MAX_STATUS as u32 }, quote { f\"Invalid result status: {status} > {MAX_STATUS}\" });\n\n        // let final_coords = coords[action.get_action_move_to_target() as u8];\n        // // debug!(quote { println(f\"final_coords:{final_coords}\"); });\n        // let is_hidden = ((c.is_hidden == 1) & !action.get_action_result_effect_removes_status_hidden()) | action.get_action_result_effect_sets_status_hidden();\n        // let is_visible = !is_hidden & is_visible(enemy_advance, final_coords.0);\n        // 200 gates\n        apply_action_result_effects!(quote { action_def });\n\n// let result_coord_src = action_def[6] as u8;\n// let result_coord_src_fixed = result_coord_src & 4 as u8;\n// let result_coord = result_coord_src_fixed != 0 as u8;\n// let result_coord_cast = result_coord as u8;\n// println(f\"result coords: {result_coord_src} {result_coord_src_fixed} {result_coord} {result_coord_cast}\");\n// result_coords = coords[((action_def[6]as u8 / 4 as u8) == 1 as u8)as u8];\n        // let target_coords = [\n        //     (target_x, target_y),\n        //     (c.get_target_x(), c.get_target_y())\n        // ];\n\n        // actor.x = result_coords.0;\n        // actor.y = result_coords.1;\n        // actor.progress = result_progress;\n        // actor.is_hidden = result_is_hidden as u1;\n        // actor.has_been_seen = result_is_visible;\n        // actor.last_action = is_not_interrupted as u8 * actor.get_last_action() + (!is_not_interrupted) as u8 * action_type;\n        // actor.target_x = is_not_interrupted as u8 * actor.get_target_x() + (!is_not_interrupted) as u8 * action_target_x;\n        // actor.target_y = is_not_interrupted as u8 * actor.get_target_y() + (!is_not_interrupted) as u8 * action_target_y;\n        // actor.damage_mod = result_damage_mod;\n        // actor.health = result_health;\n        // actor.status = result_status;\n\n        (\n            is_valid,\n            if result_is_visible { events.get_unchecked(SEEN_EVENT_IDX) } else { events.get_unchecked(UNSEEN_EVENT_IDX) },//events[1 + (is_visible as u8)],\n            events.get_unchecked(WORLD_EVENT_IDX),\n            events.get_unchecked(SELF_EVENT_IDX),//events[get_action_unseen_event_is_internal(action_def) as u8],\n            Character {\n                id: actor_id,\n                x: result_coords.0,\n                y: result_coords.1,\n                progress: result_progress, // status as u8,\n                is_hidden: result_is_hidden as u1, //is_hidden as u1,\n                has_been_seen: result_is_visible, //is_visible,\n                last_action: is_not_interrupted as u8 * actor.get_last_action() + (!is_not_interrupted) as u8 * action_type,\n                target_x: is_not_interrupted as u8 * actor.get_target_x() + (!is_not_interrupted) as u8 * action_target_x, // if is_not_interrupted { c.get_target_x() } else { get_action_target_x(action) };\n                target_y: is_not_interrupted as u8 * actor.get_target_y() + (!is_not_interrupted) as u8 * action_target_y,\n                class: actor.class,\n                damage_mod: result_damage_mod,\n                health: result_health,\n                status: result_status,\n                actions: actor.actions,\n            },\n            result_energy\n        )\n\n        // if get_action_type(action) == SNEAK {\n        //     //assert(c.can_sneak());\n        //     if !can_sneak { let actor_id = c.id; println(f\"Failed to execute action: Character {actor_id} cannot sneak\"); }\n        //     //assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     //assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_sneak() & can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);  \n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_sneak();\n        // }\n        // if get_action_type(action) == MOVE {\n        //     // assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);\n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_move();\n        //     result_char.has_been_seen = is_visible(enemy_advance, result_char.x);\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_MOVE, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        // }\n        // if get_action_type(action) == RITUAL {\n        //     //assert(c.can_ritual());\n        //     // result_valid = c.can_ritual();\n        //     result_char.status += 1;\n        //     if result_char.status >= RITUAL_ROUNDS_FOR_WIN {\n        //         result_event = build_std_event(WIN, c.id, 0, 0);\n        //     } else {\n        //         result_event = build_std_event(SEE_RITUAL, c.id, 0, 0);\n        //     }\n        //     required_energy = c.get_energy_per_ritual();\n        // }\n        // if get_action_type(action) == SEARCH {\n        //     // assert(c.can_search());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_search() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(SEE_SEARCH_TRAP, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_search();\n        // }\n        // if get_action_type(action) == ATTACK {\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_MELEE), ATTACK_MELEE);\n        //     required_energy = c.get_energy_per_attack();\n        // }\n        // // TODO: global SET_TRAP = 6 as u8;\n        // if get_action_type(action) == CAST_FIREBALL {\n        //     // assert(c.can_cast_fireball());\n        //     result_char.status += 1;\n        //     // assert(result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     // result_valid = c.can_cast_fireball() & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     if result_char.status >= FIREBALL_ROUNDS_FOR_CAST {\n        //         // TODO: handle friendly fire and destruction of own walls and own traps\n        //         result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_FIREBALL), ATTACK_FIREBALL);\n        //     } else {\n        //         if c.get_has_been_seen() {\n        //             result_event = build_subtype_value_event(SEE_CAST, c.id, get_action_target_x(action), get_action_target_y(action), 0, ATTACK_FIREBALL);\n        //         }\n        //     }\n        //     required_energy = c.get_energy_per_cast();\n        // }\n        // if get_action_type(action) == DRAW {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     // result_valid = c.can_shoot() & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     result_char.status += 1;\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_DRAW, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        //     required_energy = c.get_energy_per_draw();\n        // }\n        // if get_action_type(action) == SHOOT {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = c.can_shoot() & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     // TODO: check distance! abs(c.x - get_action_target_x(action)) + abs(c.y - get_action_target_y(action)) <= c.get_shoot_range()\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_RANGED), ATTACK_RANGED);\n        //     required_energy = c.get_energy_per_shoot();\n\n        // }\n        // // TODO: SET_TRAP\n        // if get_action_type(action) == DISARM_TRAP {\n        //     // assert(c.can_disarm());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_disarm() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(DESTROY, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_disarm();\n        // }\n        \n        // // assert(energy >= required_energy);\n        // let result_valid = is_valid & (energy >= required_energy);\n        // if result_valid {\n        //     energy -= required_energy;\n        // }\n        // // energy -= required_energy;\n        // (result_valid, result_event, result_char, energy)\n    }\n//}\n\n//global test_actions: [TestActionDefinition; 1] = [\n    // build_test_action_def!(build_wait_action_def(), quote { 0, 1, 3, 4 }),\n    //TestActionDefinition { register: build_test_action_def!(build_wait_action_def()), action: new_action(0, 1, 3, 4) },\n    // build_move_action(class_energy_per_move[ARCHER]),\n    //     build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n    //     build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n    //     build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n    //     build_wait_action_def(),\n    //     ,\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[RITUALIST]),\n    //     build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n    //     build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n    //     build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[ROGUE]),\n    //     build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n    //     build_sneak_action(class_energy_per_sneak[ROGUE]),\n    //     build_search_action(class_energy_per_search[ROGUE], 1),\n    //     build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n    //     build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[KNIGHT]),\n    //     build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[MAGE]),\n    //     build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n    //     build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n    //     build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n    //     build_wait_action_def(),\n    //     build_wait_action_def()\n    // ]\n// ]\n\n// pub fn create_test_action(action: Action) -> TestActionDefinition {\n//     TestActionDefinition {\n//         register: \n//     }\n// }\n\n// pub struct TestActionDefinition {\n//     pub register: [u8; ACTION_DEFINITION_SIZE],\n//     pub action: Action,\n// }\n\n// impl ResolvedAction for TestActionDefinition {\n//     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n//     }\n//     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n//     }\n//     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n//     }\n//     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n//     }\n//     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_MAX_RANGE]\n//     }\n//     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MIN_STATUS]\n//     }\n//     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MAX_STATUS]\n//     }\n//     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDED_ENERGY]\n//     }\n//     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_EVENT_IS_TRAP] == 1\n//     }\n//     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n//     }\n//     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n//         self.register[ACTION_MOVE_TO_TARGET] as u1\n//     }\n//     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_IS_CONTINUOUS] == 1\n//     }\n//     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n//     }\n\n//     fn get_action_target_x(self) -> u8 {\n//         get_action_target_x(self.action)\n//     }\n//     fn get_action_target_y(self) -> u8 {\n//         get_action_target_y(self.action)\n//     }\n//     fn get_action_type(self) -> u8 {\n//         get_action_type(self.action)\n//     }\n// }\n\n#[test]\nfn test_execute_action() {\n  // global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder = get_arena_action_def_builder();\n    let action_def = arena_action_def_builder.build_move_action(4); //, quote { 1, 2, 3, 4 }; //new_action(1, 2, 3, 4);\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let action = new_action(1, 2, 3, 4);\n    let their_advance = 30;\n    let mut actions = [[0; 32]; MAX_ACTIONS_PER_CHARACTER + 1];\n    actions[1] = action_def;\n    let actor = Character {\n        id: 2,\n        x: 2,\n        y: 4,\n        target_x: 0,\n        target_y: 0,\n        health: MAX_HEALTH,\n        damage_mod: 1,\n        last_action: WAIT,\n        class: MAGE,\n        is_hidden: 0 as u1,\n        has_been_seen: true,\n        progress: 0,\n        status: 0,\n        actions: actions\n    };\n    let energy = 15;\n    let my_obstacles = get_default_obstacles(0);\n    let (no_obstacle_valid, no_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, MAX_HEALTH, 0);\n    let mut mco: [Obstacle] = &[];\n    for i in 0..MAX_CHARACTERS {\n      let (co_valid, co) = new_obstacle(i as u8, i as u8, HEIGHT - 1, MAX_HEALTH, i as u8 + 1);\n      assert(co_valid);\n      mco = mco.push_back(co);\n    }\n    assert(no_obstacle_valid);\n    let their_obstacles = get_default_obstacles(1).as_slice().push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle);\n    let (valid, event, _, internal_event, c, result_energy) = execute_action(\n        action,\n        their_advance,\n        actor,\n        energy,\n        mco.as_array(),\n        my_obstacles,\n        their_obstacles.as_array()\n    );\n    assert(valid, \"valid\");\n    assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n    assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n    assert(event.x == get_action_target_x(action), f\"{event}.target_x is not action target x\");\n    assert(event.y == get_action_target_y(action), f\"{event}.target_y is not action target y\");\n    assert(c.x == event.x, f\"{c}.x is not event {event}.x\");\n    assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n    assert(result_energy == 11, f\"{result_energy} != 11\");\n}\n\n\n\npub fn parse_actions(fields: [Field; SERIALIZED_ACTIONS_ARRAY_SIZE]) -> [Action; MAX_ACTIONS] {\n    comptime {\n        assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n        assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n        assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n    }\n\n    let mut actions: [Action] = &[];\n    for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n        let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n        //assert(split.len() == 32);\n        for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n            let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n            actions = actions.push_back(new_action(\n                split[offset],\n                split[offset + 1],\n                split[offset + 2],\n                split[offset + 3],\n            ));\n            /*Action {\n                action: split[offset],\n                actor: split[offset + 1],\n                target_x: split[offset + 2],\n                target_y: split[offset + 3],\n            }*/\n        }\n    }\n    actions.as_array()\n}\n\nglobal H: u32 = HEIGHT as u32;\nglobal W: u32 = WIDTH as u32;\n/**\n* Warning: This function can throw!!!\n*/\n// pub fn serialize_actions(actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n//     comptime {\n//         assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n//         assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n//         assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n//     }\n\n//     assert(actions.len() <= MAX_ACTIONS);\n\n//     let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, 0, 0, 0); MAX_ACTIONS];\n//     for i in 0..actions.len() {\n//         actions_stuffed[i] = actions[i];\n//     }\n\n//     let mut fields: [Field] = &[];\n//     for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n//         let mut data: [u8; 32] = [0; 32];\n//         for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n//             let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n//             let action = actions_stuffed[index];\n//             let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n//             data[offset] = get_action_type(action);\n//             data[offset + 1] = get_action_actor(action);\n//             data[offset + 2] = get_action_target_x(action);\n//             data[offset + 3] = get_action_target_y(action);\n//         }\n//         fields = fields.push_back(std::field::bytes32_to_field(data));\n//     }\n//     fields.as_array()\n// }\n\n#[export]\npub fn get_performable_actions(actor: Character,\n    enemy_advance: u8, energy: u8,\n    my_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES],\n    their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]\n    // action_type: u8\n) -> pub [[Field; H]; MAX_ACTIONS_PER_CHARACTER + 1] {\n  // assert(action_type as u32 <= (MAX_ACTIONS_PER_CHARACTER + 1));\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n  let mut result = [[0; H]; MAX_ACTIONS_PER_CHARACTER + 1];\n\n  let actor_id = actor.get_id();\n  let actor_x = actor.get_x();\n  let actor_y = actor.get_y();\n  let actor_target_x = actor.get_target_x();\n  let actor_target_y = actor.get_target_y();\n  let actor_last_action = actor.get_last_action();\n\n  let actor_is_in_view_range = is_visible(enemy_advance, actor_x);\n  let map = get_free_map(my_obstacles, their_obstacles);\n\n  for action_target_y in 0..HEIGHT {\n    let mut row = [[0 as u8; W]; MAX_ACTIONS_PER_CHARACTER + 1];\n    // let dy = get_distance_part(actor.get_y(), action_target_y);\n    for action_target_x in 0..WIDTH {\n      let distance = get_distance(actor.get_x(), actor.get_y(), action_target_x, action_target_y);\n      // let dx = get_distance_part(actor.get_x(), action_target_x);\n      // let distance = get_distance_from_parts(dx, dy);\n      //let could_move_to_target = can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles);\n      let could_move_to_target = is_distance_within_viewing_range(distance) & (0 == map[action_target_x][action_target_y]);\n      for action_type in 0..(MAX_ACTIONS_PER_CHARACTER + 1) {\n        let mut is_valid = true;\n        let mut actor_progress = actor.get_progress();\n        let mut actor_is_hidden = actor.get_is_hidden() == 1;\n        let mut is_not_interrupted = true;\n        let mut actor_damage_mod = actor.get_damage_mod();\n        let mut actor_status = actor.get_status();\n        let action_def = actor.actions[action_type];\n        apply_action_pre_calc_effects!(quote { action_def });\n    //        action_def_def(quote { pre_calc_effect_continues_action }, 3, |continued_action|quote { let continues_action: bool = $continued_action as u8 == actor_last_action; }),\n    // action_def_def(quote { pre_calc_effect_is_continuous }, 1, |is_continuous|quote { let is_continuous: bool = $is_continuous as bool; }),\n    // action_def_def(quote { pre_calc_effect_interrupts }, 1, |is_interrupting|quote { let is_interrupting: bool = $is_interrupting as bool; }),\n    // action_def_def(quote { pre_calc_effect_allow_retargeting }, 1, |allows_retargetting|quote { let not_interrupted_through_retargeting: bool = $allows_retargetting as bool | ((action_target_x == actor_target_x) & (action_target_y == actor_target_y)); })\n\n        validate_action_requirements!(quote { is_valid }, quote { action_def });\n        let coords = [\n            (actor_x, actor_y),\n            (action_target_x, action_target_y),\n            (NOWHERE, NOWHERE),\n        ];\n        // let mut result_energy = energy;\n        // let mut result_coords = coords[0];\n        // let mut result_progress = actor_progress;\n        // let mut result_is_hidden = actor_is_hidden;\n        // let mut result_is_visible = actor_is_in_view_range;\n        // let mut result_damage_mod = actor_damage_mod;\n        // let mut result_health = actor.get_health();\n        // let mut result_status = actor_status;\n        //apply_action_result_effects!(quote { action_def });\n        row[action_type][action_target_x] = is_valid as u8;\n      }\n    }\n    for action_type in 0..(MAX_ACTIONS_PER_CHARACTER + 1) {\n      result[action_type][action_target_y] = std::field::bytes32_to_field(row[action_type]);\n    }\n  }\n\n  result\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/action.nr"},"72":{"source":"\nuse arenalib::ARCHER;\nuse arenalib::KNIGHT;\nuse arenalib::MAGE;\nuse arenalib::RITUALIST;\nuse arenalib::ROGUE;\nuse arenalib::WIDTH;\nuse arenalib::HEIGHT;\nuse arenalib::{ CLASS_COUNT, PROGRESS_COUNT };\nuse arenalib::{ WAIT }; //, ATTACK_MELEE, ATTACK_FIREBALL, ATTACK_RANGED, MAX_FIREBALL_ROUNDS_FOR_CAST, MIN_FIREBALL_ROUNDS_FOR_CAST, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES, MAX_ACTIONS_PER_CHARACTER };\nuse arenalib::{ WIDTH_MASK, HEIGHT_MASK, CLASS_MASK, PROGRESS_MASK };\nuse arenalib::{ WIDTH_BITS, HEIGHT_BITS, CLASS_BITS, PROGRESS_BITS };\nuse crate::event::Event;\nuse crate::map::is_visible;\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::new_obstacle;\nuse skplg::{NOWHERE, debug, softassert};\nuse arenalib::{ActionDefinition};\nuse arenalib::{SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, SerializedArenaCharacterActionDefinitions, SerializedArenaCharacterActionDefinition};\n// use arenalib::{TRAP, ADD_OBSTACLE, WIN_BY_RITUAL, RITUAL_ROUNDS_FOR_WIN};\nuse arenalib::get_test_action_register;\nuse crate::event::{build_subtype_value_event, serialize_events};\nuse arenalib::NO_EVENT;\nuse arenalib::get_wait_action_def;\n\n\npub global SERIALIZED_CHARACTER_BYTES: u32 = 6;\npub type SerializedCharacter = [u8; SERIALIZED_CHARACTER_BYTES];\n\n// use skplam::{build_wait_action_def, build_shoot_action, build_draw_action, build_move_action, build_attack_action, build_cast_action, build_evocation_action, build_search_action, build_set_trap_action, build_sneak_action, build_ritual_action, build_disarm_trap_action};\n\n// this should be more efficient: for all the following: order is: UNKNOWN_CLASS, ARCHER, RITUALIST, ROGUE, KNIGHT, MAGE\nglobal class_damage_melee: [u8; 6] = [ 0, 32, 8, 24, 40, 16 ];\nglobal class_damage_ranged: [u8; 6] = [ 0, 24, 40, 16, 32, 8 ];\nglobal class_damage_fireball: [u8; 6] = [ 0, 0, 100, 50, 0, 100 ];\nglobal class_damage: [[u8; 6]; 3] = [ class_damage_melee, class_damage_ranged, class_damage_fireball ];\nglobal class_energy_per_attack: [u8; 6] = [ 0, 7, 7, 7, 6, 7 ];\nglobal class_energy_per_cast: [u8; 6] = [ 0, 255, 12, 255, 255, 6 ];\nglobal class_energy_per_disarm: [u8; 6] = [ 0, 255, 255, 12, 255, 255 ];\nglobal class_energy_per_move: [u8; 6] = [ 0, 3, 4, 3, 4, 4 ];\nglobal class_energy_per_ritual: [u8; 6] = [ 0, 255, 12, 255, 255, 255 ];\nglobal class_energy_per_search: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_sneak: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_draw: [u8; 6] = [ 0, 9, 255, 255, 255, 255 ];\nglobal class_energy_per_shoot: [u8; 6] = [ 0, 6, 255, 255, 255, 255 ];\nglobal resistances: [u16; 8 * 3] = [\n     0,  75, 100, 85,  50, 100, 20,  0, //,  255, 255, 0, 0, 0, 255, 255, 255 ], // Melee vs dummy, archer, ritualist, thief, knight, mage, wall, water, unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n     0,  80, 100, 90,  25, 100,  5,  0, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Ranged vs dummy, archer, ritualist, thief, knight, mage, wall, water\n     0,  80, 100, 90, 100,  90, 60, 50, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Fireball vs dummy, archer, ritualist, thief, knight, mage, wall, water\n];\n\nglobal trap_resistances: [u16; 8] = [ 0,  75, 100, 50,  75, 90, 5, 0]; //,  255, 255, 255, 255, 255, 255, 255, 255 ]; // Trap vs dummy, archer, ritualist, thief, knight, mage\n\n\n//global x: ActionDefinition = build_set_trap_action(1 as u8, 1 as u8);\n// TODO: move to character!\n// global ARCHER: u8 = 1;    WAIT, MOVE, ATTACK, DRAW, SHOOT\n// global RITUALIST: u8 = 2; WAIT, MOVE, ATTACK, CAST, RITUAL\n// global ROGUE: u8 = 3;     WAIT, MOVE, ATTACK, SNEAK, SEARCH, DISARM_TRAP, SET_TRAP\n// global KNIGHT: u8 = 4;    WAIT, MOVE, ATTACK\n// global MAGE: u8 = 5;      WAIT, MOVE, ATTACK, CAST, CAST_FIREBALL\n// global ACTION_DEFINITIONS: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER * CLASS_COUNT] = [\n//     // [[0 as u8; ACTION_DEFINITION_SIZE]; MAX_ACTIONS_PER_CHARACTER], // 0 for no action\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n    \n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ARCHER]),\n//         build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//         build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//         build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[RITUALIST]),\n//         build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//         build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//         build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ROGUE]),\n//         build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//         build_sneak_action(class_energy_per_sneak[ROGUE]),\n//         build_search_action(class_energy_per_search[ROGUE], 1),\n//         build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[KNIGHT]),\n//         build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[MAGE]),\n//         build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//         build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//         build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n//         WAIT_ACTION,\n//         WAIT_ACTION\n//     // ]\n// ];\n// global \n// pub fn get_test_action_register() -> [u8; ACTION_DEFINITION_REGISTER_SIZE] {\n//     build_action_def_reg!([\n//         [\n//             build_move_action(class_energy_per_move[ARCHER]),\n//             build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//             build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//             build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[RITUALIST]),\n//             build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//             build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//             build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[ROGUE]),\n//             build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//             build_sneak_action(class_energy_per_sneak[ROGUE]),\n//             build_search_action(class_energy_per_search[ROGUE], 1),\n//             build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//             build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[KNIGHT]),\n//             build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[MAGE]),\n//             build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//             build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//             build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST),\n//             build_wait_action_def(),\n//             build_wait_action_def()\n//         ]\n//     ])\n// }\n// pub fn get_test_action_register() -> SerializedArenaActionDefinitions {\n//   let action_builder = arena_action_def_builder;\n//      [\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER)),\n//             std::field::bytes32_to_field(action_builder.build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT)), // arche),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n            \n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST, 255)),\n//             std::field::bytes32_to_field(action_builder.build_ritual_action(3, class_energy_per_ritual[RITUALIST], RITUAL_ROUNDS_FOR_WIN, WIN_BY_RITUAL)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_sneak_action(class_energy_per_sneak[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_search_action(class_energy_per_search[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_set_trap_action(class_energy_per_disarm[ROGUE], 1, ADD_OBSTACLE, TRAP)),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[KNIGHT])),\n//            std::field::bytes32_to_field( action_builder.build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT])),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[MAGE], MAGE, 7)),\n//             std::field::bytes32_to_field(action_builder.build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def())\n//         ]\n// }\n\n// struct CharacterClass {\n//     class: u8,\n//     damage: u8,\n//     energy_per_attack: u8,\n//     energy_per_cast: u8,\n//     energy_per_disarm: u8,\n//     energy_per_move: u8,\n//     energy_per_ritual: u8,\n//     energy_per_search: u8,\n//     energy_per_sneak: u8,\n// }\n\npub struct Character {\n    pub id: u8,\n    pub x: u8, // 5 bit\n    pub y: u8, // 4 bit\n    pub class: u8, // 3 bit\n    pub progress: u8, // 0 = idle, 1-15 = continuing action => 4 bit\n    pub health: u8,\n    pub has_been_seen: bool,\n    pub is_hidden: u1,\n    pub target_x: u8,\n    pub target_y: u8,\n    pub damage_mod: u8,\n    pub last_action: u8,\n    pub status: u8,\n    // pub wait_action: ActionDefinition,\n    pub actions: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1], // BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER>,\n}\n\n// pub fn resolve_action(action: u8, class: u8) -> ActionDefinition {\n//     let mut idx = class as u32 * MAX_ACTIONS_PER_CHARACTER + action as u32;\n//     if idx >= (ACTION_DEFINITIONS.len()) {\n//         idx = 0;\n//     }\n//     // assert(action as u32 < MAX_ACTIONS_PER_CHARACTER);\n//     // assert(class as u32 < CLASS_COUNT);\n//     ACTION_DEFINITIONS[idx]\n// }\n//     pub fn resolve_action(action: Action) -> ActionDefinition {\n//         // let idx = get_action_base_index(self.get_id(), action);\n//         ActionDefinition::new(action, ACTION_DEFINITIONS)\n// //        (idx, ACTION_DEFINITIONS)\n//         //resolve_action(action, self.class)\n//         // let mut a = action as u32;\n//         // if a >= self.actions.len() { a = 0; }\n//         // self.actions[a] //.get_unchecked(a)\n//     }\n//global wait_action: ActionDefinition = buld_wait_action_def();\n\n// global wait_action: ActionDefinition = action_builder.build_wait_action_def();\n\nimpl Character {\n    // pub fn new(id: u8 x: u8, y: u8, class: u8, status: u8, health: u8, has_been_seen: u8)\n    /// May throw\n\n\n    pub fn get_id(self) -> u8 {\n        self.id\n    }\n\n    pub fn get_x(self) -> u8 {\n        self.x\n    }\n\n    pub fn get_y(self) -> u8 {\n        self.y\n    }\n\n    pub fn get_class(self) -> u8 {\n        self.class\n    }\n\n    pub fn get_progress(self) -> u8 {\n        self.progress\n    }\n\n    pub fn get_status(self) -> u8 {\n        self.status\n    }\n\n    pub fn get_health(self) -> u8 {\n        self.health\n    }\n\n    pub fn get_has_been_seen(self) -> bool {\n        self.has_been_seen\n    }\n\n    pub fn get_target_x(self) -> u8 {\n        self.target_x\n    }\n\n    pub fn get_target_y(self) -> u8 {\n        self.target_y\n    }\n\n    pub fn get_is_hidden(self) -> u1 {\n      self.is_hidden\n    }\n\n    pub fn get_damage_mod(self) -> u8 {\n      self.damage_mod\n    }\n\n    pub fn get_action(self, action_idx: u8) -> (bool, ActionDefinition) {\n      /*if action_idx == 0 {\n        (true, self.wait_action)\n      } else */if action_idx <= MAX_ACTIONS_PER_CHARACTER as u8 {\n        (true, self.actions[action_idx])\n      } else {\n        (false, self.actions[0])\n      }\n    }\n\n    // pub fn get_energy_per_attack(self) -> u8 {\n    //     class_energy_per_attack[self.class]\n    // }\n\n    // pub fn get_energy_per_cast(self) -> u8 {\n    //     class_energy_per_cast[self.class]\n    // }\n\n    // pub fn get_energy_per_disarm(self) -> u8 {\n    //     class_energy_per_disarm[self.class]\n    // }\n\n    // pub fn get_energy_per_move(self) -> u8 {\n    //     class_energy_per_move[self.class]\n    // }\n\n    // pub fn get_energy_per_ritual(self) -> u8 {\n    //     class_energy_per_ritual[self.class]\n    // }\n\n    // pub fn get_energy_per_search(self) -> u8 {\n    //     class_energy_per_search[self.class]\n    // }\n\n    // pub fn get_energy_per_sneak(self) -> u8 {\n    //     class_energy_per_sneak[self.class]\n    // }\n\n    // pub fn get_energy_per_draw(self) -> u8 {\n    //     class_energy_per_draw[self.class]\n    // }\n\n    // pub fn get_energy_per_shoot(self) -> u8 {\n    //     class_energy_per_shoot[self.class]\n    // }\n\n    // pub fn get_damage(self, attack_type: u8) -> u8 {\n    //     self.damage_mod + class_damage[attack_type][self.class]\n    // }\n\n    pub fn get_last_action(self) -> u8 {\n      self.last_action\n    }\n\n    // pub fn can_sneak(self) -> bool {\n    //     class_energy_per_sneak[self.class] != 255\n    // }\n\n    // pub fn can_ritual(self) -> bool {\n    //     class_energy_per_ritual[self.class] != 255\n    // }\n\n    // pub fn can_cast_fireball(self) -> bool {\n    //     class_energy_per_cast[self.class] != 255\n    // }\n\n    pub fn can_shoot(self) -> bool {\n        self.class == ARCHER\n    }\n    // pub fn can_disarm(self) -> bool {\n    //     class_energy_per_disarm[self.class] != 255\n    // }\n\n    // pub fn can_search(self) -> bool {\n    //     class_energy_per_search[self.class] != 255\n    // }\n\n    fn is_pos_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_target_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_class_valid(class: u8) -> bool { class as u32 <= CLASS_COUNT }\n    fn is_status_valid(status: u8) -> bool { status < PROGRESS_COUNT }\n\n    pub fn is_valid(self) -> bool {\n        Character::is_pos_valid(self.x, self.y) &\n        Character::is_target_valid(self.target_x, self.target_y) &\n        Character::is_class_valid(self.class) &\n        Character::is_status_valid(self.progress)\n    }\n\n    pub fn serialize(self) -> (SerializedCharacter, SerializedArenaCharacterActionDefinitions) {\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n        assert(self.is_valid());\n        let packed_x = self.x + (self.class << WIDTH_BITS);\n        let packed_y = self.y + (self.progress << HEIGHT_BITS);\n        let packed_target_x = (self.target_x & WIDTH_MASK) + ((self.is_hidden as u8) << WIDTH_BITS);\n        let packed_target_y = (self.target_y & HEIGHT_MASK) + ((self.last_action as u8) << HEIGHT_BITS);\n\n        // let serialized_action_defs = self.actions.map(|a|std::field::bytes32_to_field(a));\n        let serialized_action_defs = [\n          std::field::bytes32_to_field(self.actions[1]),\n          std::field::bytes32_to_field(self.actions[2]),\n          std::field::bytes32_to_field(self.actions[3]),\n          std::field::bytes32_to_field(self.actions[4]),\n          std::field::bytes32_to_field(self.actions[5]),\n          std::field::bytes32_to_field(self.actions[6])\n        ];\n        \n        ([packed_x, packed_y, self.health, packed_target_x, packed_target_y, self.damage_mod], serialized_action_defs)\n    }\n\n    pub fn to_obstacle(self) -> (bool, Obstacle) {\n        comptime {\n            assert(MAX_CHARACTERS < (255 - MAX_OBSTACLES));\n        }\n        assert(self.is_valid());\n        new_obstacle(self.id + (MAX_OBSTACLES as u8), self.x, self.y, self.health, self.class)\n        // Obstacle {\n        //     id: self.id + (MAX_CHARACTERS as u8),\n        //     x: self.x,\n        //     y: self.y,\n        //     obstacle_type: self.class,\n        //     health: self.health,\n        //     //was_alive: \n        // }\n    }\n\n    pub fn move(self, x: u8, y: u8) -> Character {\n        let mut c = self;\n        c.x = x;\n        c.y = y;\n        c\n    }\n\n    pub fn take_damage(self, attack_type: u8, dmg: u8) -> Character {\n        let damage_after_resistances = get_attack_damage_to_tile(attack_type, dmg as u32, self.class);\n        let mut c = self;\n        if damage_after_resistances > (c.health as u32) {\n            c.health = 0;\n        } else {\n            c.health -= (damage_after_resistances as u8);\n        }\n        c\n    }\n\n    pub fn set_status(self, status: u8) -> Character {\n        assert(status < PROGRESS_COUNT);\n        let mut c = self;\n        c.progress = status;\n        c\n    }\n\n    pub fn create_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n        // let mut actions: BoundedVec<ActionDefinition, 6> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..6 {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions.push(ACTION_DEFINITIONS[idx + i]);\n        //     }\n        // }\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: 0,\n            health: 0,\n            has_been_seen: false,\n            is_hidden: 0,\n            target_x: 255,\n            target_y: 255,\n            damage_mod: 0,//: class_damage[class],\n            last_action: WAIT,\n            status: 0, // TODO: status\n            actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1]// BoundedVec::new()\n        };\n        assert(c.is_valid());\n        c\n    }\n\n    pub fn parse(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool, Character) {\n        // these asserts could be disabled for production\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n\n      let (is_valid, c) = parse_unconstrained(id, data, actions_data, wait_action, events, enemy_advance);\n      // assert(c.)\n\n        assert(c.is_valid());\n        (is_valid, c)\n    }\n}\n\nfn parse_unconstrained(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool,Character) {\n          let mut is_valid = true;\n\n        let split: [u8; 32] = data.to_be_bytes::<32>();\n        assert(split.len() == 32);\n        let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n        let y_packed = split[2 + id * 6 + 1]; // 4 bit y, 4 bit status\n        let mut health = split[2 + id * 6 + 2] as u16;\n        let target_x_packed = split[2 + id * 6 + 3]; // 5 bit target x, 1 bit hidden, 1 bit has target, 1 bit unused\n        let target_y_packed = split[2 + id * 6 + 4]; // 4 bit target y, 4 bit last action\n        let damage_mod = split[2 + id * 6 + 5]; // last byte: for the moment, use to save damage_mod (buffs, etc)\n\n        let x = x_packed & WIDTH_MASK;\n        let y = y_packed & HEIGHT_MASK;\n        let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n        if !Character::is_class_valid(class) {\n            debug!(quote { println(f\"Invalid class {class}\"); });\n            class = 0;\n            is_valid = false;\n        }\n\n        let progress = (y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n        softassert!(quote { is_valid }, quote { Character::is_status_valid(progress) }, quote { f\"Invalid status {progress} during character parsing {id}\" });\n\n        let target_x = target_x_packed & WIDTH_MASK;\n        let target_y = target_y_packed & HEIGHT_MASK;\n        let last_action = (target_y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n\n        let is_visible = is_visible(enemy_advance, x); //((target_x_packed >> 5) & 1) as u1;\n        let is_hidden = ((target_x_packed >> WIDTH_BITS) & 1) as u1;\n\n        let mut damage: u16 = 0;\n        for i in 0..MAX_EVENTS {\n            let event = events[i];\n            damage += event.get_applied_damage_to_my_asset(x, y, class);\n            // if events[i].actor_id == id {\n            //     let event = events[i];\n            //     if event.actor_id == id {\n            //         damage += event.get_applied_damage_to_my_asset(x, y, class);\n            //     }\n            // }\n        }\n        if damage > health {\n            health = 0;\n        } else {\n            health -= damage;\n        }\n\n        // let mut actions = [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]; //: BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..MAX_ACTIONS_PER_CHARACTER {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions[i] = ACTION_DEFINITIONS[idx + i];\n        //     }\n        // }\n\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: progress,\n            health: health as u8,\n            has_been_seen: is_visible, // TODO \n            is_hidden: is_hidden,\n            target_x: target_x,\n            target_y: target_y,\n            damage_mod: damage_mod,\n            last_action: last_action,\n            actions: [\n              wait_action,\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 1].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 2].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 3].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 4].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 5].to_be_bytes::<32>()\n            ],\n            status: 0 // TODO: status\n        };\n        (is_valid, c)\n}\n\n// unconstrained fn create_character_unconstrained(\n//   id: u8,\n//   x: u8,\n//   y: u8,\n//   class: u8,\n//   progress: u8,\n//   health: u8,\n//   has_been_seen: u8\n// )\n\nfn select_action_defs_of_character(actions: SerializedArenaActionDefinitions, char_id: u32) -> [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1] {\n  let mut result: [SerializedArenaCharacterActionDefinition] = &[std::field::bytes32_to_field(get_wait_action_def())];\n  let offset = char_id * MAX_ACTIONS_PER_CHARACTER;\n  for i in 0..MAX_ACTIONS_PER_CHARACTER {\n    result = result.push_back(actions[offset + i]);\n  }\n  result.as_array().map(|f|f.to_be_bytes())\n}\n\npub fn get_default_characters(side: u8) -> [Character; MAX_CHARACTERS] {\n    assert(side < 2, f\"Side is too large {side}\");\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let default_actions = get_test_action_register();\n\n    let x = |x| x * ((side + 1) % 2) + (WIDTH - 1 - x) * side;\n    [\n        Character { id: 0, x: x(2), y: 2, class: ARCHER, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 1), status: 0 },\n        Character { id: 1, x: x(2), y: 3, class: RITUALIST, health: 60, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 2), status: 0 },\n        Character { id: 2, x: x(2), y: 4, class: ROGUE, health: 80, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 3), status: 0 },\n        Character { id: 3, x: x(2), y: 5, class: KNIGHT, health: 120, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 4), status: 0 },\n        Character { id: 4, x: x(2), y: 6, class: MAGE, health: 40, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 5), status: 0 },\n    ]\n}\n\n#[export]\npub fn parse_characters(data: SerializedArenaCharacterRoster, actions_data: SerializedArenaActionDefinitions, events: [Event; MAX_EVENTS], enemy_advance: u8) -> pub (bool, [Character; MAX_CHARACTERS]) {\n    comptime { assert(MAX_CHARACTERS == 5); }\n\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut is_valid = true;\n\n    let wait_action = get_wait_action_def();\n\n    // no need to optimize, compiler automatically rolls this out\n    // let mut result: [Character; MAX_CHARACTERS] = [Character::create_character(0, 0, 0, 0), Character::create_character(1, 0, 0, 0), Character::create_character(2, 0, 0, 0), Character::create_character(3, 0, 0, 0), Character::create_character(4, 0, 0, 0)];\n    // for i in 0..(MAX_CHARACTERS as u8) {\n    //     let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action, events, enemy_advance);\n    //     is_valid &= curr_valid;\n    //     result[i] = curr_c;\n    // }\n\n        let (curr_valid, curr_c0) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[0] = curr_c0;\n        let (curr_valid, curr_c1) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[1] = curr_c1;\n        let (curr_valid, curr_c2) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[2] = curr_c2;\n        let (curr_valid, curr_c3) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[3] = curr_c3;\n        let (curr_valid, curr_c4) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[4] = curr_c4;\n    let result = [curr_c0, curr_c1, curr_c2, curr_c3, curr_c4];\n    (is_valid, result)\n}\n\npub fn get_test_my_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 100,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\npub fn get_test_their_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 255,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\n#[test]\nfn test_serialize_character() {\n    let mut character = Character {\n        id: 4,\n        x: 21,\n        y: 9,\n        class: 5,\n        progress: 9,\n        health: 129,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 31,\n        target_y: 9,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    };\n    let (field, _) = character.serialize();\n    assert(field[0] == (21 | (5 << 5)));\n    assert(field[1] == (9 | (9 << 4)));\n    assert(field[2] == 129);\n    assert(field[3] == 31); // TODO: why?\n    assert(field[4] == 9);\n    assert(field[5] == 0);\n}\n\n#[test]\nfn test_parse_character() {\n    let dummy_events = Event::get_test_dummy_events();\n    let data_array: [u8; 32] = [\n        0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        191 as u8, 249 as u8, 255 as u8, 255 as u8, 9 as u8, 255 as u8,\n        181 as u8, 153 as u8, 129 as u8, 127 as u8, 9 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n    ];\n    let data: Field = std::field::bytes32_to_field(data_array);\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    println(data);\n    assert(data == 0xbff9ffff09ffb599817f0900000000000000, f\"Failed assumption: data: {data} != 0xbff9ffff09ffb599817f0900000000000000\");\n    let (character_valid, character) = Character::parse(3, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_valid);\n    assert(character.get_id() == 3);\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 9);\n    assert(character.get_class() == 5);\n    assert(character.get_progress() == 9);\n    assert(character.get_health() == 129);\n    assert(character.get_has_been_seen());\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n\n    let (character_max_valid, character_max) = Character::parse(2, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_max_valid);\n    assert(character_max.get_id() == 2);\n    assert(character_max.get_x() == 31);\n    assert(character_max.get_y() == 9);\n    assert(character_max.get_class() == 5);\n    assert(character_max.get_progress() == 15);\n    assert(character_max.get_health() == 255);\n    assert(character_max.get_has_been_seen());\n    assert(character_max.get_target_x() == 31);\n    assert(character_max.get_target_y() == 9);\n\n    let (character_min_valid, character_min) = Character::parse(0, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_min_valid);\n    assert(character_min.get_id() == 0);\n    assert(character_min.get_x() == 0);\n    assert(character_min.get_y() == 0);\n    assert(character_min.get_class() == 0);\n    assert(character_min.get_progress() == 0);\n    assert(character_min.get_health() == 0);\n    assert(character_min.get_has_been_seen() == false);\n    assert(character_min.get_target_x() == 0);\n    assert(character_min.get_target_y() == 0);\n}\n\n#[test]\nfn test_parse_character_as_in_game() {\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    let data: Field = 0x1602ff1f09001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00;\n    let (character_valid, character) = Character::parse(0, data, dummy_actions, wait_action, Event::get_test_dummy_events(), 20);\n    assert(character_valid);\n    assert(character.get_id() == 0);\n    assert(character.get_x() == 22, character.get_x());\n    assert(character.get_y() == 2, character.get_y());\n    assert(character.get_class() == 0, character.get_class());\n    assert(character.get_progress() == 0, character.get_progress());\n    assert(character.get_health() == 255);\n    assert(character.get_has_been_seen() == true);\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n}\n\n#[export]\npub fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> pub (Field, SerializedArenaActionDefinitions) {\n    let mut result: [u8; 32] = [0; 32];\n    let mut actions: SerializedArenaActionDefinitions = [0; 30]; //&[].as_array();\n    for i in 0..MAX_CHARACTERS {\n        let (serialized_char_bytes, serialized_actions) = chars[i].serialize();\n        for j in 0..6 {\n            result[2 + i * 6 + j] = serialized_char_bytes[j];\n        }\n        for k in 0..MAX_ACTIONS_PER_CHARACTER {\n          actions[i * MAX_ACTIONS_PER_CHARACTER + k] = serialized_actions[k];\n        }\n    }\n    \n    (std::field::bytes32_to_field(result), actions)\n}\n\n/**\n* For now we will only take class into account.\n*/\npub fn get_attack_damage_to_tile(attack_type: u8, damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * resistances[attack_type * 8 + (class & 7)] as u32 / 100) as u32\n}\n\npub fn get_trap_damage_to_tile(damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * trap_resistances[class & 7] as u32 / 100) as u32\n}\n\n#[test]\nfn test_parse_character_round0() {\n  // let actions_data = .map(|f|f.to_be_bytes::<32>()).map(|f|std::field::bytes32_to_field(f));\n  let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let enemy_advance = 0x00;\n  let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0)\n  ];\n  let serialized_events = serialize_events(events);\n   println(f\"events: {serialized_events}\");\n\n  let parsed = parse_characters(data, [\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071020100a000020100a00000020000000002000000000000000,\n    0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n    0x023100081b161118120a010018120a01000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071008100a000008100a00000020000000002000000000000000,\n    0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n    0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071018100a000018100a00000020000000002000000000000000,\n    0x09f0000130060c002000000000200000000020000000002000000000000000,\n    0xf00001100610001005000100100500010020000000002000000000000000,\n    0xf00001301c0100100d000000100d00000020000000002000000000000000,\n    0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110061028100a000028100a00000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071010100a000010100a00000020000000002000000000000000,\n    0xf000071b1611002000000000000705000020000000002000000000000000,\n    0x6300061b161164150a020164150a02010020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000\n], events, enemy_advance);\n\n  assert(parsed.0);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/character.nr"},"74":{"source":"use arenalib::{ NO_EVENT, SEE_MOVE, RECEIVE_ATTACK, TRIGGERED_TRAP }; //, SEE_RITUAL, SEE_CAST, SEE_DRAW, SEE_SEARCH_TRAP, FOUND_TRAP\n// use crate::{ EMPTY, WALL };\nuse arenalib::{ EVENT_COUNT };\nuse arenalib::{ ATTACK_FIREBALL };\nuse arenalib::{ SERIALIZED_EVENT_BYTE_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD };\nuse arenalib::{ WIDTH };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS }; //, MAX_TRAPS\nuse arenalib::SerializedArenaEvents;\n// use crate::TRAPS_BUFFER_MASK;\nuse crate::map::get_distance;\n// use crate::character::Character;\nuse crate::character::{ get_attack_damage_to_tile, get_trap_damage_to_tile };\nuse crate::map::their_x_to_mine;\nuse skplg::{ debug, softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD };\n\npub struct Event {\n    pub event: u8,\n    pub actor_id: u8,\n    pub subtype: u8,\n    pub x: u8,\n    pub y: u8,\n    pub value: u8,\n    pub radius: u8,\n}\n\n\n    #[export]\n    pub fn parse_their_events(fields: SerializedArenaEvents) -> pub (bool, [Event; MAX_EVENTS]) {\n        comptime {\n            assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENT_BYTE_SIZE <= 32);\n            assert(SERIALIZED_EVENTS_ARRAY_SIZE * SERIALIZED_EVENTS_PER_FIELD == MAX_EVENTS);\n            assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n        }\n\n        let mut valid = true;\n        let mut events: [Event; MAX_EVENTS] = [Event::empty(0); MAX_EVENTS];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let split: [u8; 32] = fields[i].to_be_bytes::<32>(); //.to_be_bytes<32>();\n            //assert(split.len() == 32);\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                let raw_x = split[offset + 2];\n                let (x_parsed_valid, x_parsed) = their_x_to_mine(raw_x);\n                softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to calculate their_x_to_mine: {raw_x}\" });\n                events[i * SERIALIZED_EVENTS_PER_FIELD + j] = Event {\n                    event: split[offset],\n                    actor_id: split[offset + 1],\n                    x: x_parsed,\n                    y: split[offset + 3],\n                    value: split[offset + 4],\n                    subtype: split[offset + 5],\n                    radius: split[offset + 6],\n                };\n            }\n        }\n        (valid, events)\n    }\n    \n    #[export]\n    pub fn serialize_events(events: [Event; MAX_EVENTS]) -> pub SerializedArenaEvents {\n        assert(events.len() == MAX_EVENTS);\n        assert(MAX_EVENTS % SERIALIZED_EVENTS_PER_FIELD == 0);\n        assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n\n        let mut fields: [Field] = &[];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let mut data: [u8; 32] = [0; 32];\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let index = i * SERIALIZED_EVENTS_PER_FIELD + j;\n                let event = events[index];\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                data[offset] = event.event;\n                data[offset + 1] = event.actor_id;\n                data[offset + 2] = event.x;\n                data[offset + 3] = event.y;\n                data[offset + 4] = event.value;\n                data[offset + 5] = event.subtype;\n                data[offset + 6] = event.radius;\n            }\n            fields = fields.push_back(std::field::bytes32_to_field(data));\n        }\n        fields.as_array()\n    }\n    \n#[test]\nfn test_event_serde() {\n    let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 5, NO_EVENT, 1),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 6, NO_EVENT, 2),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 7, NO_EVENT, 3),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 8, NO_EVENT, 4)\n  ];\n\n  let serialized = serialize_events(events);\n  let (result_valid, result) = parse_their_events(serialized);\n  assert(result_valid);\n  assert(result[0].event == events[0].event);\n  assert(result[1].event == events[1].event);\n  assert(result[2].event == events[2].event);\n  assert(result[3].event == events[3].event);\n  assert(result[0].actor_id == events[0].actor_id);\n  assert(result[1].actor_id == events[1].actor_id);\n  assert(result[2].actor_id == events[2].actor_id);\n  assert(result[3].actor_id == events[3].actor_id);\n  assert(result[0].x == events[0].x);\n  assert(result[1].x == events[1].x);\n  assert(result[2].x == events[2].x);\n  assert(result[3].x == events[3].x);\n  assert(result[0].y == events[0].y);\n  assert(result[1].y == events[1].y);\n  assert(result[2].y == events[2].y);\n  assert(result[3].y == events[3].y);\n  assert(result[0].value == events[0].value);\n  assert(result[1].value == events[1].value);\n  assert(result[2].value == events[2].value);\n  assert(result[3].value == events[3].value);\n  assert(result[0].subtype == events[0].subtype);\n  assert(result[1].subtype == events[1].subtype);\n  assert(result[2].subtype == events[2].subtype);\n  assert(result[3].subtype == events[3].subtype);\n  assert(result[0].radius == events[0].radius);\n  assert(result[1].radius == events[1].radius);\n  assert(result[2].radius == events[2].radius);\n  assert(result[3].radius == events[3].radius);\n}\n    // fn affects_my_character(self, x: u8, y: u8) -> bool {\n    //     let distance = get_distance(self.x, self.y, x, y);\n    //     ((self.x == x) & (self.y == y)) | ((self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y))\n    // }\nimpl Event {\n    fn affects_my_obstacle(self, x: u8, y: u8) -> bool {\n        (self.x == x) & (self.y == y)\n    }\n\n    fn may_affect_my_other_characters(self) -> bool {\n        (self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL)\n    }\n\n    fn may_affect_my_obstacles(self) -> bool {\n        self.event == RECEIVE_ATTACK\n    }\n\n    /**\n    * For now we will only take class into account.\n    */\n    pub fn get_applied_damage_to_my_asset(self, x: u8, y: u8, tile: u8) -> u16 {\n        let mut damage = 0;\n        let radius = self.radius as u32;\n        let radius = radius * radius;\n        let distance = get_distance(self.x, self.y, x, y) as u32;\n    \n        if self.event == RECEIVE_ATTACK {\n            debug!(quote {\n                        // let event = self.event;\n                        // let actor = self.actor_id;\n                        // let self_x = self.x;\n                        // let self_y = self.y;\n                        // let val = self.value;\n                        // println(f\"GetAppliedDamageToMyAsset: Event({event}:{val} from {actor}@{self_x}|{self_y})@{x}|{y}: {distance} <= {radius}\");\n                    });\n            if distance <= radius {\n                let damage_raw = get_attack_damage_to_tile(self.subtype, self.value as u32, tile) as u32;\n                damage = damage_raw * (1 + radius - distance) / (radius + 1) as u32;\n                debug!(quote { println(f\"Deal damage: {damage_raw} * (1 + {radius} - {distance}) / ({radius} + 1) = {damage}\"); });\n            }\n            // if (self.x == x) & (self.y == y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile);\n            // } else if (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile) / 2;\n            // }\n        }\n        if self.event == TRIGGERED_TRAP {\n            damage = get_trap_damage_to_tile(self.value as u32, tile);\n        }\n        damage as u16\n    }\n\n    pub fn empty(actor_id: u8) -> Event {\n        Event {\n            event: NO_EVENT,\n            actor_id: actor_id,\n            x: 0,\n            y: 0,\n            value: 0,\n            subtype: 0,radius: 0\n        }\n    }\n\n    pub fn get_dummy_events() -> [Field; MAX_EVENTS] {\n        [0; MAX_EVENTS]\n    }\n\n    pub fn get_test_dummy_events() -> [Event; MAX_EVENTS] {\n        [Event::empty(0); MAX_EVENTS]\n    }\n}\n\npub fn build_std_event(event: u8, actor_id: u8, x: u8, y: u8) -> Event {\n    assert(event < EVENT_COUNT);\n    assert((actor_id as u32) < MAX_CHARACTERS);\n    assert((x < WIDTH) | (x == NOWHERE));\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: 0,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\n#[test]\nfn test_build_std_event() {\n    let event = build_std_event(SEE_MOVE, 1, 2, 3);\n    assert(event.event == SEE_MOVE);\n    assert(event.actor_id == 1);\n    assert(event.x == 2);\n    assert(event.y == 3);\n}\n\n#[test(should_fail)]\nfn test_build_std_event_fail() {\n    let event = build_std_event(EVENT_COUNT, 1, 2, 3);\n    assert(event.event == EVENT_COUNT);\n}\n\npub fn build_value_event(event: u8, actor_id: u8, x: u8, y: u8, value: u8) -> Event {\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\npub fn build_subtype_value_event(event_type: u8, actor_id: u8, x: u8, y: u8, value: u8, event_subtype: u8, radius: u8) -> Event {\n    Event {\n        event: event_type,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: event_subtype,\n        radius: radius,\n    }\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/event.nr"},"75":{"source":"mod common;\n// mod actionPreCalcEffect;\n// mod actionResultEvent;\n// mod actionResultEffect;\n// mod actionRequirements;\nmod action;\n// mod actionDefinitionRegister;\nmod bugs;\nuse arenalib::{ new_action };\npub use action::execute_action;\n// mod actionDefinition;\nmod character;\nuse character::{ Character };\nuse character::parse_characters;\nmod event;\nuse event::Event;\npub use event::{serialize_events, parse_their_events};\nmod obstacle;\nuse obstacle::Obstacle;\npub use obstacle::{ new_obstacle, parse_my_obstacles, parse_their_obstacles, get_obstacle_x, get_obstacle_y, get_obstacle_id, get_obstacle_type, get_obstacle_health, serialize_my_obstacles, get_default_obstacles };\nmod map;\nuse dep::std;\nuse obstacle::serialize_obstacle;\nuse obstacle::serialize_their_obstacles;\n// use action::ACTION_TARGET_X;\n// use action::ACTION_TARGET_Y;\n// use action::ACTION_TYPE;\nuse arenalib::{get_action_target_y, get_action_target_x, get_action_type};\nuse obstacle::serialize_my_obstacles_for_me;\nuse map::is_visible;\npub use arenalib::{SerializedArenaActionDefinitions, SerializedArenaActions, SerializedArenaCharacterRoster, SerializedArenaEnemyObstacles, SerializedArenaEvents, SerializedArenaObstacles};\nuse arenalib::arena_test_action_def_register;\nuse character::serialize_chars;\nuse skplg::{softassert, debug};\nuse arenalib::{serialize_actions, parse_actions};\n\nuse arenalib::{SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLE_BYTE_SIZE};\nuse arenalib::{WIDTH};\nuse arenalib::{MAX_ACTIONS, MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES, MAX_ENEMY_OBSTACLES};\nuse arenalib::{VIEW_DISTANCE};\nuse arenalib::{ARCHER, KNIGHT, ROGUE, MAGE, RITUALIST};\nuse arenalib::{MIN_FIREBALL_ROUNDS_FOR_CAST};\nuse arenalib::{SEE_MOVE, RECEIVE_ATTACK, NO_EVENT};\nuse arenalib::{ATTACK_FIREBALL, ATTACK_RANGED};\nuse arenalib::{WAIT};\nuse arenalib::get_wait_action_def;\nuse arenalib::get_test_action_register;\npub use action::get_performable_actions;\nuse arenalib::Action;\nuse arenalib::get_action_actor;\n\n// mod ResolvedAction;\n\n\n\n// #[export]\n// pub fn ext_can_move_to(x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle]) -> bool {\n//     assert(MAX_OBSTACLES == 24);\n//     let mut my_obstacles_parsed = Obstacle::parse_my_obstacles(my_obstacles, events).as_array();\n//     // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n//     // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n//     let enemy_objects_parsed = Obstacle::parse_their_obstacles(enemy_objects);\n\n//     let mut can = true;\n//     for i in 0..MAX_OBSTACLES {\n//         if !obstacles[i].is_traversible() & (obstacles[i].x == x) & (obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     for i in 0..their_obstacles.len() {\n//         if !their_obstacles[i].is_traversible() & (their_obstacles[i].x == x) & (their_obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     can\n// }\n\n// pub comptime global DEBUG: bool = false;\n// pub comptime fn debug(stmt: Quoted) -> Quoted {\n//     let debug_result = if DEBUG {\n//         stmt\n//     } else { quote {} };\n//     debug_result\n// }\n// pub comptime fn debugmsg<T>(msg: T) -> Quoted {\n//     debug!(quote { println($msg); })\n// }\n// pub comptime fn softassert(varname: Quoted, check: Quoted, msg: Quoted) -> Quoted {\n//     let result = if DEBUG {\n//         quote {\n//             $varname &= $check;\n//             if !($check) {\n//                 println($msg);\n//             }\n//         }\n//     } else {\n//         quote {\n//             $varname &= $check;\n//         }\n//     };\n//     result\n// }\n\n// // MAP\n// global WIDTH_BITS: u8 = 5;\n// global WIDTH_MASK: u8 = (1 << WIDTH_BITS) - 1;\n// global WIDTH: u8 = 1 << WIDTH_BITS;\n// global HEIGHT_BITS: u8 = 4;\n// global HEIGHT_MASK: u8 = (1 << HEIGHT_BITS) - 1;\n// global HEIGHT: u8 = 10;\n// // global NOWHERE: u8 = 255;\n\n// // CLASSES\n// //global UNKNOWN_CLASS: u8 = 0;\n// global ARCHER: u8 = 1;\n// global RITUALIST: u8 = 2;\n// global ROGUE: u8 = 3;\n// global KNIGHT: u8 = 4;\n// global MAGE: u8 = 5;\n// global CLASS_BITS: u8 = 3;\n// global CLASS_MASK: u8 = (1 << CLASS_BITS) - 1;\n// global CLASS_COUNT: u32 = 6;\n// global MAX_ACTIONS_PER_CHARACTER: u32 = 6;\n\n// // ACTIONS\n// global WAIT: u8 = 0;\n// //global SNEAK: u8 = 1;\n// //global MOVE: u8 = 2;          // => SEE_COLUMN (depr: MOVE)\n// //global RITUAL: u8 = 3;        // => SEE_RITUAL | WIN\n// //global SEARCH: u8 = 4;        // => SEE_SEARCH_TRAP\n// //global ATTACK: u8 = 5;        // => RECEIVE_ATTACK | DESTROY // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST: u8 = 6;          // => SEE_CAST // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST_FIREBALL: u8 = 7; // => RECEIVE_ATTACK // affects other characters if status == FIREBALL_ROUNDS_FOR_CAST\n// //global DRAW: u8 = 8;          // => SEE_DRAW\n// //global SHOOT: u8 = 9;         // => RECEIVE_ATTACK\n// //global TRIGGER_TRAP = 9;  // => TRIGGERED_TRAP ?????????\n// //global DISARM_TRAP: u8 = 10;  // => DESTROY\n// //global SET_TRAP: u8 = 11;\n// global ACTION_COUNT: u32 = 12;\n// pub global ACTION_RESULT_EVENT_COUNT: u32 = 4;\n// global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0;\n// global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1;\n// global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2;\n\n// // EVENTS\n// global NO_EVENT: u8 = 0 ;\n// // global DESTROY: u8 = 1;          // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //use coordinates to determine tile or trap that got destroyed and update map\n// //global DISCOVER = 2;         // actor_id = their_char or their_object when receive - handle to update enemy positions, got health & class (this is for all chars, not just the active one)\n// //global SEE_COLUMN = 2 ;      // y = the column the player sees => update objects list\n// global SEE_MOVE: u8 = 3 ;        // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //handle to update enemy positions => DISCOVER\n// //global SEE_SPELL = 4 ;       // actor_id = their_char when receive - need to handle effect via coordinates, => RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle my obstacles\n// global SEE_SEARCH_TRAP: u8 = 5 ; // actor_id = their_char when receive - need to create found trap event if there is a trap nearby => FOUND_TRAP\n// global SEE_RITUAL: u8 = 6 ;      // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_CAST: u8 = 7;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_DRAW: u8 = 8;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// //global RECEIVE_DAMAGE = 9;   // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client\n// global RECEIVE_ATTACK: u8 = 10;  // actor_id = 0 when receive - need to handle damage => // no need to events ... health of visible assets gets sent anyway and invisible ones will be updated during discovery //RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle in my obstacles\n// global TRIGGERED_TRAP: u8 = 11;  // actor_id = my_char when receive - need to handle damage (for now, later on we might want to handle other effects as well) => RECEIVE_DAMAGE\n// // global FOUND_TRAP: u8 = 12;      // actor_id = my_char when receive - no need to handle, only important to have on-chain for the client\n// global DISARMED_TRAP: u8 = 13;      // actor_id = their-char when receive - need to remove my trap from the map\n// global WIN: u8 = 14;\n// // global LOSE: u8 = 15;\n// global ADD_OBSTACLE: u8 = 4;\n// global EVENT_COUNT: u8 = 16;\n\n// // SUBTYPES:\n// global WIN_BY_RITUAL: u8 = 1;\n\n// // ATTACKS\n// global ATTACK_MELEE: u8 = 0;\n// global ATTACK_RANGED: u8 = 1;\n// global ATTACK_FIREBALL: u8 = 2;\n// // global ATTACK_COUNT: u8 = 3;\n// // TODO: instead of enum, use a global array of structs with damage, range, etc.\n\n\n// // TILES\n// global EMPTY: u8 = 0;\n// global WALL: u8 = 6;\n// global WATER: u8 = 7;\n// // global UNKNOWN_CLASS_TILE: u8 = 8;\n// global NON_EMPTY_WALKABLE_TILE_MIN: u8 = 9;\n// // global FLAG: u8 = 9;\n// global TRAP: u8 = 10;\n// // global TRAP_USED: u8 = 11;\n// // global TRAP_FOUND: u8 = 12;\n// // global BODY: u8 = 13;\n// // global BODY_LOOTED: u8 = 14;\n// // global FOG: u8 = 15;\n// global MAX_OBSTACLE_TYPE: u8 = 0x0f;\n// // global TILE_COUNT: u8 = 16;\n// // unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n// // STATUS\n// global RITUAL_ROUNDS_FOR_WIN: u8 = 15;\n// global MIN_FIREBALL_ROUNDS_FOR_CAST: u8 = 3;\n// global MAX_FIREBALL_ROUNDS_FOR_CAST: u8 = 6;\n// // global DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MIN_DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MAX_DRAW_ROUNDS_FOR_SHOOT: u8 = 3;\n// global PROGRESS_BITS: u8 = 4;\n// global PROGRESS_MASK: u8 = (1 << PROGRESS_BITS) - 1;\n// global PROGRESS_COUNT: u8 = 16 ; // just to be more in line with the other constants, actually used as a counter\n// global MAX_HEALTH: u8 = 255;\n\n// // GAMEPLAY\n// global VIEW_DISTANCE: u8 = 6;\n// // global MAX_TRAPS: u32 = 8; // note: only lowest bit of first byte of field is usable! => ! Field = 1 bit + 31 bytes!\n// // global TRAPS_BUFFER_SIZE: Field = 16;\n// // global TRAPS_BUFFER_MASK: Field = 15; // has to be 2^n - 1\n// global MAX_ACTIONS: u32 = 4;\n// global MAX_EVENTS: u32 = 4; // = MAX_ACTIONS // NO! handle traps in a different way (by passing as argument!)+ 4 (2 FOUND_TRAP + WIN/LOSE + 1 reserved)\n// global MAX_OBSTACLES: u32 = 24; // leave traps for now + MAX_TRAPS; // 24 + 8 player placeables\n// pub global MAX_CHARACTERS: u32 = 5;\n// global MIN_PROGRESS: u8 = 0;\n// pub global MAX_PROGRESS: u8 = PROGRESS_COUNT - 1;\n// global SERIALIZED_OBSTACLE_BYTE_SIZE: u32 = 3;//3\n// pub global SERIALIZED_OBSTACLES_ARRAY_SIZE: u32 = 3;//3 // TODO: we take 3 because 3 x 8 = MAX_OBSTACLES ... should assert on this (MAX_OBSTACLES + MAX_CHARACTERS + 7) / 8;\n// pub global SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE: u32 = SERIALIZED_OBSTACLES_ARRAY_SIZE + 1; // +1 because enemy characters are also serialized as obstacles\n// global SERIALIZED_OBSTACLES_PER_FIELD: u32 = 8;//8 // TODO: need to verify that SERIALIZED_OBSTACLES_ARRAY_SIZE * SERIALIZED_OBSTACLES_PER_FIELD = MAX_OBSTACLES!\n// global SERIALIZED_EVENT_BYTE_SIZE: u32 = 7;\n// pub global SERIALIZED_EVENTS_ARRAY_SIZE: u32 = 1; // MAX_EVENTS / SERIALIZED_EVENTS_PER_FIELD => 4 / 4 = 1\n// global SERIALIZED_EVENTS_PER_FIELD: u32 = 4; // 31 / 7 = 4\n// global SERIALIZED_ACTION_BYTE_SIZE: u32 = 5;\n// pub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n// global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4; // could be up to 6, but we only use 4\n\n\n// pub type SerializedArenaActionDefinitions = SerializedRosterActionDefinitions<MAX_ACTIONS_PER_CHARACTER, MAX_CHARACTERS>;\n// pub type SerializedArenaCharacterActionDefinitions = SerializedCharacterActionDefinitions<MAX_ACTIONS_PER_CHARACTER>;\n// pub type SerializedArenaCharacterActionDefinition = SerializedCharacterActionDefinition;\n// #[export]\n// fn tf(x: Field) -> (u32, [u8;32]) {\n//     let mut result: [u8;32] = [0;32];\n//     let bts = x.to_be_bytes::<32>();\n//     for j in 0..31 {\n//         result[j] = 2*j;//bts[j];\n//     }\n//     (32 , result)\n// }\n// i,\n// 20, 0 -> 25,\n// 25 -> 0, \n// x, 0, 0, d0,\n// x, 0, 0, 9d, 1, 0,\n// x, 0, 0, 1, 0, b4, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 91, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 23, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, d4, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, 66, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 50, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b9, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, c5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 55, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b2, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, e8, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2a, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, cb, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 9b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 5c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, a6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 86, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, d5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 38, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8e, 1, 0, 0, 1,\n// 0, 32, 1, 0, 1, 1, x, 0, 0, 1,\n// x, 0, 0, 1, x, 0, 0, 1, 0, 1, 1\n\n// i,\n// 20, 0, 1e -> 0, 0 -> 1e, 0\n// x, 0, 0, d0,\n// x, 0, 0, ba, 1, 0,\n// x, 0, 0, 1, 0, cf, 1, 0, 1, 1,\n\nfn get_actor_from_move(mut move: u32) -> u8 {\n    if (move % 2) == 1 {\n        move -= 1; //((move % 10) - 1) >> 1 // actually not needed ... but clearer this way\n    }\n    let single_digit: u32 = (move % 10 as u32) >> 1;\n    single_digit as u8\n}\n// 3, 1, 1, 1, 0, 1, 2, 0, 2, 8, 1, 0, 0, 1\n// 4, 2, 2, 0, x, 0, 0, 0, 4, a, 2, 0, 0, 2\n\n#[export]\npub fn hash_serialized_private_state(my_chars: SerializedArenaCharacterRoster, my_char_actions: SerializedArenaActionDefinitions, my_obstacles: SerializedArenaObstacles, secret: Field) -> pub Field {\n    // let my_chars_be_bytes: [u8; 32] = my_chars.to_be_bytes::<32>();\n    // assert(my_chars_be_bytes.len() == 32);\n    let gamestate_before_hash_calculated = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n    //let gamestate_before_hash_calculated_field = std::field::bytes32_to_field(gamestate_before_hash_calculated);\n    gamestate_before_hash_calculated\n}\n\n#[test]\nfn test_hash_match() {\n  let my_chars = 12345678901234567890;\n  let my_char_actions = [\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890\n  ];\n  let my_obstacles = [\n    12345678901234567890, 12345678901234567890, 12345678901234567890\n  ];\n  let secret = 12345678901234567890;\n\n  let hash1 = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n  let valid = hash_serialized_private_state(my_chars, my_char_actions, my_obstacles, secret);\n\n  assert(hash1 == valid, f\"{hash1} != {valid}\");\n}\n\n#[export]\nfn get_serialized_obstacle(id: u8, x: u8, y: u8, obstacle_type: u8) -> pub Field {\n    let mut result: [u8; 32] = [0; 32];\n    result[0] = id;\n    result[1] = x;\n    result[2] = y;\n    result[3] = obstacle_type;\n    std::field::bytes32_to_field(result)\n}\n\n// global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// global action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n\n#[export]\npub fn calculate_action(\n  action: Action,\n  mut my_chars: [Character; MAX_CHARACTERS],\n  mut my_obstacles_parsed: [Obstacle; MAX_OBSTACLES],\n  enemy_objects_parsed: [Obstacle; MAX_ENEMY_OBSTACLES],\n  enemy_advance_input: u8,\n  mut energy: u8\n) -> (bool, [Character; MAX_CHARACTERS], [Obstacle; MAX_OBSTACLES], u8, Event) {\n  let mut success = true;\n  let actor_id = get_action_actor(action);\n  let mut actor = my_chars[actor_id];\n  let (my_chars_as_obstacles_valid, my_chars_as_obstacles) = chars_to_obstacles(my_chars);\n  softassert!(quote { success }, quote { my_chars_as_obstacles_valid }, quote { f\"Failed to convert my chars to obstacles: {my_chars}\" });\n  let result = execute_action(action, enemy_advance_input, actor, energy, my_chars_as_obstacles, my_obstacles_parsed, enemy_objects_parsed);\n  //assert(result.0);\n  success &= result.0;\n  let result_event = result.1;\n  let internal_event = result.2;\n  let self_event = result.3;\n  actor = result.4;\n  energy = result.5;\n  \n  // 4461 / 5 = 892,2\n  my_chars = my_chars.map(|c| wb_apply_damage_to_char(c, result_event, actor));\n  // 16800 / 24 = 700\n  my_obstacles_parsed = my_obstacles_parsed.map(|obstacle| {\n      let (updated_obstacle_valid, updated_obstacle) = update_my_obstacle(obstacle, result_event);\n      //success = success & updated_obstacle_valid;\n      softassert!(quote { success }, quote { updated_obstacle_valid }, quote { f\"Failed to update my obstacle {obstacle}, {result_event}\" });\n      updated_obstacle\n  });\n\n  (success, my_chars, my_obstacles_parsed, energy, result_event)\n}\n\n#[export]\npub fn calculate_turn(\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions_input: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //mut my_obstacles_parsed: [[u8; 5]; 24],\n    actions_input: SerializedArenaActions,\n    // Common Inputs\n    move_input: u32, //pub\n    // Enemy Inputs\n    enemy_advance_input: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects_input: SerializedArenaEnemyObstacles, // pub\n    enemy_events_input: SerializedArenaEvents, // pub //MAX_EVENTS],\n\n) -> pub (bool, SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, [Obstacle; 24], u8, SerializedArenaEvents, SerializedArenaEnemyObstacles) {\n    let mut success = true;\n    \n// let action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n    //let actionRegister = ActionDefinitionRegister::new(my_char_actions_input);\n    // calculate enemy advance in our coordinates and shadow\n    // let (enemy_advance_valid, enemy_advance) = their_x_to_mine(enemy_advance);\n\n    // // more efficient to do this here, BUT leads to bad side effects for frontend (and it is not THAT costly)\n    // let enemy_advance = if enemy_advance_input >= WIDTH { 0 } else { WIDTH - enemy_advance_input - 1 };\n\n\n    // TODO: Validate map => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    let (events_valid, events) = parse_their_events(enemy_events_input);\n    softassert!(quote { success }, quote { events_valid }, quote { f\"Failed to parse their events {events}\" });\n\n    // let side = move as u1;\n    let (my_chars_valid, mut my_chars) = parse_characters(my_chars_input, my_char_actions_input, events, enemy_advance_input);\n    softassert!(quote { success }, quote { my_chars_valid }, quote { f\"Failed to parse my characters {my_chars}\" });\n\n    let actor_id = get_actor_from_move(move_input);\n    // let mut actor = my_chars[actor_id]; //Character::parse(actor_id, my_chars, events);\n    \n    comptime {\n        assert(MAX_OBSTACLES == 24);\n    }\n\n    let (valid, my_obstacles_parsed) = parse_my_obstacles(my_obstacles_input, events);\n    softassert!(quote { success }, quote { valid }, quote { f\"Failed to parse my obstacles {my_obstacles_input}\" });\n    let mut my_obstacles_parsed: [Obstacle; MAX_OBSTACLES] = my_obstacles_parsed;\n\n    let (actions_valid, actions) = parse_actions(MAX_CHARACTERS as u8, actions_input); // actions.map(|action| Action::from_field(action));\n    softassert!(quote { success }, quote { actions_valid }, quote { f\"Failed to parse actions {actions_input}\" });\n    // let mut my_obstacles_parsed = my_obstacles_parsed.as_array();\n//    let (valid, mut my_obstacles_parsed) = parse_my_obstacles(my_obstacles, events).as_array();\n    // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n    let (enemy_objects_parsed_valid, enemy_objects_parsed) = parse_their_obstacles(enemy_objects_input);\n    softassert!(quote { success }, quote { enemy_objects_parsed_valid }, quote { f\"Failed to parse their obstacles {enemy_objects_input}\" });\n\n    let mut energy: u8 = 12;\n    let mut result_events_calculated: [Event] = &[];\n    for i in 0..MAX_ACTIONS {\n        // TODO: ensure that if actor committed suicide, it is not allowed to do any more actions\n        let action = actions[i];\n        //let resolved_action = actionRegister.resolve_action(action); //resolve_action(action);\n\n        let (\n          turn_action_result_action_valid,\n          turn_action_result_my_chars,\n          turn_action_result_my_obstacles_parsed,\n          turn_action_result_energy,\n          turn_action_result_result_event\n        ) = calculate_action(\n          action,\n          my_chars,\n          my_obstacles_parsed,\n          enemy_objects_parsed,\n          enemy_advance_input,\n          energy\n        );\n        softassert!(quote { success }, quote { turn_action_result_action_valid }, quote { f\"Failed to execute turn action {i}\" });\n\n        my_chars = turn_action_result_my_chars;\n        my_obstacles_parsed = turn_action_result_my_obstacles_parsed;\n        energy = turn_action_result_energy;\n\n        // let result = execute_action(action, enemy_advance_input, actor, energy, my_obstacles_parsed, enemy_objects_parsed);\n        // //assert(result.0);\n        // success &= result.0;\n        // let result_event = result.1;\n        // let internal_event = result.2;\n        // let self_event = result.3;\n        // actor = result.4;\n        // energy = result.5;\n        \n        // // 4461 / 5 = 892,2\n        // my_chars = my_chars.map(|c| wb_apply_damage_to_char(c, result_event, actor));\n        // // 16800 / 24 = 700\n        // my_obstacles_parsed = my_obstacles_parsed.map(|obstacle| {\n        //     let (updated_obstacle_valid, updated_obstacle) = update_my_obstacle(obstacle, result_event);\n        //     //success = success & updated_obstacle_valid;\n        //     softassert!(quote { success }, quote { updated_obstacle_valid }, quote { f\"Failed to update my obstacle {obstacle}, {result_event}\" });\n        //     updated_obstacle\n        // });\n\n        result_events_calculated = result_events_calculated.push_back(turn_action_result_result_event);\n    }\n    let result_events_calculated = serialize_events(result_events_calculated.as_array());\n    assert(result_events_calculated.len() == SERIALIZED_EVENTS_ARRAY_SIZE);\n\n    // send death events => no need\n\n    // determine view range\n    let mut my_advance_calculated = 0;\n    for i in 0..MAX_CHARACTERS {\n        if my_chars[i].x > my_advance_calculated {\n            my_advance_calculated = my_chars[i].x;\n        }\n    }\n    my_advance_calculated += VIEW_DISTANCE;\n\n    let (serialized_characters, serialized_action_defs) = serialize_chars(my_chars);\n    let serialized_obstacles: [Field] = serialize_my_obstacles(enemy_advance_input, my_obstacles_parsed);\n    let (serialized_chars_as_obstacles_valid, serialized_chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance_input, my_chars);\n    // success = success & serialized_chars_as_obstacles_valid;\n    softassert!(quote { success }, quote { serialized_chars_as_obstacles_valid }, quote { f\"Failed to serialize chars as obstacles: {my_chars}\" });\n    let serialized_obstacles_for_enemy: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE] = serialized_obstacles.push_back(serialized_chars_as_obstacles).as_array();\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles_parsed);\n\n    (success, serialized_characters, serialized_action_defs, my_obstacles_parsed, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy)\n}\n\n\n\n#[export]\npub fn turn(\n    // verification_key: pub [Field; 114],\n    // proof: pub [Field; 93],\n    // public_inputs: pub [Field; 1 ],//+ 2 * SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE + 2 * SERIALIZED_EVENTS_ARRAY_SIZE],\n    // key_hash: pub Field,\n    // last_move: pub u32,\n    // last_enemy_advance: pub u8,\n    // last_enemy_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // last_events: pub [Field, SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_advance: pub u8,\n    // last_my_result_events: pub [Field; SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_result_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // Gamestate Hashes\n    // gamestate_before_hash: pub Field,\n    // gamestate_after_hash: pub Field,\n    // My Secret State\n    secret: Field,\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //my_obstacles: [[u8; 5]; 24],\n    actions: SerializedArenaActions,\n    // Common Inputs\n    move: u32, //pub\n    // Enemy Inputs\n    enemy_advance: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects: SerializedArenaEnemyObstacles, // pub\n    enemy_events: SerializedArenaEvents, // pub //MAX_EVENTS],\n    // My Results\n    my_result_advance: u8, // pub // 1 bit win, 1 bit lose, 1 bit reserved, 5 bits advance\n    my_result_events: SerializedArenaEvents, // pub\n    my_result_objects: SerializedArenaEnemyObstacles, // pub\n    // Gamestate Hashes\n    gamestate_before_hash: Field, // pub\n    gamestate_after_hash: Field, // pub\n) -> pub bool {\n    // Validate global constants (to make sure one didn't change one without updating dependet ones)\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    //let my_char_actions = arena_test_action_def_register;// get_test_action_register();\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(my_chars_input, my_char_actions, my_obstacles_input, secret);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    softassert!(quote { success }, quote { gamestate_before_hash == gamestate_before_hash_calculated_field }, quote { f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\" });\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        my_chars_input,\n        my_char_actions,\n        my_obstacles_input,\n        actions,\n        move,\n        enemy_advance,\n        enemy_objects,\n        enemy_events\n    );\n    softassert!(quote { success }, quote { turn_calc_valid }, quote { f\"Tun calculation failed\" });\n\n    // if side == 0 {\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x > my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated += VIEW_DISTANCE;\n    // } else {\n    //     my_advance_calculated = WIDTH - 1;\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x < my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated -= VIEW_DISTANCE;\n    // }\n    softassert!(quote { success }, quote { my_result_advance == my_advance_calculated }, quote { f\"Invalid result advance: {my_result_advance} != {my_advance_calculated}\" });\n\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        softassert!(quote { success }, quote { result_event_should == result_event_calculated }, quote { f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\" });\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    assert(my_result_objects.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE {\n        let my_result_object = my_result_objects[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        softassert!(quote { success }, quote { my_result_object == serialized_obstacle }, quote { f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\" });\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secret, serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    softassert!(quote { success }, quote { new_hash_bytes == gamestate_after_hash }, quote { f\"Invalid result hash: {new_hash_bytes} != {gamestate_after_hash}\" });\n    success\n}\n\nfn wb_apply_damage_to_char(mut c: Character, event: Event, actor: Character) -> Character {\n    if c.id == actor.id {\n        c = actor;\n    }\n    apply_damage_to_char(c, event)\n}\n\nfn apply_damage_to_char(c: Character, event: Event) -> Character {\n    let dmg = event.get_applied_damage_to_my_asset(c.x, c.y, c.class);\n    Character {\n        id: c.id,\n        x: c.x,\n        y: c.y,\n        class: c.class,\n        health: safe_subtract_dmg(c.health, dmg),\n        progress: c.progress,\n        target_x: c.target_x,\n        target_y: c.target_y,\n        has_been_seen: c.has_been_seen,\n        is_hidden: c.is_hidden,\n        damage_mod: c.damage_mod,\n        last_action: c.last_action,\n        actions: c.actions,\n        status: 0\n    }\n}\nfn update_my_obstacle(obstacle: Obstacle, event: Event) -> (bool, Obstacle) {\n    let dmg =\n        // event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle)) +\n        event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle));\n    new_obstacle(get_obstacle_id(obstacle), get_obstacle_x(obstacle), get_obstacle_y(obstacle), safe_subtract_dmg(get_obstacle_health(obstacle), dmg), get_obstacle_type(obstacle))\n    // Obstacle {\n    //     health: safe_subtract_dmg(obstacle.health, dmg),\n    //     id: obstacle.id,\n    //     x: obstacle.x,\n    //     y: obstacle.y,\n    //     obstacle_type: obstacle.obstacle_type,\n    // }\n}\n\nfn get_data_hash(secret: Field, characters: Field, character_actions: SerializedArenaActionDefinitions, obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> Field {\n  assert(character_actions.len() == 30);\n  assert(obstacles.len() == 3);\n  std::hash::poseidon2::Poseidon2::hash([\n    secret,\n    characters,\n    character_actions[0],\n    character_actions[1],\n    character_actions[2],\n    character_actions[3],\n    character_actions[4],\n    character_actions[5],\n    character_actions[6],\n    character_actions[7],\n    character_actions[8],\n    character_actions[9],\n    character_actions[10],\n    character_actions[11],\n    character_actions[12],\n    character_actions[13],\n    character_actions[14],\n    character_actions[15],\n    character_actions[16],\n    character_actions[17],\n    character_actions[18],\n    character_actions[19],\n    character_actions[20],\n    character_actions[21],\n    character_actions[22],\n    character_actions[23],\n    character_actions[24],\n    character_actions[25],\n    character_actions[26],\n    character_actions[27],\n    character_actions[28],\n    character_actions[29],\n    obstacles[0],\n    obstacles[1],\n    obstacles[2]\n  ], 2 + 30 + 3)\n}\n// fn get_data_hash(secret: [u8], characters: [u8], character_actions: [u8; ACTION_DEFINITION_REGISTER_SIZE], obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> [u8; 32] {\n//     assert(secret.len() == 32);\n//     assert(characters.len() == 32);\n\n//     let mut data: [u8; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE] = [0; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE];\n//     for i in 0..32 {\n//         data[i] = secret[i];\n//         data[i + 32] = characters[i];\n//     }\n//     let offset = 32 + 32;\n//     for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//         let obstacle: [u8; 32] = obstacles[i].to_be_bytes::<32>();\n//         assert(obstacle.len() == 32);\n//         for j in 0..32 {\n//             data[offset + i * 32 + j] = obstacle[j];\n//         }\n//     }\n//     let offset = 32 + 32 + 32 * SERIALIZED_OBSTACLES_ARRAY_SIZE;\n//     for i in 0..ACTION_DEFINITION_REGISTER_SIZE {\n//         data[offset + i] = character_actions[i];\n//     }\n//     // let offset = WIDTH * HEIGHT + 32 * 3;\n//     // for i in 0..10 {\n//     //     data[offset + i * 4] = (searched_traps[i] & 255) as u8;\n//     //     data[offset + i * 4 + 1] = ((searched_traps[i] >> 8) & 255) as u8;\n//     //     data[offset + i * 4 + 2] = ((searched_traps[i] >> 16) & 255) as u8;\n//     //     data[offset + i * 4 + 3] = ((searched_traps[i] >> 24) & 255) as u8;\n//     // }\n//     std::hash::blake3(data)\n// }\n\n// fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> Field {\n//     comptime {\n//         assert(MAX_CHARACTERS <= 5);\n//     }\n//     let mut result: [u8; 32] = [0; 32];\n//     for i in 0..MAX_CHARACTERS {\n//         let serialized = chars[i].serialize();\n//         for j in 0..6 {\n//             result[2 + i * 6 + j] = serialized[j];\n//         }\n//     }\n//     std::field::bytes32_to_field(result)\n// }\n\n#[export]\npub fn chars_to_obstacles(chars: [Character; MAX_CHARACTERS]) -> pub (bool, [Obstacle; MAX_CHARACTERS]) {\n  let mut result: BoundedVec<Obstacle, MAX_CHARACTERS> = BoundedVec::new();\n  let mut valid_result = true;\n  for i in 0..MAX_CHARACTERS {\n    let (valid, char_as_obstacle) = chars[i].to_obstacle();\n    result.push(char_as_obstacle);\n    valid_result &= valid;\n  }\n  assert(result.len() == MAX_CHARACTERS);\n  (valid_result, result.storage())\n}\n\nfn serialize_chars_as_obstacles(enemy_advance: u8, chars: [Character; MAX_CHARACTERS]) -> (bool, Field) {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut result: [u8; 32] = [0; 32];\n    let mut valid_result = true;\n    for i in 0..MAX_CHARACTERS {\n        if (chars[i].is_hidden == 0) & is_visible(enemy_advance, chars[i].get_x()) {\n            let (valid, char_as_obstacle) = chars[i].to_obstacle();\n            let serialized = serialize_obstacle(char_as_obstacle);\n            valid_result = valid_result & valid;\n            result[2 + i * 3] = serialized[0];\n            result[2 + i * 3 + 1] = serialized[1];\n            result[2 + i * 3 + 2] = serialized[2];\n        }\n    }\n    (valid_result, std::field::bytes32_to_field(result))\n}\n\nfn safe_subtract_dmg(a: u8, b: u16) -> u8 {\n    let mut result = 0;\n    if (a as u16) > b {\n        result = a - (b as u8);\n    }\n    result\n}\n\nfn test_result_object_builder(enemy_advance: u8, chars: [Character; MAX_CHARACTERS], obs: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1]) {\n    let mut result: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        result[i] = obs[i];\n    }\n    let (valid, chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance, chars);\n    result[SERIALIZED_OBSTACLES_ARRAY_SIZE] = chars_as_obstacles;\n    (valid, result)\n}\n\n// fn test_helper_roster(actor: Character, mut chars: [Character; MAX_CHARACTERS]) -> [Character; MAX_CHARACTERS] {\n//     chars[actor.id] = actor;\n//     chars\n// }\n\n// fn test_helper_execute_move(move: u32, actor: Character, advances: [u8; 2], secret: [Field; 2], last_hashes: [Field; 2], chars: [[Character; MAX_CHARACTERS]; 2], obs: [[Obstacle; MAX_OBSTACLES]; 2], actions: [Action], my_events: [Event], their_events: [Event]) -> (u32, [Character; MAX_CHARACTERS], Field) {\n//     let side = move as u1;\n//     let other_side = (side as u8 + 1) as u1;\n//     let chars_after = test_helper_roster(actor, chars[side]);\n//     let my_obstacles_serialized = serialize_obstacles(advances[other_side], obs[side]);\n//     let secret_be_bytes: [u8; 32] = secret[side].to_be_bytes();\n//     assert(secret_be_bytes.len() == 32);\n//     let serialized_chars_after = serialize_chars(chars_after);\n//     let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes();\n//     assert(serialized_chars_after_be_bytes.len() == 32);\n//     let current_hash = std::field::bytes32_to_field(get_data_hash(secret_be_bytes, serialized_chars_after_be_bytes, my_obstacles_serialized)); \n\n//     let (enemy_objects_valid, enemy_objects) = test_result_object_builder(chars[other_side], serialize_obstacles(other_side, advances[side], obs[other_side]));\n//     assert(enemy_objects_valid, \"Invalid enemy objects\");\n//     let (my_result_objects_valid, my_result_objects) = test_result_object_builder(chars_after, my_obstacles_serialized);\n//     assert(my_result_objects_valid, \"Invalid my result objects\");\n\n//     let result = turn(\n//         secret[side],\n//         character::serialize_chars(chars[side]),\n//         my_obstacles_serialized,\n//         serialize_actions(actions),\n//         move,\n//         advances[other_side],\n//         enemy_objects,\n//         Event::serialize_events(their_events).as_array(),\n//         advances[side],\n//         Event::serialize_events(my_events).as_array(),\n//         my_result_objects,\n//         last_hashes[side],\n//         current_hash\n//     );\n//     assert(result, \"Invalid result\");\n\n//     (move + 1, chars_after, current_hash)\n// }\n\n// #[test]\n// fn test_main() {\n//     let secrets = [123456789, 9876543210];\n//     let mut chars = [ character::get_default_characters(0), character::get_default_characters(1) ];\n//     let mut obs = [ Obstacle::get_default_obstacles(0), Obstacle::get_default_obstacles(1) ];\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 2, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 3, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 4, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 5, target_y: 1 },\n//     ];\n//     let their_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let mut move = 0;\n//     let mut actor = chars[0][0].move(5, 1);\n//     let mut last_hashes = [ 0x12b8f97907a05ec6a77da3f70368fa3b02e166c74edab8ea0695d6f406146559, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n//     let mut advances = [2 + VIEW_DISTANCE, 29 - VIEW_DISTANCE];\n//     advances[0] = 5 + VIEW_DISTANCE;\n\n//     let mut side = move % 2;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 0 },\n//         Action { action: MOVE, actor: 0, target_x: 27, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(27, 0);\n//     advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 1, target_y: 3 },\n//         Action { action: MOVE, actor: 1, target_x: 0, target_y: 3 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(0, 3);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 2 },\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 1, target_x: 28, target_y: 1 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(28, 1);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n// }\n\n#[test]\nfn test_main_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions = arena_test_action_def_register.map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    println(secrets[side]);\n    println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    println(my_obstacles_serialized_for_me);\n    println(serialize_actions(actor.id, actions));\n    println(move);\n    println(advances[other_side]);\n    println(test_result_object_other_chars);\n    println(serialize_events(their_events));\n    println(advances[side]);\n    println(serialize_events(my_events));\n    println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let result = turn(\n        secrets[side],\n        serialized_chars_input,\n        serialized_char_actions_input,\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events),\n        advances[side],\n        serialize_events(my_events),\n        test_result_object_chars_after,\n        last_hashes[side],\n        current_hash\n    );\n    assert(result, \"Turn failed\");\n}\n\n\n#[test]\nfn test_calc_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions_raw = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000];\n    let test_actions = test_actions_raw.map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    // println(secrets[side]);\n    // println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    // println(my_obstacles_serialized_for_me);\n    // println(serialize_actions(actor.id, actions));\n    // println(move);\n    // println(advances[other_side]);\n    // println(test_result_object_other_chars);\n    // println(serialize_events(their_events));\n    // println(advances[side]);\n    // println(serialize_events(my_events));\n    // println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n\n\n\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    let my_char_actions = arena_test_action_def_register; //get_test_action_register();\n    println(\"my_char_actions\");\n    println(my_char_actions);\n    println(\"serialized_char_actions_input\");\n    println(serialized_char_actions_input);\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    let gamestate_before_hash = last_hashes[side];\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(serialized_chars_input, my_char_actions, my_obstacles_serialized_for_me, secrets[side]);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        serialized_chars_input,\n        arena_test_action_def_register, //serialized_char_actions_input,\n        // get_test_action_register(),\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events)\n    );\n    assert(turn_calc_valid, f\"Tun calculation failed\");\n    assert(advances[side] == my_advance_calculated, f\"Invalid result advance:  != {my_advance_calculated}\");\n\nlet my_result_events: [Field; SERIALIZED_EVENTS_ARRAY_SIZE] = serialize_events(my_events);\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        assert(result_event_should == result_event_calculated, f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\");\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    for i in 0..test_result_object_chars_after.len() {\n        let my_result_object = test_result_object_chars_after[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        assert(my_result_object == serialized_obstacle, f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\");\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secrets[side], serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    assert(new_hash_bytes == current_hash, f\"Invalid result hash: {new_hash_bytes} != {current_hash}\");\n}\n\n// #[export]\n// pub fn setup_obstacles(\n    \n// )\n\n#[test]\nfn test_calc_turn_0() {\n  let my_chars = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0, 0, 0, 0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n\n  let result = calculate_turn(my_chars, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events);\n\n  assert(result.0);\n}\n\nfn test_turn_0() {\n  let secret = 0x075bcd15;\n  let my_chars_input = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0,0,0,0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n  let my_result_advance = 0x12;\n  let my_result_objects = [0,0,0,0];\n  let my_result_events = [0xffff0000000000ffff0000000000ffff0000000000ffff000000000000];\n  let initial_hash = 0x07a86579c9d2236bd1c02ced0660e9280e1d9a73146a0c9c8e4d8e27d64d6565;\n  let final_hash = 0x2c7492b9fc2adae465ec974b512f12b29b486e7c268cca2c304330eac57dd680;\n\n  let result = turn(secret, my_chars_input, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events, my_result_advance, my_result_events, my_result_objects, initial_hash, final_hash);\n\n  assert(result);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/lib.nr"},"76":{"source":"use arenalib::{ WIDTH, HEIGHT, WIDTH_MASK, VIEW_DISTANCE, MAX_OBSTACLES, MAX_ENEMY_OBSTACLES };\nuse crate::obstacle::{ Obstacle, get_obstacle_y, get_obstacle_x, is_obstacle_traversible };\nuse skplg::NOWHERE;\nuse std::collections::bounded_vec;\n\n// pub fn is_neighbor(curr_x: u8, curr_y: u8, x: u8, y: u8) -> bool {\n//     // assert(curr_x < WIDTH);\n//     // assert(curr_y < HEIGHT);\n//     // assert(x < WIDTH);\n//     // assert(y < HEIGHT);\n//     // validating coordinates is not the job of this function\n//     // only avoid overflows!\n\n\n//     let shifted_curr_x = std::wrapping_add(curr_x, 1);\n//     let shifted_curr_y = std::wrapping_add(curr_y, 1);\n//     let shifted_x = std::wrapping_add(x, 1);\n//     let shifted_y = std::wrapping_add(y, 1);\n\n//     ((shifted_curr_x == shifted_x) & (std::wrapping_add(shifted_curr_y, 1) >= shifted_y) & (shifted_curr_y <= std::wrapping_add(shifted_y, 1))) |\n//     ((shifted_curr_y == shifted_y) & (std::wrapping_add(shifted_curr_x, 1) >= shifted_x) & (shifted_curr_x <= std::wrapping_add(shifted_x, 1)))\n// }\n\n// global DISTANCE_TABLE_HEIGHT: u32 = HEIGHT as u32;\n// global DISTANCE_TABLE_WIDTH: u32 = WIDTH as u32;\n\n// unconstrained fn distance_sqrt(x: u32) -> u32 {\n//     let mut result: u32 = 0;\n//     for i in 0..DISTANCE_TABLE_WIDTH {\n//         if i * i == x {\n//             result = i;\n//             break;\n//         }\n//     }\n//     result\n// }\n\n// fn d(a: u8, b: u8) -> u8 {\n//     let d = a as i32 - b as i32;\n//     let d2 = d * d;\n//     assert(d2 >= 0);\n//     let d2u = d2 as u32;\n//     let result = unsafe {\n//         let sq = distance_sqrt(d2u);\n//         assert(sq * sq == d2u);\n//         sq\n//     };\n//     assert(result < DISTANCE_TABLE_WIDTH);\n//     comptime { assert(DISTANCE_TABLE_WIDTH <= 256) };\n//     result as u8\n// }\n// global DISTANCE_TABLE: [[u8; DISTANCE_TABLE_WIDTH]; DISTANCE_TABLE_HEIGHT] = [\n//     [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 2,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ],\n//     [ 3,  3,  3,  4,  4,  5,  6,  7,  8,  9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ],\n// ]\n\nglobal MAX_DISTANCE: u32 = 0xff * 0xff;\npub type DISTANCE = u16;\nfn get_distance_part(curr: u8, target: u8) -> DISTANCE_PART_ROLLED_OUT {\n  let d = if curr > target { curr - target } else { target - curr } as u32;\n  d * d\n}\npub fn get_distance(curr_x: u8, curr_y: u8, x: u8, y: u8) -> DISTANCE {\n    // assert(curr_x < WIDTH);\n    // assert(curr_y < HEIGHT);\n    // assert(x < WIDTH);\n    // assert(y < HEIGHT);\n    // validating coordinates is not the job of this function\n    // only avoid overflows!\n\n    // let dx = unsafe {\n    //     let diff_\n    //     distance_sqrt(x)\n    // }\n\n    let dx = get_distance_part(curr_x, x);\n    let dy = get_distance_part(curr_y, y);\n\n    // let dx = curr_x as i16 - x as i16;\n    // let dy = curr_y as i16 - y as i16;\n  get_distance_from_parts(dx, dy)\n}\n// NOTE: Leaving it for now, but no actual performance benefit from splitting this\npub type DISTANCE_PART_ROLLED_OUT = u32;\nfn get_distance_from_parts(x: DISTANCE_PART_ROLLED_OUT, y: DISTANCE_PART_ROLLED_OUT) -> DISTANCE {\n  let distance = x + y;\n  if distance > MAX_DISTANCE {\n    MAX_DISTANCE as u16\n  } else {\n    distance as u16\n  }\n}\n\n\npub fn is_visible(enemy_advance: u8, x: u8) -> bool {\n    //(x >= enemy_advance) == (side == 0)\n    x >= enemy_advance\n}\n\n// TODO: This is for the future - fireballs, etc. only if we have line of sight\n// pub fn is_visible(curr_x: u8, curr_y: u8, x: u8, y: u8, map: &Map) -> bool {\n//     assert(curr_x < WIDTH);\n//     assert(curr_y < HEIGHT);\n//     assert(x < WIDTH);\n//     assert(y < HEIGHT);\n\n//     let mut x = curr_x as f32;\n//     let mut y = curr_y as f32;\n//     let x2 = x + 0.5;\n//     let y2 = y + 0.5;\n//     let dx = x2 - x;\n//     let dy = y2 - y;\n//     let mut t = 0.0;\n//     let mut max_t = 1.0;\n//     let mut x = x;\n//     let mut y = y;\n\n//     while t < max_t {\n//         let x = x + dx * t;\n//         let y = y + dy * t;\n//         let x = x as u8;\n//         let y = y as u8;\n\n//         if map.is_wall(x, y) {\n//             return false;\n//         }\n\n//         t += 0.1;\n//     }\n\n//     true\n// }\n\npub fn their_x_to_mine(x: u8) -> (bool, u8) {\n    if x == NOWHERE {\n        (true, NOWHERE)\n    } else {\n        (x < WIDTH, std::wrapping_sub(WIDTH - 1, x) & WIDTH_MASK)\n    }\n}\n\npub fn is_distance_within_viewing_range(distance: u16) -> bool {\n  distance <= (VIEW_DISTANCE as u16 * VIEW_DISTANCE as u16)\n}\n\npub fn is_tile_free_or_invisible(x: u8, y: u8, obstacles: [Obstacle; MAX_ENEMY_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> bool {\n  let mut can = true;\n  for i in 0..MAX_OBSTACLES {\n      if !is_obstacle_traversible(obstacles[i]) & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n          can = false;\n      }\n  }\n  for i in 0..MAX_ENEMY_OBSTACLES {\n      if !is_obstacle_traversible(their_obstacles[i]) & (get_obstacle_x(their_obstacles[i]) == x) & (get_obstacle_y(their_obstacles[i]) == y) {\n          can = false;\n      }\n  }\n  can\n}\n\nglobal W: u32 = WIDTH as u32;\nglobal H: u32 = HEIGHT as u32;\nunconstrained fn _get_free_map(obstacles: [Obstacle; MAX_ENEMY_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> [[u8; H]; W] {\n  let mut map = [[0; H]; W];\n  for i in 0..MAX_ENEMY_OBSTACLES {\n    let obstacle = obstacles[i];\n    let x = get_obstacle_x(obstacle);\n    let y = get_obstacle_y(obstacle);\n    if (x != NOWHERE) & (y != NOWHERE) {\n      assert(x < WIDTH);\n      assert(y < HEIGHT);\n      if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n        map[x][y] += 1;\n      }\n    }\n  }\n  for i in 0..MAX_ENEMY_OBSTACLES {\n    let obstacle = their_obstacles[i];\n    let x = get_obstacle_x(obstacle);\n    let y = get_obstacle_y(obstacle);\n    if (x != NOWHERE) & (y != NOWHERE) {\n      assert(x < WIDTH);\n      assert(y < HEIGHT);\n      if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n        map[x][y] += 1;\n      }\n    }\n  }\n  map\n}\n\nunconstrained fn _to_obstacle_collision_array(obstacles: [Obstacle; MAX_ENEMY_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> [(u8, u8, bool); MAX_ENEMY_OBSTACLES * 2] {\n  let mut o = [(NOWHERE, NOWHERE, true); 58];\n\n  for i in 0..MAX_ENEMY_OBSTACLES {\n    let obstacle = obstacles[i];\n    let x = get_obstacle_x(obstacle);\n    let y = get_obstacle_y(obstacle);\n\n    o[i] = (x,y,is_obstacle_traversible(obstacle));\n\n    // if (x != NOWHERE) & (y != NOWHERE) {\n    //   assert(x < WIDTH);\n    //   assert(y < HEIGHT);\n    //   if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n    //     o.push((x,y));\n    //   }\n    // }\n  }\n  for i in 0..MAX_ENEMY_OBSTACLES {\n    let obstacle = their_obstacles[i];\n    let x = get_obstacle_x(obstacle);\n    let y = get_obstacle_y(obstacle);\n\n    o[i + MAX_ENEMY_OBSTACLES] = (x,y,is_obstacle_traversible(obstacle));\n    // if (x != NOWHERE) & (y != NOWHERE) {\n    //   assert(x < WIDTH);\n    //   assert(y < HEIGHT);\n    //   if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n    //     o.push((x,y));\n    //   }\n    // }\n  }\n  o\n}\n\npub fn get_free_map(obstacles: [Obstacle; MAX_ENEMY_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> [[u8; H]; W] { // missing own chars\n  // Safety: verifying all map elements afterwards\n  let map = unsafe { _get_free_map(obstacles, their_obstacles) };\n  \n  // Safety: verifying all below\n  //let o = unsafe { _to_obstacle_collision_array(obstacles, their_obstacles) };\n   //let mut o = [(NOWHERE, NOWHERE, true); 58];\n\n        for i in 0..MAX_ENEMY_OBSTACLES {\n          let obstacle = obstacles[i];\n          let x = get_obstacle_x(obstacle);\n          let y = get_obstacle_y(obstacle);\n\n          if !is_obstacle_traversible(obstacle) {\n            assert(map[x][y] > 0);\n          }\n          //o[i] = (x,y,is_obstacle_traversible(obstacle));\n          // assert(o[i].0 == x);\n          // assert(o[i].1 == y);\n          // assert(o[i].2 == is_obstacle_traversible(obstacle));\n\n          // if (x != NOWHERE) & (y != NOWHERE) {\n          //   assert(x < WIDTH);\n          //   assert(y < HEIGHT);\n          //   if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n          //     o.push((x,y));\n          //   }\n          // }\n        }\n        for i in 0..MAX_ENEMY_OBSTACLES {\n          let obstacle = their_obstacles[i];\n          let x = get_obstacle_x(obstacle);\n          let y = get_obstacle_y(obstacle);\n if !is_obstacle_traversible(obstacle) {\n            assert(map[x][y] > 0);\n          }\n          //  o[i + MAX_ENEMY_OBSTACLES] = (x,y,is_obstacle_traversible(obstacle));\n\n          // assert(o[i + MAX_ENEMY_OBSTACLES].0 == x);\n          // assert(o[i + MAX_ENEMY_OBSTACLES].1 == y);\n          // assert(o[i + MAX_ENEMY_OBSTACLES].2 == is_obstacle_traversible(obstacle));\n          // if (x != NOWHERE) & (y != NOWHERE) {\n          //   assert(x < WIDTH);\n          //   assert(y < HEIGHT);\n          //   if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n          //     o.push((x,y));\n          //   }\n          // }\n        }\n        let mut sum: u32 = 0;\n  for x in 0..WIDTH {\n    for y in 0..HEIGHT {\n      sum += map[x][y] as u32;\n      // let val = map[x][y];\n      // if !val {\n      //   let mut found_obstacle = false;\n\n      //   for i in 0..58 {\n      //     if (x == o[i].0) & (y == o[i].1) & o[i].2 {\n      //       found_obstacle = true;\n      //     }\n      //   }\n\n      //   assert(found_obstacle);\n      // }\n    }\n  }\n  let mut obstacle_sum: u32 = 0;\n  for i in 0..MAX_ENEMY_OBSTACLES {\n    obstacle_sum += (!is_obstacle_traversible(obstacles[i])) as u32 + (!is_obstacle_traversible(their_obstacles[i])) as u32;\n  }\n  assert(sum == obstacle_sum);\n\n  map\n}\n\npub fn can_move_to(distance: u16, x: u8, y: u8, obstacles: [Obstacle; MAX_ENEMY_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> bool {\n    let mut can = is_distance_within_viewing_range(distance); //x <= advance;\n    can &= is_tile_free_or_invisible(x, y, obstacles, their_obstacles);\n\n    can\n}\n// pub fn their_x_to_mine(side: u1, x: i8) -> i8 {\n//     let mul = side as i8;\n//     mul * 31 + 16 + x\n// }\n\n// x * s -16 + y = 0 if s == 0 => y = 16\n// x * s -16 + y = 31 if s == 1 => x = 31\n// y = 31 * s + 16 + x\n// s = 0:\n// x = -16 => y = 0\n// x = 15 => y = 31\n// s = 1:\n// x = -16 => y = 31\n// x = 15 => y = 0\n\n// pub fn serialize_x(x: i8) -> (bool, u8) {\n//     let valid = (x >= -(WIDTH / 2) as i8) & (x < (WIDTH / 2) as i8);\n//     (valid, (x + (WIDTH / 2) as i8) as u8)\n// }\n\n// pub fn deserialize_x(x: u8) -> (bool, i8) {\n//     let valid = x < WIDTH;\n//     (valid, x as i8 - (WIDTH / 2) as i8)\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/map.nr"},"77":{"source":"// use crate::MAX_OBSTACLES;\n// use crate::{ HEIGHT, WIDTH };\n// use crate::{ EMPTY, WALL, WATER };\n// use crate::{ MAX_EVENTS }; // MAX_CHARACTERS\n// // use crate::{ RECEIVE_ATTACK };\n// // use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\n// use crate::{ SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\n// use crate::event::Event;\n// use crate::map::{ is_visible }; //is_neighbor\n// use dep::std;\n\n// pub struct Obstacle {\n//     pub id: u8,\n//     pub x: u8,             // 5 bit\n//     pub y: u8,             // 4 bit\n//     pub health: u8,        // 8 bit\n//     pub obstacle_type: u8, // 4 bit\n// }\n\n// pub impl Obstacle {\n//     pub fn serialize(self) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         assert(self.y < 0x10, f\"Obstacle y is too large\");\n//         assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n\n//         let packed_y = self.obstacle_type * 0x10 + self.y;\n//         [ self.x, packed_y, self.health]\n//     }\n\n//     pub fn is_obstacle_traversible(self) -> bool {\n//         (self.obstacle_type >= NON_EMPTY_WALKABLE_TILE_MIN) | (self.obstacle_type == EMPTY)\n//     }\n\n//     pub fn parse_their_obstacles(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let health = field[2];\n//         let o = Obstacle {\n//             id: id,\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn parse_obstacle(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let mut health = field[2];\n//         if (obstacle_type == WALL) | (obstacle_type == WATER) {\n//             let mut damage = 0;\n//             for i in 0..MAX_EVENTS {\n//                 damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n//             }\n//             if damage > (health as u16) {\n//                 health = 0;\n//             } else {\n//                 health -= (damage as u8);\n//             }\n//         }\n//         let o = Obstacle {\n//             id: id, // + (MAX_CHARACTERS as u8),\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//             //was_alive: was_alive,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn is_valid(self) -> bool {\n//         (self.x < WIDTH) & (self.y < HEIGHT)\n//     }\n\n//     pub fn parse_their_obstacles(serialized_obstacles: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_their_obstacles(id, serialized_obstacle));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn parse_my_obstacles(serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE], events: [Event; MAX_EVENTS]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_obstacle(id, serialized_obstacle, events));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn serialize_obstacles(side: u1, enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n//         let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n//         for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//             let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n//                 if is_visible(side, enemy_advance, obstacle.x) {\n//                     let serialized_obstacle = obstacle.serialize();\n//                     for k in 0..3 {\n//                         serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n//                     }\n//                 }\n//             }\n//             serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n//         }\n//         serialized_obstacles\n//     }\n\n//     pub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n//         // assert(side < 2, f\"Side is too large {side}\");\n//         let x = |x| x * (((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n//         [\n//             new_obstacle( 0, x(0), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 1, x(1), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 2, x(3), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 3, x(4), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 4, x(5), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle( 5, x(5), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle( 6, x(5), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle( 7, x(5), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 8, x(4), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 9, x(3), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(10, x(1), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(11, x(0), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(12, x(7), y: 0, obstacle_type: 200, WALL),\n//             new_obstacle(13, x(7), y: 1, obstacle_type: 200, WALL),\n//             new_obstacle(14, x(7), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle(15, x(7), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle(16, x(7), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle(17, x(7), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle(18, x(6), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(19, x(7), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(20, x(5), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(21, x(6), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(22, x(7), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(23, x(8), y: 9, obstacle_type: 255, WATER),\n//         ]\n//     }\n// }\n\n\nuse arenalib::MAX_OBSTACLES;\nuse arenalib::{ HEIGHT, WIDTH };\nuse arenalib::{ EMPTY, WALL, WATER };\nuse arenalib::{ MAX_EVENTS, MAX_HEALTH, MAX_OBSTACLE_TYPE, MAX_ENEMY_OBSTACLES }; // MAX_CHARACTERS\n// use crate::{ RECEIVE_ATTACK };\n// use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\nuse arenalib::{ SerializedArenaEnemyObstacles, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\nuse arenalib::NON_EMPTY_WALKABLE_TILE_MIN;\nuse arenalib::SerializedArenaObstacles;\nuse crate::event::Event;\nuse crate::map::{ is_visible, their_x_to_mine }; //is_neighbor\nuse dep::std;\nuse skplg::{softassert, NOWHERE};\nuse arenalib::SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE;\nuse arenalib::MAX_CHARACTERS;\n\n// pub type Obstacle = [u8; 5];\npub struct Obstacle {\n    pub id: u8,\n    pub x: u8,             // 5 bit\n    pub y: u8,             // 4 bit\n    pub health: u8,        // 8 bit\n    pub obstacle_type: u8, // 4 bit\n}\npub fn get_obstacle_id(obstacle: Obstacle) -> u8 {\n    obstacle.id //obstacle[0]\n}\npub fn get_obstacle_x(obstacle: Obstacle) -> u8 {\n    obstacle.x //[1]\n}\npub fn get_obstacle_y(obstacle: Obstacle) -> u8 {\n    obstacle.y //[2]\n}\npub fn get_obstacle_health(obstacle: Obstacle) -> u8 {\n    obstacle.health //[3]\n}\npub fn get_obstacle_type(obstacle: Obstacle) -> u8 {\n    obstacle.obstacle_type //[4]\n}\n\n#[export]\npub fn new_obstacle(id: u8, x: u8, y: u8, health: u8, obstacle_type: u8) -> pub (bool, Obstacle) {\n  let valid = ((x < WIDTH) | (x == NOWHERE)) & ((y < HEIGHT) | (y == NOWHERE)) & (health <= MAX_HEALTH) & (obstacle_type <= MAX_OBSTACLE_TYPE) & (id as u32 < (MAX_OBSTACLES + MAX_CHARACTERS));\n    // let mut valid = true;\n    // softassert!(quote { valid }, quote { (x < WIDTH) | (x == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid x: {x} >= {WIDTH}\" });\n    // softassert!(quote { valid }, quote { (y < HEIGHT) | (y == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid y: {y} >= {HEIGHT}\" });\n    // softassert!(quote { valid }, quote { health <= MAX_HEALTH }, quote { f\"Cannot create Obstacle: Invalid health: {health} > {MAX_HEALTH}\" });\n    // softassert!(quote { valid }, quote { obstacle_type <= MAX_OBSTACLE_TYPE }, quote { f\"Cannot create Obstacle: Invalid obstacle type: {obstacle_type} > {MAX_OBSTACLE_TYPE}\" }); //TODO: not sure if this or is_valid???\n    // (valid, [ id, x, y, health, obstacle_type ])\n    (valid, Obstacle { id: id, x: x, y: y, health: health, obstacle_type: obstacle_type })\n}\n\n#[test]\nfn test_new_obstacle() {\n  let (val, o) = new_obstacle(0, 0, 2, 0xc8, 0x06);\n  assert(val);\n  assert(o.id == 0);\n}\n\n// #[export]\n// pub struct FrontendObstacle {\n//   pub id: u8,\n//   pub x: u8,\n//   pub y: u8,\n\n// }\n\npub fn serialize_obstacle(obstacle: Obstacle) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n    // we could assert here, since obstacles can only be create with new_obstacle?!\n    // assert(self.y < 0x10, f\"Obstacle y is too large\");\n    // assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n    comptime {\n        let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let packed_y = get_obstacle_type(obstacle) * 0x10 + get_obstacle_y(obstacle);\n                [ get_obstacle_x(obstacle), packed_y, get_obstacle_health(obstacle)]\n            }\n        } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n                [ get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_health(obstacle), get_obstacle_type(obstacle)]\n            }\n        } else {\n            quote {\n                assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n            }\n        };\n        q\n    }\n}\n\npub fn is_obstacle_traversible(obstacle: Obstacle) -> bool {\n    (get_obstacle_type(obstacle) >= NON_EMPTY_WALKABLE_TILE_MIN) | (get_obstacle_type(obstacle) == EMPTY)\n}\n\npub fn parse_their_obstacle(id: u8, fld: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> (bool, Obstacle) {\n    comptime {\n        assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n    }\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let mut valid = true;\n    let x_raw = fld[0];\n    let (x_parsed_valid, x_parsed) = their_x_to_mine(x_raw);\n    softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to convert their x to mine of their obstacle {id}: {x_raw}\" });\n    let y = fld[1] & 0x0F;\n    let obstacle_type = (fld[1]) / 0x10;\n    let health = fld[2];\n    let (obstacle_valid, obstacle) = new_obstacle(id, x_parsed, y, health, obstacle_type);\n    softassert!(quote { valid }, quote { obstacle_valid }, quote { f\"Failed to create new obstacle {id}, {x_parsed}, {y}, {health}, {obstacle_type}\" });\n    (valid, obstacle)\n    // let o = Obstacle {\n    //     id: id,\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn parse_obstacle(id: u8, f: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> (bool, Obstacle) {\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let x = f[0];\n    // let mut y = f[1];\n    // let mut obstacle_type = f[1];\n    // comptime {\n    //     let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n    //         quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let y = f[1] & 0x0F;\n                let obstacle_type = (f[1]) / 0x10;\n    //         }\n    //     } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n    //         quote {\n    //             assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n    //             y = f[1];\n    //             obstacle_type = f[3];\n    //         }\n    //     } else {\n    //         quote {\n    //             assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n    //         }\n    //     };\n    //     q\n    // }\n    // let y = f[1]; // & 0x0F;\n    // let obstacle_type = f[3]; //f[1] / 0x10;// (f[1] & 0xF0) / 0x10;\n    let mut health = f[2];\n    //if (obstacle_type == WALL) | (obstacle_type == WATER) {\n        let mut damage = 0;\n        for i in 0..MAX_EVENTS {\n            damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n        }\n        if damage > (health as u16) {\n            health = 0;\n        } else {\n            health -= (damage as u8);\n        }\n    //}\n    new_obstacle(id, x, y, health, obstacle_type)\n    // let o = Obstacle {\n    //     id: id, // + (MAX_CHARACTERS as u8),\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    //     //was_alive: was_alive,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn is_obstacle_valid(obstacle: Obstacle) -> bool {\n    (get_obstacle_x(obstacle) < WIDTH) & (get_obstacle_y(obstacle) < HEIGHT)\n}\n\npub fn parse_their_obstacles(serialized_obstacles: SerializedArenaEnemyObstacles) -> (bool, [Obstacle; MAX_ENEMY_OBSTACLES]) {\n  let (dummy_obstacle_valid, dummy_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n  assert(dummy_obstacle_valid);\n    let mut obstacles: [Obstacle; MAX_ENEMY_OBSTACLES] = [dummy_obstacle; MAX_ENEMY_OBSTACLES];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n            obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j] = obstacle; //s.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    let serialized_obstacle_field = serialized_obstacles[SERIALIZED_OBSTACLES_ARRAY_SIZE].to_be_bytes::<32>();\n    assert(serialized_obstacle_field.len() == 32);\n    for j in 0..MAX_CHARACTERS {\n      let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n      // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n      let id = (MAX_OBSTACLES + j) as u8;\n      let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n      obstacles[MAX_OBSTACLES + j] = obstacle; //s.push_back(obstacle);\n      valid_result = valid_result & valid;\n    }\n    (valid_result, obstacles)\n}\n\npub fn parse_my_obstacles(serialized_obstacles: SerializedArenaObstacles, events: [Event; MAX_EVENTS]) -> (bool, [Obstacle; MAX_OBSTACLES]) {\n    let mut obstacles: [Obstacle] = &[];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    for i in 0..serialized_obstacles.len() {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            //let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_obstacle(id, serialized_obstacle, events);\n            obstacles = obstacles.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    (valid_result, obstacles.as_array())\n}\n\n#[export]\npub fn serialize_my_obstacles_for_me(obstacles: [Obstacle; MAX_OBSTACLES]) -> pub [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            let serialized_obstacle = serialize_obstacle(obstacle);\n            for k in 0..3 {\n                serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\n\npub fn serialize_my_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let serialized_obstacle = serialize_obstacle(obstacle);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\npub fn serialize_their_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) {\n    let mut valid_result = true;\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let parsed_x = their_x_to_mine(get_obstacle_x(obstacle));\n                valid_result = valid_result & parsed_x.0;\n                let mirrored_obstacle = new_obstacle(\n                    get_obstacle_id(obstacle),\n                    parsed_x.1,\n                    get_obstacle_y(obstacle),\n                    get_obstacle_health(obstacle),\n                    get_obstacle_type(obstacle)\n                );\n                valid_result = valid_result & mirrored_obstacle.0;\n                let serialized_obstacle = serialize_obstacle(mirrored_obstacle.1);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    (valid_result, serialized_obstacles)\n}\n\nfn get_x_of_side(side: u1, x: u8) -> u8 {\n    x * ((side as u8 + 1) as u1) as u8 + side as u8 * (WIDTH - 1 - x)\n}\n\n#[test]\nfn test_x() {\n    let x8s0 = get_x_of_side(0, 8);\n    assert(x8s0 == 8, f\"{x8s0} != 8\");\n    let x8s1 = get_x_of_side(1, 8);\n    assert(x8s1 == 23, f\"{x8s1} != 23\");\n}\n\npub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n    // assert(side < 2, f\"Side is too large {side}\");\n    let x = |x| get_x_of_side(side, x); //(((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n    [\n        new_obstacle( 0, x(0), 2, 200, WALL).1,\n        new_obstacle( 1, x(1), 2, 200, WALL).1,\n        new_obstacle( 2, x(3), 2, 200, WALL).1,\n        new_obstacle( 3, x(4), 2, 200, WALL).1,\n        new_obstacle( 4, x(5), 3, 200, WALL).1,\n        new_obstacle( 5, x(5), 4, 200, WALL).1,\n        new_obstacle( 6, x(5), 5, 200, WALL).1,\n        new_obstacle( 7, x(5), 7, 200, WALL).1,\n        new_obstacle( 8, x(4), 7, 200, WALL).1,\n        new_obstacle( 9, x(3), 7, 200, WALL).1,\n        new_obstacle(10, x(1), 7, 200, WALL).1,\n        new_obstacle(11, x(0), 7, 200, WALL).1,\n        new_obstacle(12, x(7), 0, 200, WALL).1,\n        new_obstacle(13, x(7), 1, 200, WALL).1,\n        new_obstacle(14, x(7), 2, 200, WALL).1,\n        new_obstacle(15, x(7), 3, 200, WALL).1,\n        new_obstacle(16, x(7), 4, 200, WALL).1,\n        new_obstacle(17, x(7), 5, 200, WALL).1,\n        new_obstacle(18, x(6), 8, 255, WATER).1,\n        new_obstacle(19, x(7), 8, 255, WATER).1,\n        new_obstacle(20, x(5), 9, 255, WATER).1,\n        new_obstacle(21, x(6), 9, 255, WATER).1,\n        new_obstacle(22, x(7), 9, 255, WATER).1,\n        new_obstacle(23, x(8), 9, 255, WATER).1,\n        // new_obstacle(24, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(25, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(26, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(27, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(28, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(29, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(30, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(31, x(0), 0, 255, EMPTY).1,\n    ]\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/obstacle.nr"},"78":{"source":"use skplg::{softassert, UNREADABLE_BYTES_PER_FIELD, NOWHERE};\nuse skpla::{ACTION_BYTE_SIZE, Action, new_action, get_action_actor, get_action_type, get_action_target_x, get_action_target_y};\nuse crate::SerializedArenaActions;\nuse crate::{MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER};\nuse crate::{WIDTH, HEIGHT};\nuse crate::WAIT;\n\npub global SERIALIZED_ACTION_BYTE_SIZE: u32 = ACTION_BYTE_SIZE;\npub global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4;\npub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n\n// comptime fn get_serialized_actions_array_size() -> u32 {\n//   let needed_usable_bytes = MAX_ACTIONS * ACTION_BYTE_SIZE;\n//   let usable_bytes_per_field = 32 - UNREADABLE_BYTES_PER_FIELD;\n//   let field_count = needed_usable_bytes / usable_bytes_per_field;\n//   if field_count * usable_bytes_per_field == needed_usable_bytes {\n//     field_count\n//   } else {\n//     field_count + 1\n//   }\n// }\n\n\n  pub fn parse_actions(max_actor_id: u8, fields: SerializedArenaActions) -> (bool, [Action; MAX_ACTIONS]) {\n    let mut valid = true;\n    softassert!(quote { valid }, quote { fields.len() == SERIALIZED_ACTIONS_ARRAY_SIZE }, quote { f\"{fields} does not have size {SERIALIZED_ACTIONS_ARRAY_SIZE}\" });\n    comptime {\n      assert(SERIALIZED_ACTION_BYTE_SIZE == 4);\n    }\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n\n      let mut actions: [Action] = &[];\n      assert(fields.len() == 1);\n      // for i in 0..1 {\n      let i = 0;\n          let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n          assert(split.len() == 32);\n          let mut serialized_actions_per_field = SERIALIZED_ACTIONS_PER_FIELD;\n          if serialized_actions_per_field * (i + 1) > MAX_ACTIONS {\n            serialized_actions_per_field = MAX_ACTIONS - serialized_actions_per_field * i;\n          }\n          assert(serialized_actions_per_field == SERIALIZED_ACTIONS_PER_FIELD);\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              let action_type = split[offset];\n              let actor = split[offset + 1];\n              let target_x = split[offset + 2];\n              let target_y = split[offset + 3];\n\n              softassert!(quote { valid }, quote { action_type as u32 <= MAX_ACTIONS_PER_CHARACTER }, quote { f\"Invalid action: action type {action_type} > {MAX_ACTIONS_PER_CHARACTER}\" });\n              softassert!(quote { valid }, quote { actor <= max_actor_id }, quote { f\"Invalid action: action actor {actor} > {max_actor_id}\" });\n              softassert!(quote { valid }, quote { (target_x < WIDTH) | (target_x == NOWHERE) }, quote { f\"Invalid action: action type {target_x} >= {WIDTH} and not {NOWHERE}\" });\n              softassert!(quote { valid }, quote { (target_y < HEIGHT) | (target_y == NOWHERE) }, quote { f\"Invalid action: action type {target_y} >= {HEIGHT} and not {NOWHERE}\" });\n\n              actions = actions.push_back(new_action(\n                  action_type,\n                  actor,\n                  target_x,\n                  target_y\n              ));\n              /*Action {\n                  action: split[offset],\n                  actor: split[offset + 1],\n                  target_x: split[offset + 2],\n                  target_y: split[offset + 3],\n              }*/\n          }\n      // }\n      // println(actions);\n      (valid, actions.as_array())\n  }\n\n  /**\n  * Warning: This function can throw!!!\n  */\n  pub fn serialize_actions(actor_id: u8, actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n      assert(actions.len() <= MAX_ACTIONS);\n\n      let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, actor_id, NOWHERE, NOWHERE); MAX_ACTIONS];\n      for i in 0..actions.len() {\n          actions_stuffed[i] = actions[i];\n      }\n\n      let mut fields: [Field] = &[];\n      for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n          let mut data: [u8; 32] = [0; 32];\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n              let action = actions_stuffed[index];\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              data[offset] = get_action_type(action);\n              data[offset + 1] = get_action_actor(action);\n              data[offset + 2] = get_action_target_x(action);\n              data[offset + 3] = get_action_target_y(action);\n          }\n          fields = fields.push_back(std::field::bytes32_to_field(data));\n      }\n      fields.as_array()\n  }\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/arenalib/src/actionSerDe.nr"},"90":{"source":"use dep::std::{append::Append};\nuse skplg::UNREADABLE_BYTES_PER_FIELD;\n\npub trait ActionDefinitionPartBuilder<T> { fn new() -> T; }\npub type DEF_ROW<T> = (Quoted, u8, T);\npub comptime fn get_def_register_value(register: Quoted, bytes: u32, bits: u8, bitsize: u8) -> Quoted {\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    if bitsize == 8 {\n      quote { $register[$bytes] }\n      // quote { ($register / $multiplier) as u8 }\n    } else {\n      let divisor = 1 << bits;\n      let mask = std::wrapping_sub(1 << bitsize, 1);\n      if bitsize == 1 {\n        // quote { (($register / $multiplier) as u1) == 1 }\n        quote { (($register[$bytes] as u8 & $divisor as u8) != 0 as u8) }\n      } else {\n        quote { (($register[$bytes] as u8 / $divisor as u8) & $mask as u8) }\n        // quote { (($register / $multiplier) as u8) & $mask as u8 }\n      }\n    }\n}\npub comptime fn build_over_def_array<Env, T>(array: [DEF_ROW<T>], base_index: u32, builder: fn[Env] (u32, u8, Quoted, u8, T) -> Quoted) -> Quoted {\n  let mut result = quote {};\n  \n  let mut bits: u8 = 0;\n  let mut bytes: u32 = base_index;\n\n  for i in 0..array.len() {\n    let (varname, bitsize, args) = array[i];\n    assert(bitsize <= 8, f\"Invalid bit size: {bitsize}\");\n    if (bits + bitsize) > 8 {\n      bytes += 1;\n      bits = 0;\n    }\n    assert(bits < 8, f\"bits must not reach 8 or higher: {bits}\");\n\n    let new_result = builder(bytes, bits, varname, bitsize, args);\n    result = quote { $result $new_result };\n\n    bits += bitsize;\n  }\n  result\n}\npub comptime fn derive_action_def_def_builder<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let mut params: [(Quoted, Type)] = &[];\n  let mut last_byte: u32 = 0;\n  let mut result: Quoted = build_over_def_array(array, 0, |bytes, bits, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { u8 }.as_type() } else { quote { u8 }.as_type() };\n    params = params.push_back((varname, t));\n    let mut r = quote {};\n    if bytes != last_byte {\n      r = r.append(quote { , });\n    } else if (bytes + bits as u32) != 0 {\n      r = r.append(quote { + });\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = r.append(quote { $varname  });\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = r.append(quote { $varname as u8 * $multiplier });\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = r.append(quote { (( $varname & $mask ) * $multiplier) });\n      }\n    }\n    last_byte = bytes;\n    r\n  });\n  f.set_parameters(params);\n\n  let return_type = f.return_type();\n\n  f.set_body(quote { $return_type { register: [ $result ] } }.as_expr().unwrap());\n  // println(f.body());\n}\npub comptime fn get_action_def_def_register_size<T>(array: [DEF_ROW<T>]) -> u32 {\n  let mut size = 0;\n  let _ = build_over_def_array(array, 0, |bytes, _, _, _, _|{\n    size = bytes;\n    quote {}\n  });\n  size + 1\n}\npub comptime fn get_action_def_def_register_element_type() -> Type {\n  quote { u8 }.as_type()\n}\npub comptime fn get_action_def_def_register_type<T>(array: [DEF_ROW<T>]) -> Type {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  quote { [$et; $size] }.as_type()\n}\npub comptime fn derive_action_def_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  // let size = get_action_def_requirements_register_size();\n  let fields = s.fields([]);\n  assert(fields.len() == 1);\n  s.set_fields([(fields[0].0, get_action_def_def_register_type(array))]);\n}\npub comptime fn derive_action_def_def_struct_new<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  let t = get_action_def_def_register_type(array);\n  f.set_return_type(t);\n  f.set_body(quote { ActionRequirement { [0 as $et; $size] } }.as_expr().unwrap());\n}\npub comptime fn derive_frontend_action_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  let mut fields: [(Quoted, Type)] = &[];\n  let _ = build_over_def_array(array, UNREADABLE_BYTES_PER_FIELD, |_, _, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    fields = fields.push_back((varname, t));\n    quote {}\n  });\n  s.set_fields(fields);\n}\npub comptime fn derive_frontend_action_def_struct_builder<T>(param_name: Quoted, base_index: u32, array: [DEF_ROW<T>]) -> Quoted {\n  // let mut params: [(Quoted, Type)] = &[];\n  let mut first = true;\n  let mut result: Quoted = build_over_def_array(array, base_index, |bytes, bits, varname, bitsize, _|{\n    // let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    // params = params.push_back((varname, t));\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    let mut r = quote {};\n    if !first {\n      r = quote { , };\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = quote { $r $varname: $param_name[$bytes] };\n      // r = quote { $r $varname: ($param_name / $multiplier) as u8 };\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = quote { $r $varname: ($param_name[$bytes] & $multiplier) != 0 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u1) == 1 };\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = quote { $r $varname: (( $param_name[$bytes] / $multiplier) & $mask ) as u8 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u8) & $mask as u8 };\n      }\n    }\n    first = false;\n    r\n  });\n  // f.set_parameters(params);\n\n  // let return_type = f.return_type();\n  // // f.set_return_type(return_type.as_type());\n  // f.set_return_data();\n  // f.set_return_public(true);\n  // // println(result);\n  // f.\nresult\n  // quote {  $result } };\n}\n\n// pub global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2; // u2\n\n// global YES: u8 = 1;\n// global NO: u8 = 0;\n// global MIN_STATUS: u8 = 0;\n// global MAX_STATUS: u8 = 15;\n\n// // pub type ActionDefinitionRegister = \n// pub fn build_action_def_requirements_none() -> ActionRequirement {\n//   build_action_def_requirements(\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     MIN_STATUS,\n//     MAX_STATUS,\n//     0 as u8,\n//     255 as u8)\n// }\n// pub fn build_action_def_pre_calc_effects_idle() -> ActionPreCalcEffect {\n//   build_action_def_pre_calc_effect(\n//     WAIT,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1)\n// }\n// // comptime fn no_requirements() -> CtString {\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1, \n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         0 as u8,\n// //         NO as u1)\n// // }\n// pub fn build_action_def_result_event_none() -> ActionResultEvent {\n//   build_action_def_result_event(\n//     0,\n//     0,\n//     ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//     NO_EVENT,\n//     NO_EVENT,\n//     0 as u8\n//   )\n// }\n// // comptime fn no_event() -> CtString {\n// //     build_action_event_def(NO_EVENT, NO_EVENT, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 0 as u8)\n// // }\n// pub fn build_wait_action_def() -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements_none(),\n//     build_action_def_pre_calc_effects_idle(),\n//     build_action_def_result_effects(\n//       0 as u8,\n//       0 as u8,\n//       1 as u8,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_wait_action_def() -> CtString {\n// //     build_action_def(\n// //         no_requirements(),\n// //         no_event(),\n// //         no_event(),\n// //         1 as u8,\n// //         0 as u8,\n// //         ACTION_RESULT_COORDINATES_IDX_SELF,\n// //         NO as u1,\n// //         WAIT\n// //     )\n// // }\n// // pub global WAIT_ACTION: ActionDefinition = comptime { let x = build_wait_action_def(); f\"[{x}]\".quoted_contents() };\n// pub fn build_sneak_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0 as u8,\n//       1 as u8),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0 as u8,\n//       0 as u8,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       YES as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_sneak_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     no_event(), // TODO: not sure if on-seen we should not send a move event instead - that way one could sneak and stay hidden, but not sneak while visible\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_move_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       1),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_MOVE,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_move_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_MOVE, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_cast_action(this_action_id: u8, energy: u8, class: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_CAST,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_cast_action(this_action_id: u8, energy: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_CAST, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_ritual_action(cast_action_id: u8, energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       RITUAL_ROUNDS_FOR_WIN,\n//       MAX_STATUS,\n//       0,\n//       255),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_ritual_action(this_action_id: u8, energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         RITUAL_ROUNDS_FOR_WIN,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 255 as u8),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 255 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1), // TODO: Maybe set this to handle friendly fire???\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     cast_action_id)\n// // }\n// pub fn build_search_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_search_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS, // should be max of shoot\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_DRAW,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_DRAW, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       draw_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     draw_action_id)\n// // }\n// pub fn build_disarm_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_disarm_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_set_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         ADD_OBSTACLE,\n//         TRAP,\n//         0),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_set_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         YES as u1),\n// //     no_event(),\n// //     build_action_event_def(ADD_OBSTACLE, TRAP, 0 as u8, 50 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n\n// // pub fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // fn get_action_needs_target_free_space(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// // }\n// // fn get_action_needs_target_is_not_self(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// // }\n// // fn get_action_needs_status_visible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// // }\n// // fn get_action_needs_status_invisible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// // }\n// // fn get_action_needs_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_sets_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_removes_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_max_range(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_MAX_RANGE]\n// // }\n// // fn get_action_needs_min_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MIN_STATUS]\n// // }\n// // fn get_action_needs_max_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MAX_STATUS]\n// // }\n// // fn get_action_needed_energy(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDED_ENERGY]\n// // }\n// // fn get_action_unseen_event_is_internal(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_EVENT_IS_TRAP] == 1\n// // }\n// // fn get_action_result_event_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_event_not_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_not_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_not_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_not_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_not_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_not_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_status_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// // }\n// // fn get_action_move_to_target(action: ActionDefinition) -> u1 {\n// //     action.register[action.base_index + ACTION_MOVE_TO_TARGET] as u1\n// // }\n// // fn get_action_is_continuous(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_IS_CONTINUOUS] == 1\n// // }\n// // fn get_action_needs_previous_action(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_PREVIOUS_ACTION] as u8\n// // }\n\n// // pub global ACTION_DEFINITION_SIZE: u32 = (ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 5) as u32; // 2 bytes for move_to_target and status_multiplier\n// // pub global ACTION_DEFINITION_REGISTER_SIZE: u32 = ACTION_DEFINITION_SIZE * (1 + (MAX_ACTIONS_PER_CHARACTER - 1) * (CLASS_COUNT - 1));\n\n// // fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // pub struct ActionDefinitionRegister {\n// //   register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinitionRegister {\n// //   pub fn new(register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinitionRegister {\n// //     ActionDefinitionRegister {\n// //       register: register\n// //     }\n// //   }\n\n// //   pub fn resolve_action(self, action: Action) -> ActionDefinition {\n// //     ActionDefinition {\n// //       base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //       action: action,\n// //       register: self.register\n// //     }\n// //   }\n// // }\n\n// // pub struct ActionDefinition {\n// //     base_index: u16,\n// //     action: Action,\n// //     register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinition {\n// //     pub fn new(action: Action, register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinition {\n// //         ActionDefinition {\n// //             base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //             action: action,\n// //             register: register\n// //         }\n// //     }\n// // }\n\n// // impl ResolvedAction for ActionDefinition {\n// //     fn get_action_needs_target_free_space(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: ActionDefinition) -> u1 {\n// //         self.register[self.base_index + ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n\n// // pub struct TestActionDefinition {\n// //     pub register: [u8; ACTION_DEFINITION_SIZE],\n// //     pub action: Action,\n// // }\n\n// // impl ResolvedAction for TestActionDefinition {\n// //     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n// //         self.register[ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n// // #[test]\n// // fn test_execute_action() {\n// //     let action = build_test_action_def!(build_move_action(4), quote { 1, 2, 3, 4 }); //new_action(1, 2, 3, 4);\n// //     let my_advance = 10;\n// //     let their_advance = 1;\n// //     let actor = Character {\n// //         id: 2,\n// //         x: 2,\n// //         y: 4,\n// //         target_x: 0,\n// //         target_y: 0,\n// //         health: 255,\n// //         damage_mod: 1,\n// //         last_action: WAIT,\n// //         class: MAGE,\n// //         is_hidden: 0 as u1,\n// //         has_been_seen: true,\n// //         status: 0,\n// //         actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]\n// //     };\n// //     let energy = 15;\n// //     let my_obstacles = get_default_obstacles(0);\n// //     let their_obstacles = get_default_obstacles(1);\n// //     let (valid, event, internal_event, c, result_energy) = execute_action(\n// //         action,\n// //         my_advance,\n// //         their_advance,\n// //         actor,\n// //         energy,\n// //         my_obstacles,\n// //         their_obstacles\n// //     );\n// //     assert(valid, \"valid\");\n// //     assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n// //     assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n// //     assert(event.x == action.get_action_target_x(), f\"{event}.target_x is not action target x\");\n// //     assert(event.y == action.get_action_target_y(), f\"{event}.target_y is not action target y\");\n// //     assert(c.x == event.x, f\"{c}.x is not action target x\");\n// //     assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n// //     assert(result_energy == 11, f\"{result_energy} != 11\");\n// // }\n\n// // #[export]\n// // pub fn build_action_register(actions: [])\n\npub type CharacterActionDefinition = [u8; 32];\npub type CharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [CharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedCharacterActionDefinition = Field;\npub type SerializedCharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedRosterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32, let MAX_CHARACTERS: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS];","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionDefinition.nr"},"91":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionRequirements::{get_action_def_requirements_base_index, get_action_def_requirements_byte_size};\nuse std::append::Append;\n\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_PRE_CALC_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { pre_calc_effect_continues_action }, 3, |continued_action|quote { let continues_action: bool = $continued_action as u8 == actor_last_action; }),\n    action_def_def(quote { pre_calc_effect_is_continuous }, 1, |is_continuous|quote { let is_continuous: bool = $is_continuous as bool; }),\n    action_def_def(quote { pre_calc_effect_interrupts }, 1, |is_interrupting|quote { let is_interrupting: bool = $is_interrupting as bool; }),\n    action_def_def(quote { pre_calc_effect_allow_retargeting }, 1, |allows_retargetting|quote { let not_interrupted_through_retargeting: bool = $allows_retargetting as bool | ((action_target_x == actor_target_x) & (action_target_y == actor_target_y)); })\n];\npub comptime fn get_action_def_pre_calc_base_index() -> u32 {\n  get_action_def_requirements_byte_size()+get_action_def_requirements_base_index()\n}\n\npub comptime fn get_action_def_pre_calc_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_PRE_CALC_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_pre_calc_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n// }\n#[derive_action_def_def_pre_calc_event_struct]\npub struct ActionPreCalcEffect {\n  pub register: [u8; 32]\n}\nimpl ActionPreCalcEffect {\n  #[derive_action_def_pre_calc_effect_struct_new]\n  pub fn new() -> ActionPreCalcEffect {\n    ActionPreCalcEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_pre_calc_effect_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_pre_calc_effect_builder]\npub fn build_action_def_pre_calc_effect() -> pub ActionPreCalcEffect { ActionPreCalcEffect::new() }\n\npub comptime fn apply_action_pre_calc_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_pre_calc_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_PRE_CALC_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  quote {\n    $result\n    is_not_interrupted = (\n      ((!is_continuous) as u8 * (!is_interrupting) as u8) + // that's the ID of the wait action => leave status, but not continuous\n      ((is_continuous) as u8 * continues_action as u8 * not_interrupted_through_retargeting as u8)\n    ) > 0;\n\n    actor_progress *= is_not_interrupted as u8;\n  }\n}\n\npub comptime fn set_action_def_pre_calc_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_pre_calc_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_pre_calc_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_pre_calc_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[derive_frontend_action_def_pre_calc_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefPreCalcEffects {}\n\n\npub comptime fn derive_frontend_action_def_pre_calc_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_pre_calc_base_index(), ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n  quote { FrontendActionDefPreCalcEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionPreCalcEffect.nr"},"92":{"source":"use skplg::{UNREADABLE_BYTES_PER_FIELD, softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse std::append::Append;\nuse crate::{actionDefinition::derive_frontend_action_def_struct, actionDefinition::derive_frontend_action_def_struct_builder};\n\n    // fn get_action_req_target_free_space(self) -> bool;\n    // fn get_action_req_target_is_not_self(self) -> bool;\n    // fn get_action_req_status_visible(self) -> bool;\n    // fn get_action_req_status_invisible(self) -> bool;\n    // fn get_action_req_status_hidden(self) -> bool;\n    // fn get_action_req_max_range(self) -> u8;\n    // fn get_action_req_min_status(self) -> u8;\n    // fn get_action_req_max_status(self) -> u8;\n    // fn get_action_req_energy(self) -> u8;\n    // fn get_action_req_previous_action(self) -> u8;\npub type ActionDefDefRequirementCheck = (Quoted, Quoted);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, expr: Quoted, msg: Quoted) -> DEF_ROW<ActionDefDefRequirementCheck> {\n    (varname, bit_size, (expr, msg))\n}\n// comptime global ACTION_DEF_DEF_FIELD_COUNT: u32 = 11;\nglobal ACTION_DEF_DEF_REQUIREMENTS: [DEF_ROW<ActionDefDefRequirementCheck>] = [\n    action_def_def(quote { action_req_target_free_space }, 1, quote { could_move_to_target }, quote { f\"Target space cannot be moved to {action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" }),\n    action_def_def(quote { action_req_target_is_not_self }, 1, quote { (actor_x != action_target_x) | (actor_y != action_target_y) }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" }),\n    action_def_def(quote { action_req_status_visible }, 1, quote { actor_is_in_view_range & !actor_is_hidden },  quote { f\"Character must be fully visible for action {action_type}: in_view_range: {actor_is_in_view_range} & !hidden {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_invisible }, 1, quote { !actor_is_in_view_range | actor_is_hidden }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {actor_is_in_view_range} || hidden: {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_hidden }, 1, quote { actor_is_hidden }, quote { f\"Character needs to be hidden to perform action {action_type}\" }),\n    // action_def_def(quote { action_req_previous_action }, 3, quote { true }, quote { f\"\" }),\n    action_def_def(quote { action_req_min_progress }, 4, quote { action_req_min_progress as u8 <= actor_progress as u8 }, quote { f\"Character needs min progress {action_req_min_progress} to perform action {action_type}, but only has {actor_progress}\" }),\n    action_def_def(quote { action_req_max_progress }, 4, quote { action_req_max_progress as u8 >= actor_progress as u8 }, quote { f\"Character cannot have a higher progress than {action_req_max_progress} to perform action {action_type}: got {actor_progress}\" }),\n    action_def_def(quote { action_req_status }, 4, quote { (action_req_status as u8 == 0 as u8) | (action_req_status as u8 == actor_progress as u8) }, quote { f\"Character can only perform action {action_type} while having status {action_req_status}. Invalid status {actor_status}\" }),\n    // action_def_def(quote { action_req_required_energy }, 4, quote { action_req_required_energy <= energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_req_required_energy}\" }),\n    action_def_def(quote { action_req_max_range }, 8, quote { distance as u16 <= (action_req_max_range as u16) * (action_req_max_range as u16) }, quote { f\"Character is out of range! Distance: {distance} > {action_req_max_range}: {{{actor_x},{actor_y}}} - {{{action_target_x},{action_target_y}}} with {action_req_max_range}\" }),\n];\npub comptime fn get_action_def_requirements_base_index() -> u32 {\n  UNREADABLE_BYTES_PER_FIELD as u32\n}\n\npub comptime fn get_action_def_requirements_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_REQUIREMENTS)\n}\n\ncomptime fn derive_action_def_def_req_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n// comptime fn derive_action_def_requirements_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_REQUIREMENTS);\n// }\n\n#[derive_action_def_def_req_struct]\npub struct ActionRequirement {\n  pub register: [u8; 32]\n}\nimpl ActionRequirement {\n  #[derive_action_def_requirements_struct_new()]\n  pub fn new() -> ActionRequirement {\n    ActionRequirement { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_req_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[export]\n#[derive_action_def_def_req_builder]\npub fn build_action_def_requirements() -> pub ActionRequirement { ActionRequirement::new() }\n\npub comptime fn validate_action_requirements(valid_varname: Quoted, register: Quoted) -> Quoted {\n  let mut result = build_over_def_array(ACTION_DEF_DEF_REQUIREMENTS, get_action_def_requirements_base_index(), |bytes, bits, varname, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    // let varname = f\"action_requirement_{i}_is_valid\".quoted_contents();\n    let (checkexpr, msg) = args;\n    let check = if bitsize == 1 { quote { !($varname as bool) | ($checkexpr) } } else { quote { $checkexpr } };\n    let sa = softassert(valid_varname, check, msg);\n    quote {\n      let $varname = $expr;\n      $sa\n    }\n  });\n  // println(result);\n  // quote { assert(1==1); }\n  result\n}\n\npub comptime fn set_action_def_requirements_in_action_def(requirements: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_requirements_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_requirements_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $requirements.register[$i]; });\n    // result = quote { $result $action_def += $requirements.register[$i] as Field * $multiplier; };\n    // multiplier *= 2.pow_32(8);\n  }\n  // println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_requirements_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[derive_frontend_action_def_requirements_struct]\n#[derive(Default)]\npub struct FrontendActionDefRequirements {}\n\n\npub comptime fn derive_frontend_action_def_requirements_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_requirements_base_index(), ACTION_DEF_DEF_REQUIREMENTS);\n  // println(content);\n  quote { FrontendActionDefRequirements { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionRequirements.nr"},"93":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse skplg::softassert;\nuse crate::actionPreCalcEffect::{get_action_def_pre_calc_base_index, get_action_def_pre_calc_effects_byte_size};\nuse std::append::Append;\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { action_result_required_energy }, 4, |action_required_energy|{\n      let check = softassert(quote { is_valid }, quote { action_required_energy <= result_energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_required_energy}\" });\n      quote {\n        let action_required_energy = $action_required_energy;\n        $check\n        result_energy = std::wrapping_sub(result_energy, action_required_energy);\n      }\n    }),\n    action_def_def(quote { action_result_progress_increment }, 4, |progress_increment|quote { let action_result_effect_progress_increment: u32 = $progress_increment as u32; }),\n    action_def_def(quote { action_result_progress_multiplier }, 2, |progress_multiplier|quote { let action_result_effect_progress_multiplier: u32 = $progress_multiplier as u32; }),\n    action_def_def(quote { action_result_move_to_target }, 1, |move_to_target|quote { result_coords = coords[$move_to_target as u8]; }),\n    action_def_def(quote { action_result_hide }, 1, |hide|quote { let action_result_effect_hide: bool = $hide as bool; }),\n    action_def_def(quote { action_result_reveal }, 1, |leave_shadows|quote { let action_result_effect_leave_shadows: bool = $leave_shadows as bool; })\n];\npub comptime fn get_action_def_result_effect_base_index() -> u32 {\n  get_action_def_pre_calc_base_index() + get_action_def_pre_calc_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_result_effect_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n// }\n#[derive_action_def_def_result_effect_struct]\npub struct ActionResultEffect {\n  pub register: [u8; 32]\n}\nimpl ActionResultEffect {\n  //#[derive_action_def_result_effects_struct_new]\n  pub fn new() -> ActionResultEffect {\n    ActionResultEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_effects_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_result_effects_builder]\npub fn build_action_def_result_effects() -> pub ActionResultEffect { ActionResultEffect::new() }\n\npub comptime fn apply_action_result_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_effect_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n// println(result);\n  quote {\n    $result\n\n    let result_progress_raw = actor_progress as u32 * action_result_effect_progress_multiplier + action_result_effect_progress_increment;\n    //softassert!(quote { is_valid }, quote { result_progress_raw <= MAX_PROGRESS as u32 }, quote { f\"Invalid result progress: {result_progress_raw} > {MAX_PROGRESS}\" });\n    result_progress = result_progress_raw as u8;\n\n    result_is_hidden = (result_is_hidden & !action_result_effect_leave_shadows) | action_result_effect_hide;\n    result_is_visible = !result_is_hidden & is_visible(enemy_advance, result_coords.0);\n  }\n}\n\npub comptime fn set_action_def_result_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_result_effect_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_result_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[derive_frontend_action_def_result_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEffects {}\n\n\npub comptime fn derive_frontend_action_def_result_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_result_effect_base_index(), ACTION_DEF_DEF_RESULT_EFFECTS);\n  quote { FrontendActionDefResultEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEffect.nr"},"94":{"source":"// pub global ACTION_RESULT_EVENT_TYPE: u8 = 0;\n// pub global ACTION_RESULT_EVENT_SUBTYPE: u8 = 1;\n// pub global ACTION_RESULT_EVENT_VALUE_MULTIPLIER: u8 = 2;\n// pub global ACTION_RESULT_EVENT_VALUE_FIXED_ADDITION: u8 = 3;\n// pub global ACTION_RESULT_EVENT_COORD_IDX: u8 = 4;\n// pub global ACTION_RESULT_EVENT_RADIUS: u8 = 5;\n// pub comptime fn to_action_result_event(event_type: Quoted, subtype: Quoted, val_mul: Quoted, val_add: Quoted, coord_idx: Quoted, radius: Quoted) -> Quoted {\n//     quote { ($event_type, $subtype, $val_mul, $val_add, $coord_idx, $radius)}\n// }\n// pub comptime fn get_type_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_subtype_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_value_multiplier_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_value_addition_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n// pub comptime fn get_coord_idx_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.4 }\n// }\n// pub comptime fn get_radius_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.5 }\n// }\n// pub type ActionResultEventDefinition = (u8, u8, u8, u8, u8, u8);\n\nuse skplg::{softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionResultEffect::{get_action_def_result_effect_base_index, get_action_def_result_effects_byte_size};\n\npub type ActionDefDefResultEventRow = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefResultEventRow> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EVENTS: [DEF_ROW<ActionDefDefResultEventRow>] = [\n    action_def_def(quote { result_event_value_fixed_addition }, 8, |fixed_addition|quote { result_event_value += $fixed_addition as u32; }),\n    action_def_def(quote { result_event_value_scaled_by_progress }, 4, |factor|quote { result_event_value += ($factor as u32) * (actor_progress as u32); }),\n    action_def_def(quote { result_event_coords_idx }, 2, |coords_idx|{\n     let check = softassert(quote { is_valid }, quote { $coords_idx < 3 }, quote { f\"Invalid event coord idx: {result_event_coords_idx} does not fit in u8!\" });\n      quote {\n        let result_event_coords_idx: u8 = $coords_idx;\n        $check\n        result_event_coords = coords[result_event_coords_idx & 3];\n      }\n    }),\n    action_def_def(quote { result_event_type }, 4, |event_type|quote { result_event_type = $event_type; }),\n    action_def_def(quote { result_event_subtype }, 8, |event_subtype|quote { result_event_subtype = $event_subtype; }),\n    action_def_def(quote { result_event_radius }, 6, |event_radius|quote { result_event_radius = $event_radius; })\n];\ncomptime fn get_action_def_result_event_base_index() -> u32 {\n  get_action_def_result_effect_base_index() + get_action_def_result_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_event_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EVENTS)\n}\n\n\ncomptime fn derive_action_def_def_result_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EVENTS);\n// }\n#[derive_action_def_def_result_event_struct]\npub struct ActionResultEvent {\n  pub register: [u8; 32]\n}\nimpl ActionResultEvent {\n  #[derive_action_def_result_event_struct_new]\n  pub fn new() -> ActionResultEvent {\n    ActionResultEvent { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_event_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[export]\n#[derive_action_def_def_result_event_builder]\npub fn build_action_def_result_event() -> pub ActionResultEvent { ActionResultEvent::new() }\n\npub comptime fn build_result_event(event_idx: u32, events_collection_varname: Quoted, valid_varname: Quoted, register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_event_base_index();\n  let event_data_start_idx = base_index + event_idx * get_action_def_result_event_byte_size();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EVENTS, event_data_start_idx, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  //let value_valid_msg = f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\";\n  // let value_valid = softassert(valid_varname, quote { result_event_value <= 255 as u32 }, quote { f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\" });\n  let full_result = quote {\n    let event_idx = $event_idx as u8;\n    let mut result_event_type: u8 = 0;\n    let mut result_event_subtype: u8 = 0;\n    let mut result_event_coords: (u8,u8) = (NOWHERE, NOWHERE);\n    let mut result_event_value: u32 = 0;\n    let mut result_event_radius: u8 = 0;\n    $result\n    // $value_valid\n    if (result_event_value > 255) {\n      result_event_value = 255;\n    }\n\n    $events_collection_varname.push(build_subtype_value_event(\n      result_event_type,\n      actor_id,\n      result_event_coords.0,\n      result_event_coords.1,\n      result_event_value as u8,\n      result_event_subtype,\n      result_event_radius\n    ));\n  };\n  // println(full_result);\n  full_result\n}\n\npub comptime fn set_action_def_result_event_in_action_def(event: Quoted, event_count: u32, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let mut base_index = get_action_def_result_event_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  // println(\"start\");\n  for event_idx in 0..event_count {\n    let idx = event_idx * get_action_def_result_event_byte_size();\n    for i in 0..get_action_def_result_event_byte_size() {\n      let destination_idx = base_index + idx + i;\n      result = quote { $result $action_def[$destination_idx] = $event[$event_idx].register[$i]; };\n      // result = quote { $result $action_def += $event[$event_idx].register[$i] as Field * $multiplier; };\n      // multiplier *= 2;\n    }\n  }\n  //println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_event_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[derive_frontend_action_def_result_event_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEvent {}\n\n\npub comptime fn derive_frontend_action_def_result_event_struct_builder(param_name: Quoted, event_idx: u32) -> Quoted {\n  let idx = get_action_def_result_event_base_index() + event_idx * get_action_def_result_event_byte_size();\n  let content = derive_frontend_action_def_struct_builder(param_name, idx, ACTION_DEF_DEF_RESULT_EVENTS);\n  quote { FrontendActionDefResultEvent { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEvent.nr"}},"names":["turn"],"brillig_names":["directive_invert","directive_to_radix","directive_integer_quotient"]}