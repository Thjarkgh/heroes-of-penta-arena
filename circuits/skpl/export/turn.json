{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":16832081099097789626,"abi":{"parameters":[{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"my_chars_input","type":{"kind":"field"},"visibility":"private"},{"name":"my_char_actions","type":{"kind":"array","length":30,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_obstacles_input","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"},{"name":"actions","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"move","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"enemy_advance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"enemy_objects","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"enemy_events","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_result_advance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"my_result_events","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_result_objects","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"gamestate_before_hash","type":{"kind":"field"},"visibility":"private"},{"name":"gamestate_after_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11167361122731473993":{"error_kind":"fmtstring","length":27,"item_types":[]},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"}}},"bytecode":"","debug_symbols":"7N3drhxJt17ne/mOdVCVOSurSrdiGIZsSYYAYcuw5CNB9+71qbl+WkW+w62edKyIHGfcQm0i89nUijGLzZj/9R//9t/97//P//m//Yd/+ff/6T//41//L//1H//xP/0f/+a//If/9C9v/9N//cf+3/+f/vP/9W/+5Z//03/+L//m//4v//jX2/1yvfyrf/y7f/m3//z19XL5b//qH//+P/zHf/ePf32//bd/9fLx637bHj8+/vbrJ3x83/bj/eP7vl9u8PHb8ePDtX3+ztvPPrptz+39sb/+vtvPn/q6fTz0foUPX67P9w9fjsfXD/+v/+ofJeLfR7yJ+PcRDxH/PuJdxL+P+BDx7yM+Rfz7iNeLig2KVxUbFDcVGxSdWjoUS8UGReeWDkUHlw5FJ5cORUeXDkVnlwbFzdmlQ9HZpUPR2aVD0dmlQ7FUbFB0dulQdHbpUHR26VB0dulQdHZpUNydXToUnV06FJ1dOhSdXToUS8UGRWeXDkVnlw5FZ5cORWeXDkVnlwbFcnbpUHR26VB0dulQdHbpUCwVGxTXml3uH++63fcdYO7399/4en/e/pbiWrPLKMW1ZpdRir+YXbbn/fNxro+v7/nP/63n/8z/1u3yP/W/df2f+t/6RXvct88/Hc/rAX86ntdbvds9r88tf/ztj97+49P3y16fH66ffPh4Xq4/Pnw8r/ePD//zTV4+/Njq/Tke27F9/fA/33U/0bvWid71dqJ3PU70rvcTvevjRO/6PM+7HpcTvev1RO96om46TtRNR53oXU/UTceJuuk4UTcdJ+qm40TddD9RN91P1E33E3XT/UTddK8TveuJuul+om66n6ib7ifqpvuJuulxom56nKibHifqpseJuulRJ3rXE3XT47t3032r9/9C474d9T8+/ndPIXj871438PjfPVju2/P9v5W579f/8fGf371B4PG/e1bA43/3UoDH/+6HPzz+dz/P80+e53c/ouHx5z51n9//1I1/9r//qRsff+5T93qZ+9i9XuY+d6+XuQ/e62Xuk/d6mfvovV7mPnuvl7kP3+tl7pn3epl76L1eJj9/r5Ofv9fJz9/r5OfvdfLz9/r9z9/8/N///M3P//3P3/z8c0+/1+vk5+/1+5+/8fm373/+5uf//udvfv7vf/7m55/8/N0mP3+3yc/fbfLzd5v8/N3m/vr5uk0+/+6Tz7/75PPvPvn5u3//8zc///c/f/PzT/798z7598/75OfvPvn5u09+/tbk529Nfv7W5N8/1+Tzb00+/9bk829Nfv7W5H//W5N//1yTf/98m/z759vk5++3v8qQnn/y8/fbXzlIzz/5+fvtrwak5598/v32V/jR808+/377q/bg/P321+fR80/+/fO3v+aOnv/7n7/5+Sc/f7/9FXP0/JOfv9/+Kjh6/snP329/ZRs9/+Tz77e/Wo2ef/L599tfgQbn77e/1oyef/Lvn7/99WP0/JN///ztrwmDnz/f/uovev7Jz99vf0UXPf/k5++3v0qLnn/y+XeCK6/y808+/05+6dV1gluv4vNPcO1Vfv7Jv3+e4OKr/PyTn78TXH2Vn3/y83eCy6/y809+/k5+/dV18vuvtsnvv9omv/9qm+D+q3T+bhPcf5Wf//ufv/n55/7+eZv8/qttgvuv8s+fuc/fbfL7r7bJ77/aJr//apv8/qtt8vuvtsnvv9omv/9qm+D+q3j+TnD/VX7+ub9/3ia//2qb/P6rbYL7r+LPnwnuv8rPP/n5O/n9V9vk919tk99/tU1+/9U2+f1X2+T3X20T3H8Vz98J7r/Kzz/598+T33+1TX7/1TbB/Vf558/k5+/k919tk99/tU1+/9U2+f1X2+T3X22T33+1TX7/1TbB/Vfx/J3g/qv8/JN//zz5/Vfb5PdfbRPcfxV//kxw/1V+/snP38nvv9omv/9qm/z+q23y+6+2ye+/2ia//2qb4P6reP5OcP9VfP7J77/aJr//apv8/qttgvuv4s+fCe6/ys8/+fk7+f1X2+T3X22T33+1TX7/1Tb5/Vfb5PdfbRPcfxXP3wnuv8rP//3P3/z8k3//PPn9V9sE91/lnz+Tn7+T33+1TX7/1Tb5/Vfb5PdfbZPff7VNfv/VNvn9V9sE91/F83eC+6/y80/+/fPk919tk99/tU1w/1X8+TPB/Vf5+Sc/fye//2qb/P6rbfL7r7bJ77/aJr//apv8/qt9gvuv0vm7T3D/VX7+ub9/3ie//2q/fP/zNz//3OfvPsH9V/n55z5/98nvv9onv/9qn/z+q33y+6/2ye+/2ie//2qf4P6reP5OcP9Vfv65v3/eJ7//ap/8/qt9gvuv4s+fCe6/ys8/+fk7+f1X++T3X+2T33+1T37/1T75/Vf75Pdf7RPcfxXP3wnuv4rPP/n9V/vk91/tk99/tU9w/1X8+TPB/Vf5+Sc/fye//2qf/P6rffL7r/bJ77/aJ7//ap/8/qt9gvuv4vk7wf1X+fm///mbn3/y758nv/9qn+D+q/zzZ/Lzd/L7r/bJ77/aJ7//ap/8/qt98vuv9snvv9onv/9qn+D+q3j+TnD/VX7+yb9/nvz+q33y+6/2Ce6/ij9/Jrj/Kj//5Ofv5Pdf7ZPff7VPfv/VPvn9V/vk91/tk99/tU9w/1U8fye4/yo//+TfP09+/9U++f1X+wT3X+WfP5Ofv5Pff7VPfv/VPvn9V/vk91/tk99/tU9+/9U++f1X+wT3X8Xzd4L7r/LzT/798+T3X+2T33+1T3D/Vfz5M8H9V/n5Jz9/J7//ap/8/qt98vuv9snvv9onv/9qn/z+q32C+6/i+TvB/Vfp+Wvy+69q8vuvavL7r2qC+6/Sz5+6zH3+1uT3X9Xk91/V5Pdf1eT3X9Xk91/V5Pdf1eT3X9UE91/F83eC+6/y83//8zc//9zfP9fk91/VBPdf5Z8/k5+/k99/VZPff1WT339Vk99/VZPff1WT339Vk99/VRPcfxXP3wnuv8rPP/f3zzX5/Vc1+f1XNcH9V/HnzwT3X+Xnn/z8nfz+q5r8/qua/P6rmvz+q5r8/qua/P6rmuD+q3j+TnD/VX7+yb9/nvz+q5r8/qua4P6r/PNn8vN38vuvavL7r2ry+69q8vuvavL7r2ry+69q8vuvaoL7r+L5O8H9V/n5J//+efL7r2ry+69qgvuv4s+fCe6/ys8/+fk7+f1XNfn9VzX5/Vc1+f1XNfn9VzX5/Vc1wf1X8fyd4P6r+PyT339Vk99/VZPff1UT3H8Vf/5McP9Vfv7Jz9/J77+qye+/qsnvv6rJ77+qye+/qsnvv6oJ7r+K5+8E91/l5//+529+/sm/f578/qua4P6r/PNn8vl3gvuv4vNPcP9Vfv7J598J7r/Kzz/5/DvB/VfZf/Lzd4L7r/LzT/73v5Pff1UT3H+Vfv7cJrj/Kj//3PPvbYL7r/Lzf/vzt7bb+4dru788/4jzd6/7B+nxzM9ft9v248N1+/Lz53788fy3yZ//mPz579/9+Y+P/89Sx7a9PP9j8ud/zv38Q+6/6nz+67d//q0+nv92+/r8rx/ejsfj47GPzw9vz598eN/u1x8ffvvl54ev2x8y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rNP7mnV6X7NO72vW6X3NOr2vWaf3Nev0vmad3tes0/uadXpfs07va9bpfc06va9Zp/c16/S+Zp3e16zT+5p1el+zTu9r1ul9zTq9r1mn9zXr9L5mnd7XotP7WnR6X4tO72vR6X0tm8pTvuj0vhad3tei0/tadHpfi07va9HpfS06va9Fp/e16PS+Fp3e16LT+1p0el+LTu9r0el9LTq9r0Wn97Xo9L4Wnd7XotP7WnR6X4tO72vR6X0tOr2vRaf3tej0vhad3tei0/tadHpfi07va9HpfS06va9Fp/e16PS+Fp3e16LT+1p0el+LTu9r0el9LTq9r0Wn97Xo9L4Wnd7XotP7WnR6X4tO72vR6X0tOr2vRaf3tej0vhad3tei0/tadHpfi07va9HpfS06va9Fp/e16PS+Fp3e16LT+1p0el+LTu9r0el9LTq9r0Wn97Xo9L4Wnd7XotP7WnR6X4tO72vR6X0tOr2vRaf3tej0vhad3tei0/tadHpfi07va9HpfS06va9Fp/e16PS+Fp3e16LT+1p0el+LTu9r0el9LTq9r0Wn97Xo9L4Wnd7XotP7WnR6X4tO72vR6X0tOr2vVaf3ter0vlad3teq0/taN5WnfNXpfa06va9Vp/e16vS+Vp3e16rT+1p1el+rTu9r1el9rTq9r1Wn97Xq9L5Wnd7XqtP7WnV6X6tO72vV6X2tOr2vVaf3ter0vlad3teq0/tadXpfq07va9Xpfa06va9Vp/e16vS+Vp3e16rT+1p1el+rTu9r1el9rTq9r1Wn97Xq9L5Wnd7XqtP7WnV6X6tO72vV6X2tOr2vVaf3ter0vlad3teq0/tadXpfq07va9Xpfa06va9Vp/e16vS+Vp3e16rT+1p1el+rTu9r1el9rTq9r1Wn97Xq9L5Wnd7XqtP7WnV6X6tO72vV6X2tOr2vVaf3ter0vlad3teq0/tadXpfq07va9Xpfa06va9Vp/e16vS+Vp3e16rT+1p1el+rTu9r1el9rTq9r1Wn97Xq9L5Wnd7XqtP7WnV6X6tO72vV6X2tOr2vVaf3ter0vlad3teq0/tadXpfm07va9PpfW06va9Np/e1bSpP+abT+9p0el+bTu9r0+l9bTq9r02n97Xp9L42nd7XptP72nR6X5tO72vT6X1tOr2vTaf3ten0vjad3tem0/vadHpfm07va9PpfW06va9Np/e16fS+Np3e16bT+9p0el+bTu9r0+l9bTq9r02n97Xp9L42nd7XptP72nR6X5tO72vT6X1tOr2vTaf3ten0vjad3tem0/vadHpfm07va9PpfW06va9Np/e16fS+Np3e16bT+9p0el+bTu9r0+l9bTq9r02n97Xp9L42nd7XptP72nR6X5tO72vT6X1tOr2vTaf3ten0vjad3tem0/vadHpfm07va9PpfW06va9Np/e16fS+Np3e16bT+9p0el+bTu9r0+l9bTq9r02n97Xp9L42nd7XptP72nR6X5tO72vT6X1tOr2vTaf3ten0vjad3tem0/vadHpfm07va9PpfW06va9Np/e16fS+dp3e167T+9p1el+7Tu9r31Se8l2n97Xr9L52nd7XrtP72nV6X7tO72vX6X3tOr2vXaf3tev0vnad3teu0/vadXpfu07va9fpfe06va9dp/e16/S+dp3e167T+9p1el+7Tu9r1+l97Tq9r12n97Xr9L52nd7XrtP72nV6X7tO72vX6X3tOr2vXaf3tev0vnad3teu0/vadXpfu07va9fpfe06va9dp/e16/S+dp3e167T+9p1el+7Tu9r1+l97Tq9r12n97Xr9L52nd7XrtP72nV6X7tO72vX6X3tOr2vXaf3tev0vnad3teu0/vadXpfu07va9fpfe06va9dp/e16/S+dp3e167T+9p1el+7Tu9r1+l97Tq9r12n97Xr9L52nd7XrtP72nV6X7tO72vX6X3tOr2vXaf3tev0vnad3teu0/vadXpfu07va9fpfe06va9dp/e16/S+dp3e167T+9p1el+7Tu9rV+l9TZtK7+v+WBpP+f2xNJ7y+2PNOeVbPx9r/x88fzxl6uH74ynnEJhv34XA8TBhv1xvDxMHH99f9B6I9lc68fpwPQgRCDGE8uqESignoVQGhAoIMYQqCDGEGggxhDpO6uukTvU3oUlGdk3/DVE4CX194S9CAYQYQhGEGELL19QsIcJJfZ3UdXCXheVrak51hOVrapYQamqmYgyoqTlCy9fUHKGImpojtHxNzemyiJqaqRgjamqOEIEQQwh9ao4QampGl0ULNXXOdBG65/l46xct1L18FOj3MgowLV+bsoTQ72Wq94TalCOE2pQjRCDEEEK/l9HICb+hYKr3hH4vRwj9Xo4Q+r0M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Tu9r1ul9zTq9r1mn9zXr9L5mnd7XrNP7mnV6X7NO72vW6X3NOr2vWaf3Nev0vmad3tes0/uadXpfs07va9bpfc06va9Zp/c16/S+Zp3e16zT+5p1el+zTu9r1ul9zTq9r1mn9zXr9L5mnd7XrNP7mnV6X7NO72vW6X3NOr2vWaf3Nev0vmad3tes0/uadXpfs07va9bpfc06va9Zp/c16/S+Zp3e16zT+5p1el+zTu9r1ul9zTq9r1mn97Xo9L4Wnd7XotP7WnR6X8um8pQvOr2vRaf3tej0vhad3tei0/tadHpfi07va9HpfS06va9Fp/e16PS+Fp3e16LT+1p0el+LTu9r0el9LTq9r0Wn97Xo9L4Wnd7XotP7WnR6X4tO72vR6X0tOr2vRaf3tej0vhad3tei0/tadHpfi07va9HpfS06va9Fp/e16PS+Fp3e16LT+1p0el+LTu9r0el9LTq9r0Wn97Xo9L4Wnd7XotP7WnR6X4tO72vR6X0tOr2vRaf3tej0vhad3tei0/tadHpfi07va9HpfS06va9Fp/e16PS+Fp3e16LT+1p0el+LTu9r0el9LTq9r0Wn97Xo9L4Wnd7XotP7WnR6X4tO72vR6X0tOr2vRaf3tej0vhad3tei0/tadHpfi07va9HpfS06va9Fp/e16PS+Fp3e16LT+1p0el+LTu9r0el9LTq9r0Wn97Xo9L4Wnd7XotP7WnR6X4tO72vV6X2tOr2vVaf3ter0vtZN5SlfdXpfq07va9Xpfa06va9Vp/e16vS+Vp3e16rT+1p1el+rTu9r1el9rTq9r1Wn97Xq9L5Wnd7XqtP7WnV6X6tO72vV6X2tOr2vVaf3ter0vlad3teq0/tadXpfq07va9Xpfa06va9Vp/e16vS+Vp3e16rT+1p1el+rTu9r1el9rTq9r1Wn97Xq9L5Wnd7XqtP7WnV6X6tO72vV6X2tOr2vVaf3ter0vlad3teq0/tadXpfq07va9Xpfa06va9Vp/e16vS+Vp3e16rT+1p1el+rTu9r1el9rTq9r1Wn97Xq9L5Wnd7XqtP7WnV6X6tO72vV6X2tOr2vVaf3ter0vlad3teq0/tadXpfq07va9Xpfa06va9Vp/e16vS+Vp3e16rT+1p1el+rTu9r1el9rTq9r1Wn97Xq9L5Wnd7XqtP7WnV6X6tO72vV6X2tOr2vVaf3ter0vlad3tem0/vadHpfm07va9PpfW2bylO+6fS+Np3e16bT+9p0el+bTu9r0+l9bTq9r02n97Xp9L42nd7XptP72nR6X5tO72vT6X1tOr2vTaf3ten0vjad3tem0/vadHpfm07va9PpfW06va9Np/e16fS+Np3e16bT+9p0el+bTu9r0+l9bTq9r02n97Xp9L42nd7XptP72nR6X5tO72vT6X1tOr2vTaf3ten0vjad3tem0/vadHpfm07va9PpfW06va9Np/e16fS+Np3e16bT+9p0el+bTu9r0+l9bTq9r02n97Xp9L42nd7XptP72nR6X5tO72vT6X1tOr2vTaf3ten0vjad3tem0/vadHpfm07va9PpfW06va9Np/e16fS+Np3e16bT+9p0el+bTu9r0+l9bTq9r02n97Xp9L42nd7XptP72nR6X5tO72vT6X1tOr2vTaf3ten0vjad3tem0/vadHpfm07va9PpfW06va9dp/e16/S+dp3e167T+9o3lad81+l97Tq9r12n97Xr9L52nd7XrtP72nV6X7tO72vX6X3tOr2vXaf3tev0vnad3teu0/vadXpfu07va9fpfe06va9dp/e16/S+dp3e167T+9p1el+7Tu9r1+l97Tq9r12n97Xr9L52nd7XrtP72nV6X7tO72vX6X3tOr2vXaf3tev0vnad3teu0/vadXpfu07va9fpfe06va9dp/e16/S+dp3e167T+9p1el+7Tu9r1+l97Tq9r12n97Xr9L52nd7XrtP72nV6X7tO72vX6X3tOr2vXaf3tev0vnad3teu0/vadXpfu07va9fpfe06va9dp/e16/S+dp3e167T+9p1el+7Tu9r1+l97Tq9r12n97Xr9L52nd7XrtP72nV6X7tO72vX6X3tOr2vXaf3tev0vnad3teu0/vadXpfu07va9fpfe06va9dp/e16/S+dp3e167T+9pVel/bptL7uj+WxlN+fyyNp/z+WBpP+f2xNJ7y+2NpPOX3x9J4yu+PpfGU3x9L4ym/P5bOU16l93V/LJ2nvErv6/5YOk95ld7X/bF0nvIqva/7Y+k85VV6X/fH0nnKq/S+7o+l85RX6X3dH0vnKa/S+7o/ls5TXqX3dX8snae8Su/r/lg6T3mV3tf9sXSe8iq9r/tj6TzlVXpf98fSecqr9L7u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14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9TZjZ14SZfU2Y2deEmX1NG+RTPmFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfM2b2NWNmXzNm9jVjZl/zBvmUz5jZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXgpl9LZjZ14KZfS2Y2deyQT7lC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YmZfK2b2tWJmXytm9rVukE/5ipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2dcKmX2tG2T2db8txKf8fluIT/n9thCf8vttIT7l99tCfMrvt4X4lN9vC/Epv98W4lN+vy3Mpzxk9nW/LcynPGT2db8tzKc8ZPZ1vy3Mpzxk9nW/LcynPGT2db8tzKc8ZPZ1vy3Mpzxk9nW/Lcyn/KTsa6nnbe3/g/7lIUp1X5eHGJ0b/Pq+YZSOX993aep1uW9dnvctk+Py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mX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX1NmNnXhJl9TZjZ14SZfU0b5FM+YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8zZvY1Y2ZfM2b2NWNmX/MG+ZTPmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deCmX0tmNnXgpl9LZjZ17JBPuULZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rViZl8rZva1YmZfK2b2tW6QT/mKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ1wqZfZUNMvu63xbiU36/LcSn/H5biE/5/bYQn/L7bSE+5ffbQnzK77eF+JTfbwvxKb/fFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuZTHjL7ut8W5lMeMvu63xbmUx4y+7rfFuRT3mFmXx1m9tVhZl8dZvbVbZBPeYeZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l9dZjZV4eZfXWY2VeHmX11mNlXh5l99ZjZV4+ZffWY2VePmX31G+RT3mNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfPWb21WNmXz1m9tVjZl89ZvbVY2ZfA2b2NWBmXwNm9jVgZl/DBvmUD5jZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNnXgJl9DZjZ14CZfQ2Y2deAmX0NmNlXwcy+Cmb2VTCzr4KZfZUN8ikvmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8FM/sqmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8FM/sqmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8FM/sqmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8FM/sqmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8FM/sqmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8FM/sqmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8FM/sqmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8FM/sqmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8FM/sqmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8FM/sqmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8FM/sqmNlXwcy+Cmb2VTCzr4KZfRXM7KtgZl8jZvY1YmZfI2b2NWJmX+MG+ZSPmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deImX2NmNnXiJl9jZjZ14iZfY2Y2deEmX1NmNnXhJl9TZjZ17RBPuUTZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVhZl8TZvY1YWZfE2b2NWFmXxNm9jVjZl8zZvY1Y2ZfM2b2NW+QT/mMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfc2Y2deMmX3NmNnXjJl9zZjZ14yZfS2Y2deCmX0tmNnXgpl9LRvkU75gZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXwtm9rVgZl8LZva1YGZfC2b2tWBmXytm9rViZl8rZva1YmZf6wb5lK+Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZjZ14qZfa2Y2deKmX2tmNnXipl9rZDZ17hBZl/320J8yu+3hfiU328L8Sm/3xbiU36/LcSn/H5biE/5/bYQn/L7bSE+5ffbwnzKQ2Zf99vCfMpDZl/328J8ykNmX/fbwnzKQ2Zf99vCfMpDZl/328J8ykNmX/fbwnzKQ2Zf99vCfMpDZl/328J8ykNmX/fbwnzKQ2Zf99vCfMpDZl/328J8ykNmX/fbwnzKQ2Zf99vCfMpDZl/328J8ykNmX/fbwnzKQ2Zf99vCfMpDZl/328J8ykNmX/fbwnzKQ2Zf99vCfMpDZl/328J8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vuWzze5rttl9zTa7r9lm9zXb7L5mm93XbLP7mm12X7PN7mu22X3NNruv2Wb3Ndvsvmab3ddss/uabXZfs83ua7bZfc02u6/ZZvc12+y+Zpvd12yz+5ptdl+zze5rttl9zTa7r9lm9zXb7L5mm93XbLP7mm12X7PN7mu22X3NNruv2Wb3Ndvsvmab3ddss/uabXZfs83ua7bZfc02u6/ZZvc12+y+Zpvd12yz+5ptdl+zze5rttl9zTa7r9lm9zXb7L5mm93XbLP7mm12X7PN7mu22X3NNruv2Wb3Ndvsvmab3ddss/uabXZfs83ua7bZfc02u6/ZZvc12+y+Zpvd12yz+5ptdl+zze5rttl9zTa7r9lm9zXb7L5mm93XbLP7mm12X7PN7mu22X3NNruv2Wb3Ndvsvmab3ddss/uabXZfs83ua7bZfc02u6/ZZvc12+y+Zpvd12yz+1psdl+Lze5rsdl9LTa7r2Ux+ZYvNruvxWb3tdjsvhab3ddis/tabHZfi83ua7HZfS02u6/FZve12Oy+Fpvd12Kz+1psdl+Lze5rsdl9LTa7r8Vm97XY7L4Wm93XYrP7Wmx2X4vN7mux2X0tNruvxWb3tdjsvhab3ddis/tabHZfi83ua7HZfS02u6/FZve12Oy+Fpvd12Kz+1psdl+Lze5rsdl9LTa7r8Vm97XY7L4Wm93XYrP7Wmx2X4vN7mux2X0tNruvxWb3tdjsvhab3ddis/tabHZfi83ua7HZfS02u6/FZve12Oy+Fpvd12Kz+1psdl+Lze5rsdl9LTa7r8Vm97XY7L4Wm93XYrP7Wmx2X4vN7mux2X0tNruvxWb3tdjsvhab3ddis/tabHZfi83ua7HZfS02u6/FZve12Oy+Fpvd12Kz+1psdl+Lze5rsdl9LTa7r8Vm97XY7L4Wm93XYrP7Wmx2X4vN7mu12X2tNruv1Wb3tdrsvtbF5Fu+2uy+Vpvd12qz+1ptdl+rze5rtdl9rTa7r9Vm97Xa7L5Wm93XarP7Wm12X6vN7mu12X2tNruv1Wb3tdrsvlab3ddqs/tabXZfq83ua7XZfa02u6/VZve12uy+Vpvd12qz+1ptdl+rze5rtdl9rTa7r9Vm97Xa7L5Wm93XarP7Wm12X6vN7mu12X2tNruv1Wb3tdrsvlab3ddqs/tabXZfq83ua7XZfa02u6/VZve12uy+Vpvd12qz+1ptdl+rze5rtdl9rTa7r9Vm97Xa7L5Wm93XarP7Wm12X6vN7mu12X2tNruv1Wb3tdrsvlab3ddqs/tabXZfq83ua7XZfa02u6/VZve12uy+Vpvd12qz+1ptdl+rze5rtdl9rTa7r9Vm97Xa7L5Wm93XarP7Wm12X6vN7mu12X2tNruv1Wb3tdrsvlab3ddqs/tabXZfq83ua7XZfa02u6/NZve12ey+Npvd12az+9oWk2/5ZrP72mx2X5vN7muz2X1tNruvzWb3tdnsvjab3ddms/vabHZfm83ua7PZfW02u6/NZve12ey+Npvd12az+9psdl+bze5rs9l9bTa7r81m97XZ7L42m93XZrP72mx2X5vN7muz2X1tNruvzWb3tdnsvjab3ddms/vabHZfm83ua7PZfW02u6/NZve12ey+Npvd12az+9psdl+bze5rs9l9bTa7r81m97XZ7L42m93XZrP72mx2X5vN7muz2X1tNruvzWb3tdnsvjab3ddms/vabHZfm83ua7PZfW02u6/NZve12ey+Npvd12az+9psdl+bze5rs9l9bTa7r81m97XZ7L42m93XZrP72mx2X5vN7muz2X1tNruvzWb3tdnsvjab3ddms/vabHZfm83ua7PZfW02u6/NZve12ey+Npvd12az+9psdl+bze5rs9l9bTa7r81m97VZ7L6mZbHYff26LYNv+a/bMviW/7otg2/5r9sy+Jb/ui2Db/mv2zL4lv+6LYNv+a/bMviW/7otm295i93Xr9uy+Za32H39ui2bb3mL3dev27L5lrfYff26LZtveYvd16/bsvmWt9h9/botm295i93Xr9uy+Za32H39ui2bb3mL3dev27L5lrfYff26LZtveYvd16/bsvmWt9h9/botm295i93Xr9uy+Za32H39ui2bb3mL3dev27L5lrfYff26LZtveYvd16/bsvmWt9h9/botm295i93Xr9uy+Za32H39ui2bb3mL3dev27L5lrfYff26LZtveYvd16/bsvmWt9h9/botm295i93Xr9uy+Za32H39ui2bb3mL3dev27L5lrfYff26LZtveYvd16/bsvmWt9h9/botm295i93Xr9uy+Za32H39ui2bb3mL3dev27L5lrfYff26LZtveYvd16/bsvmWt9h9/botm295i93Xr9uy+Za32H39ui2bb3mL3dev27L5lrfYff26LZtveYvd16/bsvmWt9h9/botm295i93Xr9uy+Za32H39ui2bb3mL3dev2zL5lg82u6/BZvc12Oy+Bpvd17CYfMsHm93XYLP7Gmx2X4PN7muw2X0NNruvwWb3Ndjsvgab3ddgs/sabHZfg83ua7DZfQ02u6/BZvc12Oy+Bpvd12Cz+xpsdl+Dze5rsNl9DTa7r8Fm9zXY7L4Gm93XYLP7Gmx2X4PN7muw2X0NNruvwWb3Ndjsvgab3ddgs/sabHZfg83ua7DZfQ02u6/BZvc12Oy+Bpvd12Cz+xpsdl+Dze5rsNl9DTa7r8Fm9zXY7L4Gm93XYLP7Gmx2X4PN7muw2X0NNruvwWb3Ndjsvgab3ddgs/sabHZfg83ua7DZfQ02u6/BZvc12Oy+Bpvd12Cz+xpsdl+Dze5rsNl9DTa7r8Fm9zXY7L4Gm93XYLP7Gmx2X4PN7muw2X0NNruvwWb3Ndjsvgab3ddgs/sabHZfg83ua7DZfQ02u6/BZvc12Oy+Bpvd12Cz+xpsdl+Dze5rsNl9DTa7r8Fm93W12X1dbXZfV5vd19Vm93VdTL7lV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X1dbXZfV5vd19Vm93W12X2NNruv0Wb3Ndrsvkab3de4mHzLR5vd12iz+xptdl+jze5rtNl9jTa7r9Fm9zXa7L5Gm93XaLP7Gm12X6PN7mu02X2NNruv0Wb3Ndrsvkab3ddos/sabXZfo83ua7TZfY02u6/RZvc12uy+Rpvd12iz+xptdl+jze5rtNl9jTa7r9Fm9zXa7L5Gm93XaLP7Gm12X6PN7mu02X2NNruv0Wb3Ndrsvkab3ddos/sabXZfo83ua7TZfY02u6/RZvc12uy+Rpvd12iz+xptdl+jze5rtNl9jTa7r9Fm9zXa7L5Gm93XaLP7Gm12X6PN7mu02X2NNruv0Wb3Ndrsvkab3ddos/sabXZfo83ua7TZfY02u6/RZvc12uy+Rpvd12iz+xptdl+jze5rtNl9jTa7r9Fm9zXa7L5Gm93XaLP7Gm12X6PN7mu02X2NNruv0Wb3Ndrsvkab3ddos/sabXZfo83ua7TZfY02u6/RZvdVbHZfxWb3VWx2X8Vm91UWk295sdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X0Vm91Xsdl9FZvdV7HZfRWb3Vex2X1NNruvyWb3Ndnsviab3dfXf/Q2b8vkWz7Z7L4mm93XZLP7mmx2X5PN7muy2X1NNruvyWb3Ndnsviab3ddks/uabHZfk83ua7LZfU02u6/JZvc12ey+Jpvd12Sz+5psdl+Tze5rstl9TTa7r8lm9zXZ7L4mm93XZLP7mmx2X5PN7muy2X1NNruvyWb3Ndnsviab3ddks/uabHZfk83ua7LZfU02u6/JZvc12ey+Jpvd12Sz+5psdl+Tze5rstl9TTa7r8lm9zXZ7L4mm93XZLP7mmx2X5PN7muy2X1NNruvyWb3Ndnsviab3ddks/uabHZfk83ua7LZfU02u6/JZvc12ey+Jpvd12Sz+5psdl+Tze5rstl9TTa7r8lm9zXZ7L4mm93XZLP7mmx2X5PN7muy2X1NNruvyWb3Ndnsviab3ddks/uabHZfk83ua7LZfU02u6/JZvc12ey+Jpvd12Sz+5psdl+Tze5rstl9zTa7r9lm9zXb7L5mm93XvJh8y2eb3ddss/uabXZfs83ua7bZfc02u6/ZZvc12+y+Zpvd12yz+5ptdl+zze5rttl9zTa7r9lm9zXb7L5mm93XbLP7mm12X7PN7mu22X3NNruv2Wb3Ndvsvmab3ddss/uabXZfs83ua7bZfc02u6/ZZvc12+y+Zpvd12yz+5ptdl+zze5rttl9zTa7r9lm9zXb7L5mm93XbLP7mm12X7PN7mu22X3NNruv2Wb3Ndvsvmab3ddss/uabXZfs83ua7bZfc02u6/ZZvc12+y+Zpvd12yz+5ptdl+zze5rttl9zTa7r9lm9zXb7L5mm93XbLP7mm12X7PN7mu22X3NNruv2Wb3Ndvsvmab3ddss/uabXZfs83ua7bZfc02u6/ZZvc12+y+Zpvd12yz+5ptdl+zze5rttl9zTa7r9lm9zXb7L5mm93XbLP7mm12X7PN7mu22X3NNruv2Wb3tdjsvhab3ddis/tabHZfy2LyLV9sdl+Lze5rsdl9LTa7r8Vm97XY7L4Wm93XYrP7Wmx2X4vN7mux2X0tNruvxWb3tdjsvhab3ddis/tabHZfi83ua7HZfS02u6/FZve12Oy+Fpvd12Kz+1psdl+Lze5rsdl9LTa7r8Vm97XY7L4Wm93XYrP7Wmx2X4vN7mux2X0tNruvxWb3tdjsvhab3ddis/tabHZfi83ua7HZfS02u6/FZve12Oy+Fpvd12Kz+1psdl+Lze5rsdl9LTa7r8Vm97XY7L4Wm93XYrP7Wmx2X4vN7mux2X0tNruvxWb3tdjsvhab3ddis/tabHZfi83ua7HZfS02u6/FZve12Oy+Fpvd12Kz+1psdl+Lze5rsdl9LTa7r8Vm97XY7L4Wm93XYrP7Wmx2X4vN7mux2X0tNruvxWb3tdjsvhab3ddis/tabHZfi83ua7HZfS02u6/FZve12Oy+Fpvd12qz+1ptdl+rze5rtdl9rYvJt3y12X2tNruv1Wb3tdrsvlab3ddqs/tabXZfq83ua7XZfa02u6/VZve12uy+Vpvd12qz+1ptdl+rze5rtdl9rTa7r9Vm97Xa7L5Wm93XarP7Wm12X6vN7mu12X2tNruv1Wb3tdrsvlab3ddqs/tabXZfq83ua7XZfa02u6/VZve12uy+Vpvd12qz+1ptdl+rze5rtdl9rTa7r9Vm97Xa7L5Wm93XarP7Wm12X6vN7mu12X2tNruv1Wb3tdrsvlab3ddqs/tabXZfq83ua7XZfa02u6/VZve12uy+Vpvd12qz+1ptdl+rze5rtdl9rTa7r9Vm97Xa7L5Wm93XarP7Wm12X6vN7mu12X2tNruv1Wb3tdrsvlab3ddqs/tabXZfq83ua7XZfa02u6/VZve12uy+Vpvd12qz+1ptdl+rze5rtdl9rTa7r9Vm97Xa7L5Wm93XarP7Wm12X5vN7muz2X1tNruvzWb3tS0m3/LNZve12ey+Npvd12az+9psdl+bze5rs9l9bTa7r81m97XZ7L42m93XZrP72mx2X5vN7muz2X1tNruvzWb3tdnsvjab3ddms/vabHZfm83ua7PZfW02u6/NZve12ey+Npvd12az+9psdl+bze5rs9l9bTa7r81m97XZ7L42m93XZrP72mx2X5vN7muz2X1tNruvzWb3tdnsvjab3ddms/vabHZfm83ua7PZfW02u6/NZve12ey+Npvd12az+9psdl+bze5rs9l9bTa7r81m97XZ7L42m93XZrP72mx2X5vN7muz2X1tNruvzWb3tdnsvjab3ddms/vabHZfm83ua7PZfW02u6/NZve12ey+Npvd12az+9psdl+bze5rs9l9bTa7r81m97XZ7L42m93XZrP72mx2X5vN7muz2X1tNruvzWb3tdnsvjab3ddms/vabHZfm83uazPZfQ2Lye7r67YsvuVft2XxLf+6LYtv+ddtWXzLv27L4lv+dVsW3/Kv27L4ln/dlsW3/Ou2bL7lTXZfX7dl8y1vsvv6ui2bb3mT3dfXbdl8y5vsvr5uy+Zb3mT39XVbNt/yJruvr9uy+ZY32X193ZbNt7zJ7uvrtmy+5U12X1+3ZfMtb7L7+rotm295k93X123ZfMub7L6+bsvmW95k9/V1Wzbf8ia7r6/bsvmWN9l9fd2Wzbe8ye7r67ZsvuVNdl9ft2XzLW+y+/q6LZtveZPd19dt2XzLm+y+vm7L5lveZPf1dVs23/Imu6+v27L5ljfZfX3dls23vMnu6+u2bL7lTXZf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","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"// use crate::{ HEIGHT, WIDTH };\nuse arenalib::{ NO_EVENT, WAIT, SEE_MOVE, WIDTH, HEIGHT };\nuse arenalib::{ MAX_ACTIONS, MAX_OBSTACLES };\nuse arenalib::{ SERIALIZED_ACTION_BYTE_SIZE, SERIALIZED_ACTIONS_ARRAY_SIZE, SERIALIZED_ACTIONS_PER_FIELD, VIEW_DISTANCE };\nuse skplg::{softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD};\nuse arenalib::{Action, get_action_actor, get_action_target_x, get_action_target_y, get_action_type, new_action};\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\nuse crate::character::Character;\nuse crate::event::Event;\nuse crate::event::{ build_subtype_value_event }; // , build_value_event\nuse crate::map::{ is_visible, get_distance, can_move_to };\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::{ get_default_obstacles };\nuse arenalib::{MAGE};\nuse arenalib::{MAX_ACTIONS_PER_CHARACTER, MAX_ENEMY_OBSTACLES, MAX_CHARACTERS};\n// use crate::ResolvedAction::ResolvedAction;\n// use crate::actionDefinition::{ build_move_action };\nuse arenalib::{apply_action_result_effects, apply_action_pre_calc_effects, validate_action_requirements, build_result_event};\nuse arenalib::arena_action_def_builder;\nuse super::{map::get_distance_from_parts, map::get_distance_part, map::is_distance_within_viewing_range, obstacle::new_obstacle, map::get_free_map};\nuse arenalib::MAX_HEALTH;\n\n// use crate::{ACTION_RESULT_COORDINATES_IDX_SELF, ACTION_RESULT_COORDINATES_IDX_TARGET, ACTION_RESULT_COORDINATES_IDX_INVISIBLE};\n// use crate::{SEE_CAST, SEE_DRAW, SEE_RITUAL, SEE_SEARCH_TRAP, RECEIVE_ATTACK, DISARMED_TRAP, ADD_OBSTACLE, WIN};\n// use crate::action_builder;\n\n\n\n// global ACTION_TYPE: u8 = 0;\n// global ACTION_ACTOR: u8 = 1;\n// global ACTION_TARGET_X: u8 = 2;\n// global ACTION_TARGET_Y: u8 = 3;\n\nglobal SEEN_EVENT_IDX: u32 = 1;\nglobal UNSEEN_EVENT_IDX: u32 = 0;\nglobal WORLD_EVENT_IDX: u32 = 2;\nglobal SELF_EVENT_IDX: u32 = 3;\n\npub fn execute_action(\n    action: Action,\n    enemy_advance: u8,\n    actor: Character,\n    mut energy: u8,\n    my_char_obstacles: [Obstacle; MAX_CHARACTERS],\n    my_obstacles: [Obstacle; MAX_OBSTACLES],\n    their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]\n) -> (bool, Event, Event, Event, Character, u8) /*where T: ResolvedAction */{\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    //let action_def = c.resolve_action(action.register[action.base_index + ACTION_TYPE]);\n        //let mut result_event: Event = build_std_event(NO_EVENT, c.id, 0, 0);\n        //let mut result_char = c;\n        //let mut required_energy = 0;\n        let mut is_valid = true;\n        //let action_def = c.resolve_action(get_action_type(action));\n        // let mut result_valid = true;\n\n        // let need_sneak = get_action_type(action) == SNEAK;\n        //let can_sneak = c.can_sneak();\n        // let need_move = get_action_type(action) == MOVE | get_action_type(action) == SNEAK;\n        // let can_move = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles);\n        // let need_target_is_neighbor = get_action_type(action) == SNEAK | get_action_type(action) == MOVE | get_action_type(action) == ATTACK | get_action_type(action) == SEARCH | get_action_type(action) == DISARM_TRAP;\n        //let target_is_neighbor = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        // let need_target_is_not_self = get_action_type(action) == ATTACK | get_action_type(action) == SHOOT;\n        // let target_is_not_self = (c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action));\n        // let need_ritual = get_action_type(action) == RITUAL;\n        //let can_ritual = c.can_ritual();\n        // let need_search = get_action_type(action) == SEARCH;\n        //let can_search = c.can_search();\n        //let can_attack = is_neighbor & not_self;\n        // let need_can_cast_fireball = get_action_type(action) == CAST_FIREBALL;\n        // let min_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if get_action_type(action) == SHOOT {\n        //     MIN_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let max_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if (get_action_type(action) == DRAW) | (get_action_type(action) == SHOOT) {\n        //     MAX_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let need_check_status = get_action_type(action) == CAST_FIREBALL | get_action_type(action) == RITUAL | get_action_type(action) == DRAW | get_action_type(action) == SHOOT;\n        // let can_cast_fireball = c.can_cast_fireball(); // & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        // let can_draw = c.can_shoot(); // & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_shoot = c.can_shoot(); // & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_disarm = c.can_disarm();\n        // let is_valid =\n        //     (get_action_type(action) == WAIT) |\n        //     ((get_action_type(action) == SNEAK) & can_sneak & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == MOVE) & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == RITUAL) & can_ritual) |\n        //     ((get_action_type(action) == SEARCH) & can_search & target_is_neighbor) |\n        //     ((get_action_type(action) == ATTACK) & target_is_neighbor & target_is_not_self) |\n        //     ((get_action_type(action) == CAST_FIREBALL) & can_cast_fireball & result_char.status <= max_rounds_to_finish) |\n        //     ((get_action_type(action) == DRAW) & can_draw) |\n        //     ((get_action_type(action) == SHOOT) & can_shoot & target_is_not_self) |\n        //     ((get_action_type(action) == DISARM_TRAP) & can_disarm & target_is_neighbor);\n\n\n\n\n        // need to adapt status first in case of action interruption!\n\n    //let action_type = action.get_action_type(action);\n    //let action_def = c.resolve_action(action_type);\n    let action_type = get_action_type(action);\n\n    let actor_id = actor.get_id();\n    let actor_x = actor.get_x();\n    let actor_y = actor.get_y();\n    let actor_target_x = actor.get_target_x();\n    let actor_target_y = actor.get_target_y();\n    let actor_last_action = actor.get_last_action();\n    let (action_def_valid, action_def) = actor.get_action(action_type);\n    softassert!(quote { is_valid }, quote { action_def_valid }, quote { f\"Failed to fetch action def of {action_type}\" });\n\n    let action_target_x = get_action_target_x(action);\n    let action_target_y = get_action_target_y(action);\n    let distance = get_distance(actor_x, actor_y, action_target_x, action_target_y);\n\n    // let is_continuous = action.get_action_is_continuous();\n    // let is_not_interrupted = (\n    //     ((!is_continuous) & (action.get_action_result_status_multiplier() != 0)) | // that's the ID of the wait action => leave status, but not continuous\n    //     ((is_continuous) & (action.get_action_req_previous_action() == c.last_action) & (action_target_x == c.get_target_x()) & (action_target_y == c.get_target_y()))\n    // );\n\n\n    let mut actor_progress = actor.get_progress();\n    let mut actor_is_hidden = actor.get_is_hidden() == 1;\n    let actor_is_in_view_range = is_visible(enemy_advance, actor_x);\n    // let max_range_part = get_action_req_max_range(action) as u16;\n    // let mut actor_max_range = max_range_part * max_range_part;\n    let mut is_not_interrupted = true;\n    let mut actor_damage_mod = actor.get_damage_mod();\n    let mut actor_status = actor.get_status();\n    // ~200 gates\n    apply_action_pre_calc_effects!(quote { action_def });\n\n    let mut obst = my_obstacles.as_slice();\n    for i in 0..MAX_CHARACTERS {\n      obst = obst.push_back(my_char_obstacles[i]);\n    }\n        let could_move_to_target = can_move_to(distance, action_target_x, action_target_y, obst.as_array(), their_obstacles);\n\n\n///////////////////////////\n    // ~4000 gates\n    validate_action_requirements!(quote { is_valid }, quote { action_def });\n    // // pub global ACTION_NEEDS_TARGET_FREE_SPACE: u8 = 0;  // u1\n    // let target_is_free_space_valid = !action.get_action_req_target_free_space() | can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles);\n    // softassert!(quote { is_valid }, quote { target_is_free_space_valid }, quote { f\"Target space ({action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" });\n    \n    // // pub global ACTION_NEEDS_TARGET_IS_NOT_SELF: u8 = 1; // u1\n    // let target_is_not_self_valid = !action.get_action_req_target_is_not_self() | (c_x != action_target_x) | (c_y != action_target_y);\n    // softassert!(quote { is_valid }, quote { target_is_not_self_valid }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" });\n\n    // // pub global ACTION_NEEDS_STATUS_HIDDEN: u8 = 4; // u1\n    // let char_is_hidden = c.is_hidden == 1;\n    // let char_is_hidden_valid = !action.get_action_req_status_hidden() | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_is_hidden_valid }, quote { f\"Character needs to be hidden to perform action {action_type}\" });\n    \n    // // pub global ACTION_NEEDS_STATUS_VISIBLE: u8 = 2; // u1\n    // let char_is_in_view_range = is_visible(enemy_advance, c_x);\n    // let char_is_fully_visible = char_is_in_view_range & !char_is_hidden;\n    // let char_is_fully_visible_valid = !action.get_action_req_status_visible() | char_is_fully_visible;\n    // softassert!(quote { is_valid }, quote { char_is_fully_visible_valid }, quote { f\"Character must be fully visible for action {action_type}: in_view_range: {char_is_in_view_range} & !hidden {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_NEEDS_STATUS_INVISIBLE: u8 = 3; // u1\n    // let char_invisible_valid = !action.get_action_req_status_invisible() | !char_is_in_view_range | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_invisible_valid }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {char_is_in_view_range} || hidden: {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_MAX_RANGE: u8 = 7; // u6 // TODO: max_range!\n    // let max_range_part = action.get_action_req_max_range() as u16;\n    // let max_range = max_range_part * max_range_part;\n    // let max_range_valid  = distance <= max_range;\n    // softassert!(quote { is_valid }, quote { max_range_valid }, quote { f\"Character is out of range! Distance: {distance} > {max_range}: {{{c_x},{c_y}}} - {{{action_target_x},{action_target_y}}} with {max_range_part}\" });\n\n    // // pub global ACTION_NEEDS_MIN_STATUS: u8 = 8; // u4\n    // let min_status = action.get_action_req_min_status();\n    // let min_status_valid = min_status <= status;\n    // softassert!(quote { is_valid }, quote { min_status_valid }, quote { f\"Character needs min status {min_status} to perform action {action_type}, but only has {status}\" });\n\n    // // pub global ACTION_NEEDS_MAX_STATUS: u8 = 9; // u4\n    // let max_status = action.get_action_req_max_status();\n    // let max_status_valid = max_status >= status;\n    // softassert!(quote { is_valid }, quote { max_status_valid }, quote { f\"Character cannot have a higher status than {max_status} to perform action {action_type}: got {status}\" });\n\n    // // pub global ACTION_NEEDED_ENERGY: u8 = 10;    // u4\n    // let required_energy = action.get_action_req_energy();\n    // let energy_valid = required_energy <= energy;\n    // softassert!(quote { is_valid }, quote { energy_valid }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {required_energy}\" });\n    //////////////////////\n    \n\n        let coords = [\n            (actor_x, actor_y),\n            (action_target_x, action_target_y),\n            (NOWHERE, NOWHERE),\n        ];\n\n    // pub global ACTION_RESULT_STATUS_MULTIPLIER: u8 =     ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT;     // u1\n    // pub global ACTION_RESULT_STATUS_FIXED_ADDITION: u8 = ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 1; // u4\n    // pub global ACTION_MOVE_TO_TARGET: u8 =               ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 2; // u1\n    // pub global ACTION_SETS_STATUS_HIDDEN: u8 = 5; // u1\n    // pub global ACTION_REMOVES_STATUS_HIDDEN: u8 = 6; // u1\n\n        // CALCULATE EVENTS\n        comptime {\n          assert(SEEN_EVENT_IDX == 1);\n          assert(UNSEEN_EVENT_IDX == 0);\n        }\n        //let result_event_idx = is_visible as u32;\n        let mut events: BoundedVec<Event, 4> = BoundedVec::new();\n        // 19000 gates\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        build_result_event!(0 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(1 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(2 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(3 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        assert(events.len() == 4);\n\n        // let seen_event_value = status as u32 * action.get_action_result_event_seen_value_status_multiplier() as u32 + action.get_action_result_event_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { seen_event_value <= 255 as u32 }, quote { f\"Invalid event value (seen): {seen_event_value} does not fit in u8!\" });\n\n        // let unseen_event_value = status as u32 * action.get_action_result_event_not_seen_value_status_multiplier() as u32 + action.get_action_result_event_not_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { unseen_event_value <= 255 as u32 }, quote { f\"Invalid event value (unseen): {unseen_event_value} does not fit in u8!\" });\n\n        // let seen_event_coords_idx = action.get_action_result_event_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { seen_event_coords_idx < 4 }, quote { f\"Invalid seen event coord idx: {seen_event_coords_idx} > 3\" });\n\n        // let seen_event_coords = coords[seen_event_coords_idx & 3];\n\n        // let unseen_event_coords_idx = action.get_action_result_event_not_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { unseen_event_coords_idx < 4 }, quote { f\"Invalid unseen event coord idx: {unseen_event_coords_idx} > 3\" });\n\n        // let unseen_event_coords = coords[unseen_event_coords_idx & 3];\n\n        // //let events = [\n        // let dummy_event =    build_subtype_value_event(NO_EVENT, c.get_id(), coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].0, coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].1, 0 as u8, 0 as u8, 0 as u8);\n        // let unseen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_not_seen_type(),\n        //         c.get_id(), \n        //         unseen_event_coords.0,\n        //         unseen_event_coords.1,\n        //         unseen_event_value as u8,\n        //         action.get_action_result_event_not_seen_subtype(),\n        //         action.get_action_result_event_not_seen_radius()\n        //     );\n        // let seen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_seen_type(),\n        //         c.get_id(), \n        //         seen_event_coords.0,\n        //         seen_event_coords.1,\n        //         seen_event_value as u8,\n        //         action.get_action_result_event_seen_subtype(),\n        //         action.get_action_result_event_seen_radius()\n        //     );\n        //];\n\n\n        // APPLY EFFECTS ON SELF\n        let mut result_energy = energy;\n        let mut result_coords = coords[0];\n        let mut result_progress = actor_progress;\n        let mut result_is_hidden = actor_is_hidden;\n        let mut result_is_visible = actor_is_in_view_range;\n        let mut result_damage_mod = actor_damage_mod;\n        let mut result_health = actor.get_health();\n        let mut result_status = actor_status;\n\n\n        // let energy = std::wrapping_sub(energy, action.get_action_req_energy());\n        // let status = actor_progress as u32 * action.get_action_result_status_multiplier() as u32 + action.get_action_result_status_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { status <= MAX_STATUS as u32 }, quote { f\"Invalid result status: {status} > {MAX_STATUS}\" });\n\n        // let final_coords = coords[action.get_action_move_to_target() as u8];\n        // // debug!(quote { println(f\"final_coords:{final_coords}\"); });\n        // let is_hidden = ((c.is_hidden == 1) & !action.get_action_result_effect_removes_status_hidden()) | action.get_action_result_effect_sets_status_hidden();\n        // let is_visible = !is_hidden & is_visible(enemy_advance, final_coords.0);\n        // 200 gates\n        apply_action_result_effects!(quote { action_def });\n\n// let result_coord_src = action_def[6] as u8;\n// let result_coord_src_fixed = result_coord_src & 4 as u8;\n// let result_coord = result_coord_src_fixed != 0 as u8;\n// let result_coord_cast = result_coord as u8;\n// println(f\"result coords: {result_coord_src} {result_coord_src_fixed} {result_coord} {result_coord_cast}\");\n// result_coords = coords[((action_def[6]as u8 / 4 as u8) == 1 as u8)as u8];\n        // let target_coords = [\n        //     (target_x, target_y),\n        //     (c.get_target_x(), c.get_target_y())\n        // ];\n\n        // actor.x = result_coords.0;\n        // actor.y = result_coords.1;\n        // actor.progress = result_progress;\n        // actor.is_hidden = result_is_hidden as u1;\n        // actor.has_been_seen = result_is_visible;\n        // actor.last_action = is_not_interrupted as u8 * actor.get_last_action() + (!is_not_interrupted) as u8 * action_type;\n        // actor.target_x = is_not_interrupted as u8 * actor.get_target_x() + (!is_not_interrupted) as u8 * action_target_x;\n        // actor.target_y = is_not_interrupted as u8 * actor.get_target_y() + (!is_not_interrupted) as u8 * action_target_y;\n        // actor.damage_mod = result_damage_mod;\n        // actor.health = result_health;\n        // actor.status = result_status;\n\n        (\n            is_valid,\n            if result_is_visible { events.get_unchecked(SEEN_EVENT_IDX) } else { events.get_unchecked(UNSEEN_EVENT_IDX) },//events[1 + (is_visible as u8)],\n            events.get_unchecked(WORLD_EVENT_IDX),\n            events.get_unchecked(SELF_EVENT_IDX),//events[get_action_unseen_event_is_internal(action_def) as u8],\n            Character {\n                id: actor_id,\n                x: result_coords.0,\n                y: result_coords.1,\n                progress: result_progress, // status as u8,\n                is_hidden: result_is_hidden as u1, //is_hidden as u1,\n                has_been_seen: result_is_visible, //is_visible,\n                last_action: is_not_interrupted as u8 * actor.get_last_action() + (!is_not_interrupted) as u8 * action_type,\n                target_x: is_not_interrupted as u8 * actor.get_target_x() + (!is_not_interrupted) as u8 * action_target_x, // if is_not_interrupted { c.get_target_x() } else { get_action_target_x(action) };\n                target_y: is_not_interrupted as u8 * actor.get_target_y() + (!is_not_interrupted) as u8 * action_target_y,\n                class: actor.class,\n                damage_mod: result_damage_mod,\n                health: result_health,\n                status: result_status,\n                actions: actor.actions,\n            },\n            result_energy\n        )\n\n        // if get_action_type(action) == SNEAK {\n        //     //assert(c.can_sneak());\n        //     if !can_sneak { let actor_id = c.id; println(f\"Failed to execute action: Character {actor_id} cannot sneak\"); }\n        //     //assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     //assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_sneak() & can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);  \n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_sneak();\n        // }\n        // if get_action_type(action) == MOVE {\n        //     // assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);\n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_move();\n        //     result_char.has_been_seen = is_visible(enemy_advance, result_char.x);\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_MOVE, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        // }\n        // if get_action_type(action) == RITUAL {\n        //     //assert(c.can_ritual());\n        //     // result_valid = c.can_ritual();\n        //     result_char.status += 1;\n        //     if result_char.status >= RITUAL_ROUNDS_FOR_WIN {\n        //         result_event = build_std_event(WIN, c.id, 0, 0);\n        //     } else {\n        //         result_event = build_std_event(SEE_RITUAL, c.id, 0, 0);\n        //     }\n        //     required_energy = c.get_energy_per_ritual();\n        // }\n        // if get_action_type(action) == SEARCH {\n        //     // assert(c.can_search());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_search() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(SEE_SEARCH_TRAP, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_search();\n        // }\n        // if get_action_type(action) == ATTACK {\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_MELEE), ATTACK_MELEE);\n        //     required_energy = c.get_energy_per_attack();\n        // }\n        // // TODO: global SET_TRAP = 6 as u8;\n        // if get_action_type(action) == CAST_FIREBALL {\n        //     // assert(c.can_cast_fireball());\n        //     result_char.status += 1;\n        //     // assert(result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     // result_valid = c.can_cast_fireball() & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     if result_char.status >= FIREBALL_ROUNDS_FOR_CAST {\n        //         // TODO: handle friendly fire and destruction of own walls and own traps\n        //         result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_FIREBALL), ATTACK_FIREBALL);\n        //     } else {\n        //         if c.get_has_been_seen() {\n        //             result_event = build_subtype_value_event(SEE_CAST, c.id, get_action_target_x(action), get_action_target_y(action), 0, ATTACK_FIREBALL);\n        //         }\n        //     }\n        //     required_energy = c.get_energy_per_cast();\n        // }\n        // if get_action_type(action) == DRAW {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     // result_valid = c.can_shoot() & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     result_char.status += 1;\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_DRAW, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        //     required_energy = c.get_energy_per_draw();\n        // }\n        // if get_action_type(action) == SHOOT {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = c.can_shoot() & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     // TODO: check distance! abs(c.x - get_action_target_x(action)) + abs(c.y - get_action_target_y(action)) <= c.get_shoot_range()\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_RANGED), ATTACK_RANGED);\n        //     required_energy = c.get_energy_per_shoot();\n\n        // }\n        // // TODO: SET_TRAP\n        // if get_action_type(action) == DISARM_TRAP {\n        //     // assert(c.can_disarm());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_disarm() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(DESTROY, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_disarm();\n        // }\n        \n        // // assert(energy >= required_energy);\n        // let result_valid = is_valid & (energy >= required_energy);\n        // if result_valid {\n        //     energy -= required_energy;\n        // }\n        // // energy -= required_energy;\n        // (result_valid, result_event, result_char, energy)\n    }\n//}\n\n//global test_actions: [TestActionDefinition; 1] = [\n    // build_test_action_def!(build_wait_action_def(), quote { 0, 1, 3, 4 }),\n    //TestActionDefinition { register: build_test_action_def!(build_wait_action_def()), action: new_action(0, 1, 3, 4) },\n    // build_move_action(class_energy_per_move[ARCHER]),\n    //     build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n    //     build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n    //     build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n    //     build_wait_action_def(),\n    //     ,\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[RITUALIST]),\n    //     build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n    //     build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n    //     build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[ROGUE]),\n    //     build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n    //     build_sneak_action(class_energy_per_sneak[ROGUE]),\n    //     build_search_action(class_energy_per_search[ROGUE], 1),\n    //     build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n    //     build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[KNIGHT]),\n    //     build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[MAGE]),\n    //     build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n    //     build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n    //     build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n    //     build_wait_action_def(),\n    //     build_wait_action_def()\n    // ]\n// ]\n\n// pub fn create_test_action(action: Action) -> TestActionDefinition {\n//     TestActionDefinition {\n//         register: \n//     }\n// }\n\n// pub struct TestActionDefinition {\n//     pub register: [u8; ACTION_DEFINITION_SIZE],\n//     pub action: Action,\n// }\n\n// impl ResolvedAction for TestActionDefinition {\n//     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n//     }\n//     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n//     }\n//     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n//     }\n//     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n//     }\n//     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_MAX_RANGE]\n//     }\n//     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MIN_STATUS]\n//     }\n//     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MAX_STATUS]\n//     }\n//     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDED_ENERGY]\n//     }\n//     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_EVENT_IS_TRAP] == 1\n//     }\n//     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n//     }\n//     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n//         self.register[ACTION_MOVE_TO_TARGET] as u1\n//     }\n//     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_IS_CONTINUOUS] == 1\n//     }\n//     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n//     }\n\n//     fn get_action_target_x(self) -> u8 {\n//         get_action_target_x(self.action)\n//     }\n//     fn get_action_target_y(self) -> u8 {\n//         get_action_target_y(self.action)\n//     }\n//     fn get_action_type(self) -> u8 {\n//         get_action_type(self.action)\n//     }\n// }\n\n#[test]\nfn test_execute_action() {\n  // global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder = get_arena_action_def_builder();\n    let action_def = arena_action_def_builder.build_move_action(4); //, quote { 1, 2, 3, 4 }; //new_action(1, 2, 3, 4);\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let action = new_action(1, 2, 3, 4);\n    let their_advance = 30;\n    let mut actions = [[0; 32]; MAX_ACTIONS_PER_CHARACTER + 1];\n    actions[1] = action_def;\n    let actor = Character {\n        id: 2,\n        x: 2,\n        y: 4,\n        target_x: 0,\n        target_y: 0,\n        health: MAX_HEALTH,\n        damage_mod: 1,\n        last_action: WAIT,\n        class: MAGE,\n        is_hidden: 0 as u1,\n        has_been_seen: true,\n        progress: 0,\n        status: 0,\n        actions: actions\n    };\n    let energy = 15;\n    let my_obstacles = get_default_obstacles(0);\n    let (no_obstacle_valid, no_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, MAX_HEALTH, 0);\n    let mut mco: [Obstacle] = &[];\n    for i in 0..MAX_CHARACTERS {\n      let (co_valid, co) = new_obstacle(i as u8, i as u8, HEIGHT - 1, MAX_HEALTH, i as u8 + 1);\n      assert(co_valid);\n      mco = mco.push_back(co);\n    }\n    assert(no_obstacle_valid);\n    let their_obstacles = get_default_obstacles(1).as_slice().push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle);\n    let (valid, event, _, internal_event, c, result_energy) = execute_action(\n        action,\n        their_advance,\n        actor,\n        energy,\n        mco.as_array(),\n        my_obstacles,\n        their_obstacles.as_array()\n    );\n    assert(valid, \"valid\");\n    assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n    assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n    assert(event.x == get_action_target_x(action), f\"{event}.target_x is not action target x\");\n    assert(event.y == get_action_target_y(action), f\"{event}.target_y is not action target y\");\n    assert(c.x == event.x, f\"{c}.x is not event {event}.x\");\n    assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n    assert(result_energy == 11, f\"{result_energy} != 11\");\n}\n\n\n\npub fn parse_actions(fields: [Field; SERIALIZED_ACTIONS_ARRAY_SIZE]) -> [Action; MAX_ACTIONS] {\n    comptime {\n        assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n        assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n        assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n    }\n\n    let mut actions: [Action] = &[];\n    for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n        let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n        //assert(split.len() == 32);\n        for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n            let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n            actions = actions.push_back(new_action(\n                split[offset],\n                split[offset + 1],\n                split[offset + 2],\n                split[offset + 3],\n            ));\n            /*Action {\n                action: split[offset],\n                actor: split[offset + 1],\n                target_x: split[offset + 2],\n                target_y: split[offset + 3],\n            }*/\n        }\n    }\n    actions.as_array()\n}\n\nglobal H: u32 = HEIGHT as u32;\nglobal W: u32 = WIDTH as u32;\n/**\n* Warning: This function can throw!!!\n*/\n// pub fn serialize_actions(actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n//     comptime {\n//         assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n//         assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n//         assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n//     }\n\n//     assert(actions.len() <= MAX_ACTIONS);\n\n//     let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, 0, 0, 0); MAX_ACTIONS];\n//     for i in 0..actions.len() {\n//         actions_stuffed[i] = actions[i];\n//     }\n\n//     let mut fields: [Field] = &[];\n//     for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n//         let mut data: [u8; 32] = [0; 32];\n//         for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n//             let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n//             let action = actions_stuffed[index];\n//             let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n//             data[offset] = get_action_type(action);\n//             data[offset + 1] = get_action_actor(action);\n//             data[offset + 2] = get_action_target_x(action);\n//             data[offset + 3] = get_action_target_y(action);\n//         }\n//         fields = fields.push_back(std::field::bytes32_to_field(data));\n//     }\n//     fields.as_array()\n// }\n\n#[export]\npub fn get_performable_actions(actor: Character,\n    enemy_advance: u8, energy: u8,\n    my_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES],\n    their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]\n    // action_type: u8\n) -> pub [[Field; H]; MAX_ACTIONS_PER_CHARACTER + 1] {\n  // assert(action_type as u32 <= (MAX_ACTIONS_PER_CHARACTER + 1));\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n  let mut result = [[0; H]; MAX_ACTIONS_PER_CHARACTER + 1];\n\n  let actor_id = actor.get_id();\n  let actor_x = actor.get_x();\n  let actor_y = actor.get_y();\n  let actor_target_x = actor.get_target_x();\n  let actor_target_y = actor.get_target_y();\n  let actor_last_action = actor.get_last_action();\n\n  let actor_is_in_view_range = is_visible(enemy_advance, actor_x);\n  let map = get_free_map(my_obstacles, their_obstacles);\n\n  for action_target_y in 0..HEIGHT {\n    let mut row = [[0 as u8; W]; MAX_ACTIONS_PER_CHARACTER + 1];\n    // let dy = get_distance_part(actor.get_y(), action_target_y);\n    for action_target_x in 0..WIDTH {\n      let distance = get_distance(actor.get_x(), actor.get_y(), action_target_x, action_target_y);\n      // let dx = get_distance_part(actor.get_x(), action_target_x);\n      // let distance = get_distance_from_parts(dx, dy);\n      //let could_move_to_target = can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles);\n      let could_move_to_target = is_distance_within_viewing_range(distance) & (0 == map[action_target_x][action_target_y]);\n      for action_type in 0..(MAX_ACTIONS_PER_CHARACTER + 1) {\n        let mut is_valid = true;\n        let mut actor_progress = actor.get_progress();\n        let mut actor_is_hidden = actor.get_is_hidden() == 1;\n        let mut is_not_interrupted = true;\n        let mut actor_damage_mod = actor.get_damage_mod();\n        let mut actor_status = actor.get_status();\n        let action_def = actor.actions[action_type];\n        apply_action_pre_calc_effects!(quote { action_def });\n    //        action_def_def(quote { pre_calc_effect_continues_action }, 3, |continued_action|quote { let continues_action: bool = $continued_action as u8 == actor_last_action; }),\n    // action_def_def(quote { pre_calc_effect_is_continuous }, 1, |is_continuous|quote { let is_continuous: bool = $is_continuous as bool; }),\n    // action_def_def(quote { pre_calc_effect_interrupts }, 1, |is_interrupting|quote { let is_interrupting: bool = $is_interrupting as bool; }),\n    // action_def_def(quote { pre_calc_effect_allow_retargeting }, 1, |allows_retargetting|quote { let not_interrupted_through_retargeting: bool = $allows_retargetting as bool | ((action_target_x == actor_target_x) & (action_target_y == actor_target_y)); })\n\n        validate_action_requirements!(quote { is_valid }, quote { action_def });\n        let coords = [\n            (actor_x, actor_y),\n            (action_target_x, action_target_y),\n            (NOWHERE, NOWHERE),\n        ];\n        // let mut result_energy = energy;\n        // let mut result_coords = coords[0];\n        // let mut result_progress = actor_progress;\n        // let mut result_is_hidden = actor_is_hidden;\n        // let mut result_is_visible = actor_is_in_view_range;\n        // let mut result_damage_mod = actor_damage_mod;\n        // let mut result_health = actor.get_health();\n        // let mut result_status = actor_status;\n        //apply_action_result_effects!(quote { action_def });\n        row[action_type][action_target_x] = is_valid as u8;\n      }\n    }\n    for action_type in 0..(MAX_ACTIONS_PER_CHARACTER + 1) {\n      result[action_type][action_target_y] = std::field::bytes32_to_field(row[action_type]);\n    }\n  }\n\n  result\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/action.nr"},"72":{"source":"\nuse arenalib::ARCHER;\nuse arenalib::KNIGHT;\nuse arenalib::MAGE;\nuse arenalib::RITUALIST;\nuse arenalib::ROGUE;\nuse arenalib::WIDTH;\nuse arenalib::HEIGHT;\nuse arenalib::{ CLASS_COUNT, PROGRESS_COUNT };\nuse arenalib::{ WAIT }; //, ATTACK_MELEE, ATTACK_FIREBALL, ATTACK_RANGED, MAX_FIREBALL_ROUNDS_FOR_CAST, MIN_FIREBALL_ROUNDS_FOR_CAST, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES, MAX_ACTIONS_PER_CHARACTER };\nuse arenalib::{ WIDTH_MASK, HEIGHT_MASK, CLASS_MASK, PROGRESS_MASK };\nuse arenalib::{ WIDTH_BITS, HEIGHT_BITS, CLASS_BITS, PROGRESS_BITS };\nuse crate::event::Event;\nuse crate::map::is_visible;\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::new_obstacle;\nuse skplg::{NOWHERE, debug, softassert};\nuse arenalib::{ActionDefinition};\nuse arenalib::{SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, SerializedArenaCharacterActionDefinitions, SerializedArenaCharacterActionDefinition};\n// use arenalib::{TRAP, ADD_OBSTACLE, WIN_BY_RITUAL, RITUAL_ROUNDS_FOR_WIN};\nuse arenalib::get_test_action_register;\nuse crate::event::{build_subtype_value_event, serialize_events};\nuse arenalib::NO_EVENT;\nuse arenalib::get_wait_action_def;\n\n\npub global SERIALIZED_CHARACTER_BYTES: u32 = 6;\npub type SerializedCharacter = [u8; SERIALIZED_CHARACTER_BYTES];\n\n// use skplam::{build_wait_action_def, build_shoot_action, build_draw_action, build_move_action, build_attack_action, build_cast_action, build_evocation_action, build_search_action, build_set_trap_action, build_sneak_action, build_ritual_action, build_disarm_trap_action};\n\n// this should be more efficient: for all the following: order is: UNKNOWN_CLASS, ARCHER, RITUALIST, ROGUE, KNIGHT, MAGE\nglobal class_damage_melee: [u8; 6] = [ 0, 32, 8, 24, 40, 16 ];\nglobal class_damage_ranged: [u8; 6] = [ 0, 24, 40, 16, 32, 8 ];\nglobal class_damage_fireball: [u8; 6] = [ 0, 0, 100, 50, 0, 100 ];\nglobal class_damage: [[u8; 6]; 3] = [ class_damage_melee, class_damage_ranged, class_damage_fireball ];\nglobal class_energy_per_attack: [u8; 6] = [ 0, 7, 7, 7, 6, 7 ];\nglobal class_energy_per_cast: [u8; 6] = [ 0, 255, 12, 255, 255, 6 ];\nglobal class_energy_per_disarm: [u8; 6] = [ 0, 255, 255, 12, 255, 255 ];\nglobal class_energy_per_move: [u8; 6] = [ 0, 3, 4, 3, 4, 4 ];\nglobal class_energy_per_ritual: [u8; 6] = [ 0, 255, 12, 255, 255, 255 ];\nglobal class_energy_per_search: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_sneak: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_draw: [u8; 6] = [ 0, 9, 255, 255, 255, 255 ];\nglobal class_energy_per_shoot: [u8; 6] = [ 0, 6, 255, 255, 255, 255 ];\nglobal resistances: [u16; 8 * 3] = [\n     0,  75, 100, 85,  50, 100, 20,  0, //,  255, 255, 0, 0, 0, 255, 255, 255 ], // Melee vs dummy, archer, ritualist, thief, knight, mage, wall, water, unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n     0,  80, 100, 90,  25, 100,  5,  0, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Ranged vs dummy, archer, ritualist, thief, knight, mage, wall, water\n     0,  80, 100, 90, 100,  90, 60, 50, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Fireball vs dummy, archer, ritualist, thief, knight, mage, wall, water\n];\n\nglobal trap_resistances: [u16; 8] = [ 0,  75, 100, 50,  75, 90, 5, 0]; //,  255, 255, 255, 255, 255, 255, 255, 255 ]; // Trap vs dummy, archer, ritualist, thief, knight, mage\n\n\n//global x: ActionDefinition = build_set_trap_action(1 as u8, 1 as u8);\n// TODO: move to character!\n// global ARCHER: u8 = 1;    WAIT, MOVE, ATTACK, DRAW, SHOOT\n// global RITUALIST: u8 = 2; WAIT, MOVE, ATTACK, CAST, RITUAL\n// global ROGUE: u8 = 3;     WAIT, MOVE, ATTACK, SNEAK, SEARCH, DISARM_TRAP, SET_TRAP\n// global KNIGHT: u8 = 4;    WAIT, MOVE, ATTACK\n// global MAGE: u8 = 5;      WAIT, MOVE, ATTACK, CAST, CAST_FIREBALL\n// global ACTION_DEFINITIONS: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER * CLASS_COUNT] = [\n//     // [[0 as u8; ACTION_DEFINITION_SIZE]; MAX_ACTIONS_PER_CHARACTER], // 0 for no action\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n    \n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ARCHER]),\n//         build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//         build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//         build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[RITUALIST]),\n//         build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//         build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//         build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ROGUE]),\n//         build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//         build_sneak_action(class_energy_per_sneak[ROGUE]),\n//         build_search_action(class_energy_per_search[ROGUE], 1),\n//         build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[KNIGHT]),\n//         build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[MAGE]),\n//         build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//         build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//         build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n//         WAIT_ACTION,\n//         WAIT_ACTION\n//     // ]\n// ];\n// global \n// pub fn get_test_action_register() -> [u8; ACTION_DEFINITION_REGISTER_SIZE] {\n//     build_action_def_reg!([\n//         [\n//             build_move_action(class_energy_per_move[ARCHER]),\n//             build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//             build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//             build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[RITUALIST]),\n//             build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//             build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//             build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[ROGUE]),\n//             build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//             build_sneak_action(class_energy_per_sneak[ROGUE]),\n//             build_search_action(class_energy_per_search[ROGUE], 1),\n//             build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//             build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[KNIGHT]),\n//             build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[MAGE]),\n//             build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//             build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//             build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST),\n//             build_wait_action_def(),\n//             build_wait_action_def()\n//         ]\n//     ])\n// }\n// pub fn get_test_action_register() -> SerializedArenaActionDefinitions {\n//   let action_builder = arena_action_def_builder;\n//      [\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER)),\n//             std::field::bytes32_to_field(action_builder.build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT)), // arche),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n            \n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST, 255)),\n//             std::field::bytes32_to_field(action_builder.build_ritual_action(3, class_energy_per_ritual[RITUALIST], RITUAL_ROUNDS_FOR_WIN, WIN_BY_RITUAL)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_sneak_action(class_energy_per_sneak[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_search_action(class_energy_per_search[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_set_trap_action(class_energy_per_disarm[ROGUE], 1, ADD_OBSTACLE, TRAP)),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[KNIGHT])),\n//            std::field::bytes32_to_field( action_builder.build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT])),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[MAGE], MAGE, 7)),\n//             std::field::bytes32_to_field(action_builder.build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def())\n//         ]\n// }\n\n// struct CharacterClass {\n//     class: u8,\n//     damage: u8,\n//     energy_per_attack: u8,\n//     energy_per_cast: u8,\n//     energy_per_disarm: u8,\n//     energy_per_move: u8,\n//     energy_per_ritual: u8,\n//     energy_per_search: u8,\n//     energy_per_sneak: u8,\n// }\n\npub struct Character {\n    pub id: u8,\n    pub x: u8, // 5 bit\n    pub y: u8, // 4 bit\n    pub class: u8, // 3 bit\n    pub progress: u8, // 0 = idle, 1-15 = continuing action => 4 bit\n    pub health: u8,\n    pub has_been_seen: bool,\n    pub is_hidden: u1,\n    pub target_x: u8,\n    pub target_y: u8,\n    pub damage_mod: u8,\n    pub last_action: u8,\n    pub status: u8,\n    // pub wait_action: ActionDefinition,\n    pub actions: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1], // BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER>,\n}\n\n// pub fn resolve_action(action: u8, class: u8) -> ActionDefinition {\n//     let mut idx = class as u32 * MAX_ACTIONS_PER_CHARACTER + action as u32;\n//     if idx >= (ACTION_DEFINITIONS.len()) {\n//         idx = 0;\n//     }\n//     // assert(action as u32 < MAX_ACTIONS_PER_CHARACTER);\n//     // assert(class as u32 < CLASS_COUNT);\n//     ACTION_DEFINITIONS[idx]\n// }\n//     pub fn resolve_action(action: Action) -> ActionDefinition {\n//         // let idx = get_action_base_index(self.get_id(), action);\n//         ActionDefinition::new(action, ACTION_DEFINITIONS)\n// //        (idx, ACTION_DEFINITIONS)\n//         //resolve_action(action, self.class)\n//         // let mut a = action as u32;\n//         // if a >= self.actions.len() { a = 0; }\n//         // self.actions[a] //.get_unchecked(a)\n//     }\n//global wait_action: ActionDefinition = buld_wait_action_def();\n\n// global wait_action: ActionDefinition = action_builder.build_wait_action_def();\n\nimpl Character {\n    // pub fn new(id: u8 x: u8, y: u8, class: u8, status: u8, health: u8, has_been_seen: u8)\n    /// May throw\n\n\n    pub fn get_id(self) -> u8 {\n        self.id\n    }\n\n    pub fn get_x(self) -> u8 {\n        self.x\n    }\n\n    pub fn get_y(self) -> u8 {\n        self.y\n    }\n\n    pub fn get_class(self) -> u8 {\n        self.class\n    }\n\n    pub fn get_progress(self) -> u8 {\n        self.progress\n    }\n\n    pub fn get_status(self) -> u8 {\n        self.status\n    }\n\n    pub fn get_health(self) -> u8 {\n        self.health\n    }\n\n    pub fn get_has_been_seen(self) -> bool {\n        self.has_been_seen\n    }\n\n    pub fn get_target_x(self) -> u8 {\n        self.target_x\n    }\n\n    pub fn get_target_y(self) -> u8 {\n        self.target_y\n    }\n\n    pub fn get_is_hidden(self) -> u1 {\n      self.is_hidden\n    }\n\n    pub fn get_damage_mod(self) -> u8 {\n      self.damage_mod\n    }\n\n    pub fn get_action(self, action_idx: u8) -> (bool, ActionDefinition) {\n      /*if action_idx == 0 {\n        (true, self.wait_action)\n      } else */if action_idx <= MAX_ACTIONS_PER_CHARACTER as u8 {\n        (true, self.actions[action_idx])\n      } else {\n        (false, self.actions[0])\n      }\n    }\n\n    // pub fn get_energy_per_attack(self) -> u8 {\n    //     class_energy_per_attack[self.class]\n    // }\n\n    // pub fn get_energy_per_cast(self) -> u8 {\n    //     class_energy_per_cast[self.class]\n    // }\n\n    // pub fn get_energy_per_disarm(self) -> u8 {\n    //     class_energy_per_disarm[self.class]\n    // }\n\n    // pub fn get_energy_per_move(self) -> u8 {\n    //     class_energy_per_move[self.class]\n    // }\n\n    // pub fn get_energy_per_ritual(self) -> u8 {\n    //     class_energy_per_ritual[self.class]\n    // }\n\n    // pub fn get_energy_per_search(self) -> u8 {\n    //     class_energy_per_search[self.class]\n    // }\n\n    // pub fn get_energy_per_sneak(self) -> u8 {\n    //     class_energy_per_sneak[self.class]\n    // }\n\n    // pub fn get_energy_per_draw(self) -> u8 {\n    //     class_energy_per_draw[self.class]\n    // }\n\n    // pub fn get_energy_per_shoot(self) -> u8 {\n    //     class_energy_per_shoot[self.class]\n    // }\n\n    // pub fn get_damage(self, attack_type: u8) -> u8 {\n    //     self.damage_mod + class_damage[attack_type][self.class]\n    // }\n\n    pub fn get_last_action(self) -> u8 {\n      self.last_action\n    }\n\n    // pub fn can_sneak(self) -> bool {\n    //     class_energy_per_sneak[self.class] != 255\n    // }\n\n    // pub fn can_ritual(self) -> bool {\n    //     class_energy_per_ritual[self.class] != 255\n    // }\n\n    // pub fn can_cast_fireball(self) -> bool {\n    //     class_energy_per_cast[self.class] != 255\n    // }\n\n    pub fn can_shoot(self) -> bool {\n        self.class == ARCHER\n    }\n    // pub fn can_disarm(self) -> bool {\n    //     class_energy_per_disarm[self.class] != 255\n    // }\n\n    // pub fn can_search(self) -> bool {\n    //     class_energy_per_search[self.class] != 255\n    // }\n\n    fn is_pos_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_target_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_class_valid(class: u8) -> bool { class as u32 <= CLASS_COUNT }\n    fn is_status_valid(status: u8) -> bool { status < PROGRESS_COUNT }\n\n    pub fn is_valid(self) -> bool {\n        Character::is_pos_valid(self.x, self.y) &\n        Character::is_target_valid(self.target_x, self.target_y) &\n        Character::is_class_valid(self.class) &\n        Character::is_status_valid(self.progress)\n    }\n\n    pub fn serialize(self) -> (SerializedCharacter, SerializedArenaCharacterActionDefinitions) {\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n        assert(self.is_valid());\n        let packed_x = self.x + (self.class << WIDTH_BITS);\n        let packed_y = self.y + (self.progress << HEIGHT_BITS);\n        let packed_target_x = (self.target_x & WIDTH_MASK) + ((self.is_hidden as u8) << WIDTH_BITS);\n        let packed_target_y = (self.target_y & HEIGHT_MASK) + ((self.last_action as u8) << HEIGHT_BITS);\n\n        // let serialized_action_defs = self.actions.map(|a|std::field::bytes32_to_field(a));\n        let serialized_action_defs = [\n          std::field::bytes32_to_field(self.actions[1]),\n          std::field::bytes32_to_field(self.actions[2]),\n          std::field::bytes32_to_field(self.actions[3]),\n          std::field::bytes32_to_field(self.actions[4]),\n          std::field::bytes32_to_field(self.actions[5]),\n          std::field::bytes32_to_field(self.actions[6])\n        ];\n        \n        ([packed_x, packed_y, self.health, packed_target_x, packed_target_y, self.damage_mod], serialized_action_defs)\n    }\n\n    pub fn to_obstacle(self) -> (bool, Obstacle) {\n        comptime {\n            assert(MAX_CHARACTERS < (255 - MAX_OBSTACLES));\n        }\n        assert(self.is_valid());\n        new_obstacle(self.id + (MAX_OBSTACLES as u8), self.x, self.y, self.health, self.class)\n        // Obstacle {\n        //     id: self.id + (MAX_CHARACTERS as u8),\n        //     x: self.x,\n        //     y: self.y,\n        //     obstacle_type: self.class,\n        //     health: self.health,\n        //     //was_alive: \n        // }\n    }\n\n    pub fn move(self, x: u8, y: u8) -> Character {\n        let mut c = self;\n        c.x = x;\n        c.y = y;\n        c\n    }\n\n    pub fn take_damage(self, attack_type: u8, dmg: u8) -> Character {\n        let damage_after_resistances = get_attack_damage_to_tile(attack_type, dmg as u32, self.class);\n        let mut c = self;\n        if damage_after_resistances > (c.health as u32) {\n            c.health = 0;\n        } else {\n            c.health -= (damage_after_resistances as u8);\n        }\n        c\n    }\n\n    pub fn set_status(self, status: u8) -> Character {\n        assert(status < PROGRESS_COUNT);\n        let mut c = self;\n        c.progress = status;\n        c\n    }\n\n    pub fn create_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n        // let mut actions: BoundedVec<ActionDefinition, 6> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..6 {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions.push(ACTION_DEFINITIONS[idx + i]);\n        //     }\n        // }\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: 0,\n            health: 0,\n            has_been_seen: false,\n            is_hidden: 0,\n            target_x: 255,\n            target_y: 255,\n            damage_mod: 0,//: class_damage[class],\n            last_action: WAIT,\n            status: 0, // TODO: status\n            actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1]// BoundedVec::new()\n        };\n        assert(c.is_valid());\n        c\n    }\n\n    pub fn parse(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool, Character) {\n        // these asserts could be disabled for production\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n\n      let (is_valid, c) = parse_unconstrained(id, data, actions_data, wait_action, events, enemy_advance);\n      // assert(c.)\n\n        assert(c.is_valid());\n        (is_valid, c)\n    }\n}\n\nfn parse_unconstrained(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool,Character) {\n          let mut is_valid = true;\n\n        let split: [u8; 32] = data.to_be_bytes::<32>();\n        assert(split.len() == 32);\n        let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n        let y_packed = split[2 + id * 6 + 1]; // 4 bit y, 4 bit status\n        let mut health = split[2 + id * 6 + 2] as u16;\n        let target_x_packed = split[2 + id * 6 + 3]; // 5 bit target x, 1 bit hidden, 1 bit has target, 1 bit unused\n        let target_y_packed = split[2 + id * 6 + 4]; // 4 bit target y, 4 bit last action\n        let damage_mod = split[2 + id * 6 + 5]; // last byte: for the moment, use to save damage_mod (buffs, etc)\n\n        let x = x_packed & WIDTH_MASK;\n        let y = y_packed & HEIGHT_MASK;\n        let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n        if !Character::is_class_valid(class) {\n            debug!(quote { println(f\"Invalid class {class}\"); });\n            class = 0;\n            is_valid = false;\n        }\n\n        let progress = (y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n        softassert!(quote { is_valid }, quote { Character::is_status_valid(progress) }, quote { f\"Invalid status {progress} during character parsing {id}\" });\n\n        let target_x = target_x_packed & WIDTH_MASK;\n        let target_y = target_y_packed & HEIGHT_MASK;\n        let last_action = (target_y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n\n        let is_visible = is_visible(enemy_advance, x); //((target_x_packed >> 5) & 1) as u1;\n        let is_hidden = ((target_x_packed >> WIDTH_BITS) & 1) as u1;\n\n        let mut damage: u16 = 0;\n        for i in 0..MAX_EVENTS {\n            let event = events[i];\n            damage += event.get_applied_damage_to_my_asset(x, y, class);\n            // if events[i].actor_id == id {\n            //     let event = events[i];\n            //     if event.actor_id == id {\n            //         damage += event.get_applied_damage_to_my_asset(x, y, class);\n            //     }\n            // }\n        }\n        if damage > health {\n            health = 0;\n        } else {\n            health -= damage;\n        }\n\n        // let mut actions = [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]; //: BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..MAX_ACTIONS_PER_CHARACTER {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions[i] = ACTION_DEFINITIONS[idx + i];\n        //     }\n        // }\n\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: progress,\n            health: health as u8,\n            has_been_seen: is_visible, // TODO \n            is_hidden: is_hidden,\n            target_x: target_x,\n            target_y: target_y,\n            damage_mod: damage_mod,\n            last_action: last_action,\n            actions: [\n              wait_action,\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 1].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 2].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 3].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 4].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 5].to_be_bytes::<32>()\n            ],\n            status: 0 // TODO: status\n        };\n        (is_valid, c)\n}\n\n// unconstrained fn create_character_unconstrained(\n//   id: u8,\n//   x: u8,\n//   y: u8,\n//   class: u8,\n//   progress: u8,\n//   health: u8,\n//   has_been_seen: u8\n// )\n\nfn select_action_defs_of_character(actions: SerializedArenaActionDefinitions, char_id: u32) -> [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1] {\n  let mut result: [SerializedArenaCharacterActionDefinition] = &[std::field::bytes32_to_field(get_wait_action_def())];\n  let offset = char_id * MAX_ACTIONS_PER_CHARACTER;\n  for i in 0..MAX_ACTIONS_PER_CHARACTER {\n    result = result.push_back(actions[offset + i]);\n  }\n  result.as_array().map(|f|f.to_be_bytes())\n}\n\npub fn get_default_characters(side: u8) -> [Character; MAX_CHARACTERS] {\n    assert(side < 2, f\"Side is too large {side}\");\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let default_actions = get_test_action_register();\n\n    let x = |x| x * ((side + 1) % 2) + (WIDTH - 1 - x) * side;\n    [\n        Character { id: 0, x: x(2), y: 2, class: ARCHER, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 1), status: 0 },\n        Character { id: 1, x: x(2), y: 3, class: RITUALIST, health: 60, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 2), status: 0 },\n        Character { id: 2, x: x(2), y: 4, class: ROGUE, health: 80, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 3), status: 0 },\n        Character { id: 3, x: x(2), y: 5, class: KNIGHT, health: 120, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 4), status: 0 },\n        Character { id: 4, x: x(2), y: 6, class: MAGE, health: 40, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 5), status: 0 },\n    ]\n}\n\n#[export]\npub fn parse_characters(data: SerializedArenaCharacterRoster, actions_data: SerializedArenaActionDefinitions, events: [Event; MAX_EVENTS], enemy_advance: u8) -> pub (bool, [Character; MAX_CHARACTERS]) {\n    comptime { assert(MAX_CHARACTERS == 5); }\n\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut is_valid = true;\n\n    let wait_action = get_wait_action_def();\n\n    // no need to optimize, compiler automatically rolls this out\n    // let mut result: [Character; MAX_CHARACTERS] = [Character::create_character(0, 0, 0, 0), Character::create_character(1, 0, 0, 0), Character::create_character(2, 0, 0, 0), Character::create_character(3, 0, 0, 0), Character::create_character(4, 0, 0, 0)];\n    // for i in 0..(MAX_CHARACTERS as u8) {\n    //     let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action, events, enemy_advance);\n    //     is_valid &= curr_valid;\n    //     result[i] = curr_c;\n    // }\n\n        let (curr_valid, curr_c0) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[0] = curr_c0;\n        let (curr_valid, curr_c1) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[1] = curr_c1;\n        let (curr_valid, curr_c2) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[2] = curr_c2;\n        let (curr_valid, curr_c3) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[3] = curr_c3;\n        let (curr_valid, curr_c4) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[4] = curr_c4;\n    let result = [curr_c0, curr_c1, curr_c2, curr_c3, curr_c4];\n    (is_valid, result)\n}\n\npub fn get_test_my_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 100,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\npub fn get_test_their_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 255,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\n#[test]\nfn test_serialize_character() {\n    let mut character = Character {\n        id: 4,\n        x: 21,\n        y: 9,\n        class: 5,\n        progress: 9,\n        health: 129,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 31,\n        target_y: 9,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    };\n    let (field, _) = character.serialize();\n    assert(field[0] == (21 | (5 << 5)));\n    assert(field[1] == (9 | (9 << 4)));\n    assert(field[2] == 129);\n    assert(field[3] == 31); // TODO: why?\n    assert(field[4] == 9);\n    assert(field[5] == 0);\n}\n\n#[test]\nfn test_parse_character() {\n    let dummy_events = Event::get_test_dummy_events();\n    let data_array: [u8; 32] = [\n        0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        191 as u8, 249 as u8, 255 as u8, 255 as u8, 9 as u8, 255 as u8,\n        181 as u8, 153 as u8, 129 as u8, 127 as u8, 9 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n    ];\n    let data: Field = std::field::bytes32_to_field(data_array);\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    println(data);\n    assert(data == 0xbff9ffff09ffb599817f0900000000000000, f\"Failed assumption: data: {data} != 0xbff9ffff09ffb599817f0900000000000000\");\n    let (character_valid, character) = Character::parse(3, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_valid);\n    assert(character.get_id() == 3);\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 9);\n    assert(character.get_class() == 5);\n    assert(character.get_progress() == 9);\n    assert(character.get_health() == 129);\n    assert(character.get_has_been_seen());\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n\n    let (character_max_valid, character_max) = Character::parse(2, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_max_valid);\n    assert(character_max.get_id() == 2);\n    assert(character_max.get_x() == 31);\n    assert(character_max.get_y() == 9);\n    assert(character_max.get_class() == 5);\n    assert(character_max.get_progress() == 15);\n    assert(character_max.get_health() == 255);\n    assert(character_max.get_has_been_seen());\n    assert(character_max.get_target_x() == 31);\n    assert(character_max.get_target_y() == 9);\n\n    let (character_min_valid, character_min) = Character::parse(0, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_min_valid);\n    assert(character_min.get_id() == 0);\n    assert(character_min.get_x() == 0);\n    assert(character_min.get_y() == 0);\n    assert(character_min.get_class() == 0);\n    assert(character_min.get_progress() == 0);\n    assert(character_min.get_health() == 0);\n    assert(character_min.get_has_been_seen() == false);\n    assert(character_min.get_target_x() == 0);\n    assert(character_min.get_target_y() == 0);\n}\n\n#[test]\nfn test_parse_character_as_in_game() {\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    let data: Field = 0x1602ff1f09001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00;\n    let (character_valid, character) = Character::parse(0, data, dummy_actions, wait_action, Event::get_test_dummy_events(), 20);\n    assert(character_valid);\n    assert(character.get_id() == 0);\n    assert(character.get_x() == 22, character.get_x());\n    assert(character.get_y() == 2, character.get_y());\n    assert(character.get_class() == 0, character.get_class());\n    assert(character.get_progress() == 0, character.get_progress());\n    assert(character.get_health() == 255);\n    assert(character.get_has_been_seen() == true);\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n}\n\n#[export]\npub fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> pub (Field, SerializedArenaActionDefinitions) {\n    let mut result: [u8; 32] = [0; 32];\n    let mut actions: SerializedArenaActionDefinitions = [0; 30]; //&[].as_array();\n    for i in 0..MAX_CHARACTERS {\n        let (serialized_char_bytes, serialized_actions) = chars[i].serialize();\n        for j in 0..6 {\n            result[2 + i * 6 + j] = serialized_char_bytes[j];\n        }\n        for k in 0..MAX_ACTIONS_PER_CHARACTER {\n          actions[i * MAX_ACTIONS_PER_CHARACTER + k] = serialized_actions[k];\n        }\n    }\n    \n    (std::field::bytes32_to_field(result), actions)\n}\n\n/**\n* For now we will only take class into account.\n*/\npub fn get_attack_damage_to_tile(attack_type: u8, damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * resistances[attack_type * 8 + (class & 7)] as u32 / 100) as u32\n}\n\npub fn get_trap_damage_to_tile(damage: u32, class: u8) -> u32 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * trap_resistances[class & 7] as u32 / 100) as u32\n}\n\n#[test]\nfn test_parse_character_round0() {\n  // let actions_data = .map(|f|f.to_be_bytes::<32>()).map(|f|std::field::bytes32_to_field(f));\n  let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let enemy_advance = 0x00;\n  let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0)\n  ];\n  let serialized_events = serialize_events(events);\n   println(f\"events: {serialized_events}\");\n\n  let parsed = parse_characters(data, [\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071020100a000020100a00000020000000002000000000000000,\n    0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n    0x023100081b161118120a010018120a01000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071008100a000008100a00000020000000002000000000000000,\n    0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n    0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071018100a000018100a00000020000000002000000000000000,\n    0x09f0000130060c002000000000200000000020000000002000000000000000,\n    0xf00001100610001005000100100500010020000000002000000000000000,\n    0xf00001301c0100100d000000100d00000020000000002000000000000000,\n    0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110061028100a000028100a00000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071010100a000010100a00000020000000002000000000000000,\n    0xf000071b1611002000000000000705000020000000002000000000000000,\n    0x6300061b161164150a020164150a02010020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000\n], events, enemy_advance);\n\n  assert(parsed.0);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/character.nr"},"74":{"source":"use arenalib::{ NO_EVENT, SEE_MOVE, RECEIVE_ATTACK, TRIGGERED_TRAP }; //, SEE_RITUAL, SEE_CAST, SEE_DRAW, SEE_SEARCH_TRAP, FOUND_TRAP\n// use crate::{ EMPTY, WALL };\nuse arenalib::{ EVENT_COUNT };\nuse arenalib::{ ATTACK_FIREBALL };\nuse arenalib::{ SERIALIZED_EVENT_BYTE_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD };\nuse arenalib::{ WIDTH };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS }; //, MAX_TRAPS\nuse arenalib::SerializedArenaEvents;\n// use crate::TRAPS_BUFFER_MASK;\nuse crate::map::get_distance;\n// use crate::character::Character;\nuse crate::character::{ get_attack_damage_to_tile, get_trap_damage_to_tile };\nuse crate::map::their_x_to_mine;\nuse skplg::{ debug, softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD };\n\n// TODO: THIS SHOULD BE GENERATED WITH MACRO!\n// pub global NO_EVENT: u8 = 0 ;\n// pub global DESTROY: u8 = 1;          // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //use coordinates to determine tile or trap that got destroyed and update map\n// //pub global DISCOVER = 2;         // actor_id = their_char or their_object when receive - handle to update enemy positions, got health & class (this is for all chars, not just the active one)\n// //pub global SEE_COLUMN = 2 ;      // y = the column the player sees => update objects list\n// pub global SEE_MOVE: u8 = 3 ;        // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //handle to update enemy positions => DISCOVER\n// //pub global SEE_SPELL = 4 ;       // actor_id = their_char when receive - need to handle effect via coordinates, => RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle my obstacles\n// pub global SEE_SEARCH_TRAP: u8 = 5 ; // actor_id = their_char when receive - need to create found trap event if there is a trap nearby => FOUND_TRAP\n// pub global SEE_RITUAL: u8 = 6 ;      // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// pub global SEE_CAST: u8 = 7;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// pub global SEE_DRAW: u8 = 8;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// pub global RECEIVE_EFFECT: u8 = 9;   //NOTE: NEW: This is to be used for status effecting things! actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client\n// pub global RECEIVE_ATTACK: u8 = 10;  // actor_id = 0 when receive - need to handle damage => // no need to events ... health of visible assets gets sent anyway and invisible ones will be updated during discovery //RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle in my obstacles\n// pub global TRIGGERED_TRAP: u8 = 11;  // actor_id = my_char when receive - need to handle damage (for now, later on we might want to handle other effects as well) => RECEIVE_DAMAGE\n// // pub global FOUND_TRAP: u8 = 12;      // actor_id = my_char when receive - no need to handle, only important to have on-chain for the client\n// pub global DISARMED_TRAP: u8 = 13;      // actor_id = their-char when receive - need to remove my trap from the map\n// pub global WIN: u8 = 14;\n// // pub global LOSE: u8 = 15;\n// pub global ADD_OBSTACLE: u8 = 4;\n// pub global EVENT_COUNT: u8 = 16;\n\npub global EVENT_SUBTYPE_COUNT: u32 = 16;\npub global EVENT_ARRAY_SIZE: u32 = EVENT_COUNT as u32;\nglobal AFFECTS_HEALTH: u8 = 1;\nglobal AFFECTS_STATUS: u8 = 2;\nglobal AFFECTS_PROGRESS_ADD: u8 = 3;\nglobal AFFECTS_PROGRESS_SUB: u8 = 3;\npub global EVENT_DEFINITIONS: [[u8; EVENT_SUBTYPE_COUNT]; EVENT_ARRAY_SIZE] = [\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  0 NO_EVENT\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  1 DESTROY (not implemented)\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  2 ?\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  3 SEE_MOVE\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  4 ?\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  5 SEE_SEARCH_TRAP\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  6 SEE_RITUAL\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  7 SEE_CAST\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  8 SEE_DRAW\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  9 RECEIVE_EFFECT\n  [ AFFECTS_HEALTH, AFFECTS_HEALTH, AFFECTS_HEALTH, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 10 RECEIVE_ATTACK\n  [ AFFECTS_HEALTH, AFFECTS_HEALTH, AFFECTS_HEALTH, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 11 TRIGGERED_TRAP\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 12 ?\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 13 DISARMED_TRAP\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 14 WIN\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  // 15 ?\n];\nglobal EVENT_DEF_SIGN_ADD: u8 = 0;\nglobal EVENT_DEF_SIGN_SUB: u8 = 1;\npub global EVENT_DEFINITION_SIGNS: [[u8; EVENT_SUBTYPE_COUNT]; EVENT_ARRAY_SIZE] = [\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  0 NO_EVENT\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  1 DESTROY (not implemented)\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  2 ?\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  3 SEE_MOVE\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  4 ?\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  5 SEE_SEARCH_TRAP\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  6 SEE_RITUAL\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  7 SEE_CAST\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  8 SEE_DRAW\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //  9 RECEIVE_EFFECT\n  [ AFFECTS_HEALTH, AFFECTS_HEALTH, AFFECTS_HEALTH, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 10 RECEIVE_ATTACK\n  [ AFFECTS_HEALTH, AFFECTS_HEALTH, AFFECTS_HEALTH, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 11 TRIGGERED_TRAP\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 12 ?\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 13 DISARMED_TRAP\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 14 WIN\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  // 15 ?\n];\n\npub struct Event {\n    pub event: u8,\n    pub actor_id: u8,\n    pub subtype: u8,\n    pub x: u8,\n    pub y: u8,\n    pub value: u8,\n    pub radius: u8,\n}\n\n\n    #[export]\n    pub fn parse_their_events(fields: SerializedArenaEvents) -> pub (bool, [Event; MAX_EVENTS]) {\n        comptime {\n            assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENT_BYTE_SIZE <= 32);\n            assert(SERIALIZED_EVENTS_ARRAY_SIZE * SERIALIZED_EVENTS_PER_FIELD == MAX_EVENTS);\n            assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n        }\n\n        let mut valid = true;\n        let mut events: [Event; MAX_EVENTS] = [Event::empty(0); MAX_EVENTS];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let split: [u8; 32] = fields[i].to_be_bytes::<32>(); //.to_be_bytes<32>();\n            //assert(split.len() == 32);\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                let raw_x = split[offset + 2];\n                let (x_parsed_valid, x_parsed) = their_x_to_mine(raw_x);\n                softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to calculate their_x_to_mine: {raw_x}\" });\n                events[i * SERIALIZED_EVENTS_PER_FIELD + j] = Event {\n                    event: split[offset],\n                    actor_id: split[offset + 1],\n                    x: x_parsed,\n                    y: split[offset + 3],\n                    value: split[offset + 4],\n                    subtype: split[offset + 5],\n                    radius: split[offset + 6],\n                };\n            }\n        }\n        (valid, events)\n    }\n    \n    #[export]\n    pub fn serialize_events(events: [Event; MAX_EVENTS]) -> pub SerializedArenaEvents {\n        assert(events.len() == MAX_EVENTS);\n        assert(MAX_EVENTS % SERIALIZED_EVENTS_PER_FIELD == 0);\n        assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n\n        let mut fields: [Field] = &[];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let mut data: [u8; 32] = [0; 32];\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let index = i * SERIALIZED_EVENTS_PER_FIELD + j;\n                let event = events[index];\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                data[offset] = event.event;\n                data[offset + 1] = event.actor_id;\n                data[offset + 2] = event.x;\n                data[offset + 3] = event.y;\n                data[offset + 4] = event.value;\n                data[offset + 5] = event.subtype;\n                data[offset + 6] = event.radius;\n            }\n            fields = fields.push_back(std::field::bytes32_to_field(data));\n        }\n        fields.as_array()\n    }\n    \n#[test]\nfn test_event_serde() {\n    let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 5, NO_EVENT, 1),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 6, NO_EVENT, 2),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 7, NO_EVENT, 3),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 8, NO_EVENT, 4)\n  ];\n\n  let serialized = serialize_events(events);\n  let (result_valid, result) = parse_their_events(serialized);\n  assert(result_valid);\n  assert(result[0].event == events[0].event);\n  assert(result[1].event == events[1].event);\n  assert(result[2].event == events[2].event);\n  assert(result[3].event == events[3].event);\n  assert(result[0].actor_id == events[0].actor_id);\n  assert(result[1].actor_id == events[1].actor_id);\n  assert(result[2].actor_id == events[2].actor_id);\n  assert(result[3].actor_id == events[3].actor_id);\n  assert(result[0].x == events[0].x);\n  assert(result[1].x == events[1].x);\n  assert(result[2].x == events[2].x);\n  assert(result[3].x == events[3].x);\n  assert(result[0].y == events[0].y);\n  assert(result[1].y == events[1].y);\n  assert(result[2].y == events[2].y);\n  assert(result[3].y == events[3].y);\n  assert(result[0].value == events[0].value);\n  assert(result[1].value == events[1].value);\n  assert(result[2].value == events[2].value);\n  assert(result[3].value == events[3].value);\n  assert(result[0].subtype == events[0].subtype);\n  assert(result[1].subtype == events[1].subtype);\n  assert(result[2].subtype == events[2].subtype);\n  assert(result[3].subtype == events[3].subtype);\n  assert(result[0].radius == events[0].radius);\n  assert(result[1].radius == events[1].radius);\n  assert(result[2].radius == events[2].radius);\n  assert(result[3].radius == events[3].radius);\n}\n    // fn affects_my_character(self, x: u8, y: u8) -> bool {\n    //     let distance = get_distance(self.x, self.y, x, y);\n    //     ((self.x == x) & (self.y == y)) | ((self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y))\n    // }\nimpl Event {\n    fn affects_my_obstacle(self, x: u8, y: u8) -> bool {\n        (self.x == x) & (self.y == y)\n    }\n\n    fn may_affect_my_other_characters(self) -> bool {\n        (self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL)\n    }\n\n    fn may_affect_my_obstacles(self) -> bool {\n        self.event == RECEIVE_ATTACK\n    }\n\n    /**\n    * For now we will only take class into account.\n    */\n    pub fn get_applied_damage_to_my_asset(self, x: u8, y: u8, tile: u8) -> u16 {\n        let mut damage = 0;\n        let radius = self.radius as u32;\n        let radius = radius * radius;\n        let distance = get_distance(self.x, self.y, x, y) as u32;\n    \n        if self.event == RECEIVE_ATTACK {\n            debug!(quote {\n                        // let event = self.event;\n                        // let actor = self.actor_id;\n                        // let self_x = self.x;\n                        // let self_y = self.y;\n                        // let val = self.value;\n                        // println(f\"GetAppliedDamageToMyAsset: Event({event}:{val} from {actor}@{self_x}|{self_y})@{x}|{y}: {distance} <= {radius}\");\n                    });\n            if distance <= radius {\n                let damage_raw = get_attack_damage_to_tile(self.subtype, self.value as u32, tile) as u32;\n                damage = damage_raw * (1 + radius - distance) / (radius + 1) as u32;\n                debug!(quote { println(f\"Deal damage: {damage_raw} * (1 + {radius} - {distance}) / ({radius} + 1) = {damage}\"); });\n            }\n            // if (self.x == x) & (self.y == y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile);\n            // } else if (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile) / 2;\n            // }\n        }\n        if self.event == TRIGGERED_TRAP {\n            damage = get_trap_damage_to_tile(self.value as u32, tile);\n        }\n        damage as u16\n    }\n\n    pub fn empty(actor_id: u8) -> Event {\n        Event {\n            event: NO_EVENT,\n            actor_id: actor_id,\n            x: 0,\n            y: 0,\n            value: 0,\n            subtype: 0,radius: 0\n        }\n    }\n\n    pub fn get_dummy_events() -> [Field; MAX_EVENTS] {\n        [0; MAX_EVENTS]\n    }\n\n    pub fn get_test_dummy_events() -> [Event; MAX_EVENTS] {\n        [Event::empty(0); MAX_EVENTS]\n    }\n}\n\npub fn build_std_event(event: u8, actor_id: u8, x: u8, y: u8) -> Event {\n    assert(event < EVENT_COUNT);\n    assert((actor_id as u32) < MAX_CHARACTERS);\n    assert((x < WIDTH) | (x == NOWHERE));\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: 0,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\n#[test]\nfn test_build_std_event() {\n    let event = build_std_event(SEE_MOVE, 1, 2, 3);\n    assert(event.event == SEE_MOVE);\n    assert(event.actor_id == 1);\n    assert(event.x == 2);\n    assert(event.y == 3);\n}\n\n#[test(should_fail)]\nfn test_build_std_event_fail() {\n    let event = build_std_event(EVENT_COUNT, 1, 2, 3);\n    assert(event.event == EVENT_COUNT);\n}\n\npub fn build_value_event(event: u8, actor_id: u8, x: u8, y: u8, value: u8) -> Event {\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\npub fn build_subtype_value_event(event_type: u8, actor_id: u8, x: u8, y: u8, value: u8, event_subtype: u8, radius: u8) -> Event {\n    Event {\n        event: event_type,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: event_subtype,\n        radius: radius,\n    }\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/event.nr"},"75":{"source":"mod common;\n// mod actionPreCalcEffect;\n// mod actionResultEvent;\n// mod actionResultEffect;\n// mod actionRequirements;\nmod action;\n// mod actionDefinitionRegister;\nmod bugs;\nuse arenalib::{ new_action };\npub use action::execute_action;\n// mod actionDefinition;\nmod character;\nuse character::{ Character };\nuse character::parse_characters;\nmod event;\nuse event::Event;\npub use event::{serialize_events, parse_their_events};\nmod obstacle;\nuse obstacle::Obstacle;\npub use obstacle::{ new_obstacle, parse_my_obstacles, parse_their_obstacles, get_obstacle_x, get_obstacle_y, get_obstacle_id, get_obstacle_type, get_obstacle_health, serialize_my_obstacles, get_default_obstacles };\nmod map;\nuse dep::std;\nuse obstacle::serialize_obstacle;\nuse obstacle::serialize_their_obstacles;\n// use action::ACTION_TARGET_X;\n// use action::ACTION_TARGET_Y;\n// use action::ACTION_TYPE;\nuse arenalib::{get_action_target_y, get_action_target_x, get_action_type};\nuse obstacle::serialize_my_obstacles_for_me;\nuse map::is_visible;\npub use arenalib::{SerializedArenaActionDefinitions, SerializedArenaActions, SerializedArenaCharacterRoster, SerializedArenaEnemyObstacles, SerializedArenaEvents, SerializedArenaObstacles};\nuse arenalib::arena_test_action_def_register;\nuse character::serialize_chars;\nuse skplg::{softassert, debug};\nuse arenalib::{serialize_actions, parse_actions};\n\nuse arenalib::{SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLE_BYTE_SIZE};\nuse arenalib::{WIDTH};\nuse arenalib::{MAX_ACTIONS, MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES, MAX_ENEMY_OBSTACLES};\nuse arenalib::{VIEW_DISTANCE};\nuse arenalib::{ARCHER, KNIGHT, ROGUE, MAGE, RITUALIST};\nuse arenalib::{MIN_FIREBALL_ROUNDS_FOR_CAST};\nuse arenalib::{SEE_MOVE, RECEIVE_ATTACK, NO_EVENT};\nuse arenalib::{ATTACK_FIREBALL, ATTACK_RANGED};\nuse arenalib::{WAIT};\nuse arenalib::get_wait_action_def;\nuse arenalib::get_test_action_register;\npub use action::get_performable_actions;\nuse arenalib::Action;\nuse arenalib::get_action_actor;\n\n// mod ResolvedAction;\n\n\n\n// #[export]\n// pub fn ext_can_move_to(x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle]) -> bool {\n//     assert(MAX_OBSTACLES == 24);\n//     let mut my_obstacles_parsed = Obstacle::parse_my_obstacles(my_obstacles, events).as_array();\n//     // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n//     // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n//     let enemy_objects_parsed = Obstacle::parse_their_obstacles(enemy_objects);\n\n//     let mut can = true;\n//     for i in 0..MAX_OBSTACLES {\n//         if !obstacles[i].is_traversible() & (obstacles[i].x == x) & (obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     for i in 0..their_obstacles.len() {\n//         if !their_obstacles[i].is_traversible() & (their_obstacles[i].x == x) & (their_obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     can\n// }\n\n// pub comptime global DEBUG: bool = false;\n// pub comptime fn debug(stmt: Quoted) -> Quoted {\n//     let debug_result = if DEBUG {\n//         stmt\n//     } else { quote {} };\n//     debug_result\n// }\n// pub comptime fn debugmsg<T>(msg: T) -> Quoted {\n//     debug!(quote { println($msg); })\n// }\n// pub comptime fn softassert(varname: Quoted, check: Quoted, msg: Quoted) -> Quoted {\n//     let result = if DEBUG {\n//         quote {\n//             $varname &= $check;\n//             if !($check) {\n//                 println($msg);\n//             }\n//         }\n//     } else {\n//         quote {\n//             $varname &= $check;\n//         }\n//     };\n//     result\n// }\n\n// // MAP\n// global WIDTH_BITS: u8 = 5;\n// global WIDTH_MASK: u8 = (1 << WIDTH_BITS) - 1;\n// global WIDTH: u8 = 1 << WIDTH_BITS;\n// global HEIGHT_BITS: u8 = 4;\n// global HEIGHT_MASK: u8 = (1 << HEIGHT_BITS) - 1;\n// global HEIGHT: u8 = 10;\n// // global NOWHERE: u8 = 255;\n\n// // CLASSES\n// //global UNKNOWN_CLASS: u8 = 0;\n// global ARCHER: u8 = 1;\n// global RITUALIST: u8 = 2;\n// global ROGUE: u8 = 3;\n// global KNIGHT: u8 = 4;\n// global MAGE: u8 = 5;\n// global CLASS_BITS: u8 = 3;\n// global CLASS_MASK: u8 = (1 << CLASS_BITS) - 1;\n// global CLASS_COUNT: u32 = 6;\n// global MAX_ACTIONS_PER_CHARACTER: u32 = 6;\n\n// // ACTIONS\n// global WAIT: u8 = 0;\n// //global SNEAK: u8 = 1;\n// //global MOVE: u8 = 2;          // => SEE_COLUMN (depr: MOVE)\n// //global RITUAL: u8 = 3;        // => SEE_RITUAL | WIN\n// //global SEARCH: u8 = 4;        // => SEE_SEARCH_TRAP\n// //global ATTACK: u8 = 5;        // => RECEIVE_ATTACK | DESTROY // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST: u8 = 6;          // => SEE_CAST // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST_FIREBALL: u8 = 7; // => RECEIVE_ATTACK // affects other characters if status == FIREBALL_ROUNDS_FOR_CAST\n// //global DRAW: u8 = 8;          // => SEE_DRAW\n// //global SHOOT: u8 = 9;         // => RECEIVE_ATTACK\n// //global TRIGGER_TRAP = 9;  // => TRIGGERED_TRAP ?????????\n// //global DISARM_TRAP: u8 = 10;  // => DESTROY\n// //global SET_TRAP: u8 = 11;\n// global ACTION_COUNT: u32 = 12;\n// pub global ACTION_RESULT_EVENT_COUNT: u32 = 4;\n// global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0;\n// global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1;\n// global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2;\n\n// // EVENTS\n// global NO_EVENT: u8 = 0 ;\n// // global DESTROY: u8 = 1;          // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //use coordinates to determine tile or trap that got destroyed and update map\n// //global DISCOVER = 2;         // actor_id = their_char or their_object when receive - handle to update enemy positions, got health & class (this is for all chars, not just the active one)\n// //global SEE_COLUMN = 2 ;      // y = the column the player sees => update objects list\n// global SEE_MOVE: u8 = 3 ;        // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //handle to update enemy positions => DISCOVER\n// //global SEE_SPELL = 4 ;       // actor_id = their_char when receive - need to handle effect via coordinates, => RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle my obstacles\n// global SEE_SEARCH_TRAP: u8 = 5 ; // actor_id = their_char when receive - need to create found trap event if there is a trap nearby => FOUND_TRAP\n// global SEE_RITUAL: u8 = 6 ;      // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_CAST: u8 = 7;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_DRAW: u8 = 8;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// //global RECEIVE_DAMAGE = 9;   // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client\n// global RECEIVE_ATTACK: u8 = 10;  // actor_id = 0 when receive - need to handle damage => // no need to events ... health of visible assets gets sent anyway and invisible ones will be updated during discovery //RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle in my obstacles\n// global TRIGGERED_TRAP: u8 = 11;  // actor_id = my_char when receive - need to handle damage (for now, later on we might want to handle other effects as well) => RECEIVE_DAMAGE\n// // global FOUND_TRAP: u8 = 12;      // actor_id = my_char when receive - no need to handle, only important to have on-chain for the client\n// global DISARMED_TRAP: u8 = 13;      // actor_id = their-char when receive - need to remove my trap from the map\n// global WIN: u8 = 14;\n// // global LOSE: u8 = 15;\n// global ADD_OBSTACLE: u8 = 4;\n// global EVENT_COUNT: u8 = 16;\n\n// // SUBTYPES:\n// global WIN_BY_RITUAL: u8 = 1;\n\n// // ATTACKS\n// global ATTACK_MELEE: u8 = 0;\n// global ATTACK_RANGED: u8 = 1;\n// global ATTACK_FIREBALL: u8 = 2;\n// // global ATTACK_COUNT: u8 = 3;\n// // TODO: instead of enum, use a global array of structs with damage, range, etc.\n\n\n// // TILES\n// global EMPTY: u8 = 0;\n// global WALL: u8 = 6;\n// global WATER: u8 = 7;\n// // global UNKNOWN_CLASS_TILE: u8 = 8;\n// global NON_EMPTY_WALKABLE_TILE_MIN: u8 = 9;\n// // global FLAG: u8 = 9;\n// global TRAP: u8 = 10;\n// // global TRAP_USED: u8 = 11;\n// // global TRAP_FOUND: u8 = 12;\n// // global BODY: u8 = 13;\n// // global BODY_LOOTED: u8 = 14;\n// // global FOG: u8 = 15;\n// global MAX_OBSTACLE_TYPE: u8 = 0x0f;\n// // global TILE_COUNT: u8 = 16;\n// // unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n// // STATUS\n// global RITUAL_ROUNDS_FOR_WIN: u8 = 15;\n// global MIN_FIREBALL_ROUNDS_FOR_CAST: u8 = 3;\n// global MAX_FIREBALL_ROUNDS_FOR_CAST: u8 = 6;\n// // global DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MIN_DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MAX_DRAW_ROUNDS_FOR_SHOOT: u8 = 3;\n// global PROGRESS_BITS: u8 = 4;\n// global PROGRESS_MASK: u8 = (1 << PROGRESS_BITS) - 1;\n// global PROGRESS_COUNT: u8 = 16 ; // just to be more in line with the other constants, actually used as a counter\n// global MAX_HEALTH: u8 = 255;\n\n// // GAMEPLAY\n// global VIEW_DISTANCE: u8 = 6;\n// // global MAX_TRAPS: u32 = 8; // note: only lowest bit of first byte of field is usable! => ! Field = 1 bit + 31 bytes!\n// // global TRAPS_BUFFER_SIZE: Field = 16;\n// // global TRAPS_BUFFER_MASK: Field = 15; // has to be 2^n - 1\n// global MAX_ACTIONS: u32 = 4;\n// global MAX_EVENTS: u32 = 4; // = MAX_ACTIONS // NO! handle traps in a different way (by passing as argument!)+ 4 (2 FOUND_TRAP + WIN/LOSE + 1 reserved)\n// global MAX_OBSTACLES: u32 = 24; // leave traps for now + MAX_TRAPS; // 24 + 8 player placeables\n// pub global MAX_CHARACTERS: u32 = 5;\n// global MIN_PROGRESS: u8 = 0;\n// pub global MAX_PROGRESS: u8 = PROGRESS_COUNT - 1;\n// global SERIALIZED_OBSTACLE_BYTE_SIZE: u32 = 3;//3\n// pub global SERIALIZED_OBSTACLES_ARRAY_SIZE: u32 = 3;//3 // TODO: we take 3 because 3 x 8 = MAX_OBSTACLES ... should assert on this (MAX_OBSTACLES + MAX_CHARACTERS + 7) / 8;\n// pub global SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE: u32 = SERIALIZED_OBSTACLES_ARRAY_SIZE + 1; // +1 because enemy characters are also serialized as obstacles\n// global SERIALIZED_OBSTACLES_PER_FIELD: u32 = 8;//8 // TODO: need to verify that SERIALIZED_OBSTACLES_ARRAY_SIZE * SERIALIZED_OBSTACLES_PER_FIELD = MAX_OBSTACLES!\n// global SERIALIZED_EVENT_BYTE_SIZE: u32 = 7;\n// pub global SERIALIZED_EVENTS_ARRAY_SIZE: u32 = 1; // MAX_EVENTS / SERIALIZED_EVENTS_PER_FIELD => 4 / 4 = 1\n// global SERIALIZED_EVENTS_PER_FIELD: u32 = 4; // 31 / 7 = 4\n// global SERIALIZED_ACTION_BYTE_SIZE: u32 = 5;\n// pub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n// global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4; // could be up to 6, but we only use 4\n\n\n// pub type SerializedArenaActionDefinitions = SerializedRosterActionDefinitions<MAX_ACTIONS_PER_CHARACTER, MAX_CHARACTERS>;\n// pub type SerializedArenaCharacterActionDefinitions = SerializedCharacterActionDefinitions<MAX_ACTIONS_PER_CHARACTER>;\n// pub type SerializedArenaCharacterActionDefinition = SerializedCharacterActionDefinition;\n// #[export]\n// fn tf(x: Field) -> (u32, [u8;32]) {\n//     let mut result: [u8;32] = [0;32];\n//     let bts = x.to_be_bytes::<32>();\n//     for j in 0..31 {\n//         result[j] = 2*j;//bts[j];\n//     }\n//     (32 , result)\n// }\n// i,\n// 20, 0 -> 25,\n// 25 -> 0, \n// x, 0, 0, d0,\n// x, 0, 0, 9d, 1, 0,\n// x, 0, 0, 1, 0, b4, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 91, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 23, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, d4, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, 66, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 50, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b9, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, c5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 55, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b2, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, e8, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2a, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, cb, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 9b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 5c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, a6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 86, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, d5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 38, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8e, 1, 0, 0, 1,\n// 0, 32, 1, 0, 1, 1, x, 0, 0, 1,\n// x, 0, 0, 1, x, 0, 0, 1, 0, 1, 1\n\n// i,\n// 20, 0, 1e -> 0, 0 -> 1e, 0\n// x, 0, 0, d0,\n// x, 0, 0, ba, 1, 0,\n// x, 0, 0, 1, 0, cf, 1, 0, 1, 1,\n\nfn get_actor_from_move(mut move: u32) -> u8 {\n    if (move % 2) == 1 {\n        move -= 1; //((move % 10) - 1) >> 1 // actually not needed ... but clearer this way\n    }\n    let single_digit: u32 = (move % 10 as u32) >> 1;\n    single_digit as u8\n}\n// 3, 1, 1, 1, 0, 1, 2, 0, 2, 8, 1, 0, 0, 1\n// 4, 2, 2, 0, x, 0, 0, 0, 4, a, 2, 0, 0, 2\n\n#[export]\npub fn hash_serialized_private_state(my_chars: SerializedArenaCharacterRoster, my_char_actions: SerializedArenaActionDefinitions, my_obstacles: SerializedArenaObstacles, secret: Field) -> pub Field {\n    // let my_chars_be_bytes: [u8; 32] = my_chars.to_be_bytes::<32>();\n    // assert(my_chars_be_bytes.len() == 32);\n    let gamestate_before_hash_calculated = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n    //let gamestate_before_hash_calculated_field = std::field::bytes32_to_field(gamestate_before_hash_calculated);\n    gamestate_before_hash_calculated\n}\n\n#[test]\nfn test_hash_match() {\n  let my_chars = 12345678901234567890;\n  let my_char_actions = [\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890\n  ];\n  let my_obstacles = [\n    12345678901234567890, 12345678901234567890, 12345678901234567890\n  ];\n  let secret = 12345678901234567890;\n\n  let hash1 = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n  let valid = hash_serialized_private_state(my_chars, my_char_actions, my_obstacles, secret);\n\n  assert(hash1 == valid, f\"{hash1} != {valid}\");\n}\n\n#[export]\nfn get_serialized_obstacle(id: u8, x: u8, y: u8, obstacle_type: u8) -> pub Field {\n    let mut result: [u8; 32] = [0; 32];\n    result[0] = id;\n    result[1] = x;\n    result[2] = y;\n    result[3] = obstacle_type;\n    std::field::bytes32_to_field(result)\n}\n\n// global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// global action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n\n#[export]\npub fn calculate_action(\n  action: Action,\n  mut my_chars: [Character; MAX_CHARACTERS],\n  mut my_obstacles_parsed: [Obstacle; MAX_OBSTACLES],\n  enemy_objects_parsed: [Obstacle; MAX_ENEMY_OBSTACLES],\n  enemy_advance_input: u8,\n  mut energy: u8\n) -> (bool, [Character; MAX_CHARACTERS], [Obstacle; MAX_OBSTACLES], u8, Event) {\n  let mut success = true;\n  let actor_id = get_action_actor(action);\n  let mut actor = my_chars[actor_id];\n  let (my_chars_as_obstacles_valid, my_chars_as_obstacles) = chars_to_obstacles(my_chars);\n  softassert!(quote { success }, quote { my_chars_as_obstacles_valid }, quote { f\"Failed to convert my chars to obstacles: {my_chars}\" });\n  let result = execute_action(action, enemy_advance_input, actor, energy, my_chars_as_obstacles, my_obstacles_parsed, enemy_objects_parsed);\n  //assert(result.0);\n  success &= result.0;\n  let result_event = result.1;\n  let internal_event = result.2;\n  let self_event = result.3;\n  actor = result.4;\n  energy = result.5;\n  \n  // 4461 / 5 = 892,2\n  my_chars = my_chars.map(|c| wb_apply_damage_to_char(c, result_event, actor));\n  // 16800 / 24 = 700\n  my_obstacles_parsed = my_obstacles_parsed.map(|obstacle| {\n      let (updated_obstacle_valid, updated_obstacle) = update_my_obstacle(obstacle, result_event);\n      //success = success & updated_obstacle_valid;\n      softassert!(quote { success }, quote { updated_obstacle_valid }, quote { f\"Failed to update my obstacle {obstacle}, {result_event}\" });\n      updated_obstacle\n  });\n\n  (success, my_chars, my_obstacles_parsed, energy, result_event)\n}\n\n#[export]\npub fn calculate_turn(\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions_input: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //mut my_obstacles_parsed: [[u8; 5]; 24],\n    actions_input: SerializedArenaActions,\n    // Common Inputs\n    move_input: u32, //pub\n    // Enemy Inputs\n    enemy_advance_input: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects_input: SerializedArenaEnemyObstacles, // pub\n    enemy_events_input: SerializedArenaEvents, // pub //MAX_EVENTS],\n\n) -> pub (bool, SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, [Obstacle; 24], u8, SerializedArenaEvents, SerializedArenaEnemyObstacles) {\n    let mut success = true;\n    \n// let action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n    //let actionRegister = ActionDefinitionRegister::new(my_char_actions_input);\n    // calculate enemy advance in our coordinates and shadow\n    // let (enemy_advance_valid, enemy_advance) = their_x_to_mine(enemy_advance);\n\n    // // more efficient to do this here, BUT leads to bad side effects for frontend (and it is not THAT costly)\n    // let enemy_advance = if enemy_advance_input >= WIDTH { 0 } else { WIDTH - enemy_advance_input - 1 };\n\n\n    // TODO: Validate map => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    let (events_valid, events) = parse_their_events(enemy_events_input);\n    softassert!(quote { success }, quote { events_valid }, quote { f\"Failed to parse their events {events}\" });\n\n    // let side = move as u1;\n    let (my_chars_valid, mut my_chars) = parse_characters(my_chars_input, my_char_actions_input, events, enemy_advance_input);\n    softassert!(quote { success }, quote { my_chars_valid }, quote { f\"Failed to parse my characters {my_chars}\" });\n\n    let actor_id = get_actor_from_move(move_input);\n    // let mut actor = my_chars[actor_id]; //Character::parse(actor_id, my_chars, events);\n    \n    comptime {\n        assert(MAX_OBSTACLES == 24);\n    }\n\n    let (valid, my_obstacles_parsed) = parse_my_obstacles(my_obstacles_input, events);\n    softassert!(quote { success }, quote { valid }, quote { f\"Failed to parse my obstacles {my_obstacles_input}\" });\n    let mut my_obstacles_parsed: [Obstacle; MAX_OBSTACLES] = my_obstacles_parsed;\n\n    let (actions_valid, actions) = parse_actions(MAX_CHARACTERS as u8, actions_input); // actions.map(|action| Action::from_field(action));\n    softassert!(quote { success }, quote { actions_valid }, quote { f\"Failed to parse actions {actions_input}\" });\n    // let mut my_obstacles_parsed = my_obstacles_parsed.as_array();\n//    let (valid, mut my_obstacles_parsed) = parse_my_obstacles(my_obstacles, events).as_array();\n    // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n    let (enemy_objects_parsed_valid, enemy_objects_parsed) = parse_their_obstacles(enemy_objects_input);\n    softassert!(quote { success }, quote { enemy_objects_parsed_valid }, quote { f\"Failed to parse their obstacles {enemy_objects_input}\" });\n\n    let mut energy: u8 = 12;\n    let mut result_events_calculated: [Event] = &[];\n    for i in 0..MAX_ACTIONS {\n        // TODO: ensure that if actor committed suicide, it is not allowed to do any more actions\n        let action = actions[i];\n        //let resolved_action = actionRegister.resolve_action(action); //resolve_action(action);\n\n        let (\n          turn_action_result_action_valid,\n          turn_action_result_my_chars,\n          turn_action_result_my_obstacles_parsed,\n          turn_action_result_energy,\n          turn_action_result_result_event\n        ) = calculate_action(\n          action,\n          my_chars,\n          my_obstacles_parsed,\n          enemy_objects_parsed,\n          enemy_advance_input,\n          energy\n        );\n        softassert!(quote { success }, quote { turn_action_result_action_valid }, quote { f\"Failed to execute turn action {i}\" });\n\n        my_chars = turn_action_result_my_chars;\n        my_obstacles_parsed = turn_action_result_my_obstacles_parsed;\n        energy = turn_action_result_energy;\n\n        // let result = execute_action(action, enemy_advance_input, actor, energy, my_obstacles_parsed, enemy_objects_parsed);\n        // //assert(result.0);\n        // success &= result.0;\n        // let result_event = result.1;\n        // let internal_event = result.2;\n        // let self_event = result.3;\n        // actor = result.4;\n        // energy = result.5;\n        \n        // // 4461 / 5 = 892,2\n        // my_chars = my_chars.map(|c| wb_apply_damage_to_char(c, result_event, actor));\n        // // 16800 / 24 = 700\n        // my_obstacles_parsed = my_obstacles_parsed.map(|obstacle| {\n        //     let (updated_obstacle_valid, updated_obstacle) = update_my_obstacle(obstacle, result_event);\n        //     //success = success & updated_obstacle_valid;\n        //     softassert!(quote { success }, quote { updated_obstacle_valid }, quote { f\"Failed to update my obstacle {obstacle}, {result_event}\" });\n        //     updated_obstacle\n        // });\n\n        result_events_calculated = result_events_calculated.push_back(turn_action_result_result_event);\n    }\n    let result_events_calculated = serialize_events(result_events_calculated.as_array());\n    assert(result_events_calculated.len() == SERIALIZED_EVENTS_ARRAY_SIZE);\n\n    // send death events => no need\n\n    // determine view range\n    let mut my_advance_calculated = 0;\n    for i in 0..MAX_CHARACTERS {\n        if my_chars[i].x > my_advance_calculated {\n            my_advance_calculated = my_chars[i].x;\n        }\n    }\n    my_advance_calculated += VIEW_DISTANCE;\n\n    let (serialized_characters, serialized_action_defs) = serialize_chars(my_chars);\n    let serialized_obstacles: [Field] = serialize_my_obstacles(enemy_advance_input, my_obstacles_parsed);\n    let (serialized_chars_as_obstacles_valid, serialized_chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance_input, my_chars);\n    // success = success & serialized_chars_as_obstacles_valid;\n    softassert!(quote { success }, quote { serialized_chars_as_obstacles_valid }, quote { f\"Failed to serialize chars as obstacles: {my_chars}\" });\n    let serialized_obstacles_for_enemy: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE] = serialized_obstacles.push_back(serialized_chars_as_obstacles).as_array();\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles_parsed);\n\n    (success, serialized_characters, serialized_action_defs, my_obstacles_parsed, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy)\n}\n\n\n\n#[export]\npub fn turn(\n    // verification_key: pub [Field; 114],\n    // proof: pub [Field; 93],\n    // public_inputs: pub [Field; 1 ],//+ 2 * SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE + 2 * SERIALIZED_EVENTS_ARRAY_SIZE],\n    // key_hash: pub Field,\n    // last_move: pub u32,\n    // last_enemy_advance: pub u8,\n    // last_enemy_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // last_events: pub [Field, SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_advance: pub u8,\n    // last_my_result_events: pub [Field; SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_result_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // Gamestate Hashes\n    // gamestate_before_hash: pub Field,\n    // gamestate_after_hash: pub Field,\n    // My Secret State\n    secret: Field,\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //my_obstacles: [[u8; 5]; 24],\n    actions: SerializedArenaActions,\n    // Common Inputs\n    move: u32, //pub\n    // Enemy Inputs\n    enemy_advance: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects: SerializedArenaEnemyObstacles, // pub\n    enemy_events: SerializedArenaEvents, // pub //MAX_EVENTS],\n    // My Results\n    my_result_advance: u8, // pub // 1 bit win, 1 bit lose, 1 bit reserved, 5 bits advance\n    my_result_events: SerializedArenaEvents, // pub\n    my_result_objects: SerializedArenaEnemyObstacles, // pub\n    // Gamestate Hashes\n    gamestate_before_hash: Field, // pub\n    gamestate_after_hash: Field, // pub\n) -> pub bool {\n    // Validate global constants (to make sure one didn't change one without updating dependet ones)\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    //let my_char_actions = arena_test_action_def_register;// get_test_action_register();\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(my_chars_input, my_char_actions, my_obstacles_input, secret);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    softassert!(quote { success }, quote { gamestate_before_hash == gamestate_before_hash_calculated_field }, quote { f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\" });\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        my_chars_input,\n        my_char_actions,\n        my_obstacles_input,\n        actions,\n        move,\n        enemy_advance,\n        enemy_objects,\n        enemy_events\n    );\n    softassert!(quote { success }, quote { turn_calc_valid }, quote { f\"Tun calculation failed\" });\n\n    // if side == 0 {\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x > my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated += VIEW_DISTANCE;\n    // } else {\n    //     my_advance_calculated = WIDTH - 1;\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x < my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated -= VIEW_DISTANCE;\n    // }\n    softassert!(quote { success }, quote { my_result_advance == my_advance_calculated }, quote { f\"Invalid result advance: {my_result_advance} != {my_advance_calculated}\" });\n\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        softassert!(quote { success }, quote { result_event_should == result_event_calculated }, quote { f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\" });\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    assert(my_result_objects.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE {\n        let my_result_object = my_result_objects[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        softassert!(quote { success }, quote { my_result_object == serialized_obstacle }, quote { f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\" });\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secret, serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    softassert!(quote { success }, quote { new_hash_bytes == gamestate_after_hash }, quote { f\"Invalid result hash: {new_hash_bytes} != {gamestate_after_hash}\" });\n    success\n}\n\nfn wb_apply_damage_to_char(mut c: Character, event: Event, actor: Character) -> Character {\n    if c.id == actor.id {\n        c = actor;\n    }\n    apply_damage_to_char(c, event)\n}\n\nfn apply_damage_to_char(c: Character, event: Event) -> Character {\n    let dmg = event.get_applied_damage_to_my_asset(c.x, c.y, c.class);\n    Character {\n        id: c.id,\n        x: c.x,\n        y: c.y,\n        class: c.class,\n        health: safe_subtract_dmg(c.health, dmg),\n        progress: c.progress,\n        target_x: c.target_x,\n        target_y: c.target_y,\n        has_been_seen: c.has_been_seen,\n        is_hidden: c.is_hidden,\n        damage_mod: c.damage_mod,\n        last_action: c.last_action,\n        actions: c.actions,\n        status: 0\n    }\n}\nfn update_my_obstacle(obstacle: Obstacle, event: Event) -> (bool, Obstacle) {\n    let dmg =\n        // event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle)) +\n        event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle));\n    new_obstacle(get_obstacle_id(obstacle), get_obstacle_x(obstacle), get_obstacle_y(obstacle), safe_subtract_dmg(get_obstacle_health(obstacle), dmg), get_obstacle_type(obstacle))\n    // Obstacle {\n    //     health: safe_subtract_dmg(obstacle.health, dmg),\n    //     id: obstacle.id,\n    //     x: obstacle.x,\n    //     y: obstacle.y,\n    //     obstacle_type: obstacle.obstacle_type,\n    // }\n}\n\nfn get_data_hash(secret: Field, characters: Field, character_actions: SerializedArenaActionDefinitions, obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> Field {\n  assert(character_actions.len() == 30);\n  assert(obstacles.len() == 3);\n  std::hash::poseidon2::Poseidon2::hash([\n    secret,\n    characters,\n    character_actions[0],\n    character_actions[1],\n    character_actions[2],\n    character_actions[3],\n    character_actions[4],\n    character_actions[5],\n    character_actions[6],\n    character_actions[7],\n    character_actions[8],\n    character_actions[9],\n    character_actions[10],\n    character_actions[11],\n    character_actions[12],\n    character_actions[13],\n    character_actions[14],\n    character_actions[15],\n    character_actions[16],\n    character_actions[17],\n    character_actions[18],\n    character_actions[19],\n    character_actions[20],\n    character_actions[21],\n    character_actions[22],\n    character_actions[23],\n    character_actions[24],\n    character_actions[25],\n    character_actions[26],\n    character_actions[27],\n    character_actions[28],\n    character_actions[29],\n    obstacles[0],\n    obstacles[1],\n    obstacles[2]\n  ], 2 + 30 + 3)\n}\n// fn get_data_hash(secret: [u8], characters: [u8], character_actions: [u8; ACTION_DEFINITION_REGISTER_SIZE], obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> [u8; 32] {\n//     assert(secret.len() == 32);\n//     assert(characters.len() == 32);\n\n//     let mut data: [u8; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE] = [0; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE];\n//     for i in 0..32 {\n//         data[i] = secret[i];\n//         data[i + 32] = characters[i];\n//     }\n//     let offset = 32 + 32;\n//     for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//         let obstacle: [u8; 32] = obstacles[i].to_be_bytes::<32>();\n//         assert(obstacle.len() == 32);\n//         for j in 0..32 {\n//             data[offset + i * 32 + j] = obstacle[j];\n//         }\n//     }\n//     let offset = 32 + 32 + 32 * SERIALIZED_OBSTACLES_ARRAY_SIZE;\n//     for i in 0..ACTION_DEFINITION_REGISTER_SIZE {\n//         data[offset + i] = character_actions[i];\n//     }\n//     // let offset = WIDTH * HEIGHT + 32 * 3;\n//     // for i in 0..10 {\n//     //     data[offset + i * 4] = (searched_traps[i] & 255) as u8;\n//     //     data[offset + i * 4 + 1] = ((searched_traps[i] >> 8) & 255) as u8;\n//     //     data[offset + i * 4 + 2] = ((searched_traps[i] >> 16) & 255) as u8;\n//     //     data[offset + i * 4 + 3] = ((searched_traps[i] >> 24) & 255) as u8;\n//     // }\n//     std::hash::blake3(data)\n// }\n\n// fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> Field {\n//     comptime {\n//         assert(MAX_CHARACTERS <= 5);\n//     }\n//     let mut result: [u8; 32] = [0; 32];\n//     for i in 0..MAX_CHARACTERS {\n//         let serialized = chars[i].serialize();\n//         for j in 0..6 {\n//             result[2 + i * 6 + j] = serialized[j];\n//         }\n//     }\n//     std::field::bytes32_to_field(result)\n// }\n\n#[export]\npub fn chars_to_obstacles(chars: [Character; MAX_CHARACTERS]) -> pub (bool, [Obstacle; MAX_CHARACTERS]) {\n  let mut result: BoundedVec<Obstacle, MAX_CHARACTERS> = BoundedVec::new();\n  let mut valid_result = true;\n  for i in 0..MAX_CHARACTERS {\n    let (valid, char_as_obstacle) = chars[i].to_obstacle();\n    result.push(char_as_obstacle);\n    valid_result &= valid;\n  }\n  assert(result.len() == MAX_CHARACTERS);\n  (valid_result, result.storage())\n}\n\nfn serialize_chars_as_obstacles(enemy_advance: u8, chars: [Character; MAX_CHARACTERS]) -> (bool, Field) {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut result: [u8; 32] = [0; 32];\n    let mut valid_result = true;\n    for i in 0..MAX_CHARACTERS {\n        if (chars[i].is_hidden == 0) & is_visible(enemy_advance, chars[i].get_x()) {\n            let (valid, char_as_obstacle) = chars[i].to_obstacle();\n            let serialized = serialize_obstacle(char_as_obstacle);\n            valid_result = valid_result & valid;\n            result[2 + i * 3] = serialized[0];\n            result[2 + i * 3 + 1] = serialized[1];\n            result[2 + i * 3 + 2] = serialized[2];\n        }\n    }\n    (valid_result, std::field::bytes32_to_field(result))\n}\n\nfn safe_subtract_dmg(a: u8, b: u16) -> u8 {\n    let mut result = 0;\n    if (a as u16) > b {\n        result = a - (b as u8);\n    }\n    result\n}\n\nfn test_result_object_builder(enemy_advance: u8, chars: [Character; MAX_CHARACTERS], obs: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1]) {\n    let mut result: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        result[i] = obs[i];\n    }\n    let (valid, chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance, chars);\n    result[SERIALIZED_OBSTACLES_ARRAY_SIZE] = chars_as_obstacles;\n    (valid, result)\n}\n\n// fn test_helper_roster(actor: Character, mut chars: [Character; MAX_CHARACTERS]) -> [Character; MAX_CHARACTERS] {\n//     chars[actor.id] = actor;\n//     chars\n// }\n\n// fn test_helper_execute_move(move: u32, actor: Character, advances: [u8; 2], secret: [Field; 2], last_hashes: [Field; 2], chars: [[Character; MAX_CHARACTERS]; 2], obs: [[Obstacle; MAX_OBSTACLES]; 2], actions: [Action], my_events: [Event], their_events: [Event]) -> (u32, [Character; MAX_CHARACTERS], Field) {\n//     let side = move as u1;\n//     let other_side = (side as u8 + 1) as u1;\n//     let chars_after = test_helper_roster(actor, chars[side]);\n//     let my_obstacles_serialized = serialize_obstacles(advances[other_side], obs[side]);\n//     let secret_be_bytes: [u8; 32] = secret[side].to_be_bytes();\n//     assert(secret_be_bytes.len() == 32);\n//     let serialized_chars_after = serialize_chars(chars_after);\n//     let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes();\n//     assert(serialized_chars_after_be_bytes.len() == 32);\n//     let current_hash = std::field::bytes32_to_field(get_data_hash(secret_be_bytes, serialized_chars_after_be_bytes, my_obstacles_serialized)); \n\n//     let (enemy_objects_valid, enemy_objects) = test_result_object_builder(chars[other_side], serialize_obstacles(other_side, advances[side], obs[other_side]));\n//     assert(enemy_objects_valid, \"Invalid enemy objects\");\n//     let (my_result_objects_valid, my_result_objects) = test_result_object_builder(chars_after, my_obstacles_serialized);\n//     assert(my_result_objects_valid, \"Invalid my result objects\");\n\n//     let result = turn(\n//         secret[side],\n//         character::serialize_chars(chars[side]),\n//         my_obstacles_serialized,\n//         serialize_actions(actions),\n//         move,\n//         advances[other_side],\n//         enemy_objects,\n//         Event::serialize_events(their_events).as_array(),\n//         advances[side],\n//         Event::serialize_events(my_events).as_array(),\n//         my_result_objects,\n//         last_hashes[side],\n//         current_hash\n//     );\n//     assert(result, \"Invalid result\");\n\n//     (move + 1, chars_after, current_hash)\n// }\n\n// #[test]\n// fn test_main() {\n//     let secrets = [123456789, 9876543210];\n//     let mut chars = [ character::get_default_characters(0), character::get_default_characters(1) ];\n//     let mut obs = [ Obstacle::get_default_obstacles(0), Obstacle::get_default_obstacles(1) ];\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 2, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 3, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 4, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 5, target_y: 1 },\n//     ];\n//     let their_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let mut move = 0;\n//     let mut actor = chars[0][0].move(5, 1);\n//     let mut last_hashes = [ 0x12b8f97907a05ec6a77da3f70368fa3b02e166c74edab8ea0695d6f406146559, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n//     let mut advances = [2 + VIEW_DISTANCE, 29 - VIEW_DISTANCE];\n//     advances[0] = 5 + VIEW_DISTANCE;\n\n//     let mut side = move % 2;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 0 },\n//         Action { action: MOVE, actor: 0, target_x: 27, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(27, 0);\n//     advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 1, target_y: 3 },\n//         Action { action: MOVE, actor: 1, target_x: 0, target_y: 3 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(0, 3);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 2 },\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 1, target_x: 28, target_y: 1 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(28, 1);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n// }\n\n#[test]\nfn test_main_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions = arena_test_action_def_register.map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    println(secrets[side]);\n    println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    println(my_obstacles_serialized_for_me);\n    println(serialize_actions(actor.id, actions));\n    println(move);\n    println(advances[other_side]);\n    println(test_result_object_other_chars);\n    println(serialize_events(their_events));\n    println(advances[side]);\n    println(serialize_events(my_events));\n    println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let result = turn(\n        secrets[side],\n        serialized_chars_input,\n        serialized_char_actions_input,\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events),\n        advances[side],\n        serialize_events(my_events),\n        test_result_object_chars_after,\n        last_hashes[side],\n        current_hash\n    );\n    assert(result, \"Turn failed\");\n}\n\n\n#[test]\nfn test_calc_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions_raw = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000];\n    let test_actions = test_actions_raw.map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x2cb6bffa42e22e89cbd87e4ac9ae7a82214febcab9c7b68e33fb1b7b8263ce7d, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    // println(secrets[side]);\n    // println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    // println(my_obstacles_serialized_for_me);\n    // println(serialize_actions(actor.id, actions));\n    // println(move);\n    // println(advances[other_side]);\n    // println(test_result_object_other_chars);\n    // println(serialize_events(their_events));\n    // println(advances[side]);\n    // println(serialize_events(my_events));\n    // println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n\n\n\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    let my_char_actions = arena_test_action_def_register; //get_test_action_register();\n    println(\"my_char_actions\");\n    println(my_char_actions);\n    println(\"serialized_char_actions_input\");\n    println(serialized_char_actions_input);\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    let gamestate_before_hash = last_hashes[side];\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(serialized_chars_input, my_char_actions, my_obstacles_serialized_for_me, secrets[side]);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        serialized_chars_input,\n        arena_test_action_def_register, //serialized_char_actions_input,\n        // get_test_action_register(),\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events)\n    );\n    assert(turn_calc_valid, f\"Tun calculation failed\");\n    assert(advances[side] == my_advance_calculated, f\"Invalid result advance:  != {my_advance_calculated}\");\n\nlet my_result_events: [Field; SERIALIZED_EVENTS_ARRAY_SIZE] = serialize_events(my_events);\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        assert(result_event_should == result_event_calculated, f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\");\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    for i in 0..test_result_object_chars_after.len() {\n        let my_result_object = test_result_object_chars_after[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        assert(my_result_object == serialized_obstacle, f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\");\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secrets[side], serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    assert(new_hash_bytes == current_hash, f\"Invalid result hash: {new_hash_bytes} != {current_hash}\");\n}\n\n// #[export]\n// pub fn setup_obstacles(\n    \n// )\n\n#[test]\nfn test_calc_turn_0() {\n  let my_chars = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0, 0, 0, 0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n\n  let result = calculate_turn(my_chars, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events);\n\n  assert(result.0);\n}\n\nfn test_turn_0() {\n  let secret = 0x075bcd15;\n  let my_chars_input = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf000ff1b1c11002000000000000702000020000000002000000000000000, 0xff00ff1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000, 0xf000ff000001002000000000200000000020000000002000000000000000]; //.map(|a|a.to_be_bytes());\n  let my_obstacles = [0x62c80162c80362c80462c80563c80564c80565c80567c8000000000000,0x0467c80367c80167c80067c80760c80761c80762c80763c8000000000000,0x0764c80765c80678ff0778ff0579ff0679ff0779ff0879ff000000000000];\n  let my_actions = [0x01000a02030010030000ffff0000ffff000000000000000000000000000000];\n  let move = 0;\n  let enemy_advance = 0;\n  let enemy_objects = [0,0,0,0];\n  let enemy_events = [0x04ffff0000000004ffff0000000004ffff0000000004ffff000000000000];\n  let my_result_advance = 0x12;\n  let my_result_objects = [0,0,0,0];\n  let my_result_events = [0xffff0000000000ffff0000000000ffff0000000000ffff000000000000];\n  let initial_hash = 0x07a86579c9d2236bd1c02ced0660e9280e1d9a73146a0c9c8e4d8e27d64d6565;\n  let final_hash = 0x2c7492b9fc2adae465ec974b512f12b29b486e7c268cca2c304330eac57dd680;\n\n  let result = turn(secret, my_chars_input, test_actions, my_obstacles, my_actions, move, enemy_advance, enemy_objects, enemy_events, my_result_advance, my_result_events, my_result_objects, initial_hash, final_hash);\n\n  assert(result);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/lib.nr"},"76":{"source":"use arenalib::{ WIDTH, HEIGHT, WIDTH_MASK, VIEW_DISTANCE, MAX_OBSTACLES, MAX_ENEMY_OBSTACLES };\nuse crate::obstacle::{ Obstacle, get_obstacle_y, get_obstacle_x, is_obstacle_traversible };\nuse skplg::NOWHERE;\nuse std::collections::bounded_vec;\n\n// pub fn is_neighbor(curr_x: u8, curr_y: u8, x: u8, y: u8) -> bool {\n//     // assert(curr_x < WIDTH);\n//     // assert(curr_y < HEIGHT);\n//     // assert(x < WIDTH);\n//     // assert(y < HEIGHT);\n//     // validating coordinates is not the job of this function\n//     // only avoid overflows!\n\n\n//     let shifted_curr_x = std::wrapping_add(curr_x, 1);\n//     let shifted_curr_y = std::wrapping_add(curr_y, 1);\n//     let shifted_x = std::wrapping_add(x, 1);\n//     let shifted_y = std::wrapping_add(y, 1);\n\n//     ((shifted_curr_x == shifted_x) & (std::wrapping_add(shifted_curr_y, 1) >= shifted_y) & (shifted_curr_y <= std::wrapping_add(shifted_y, 1))) |\n//     ((shifted_curr_y == shifted_y) & (std::wrapping_add(shifted_curr_x, 1) >= shifted_x) & (shifted_curr_x <= std::wrapping_add(shifted_x, 1)))\n// }\n\n// global DISTANCE_TABLE_HEIGHT: u32 = HEIGHT as u32;\n// global DISTANCE_TABLE_WIDTH: u32 = WIDTH as u32;\n\n// unconstrained fn distance_sqrt(x: u32) -> u32 {\n//     let mut result: u32 = 0;\n//     for i in 0..DISTANCE_TABLE_WIDTH {\n//         if i * i == x {\n//             result = i;\n//             break;\n//         }\n//     }\n//     result\n// }\n\n// fn d(a: u8, b: u8) -> u8 {\n//     let d = a as i32 - b as i32;\n//     let d2 = d * d;\n//     assert(d2 >= 0);\n//     let d2u = d2 as u32;\n//     let result = unsafe {\n//         let sq = distance_sqrt(d2u);\n//         assert(sq * sq == d2u);\n//         sq\n//     };\n//     assert(result < DISTANCE_TABLE_WIDTH);\n//     comptime { assert(DISTANCE_TABLE_WIDTH <= 256) };\n//     result as u8\n// }\n// global DISTANCE_TABLE: [[u8; DISTANCE_TABLE_WIDTH]; DISTANCE_TABLE_HEIGHT] = [\n//     [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 2,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ],\n//     [ 3,  3,  3,  4,  4,  5,  6,  7,  8,  9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ],\n// ]\n\nglobal MAX_DISTANCE: u32 = 0xff * 0xff;\npub type DISTANCE = u16;\nfn get_distance_part(curr: u8, target: u8) -> DISTANCE_PART_ROLLED_OUT {\n  let d = if curr > target { curr - target } else { target - curr } as u32;\n  d * d\n}\npub fn get_distance(curr_x: u8, curr_y: u8, x: u8, y: u8) -> DISTANCE {\n    // assert(curr_x < WIDTH);\n    // assert(curr_y < HEIGHT);\n    // assert(x < WIDTH);\n    // assert(y < HEIGHT);\n    // validating coordinates is not the job of this function\n    // only avoid overflows!\n\n    // let dx = unsafe {\n    //     let diff_\n    //     distance_sqrt(x)\n    // }\n\n    let dx = get_distance_part(curr_x, x);\n    let dy = get_distance_part(curr_y, y);\n\n    // let dx = curr_x as i16 - x as i16;\n    // let dy = curr_y as i16 - y as i16;\n  get_distance_from_parts(dx, dy)\n}\n// NOTE: Leaving it for now, but no actual performance benefit from splitting this\npub type DISTANCE_PART_ROLLED_OUT = u32;\nfn get_distance_from_parts(x: DISTANCE_PART_ROLLED_OUT, y: DISTANCE_PART_ROLLED_OUT) -> DISTANCE {\n  let distance = x + y;\n  if distance > MAX_DISTANCE {\n    MAX_DISTANCE as u16\n  } else {\n    distance as u16\n  }\n}\n\n\npub fn is_visible(enemy_advance: u8, x: u8) -> bool {\n    //(x >= enemy_advance) == (side == 0)\n    x >= enemy_advance\n}\n\n// TODO: This is for the future - fireballs, etc. only if we have line of sight\n// pub fn is_visible(curr_x: u8, curr_y: u8, x: u8, y: u8, map: &Map) -> bool {\n//     assert(curr_x < WIDTH);\n//     assert(curr_y < HEIGHT);\n//     assert(x < WIDTH);\n//     assert(y < HEIGHT);\n\n//     let mut x = curr_x as f32;\n//     let mut y = curr_y as f32;\n//     let x2 = x + 0.5;\n//     let y2 = y + 0.5;\n//     let dx = x2 - x;\n//     let dy = y2 - y;\n//     let mut t = 0.0;\n//     let mut max_t = 1.0;\n//     let mut x = x;\n//     let mut y = y;\n\n//     while t < max_t {\n//         let x = x + dx * t;\n//         let y = y + dy * t;\n//         let x = x as u8;\n//         let y = y as u8;\n\n//         if map.is_wall(x, y) {\n//             return false;\n//         }\n\n//         t += 0.1;\n//     }\n\n//     true\n// }\n\npub fn their_x_to_mine(x: u8) -> (bool, u8) {\n    if x == NOWHERE {\n        (true, NOWHERE)\n    } else {\n        (x < WIDTH, std::wrapping_sub(WIDTH - 1, x) & WIDTH_MASK)\n    }\n}\n\npub fn is_distance_within_viewing_range(distance: u16) -> bool {\n  distance <= (VIEW_DISTANCE as u16 * VIEW_DISTANCE as u16)\n}\n\npub fn is_tile_free_or_invisible(x: u8, y: u8, obstacles: [Obstacle; MAX_ENEMY_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> bool {\n  let mut can = true;\n  for i in 0..MAX_OBSTACLES {\n      if !is_obstacle_traversible(obstacles[i]) & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n          can = false;\n      }\n  }\n  for i in 0..MAX_ENEMY_OBSTACLES {\n      if !is_obstacle_traversible(their_obstacles[i]) & (get_obstacle_x(their_obstacles[i]) == x) & (get_obstacle_y(their_obstacles[i]) == y) {\n          can = false;\n      }\n  }\n  can\n}\n\nglobal W: u32 = WIDTH as u32;\nglobal H: u32 = HEIGHT as u32;\nunconstrained fn _get_free_map(obstacles: [Obstacle; MAX_ENEMY_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> [[u8; H]; W] {\n  let mut map = [[0; H]; W];\n  for i in 0..MAX_ENEMY_OBSTACLES {\n    let obstacle = obstacles[i];\n    let x = get_obstacle_x(obstacle);\n    let y = get_obstacle_y(obstacle);\n    if (x != NOWHERE) & (y != NOWHERE) {\n      assert(x < WIDTH);\n      assert(y < HEIGHT);\n      if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n        map[x][y] += 1;\n      }\n    }\n  }\n  for i in 0..MAX_ENEMY_OBSTACLES {\n    let obstacle = their_obstacles[i];\n    let x = get_obstacle_x(obstacle);\n    let y = get_obstacle_y(obstacle);\n    if (x != NOWHERE) & (y != NOWHERE) {\n      assert(x < WIDTH);\n      assert(y < HEIGHT);\n      if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n        map[x][y] += 1;\n      }\n    }\n  }\n  map\n}\n\nunconstrained fn _to_obstacle_collision_array(obstacles: [Obstacle; MAX_ENEMY_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> [(u8, u8, bool); MAX_ENEMY_OBSTACLES * 2] {\n  let mut o = [(NOWHERE, NOWHERE, true); 58];\n\n  for i in 0..MAX_ENEMY_OBSTACLES {\n    let obstacle = obstacles[i];\n    let x = get_obstacle_x(obstacle);\n    let y = get_obstacle_y(obstacle);\n\n    o[i] = (x,y,is_obstacle_traversible(obstacle));\n\n    // if (x != NOWHERE) & (y != NOWHERE) {\n    //   assert(x < WIDTH);\n    //   assert(y < HEIGHT);\n    //   if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n    //     o.push((x,y));\n    //   }\n    // }\n  }\n  for i in 0..MAX_ENEMY_OBSTACLES {\n    let obstacle = their_obstacles[i];\n    let x = get_obstacle_x(obstacle);\n    let y = get_obstacle_y(obstacle);\n\n    o[i + MAX_ENEMY_OBSTACLES] = (x,y,is_obstacle_traversible(obstacle));\n    // if (x != NOWHERE) & (y != NOWHERE) {\n    //   assert(x < WIDTH);\n    //   assert(y < HEIGHT);\n    //   if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n    //     o.push((x,y));\n    //   }\n    // }\n  }\n  o\n}\n\npub fn get_free_map(obstacles: [Obstacle; MAX_ENEMY_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> [[u8; H]; W] { // missing own chars\n  // Safety: verifying all map elements afterwards\n  let map = unsafe { _get_free_map(obstacles, their_obstacles) };\n  \n  // Safety: verifying all below\n  //let o = unsafe { _to_obstacle_collision_array(obstacles, their_obstacles) };\n   //let mut o = [(NOWHERE, NOWHERE, true); 58];\n\n        for i in 0..MAX_ENEMY_OBSTACLES {\n          let obstacle = obstacles[i];\n          let x = get_obstacle_x(obstacle);\n          let y = get_obstacle_y(obstacle);\n\n          if !is_obstacle_traversible(obstacle) {\n            assert(map[x][y] > 0);\n          }\n          //o[i] = (x,y,is_obstacle_traversible(obstacle));\n          // assert(o[i].0 == x);\n          // assert(o[i].1 == y);\n          // assert(o[i].2 == is_obstacle_traversible(obstacle));\n\n          // if (x != NOWHERE) & (y != NOWHERE) {\n          //   assert(x < WIDTH);\n          //   assert(y < HEIGHT);\n          //   if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n          //     o.push((x,y));\n          //   }\n          // }\n        }\n        for i in 0..MAX_ENEMY_OBSTACLES {\n          let obstacle = their_obstacles[i];\n          let x = get_obstacle_x(obstacle);\n          let y = get_obstacle_y(obstacle);\n if !is_obstacle_traversible(obstacle) {\n            assert(map[x][y] > 0);\n          }\n          //  o[i + MAX_ENEMY_OBSTACLES] = (x,y,is_obstacle_traversible(obstacle));\n\n          // assert(o[i + MAX_ENEMY_OBSTACLES].0 == x);\n          // assert(o[i + MAX_ENEMY_OBSTACLES].1 == y);\n          // assert(o[i + MAX_ENEMY_OBSTACLES].2 == is_obstacle_traversible(obstacle));\n          // if (x != NOWHERE) & (y != NOWHERE) {\n          //   assert(x < WIDTH);\n          //   assert(y < HEIGHT);\n          //   if !is_obstacle_traversible(obstacle) {//} & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n          //     o.push((x,y));\n          //   }\n          // }\n        }\n        let mut sum: u32 = 0;\n  for x in 0..WIDTH {\n    for y in 0..HEIGHT {\n      sum += map[x][y] as u32;\n      // let val = map[x][y];\n      // if !val {\n      //   let mut found_obstacle = false;\n\n      //   for i in 0..58 {\n      //     if (x == o[i].0) & (y == o[i].1) & o[i].2 {\n      //       found_obstacle = true;\n      //     }\n      //   }\n\n      //   assert(found_obstacle);\n      // }\n    }\n  }\n  let mut obstacle_sum: u32 = 0;\n  for i in 0..MAX_ENEMY_OBSTACLES {\n    obstacle_sum += (!is_obstacle_traversible(obstacles[i])) as u32 + (!is_obstacle_traversible(their_obstacles[i])) as u32;\n  }\n  assert(sum == obstacle_sum);\n\n  map\n}\n\npub fn can_move_to(distance: u16, x: u8, y: u8, obstacles: [Obstacle; MAX_ENEMY_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> bool {\n    let mut can = is_distance_within_viewing_range(distance); //x <= advance;\n    can &= is_tile_free_or_invisible(x, y, obstacles, their_obstacles);\n\n    can\n}\n// pub fn their_x_to_mine(side: u1, x: i8) -> i8 {\n//     let mul = side as i8;\n//     mul * 31 + 16 + x\n// }\n\n// x * s -16 + y = 0 if s == 0 => y = 16\n// x * s -16 + y = 31 if s == 1 => x = 31\n// y = 31 * s + 16 + x\n// s = 0:\n// x = -16 => y = 0\n// x = 15 => y = 31\n// s = 1:\n// x = -16 => y = 31\n// x = 15 => y = 0\n\n// pub fn serialize_x(x: i8) -> (bool, u8) {\n//     let valid = (x >= -(WIDTH / 2) as i8) & (x < (WIDTH / 2) as i8);\n//     (valid, (x + (WIDTH / 2) as i8) as u8)\n// }\n\n// pub fn deserialize_x(x: u8) -> (bool, i8) {\n//     let valid = x < WIDTH;\n//     (valid, x as i8 - (WIDTH / 2) as i8)\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/map.nr"},"77":{"source":"// use crate::MAX_OBSTACLES;\n// use crate::{ HEIGHT, WIDTH };\n// use crate::{ EMPTY, WALL, WATER };\n// use crate::{ MAX_EVENTS }; // MAX_CHARACTERS\n// // use crate::{ RECEIVE_ATTACK };\n// // use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\n// use crate::{ SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\n// use crate::event::Event;\n// use crate::map::{ is_visible }; //is_neighbor\n// use dep::std;\n\n// pub struct Obstacle {\n//     pub id: u8,\n//     pub x: u8,             // 5 bit\n//     pub y: u8,             // 4 bit\n//     pub health: u8,        // 8 bit\n//     pub obstacle_type: u8, // 4 bit\n// }\n\n// pub impl Obstacle {\n//     pub fn serialize(self) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         assert(self.y < 0x10, f\"Obstacle y is too large\");\n//         assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n\n//         let packed_y = self.obstacle_type * 0x10 + self.y;\n//         [ self.x, packed_y, self.health]\n//     }\n\n//     pub fn is_obstacle_traversible(self) -> bool {\n//         (self.obstacle_type >= NON_EMPTY_WALKABLE_TILE_MIN) | (self.obstacle_type == EMPTY)\n//     }\n\n//     pub fn parse_their_obstacles(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let health = field[2];\n//         let o = Obstacle {\n//             id: id,\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn parse_obstacle(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let mut health = field[2];\n//         if (obstacle_type == WALL) | (obstacle_type == WATER) {\n//             let mut damage = 0;\n//             for i in 0..MAX_EVENTS {\n//                 damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n//             }\n//             if damage > (health as u16) {\n//                 health = 0;\n//             } else {\n//                 health -= (damage as u8);\n//             }\n//         }\n//         let o = Obstacle {\n//             id: id, // + (MAX_CHARACTERS as u8),\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//             //was_alive: was_alive,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn is_valid(self) -> bool {\n//         (self.x < WIDTH) & (self.y < HEIGHT)\n//     }\n\n//     pub fn parse_their_obstacles(serialized_obstacles: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_their_obstacles(id, serialized_obstacle));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn parse_my_obstacles(serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE], events: [Event; MAX_EVENTS]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_obstacle(id, serialized_obstacle, events));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn serialize_obstacles(side: u1, enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n//         let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n//         for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//             let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n//                 if is_visible(side, enemy_advance, obstacle.x) {\n//                     let serialized_obstacle = obstacle.serialize();\n//                     for k in 0..3 {\n//                         serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n//                     }\n//                 }\n//             }\n//             serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n//         }\n//         serialized_obstacles\n//     }\n\n//     pub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n//         // assert(side < 2, f\"Side is too large {side}\");\n//         let x = |x| x * (((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n//         [\n//             new_obstacle( 0, x(0), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 1, x(1), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 2, x(3), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 3, x(4), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 4, x(5), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle( 5, x(5), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle( 6, x(5), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle( 7, x(5), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 8, x(4), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 9, x(3), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(10, x(1), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(11, x(0), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(12, x(7), y: 0, obstacle_type: 200, WALL),\n//             new_obstacle(13, x(7), y: 1, obstacle_type: 200, WALL),\n//             new_obstacle(14, x(7), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle(15, x(7), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle(16, x(7), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle(17, x(7), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle(18, x(6), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(19, x(7), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(20, x(5), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(21, x(6), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(22, x(7), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(23, x(8), y: 9, obstacle_type: 255, WATER),\n//         ]\n//     }\n// }\n\n\nuse arenalib::MAX_OBSTACLES;\nuse arenalib::{ HEIGHT, WIDTH };\nuse arenalib::{ EMPTY, WALL, WATER };\nuse arenalib::{ MAX_EVENTS, MAX_HEALTH, MAX_OBSTACLE_TYPE, MAX_ENEMY_OBSTACLES }; // MAX_CHARACTERS\n// use crate::{ RECEIVE_ATTACK };\n// use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\nuse arenalib::{ SerializedArenaEnemyObstacles, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\nuse arenalib::NON_EMPTY_WALKABLE_TILE_MIN;\nuse arenalib::SerializedArenaObstacles;\nuse crate::event::Event;\nuse crate::map::{ is_visible, their_x_to_mine }; //is_neighbor\nuse dep::std;\nuse skplg::{softassert, NOWHERE};\nuse arenalib::SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE;\nuse arenalib::MAX_CHARACTERS;\n\n// pub type Obstacle = [u8; 5];\npub struct Obstacle {\n    pub id: u8,\n    pub x: u8,             // 5 bit\n    pub y: u8,             // 4 bit\n    pub health: u8,        // 8 bit\n    pub obstacle_type: u8, // 4 bit\n}\npub fn get_obstacle_id(obstacle: Obstacle) -> u8 {\n    obstacle.id //obstacle[0]\n}\npub fn get_obstacle_x(obstacle: Obstacle) -> u8 {\n    obstacle.x //[1]\n}\npub fn get_obstacle_y(obstacle: Obstacle) -> u8 {\n    obstacle.y //[2]\n}\npub fn get_obstacle_health(obstacle: Obstacle) -> u8 {\n    obstacle.health //[3]\n}\npub fn get_obstacle_type(obstacle: Obstacle) -> u8 {\n    obstacle.obstacle_type //[4]\n}\n\n#[export]\npub fn new_obstacle(id: u8, x: u8, y: u8, health: u8, obstacle_type: u8) -> pub (bool, Obstacle) {\n  let valid = ((x < WIDTH) | (x == NOWHERE)) & ((y < HEIGHT) | (y == NOWHERE)) & (health <= MAX_HEALTH) & (obstacle_type <= MAX_OBSTACLE_TYPE) & (id as u32 < (MAX_OBSTACLES + MAX_CHARACTERS));\n    // let mut valid = true;\n    // softassert!(quote { valid }, quote { (x < WIDTH) | (x == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid x: {x} >= {WIDTH}\" });\n    // softassert!(quote { valid }, quote { (y < HEIGHT) | (y == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid y: {y} >= {HEIGHT}\" });\n    // softassert!(quote { valid }, quote { health <= MAX_HEALTH }, quote { f\"Cannot create Obstacle: Invalid health: {health} > {MAX_HEALTH}\" });\n    // softassert!(quote { valid }, quote { obstacle_type <= MAX_OBSTACLE_TYPE }, quote { f\"Cannot create Obstacle: Invalid obstacle type: {obstacle_type} > {MAX_OBSTACLE_TYPE}\" }); //TODO: not sure if this or is_valid???\n    // (valid, [ id, x, y, health, obstacle_type ])\n    (valid, Obstacle { id: id, x: x, y: y, health: health, obstacle_type: obstacle_type })\n}\n\n#[test]\nfn test_new_obstacle() {\n  let (val, o) = new_obstacle(0, 0, 2, 0xc8, 0x06);\n  assert(val);\n  assert(o.id == 0);\n}\n\n// #[export]\n// pub struct FrontendObstacle {\n//   pub id: u8,\n//   pub x: u8,\n//   pub y: u8,\n\n// }\n\npub fn serialize_obstacle(obstacle: Obstacle) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n    // we could assert here, since obstacles can only be create with new_obstacle?!\n    // assert(self.y < 0x10, f\"Obstacle y is too large\");\n    // assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n    comptime {\n        let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let packed_y = get_obstacle_type(obstacle) * 0x10 + get_obstacle_y(obstacle);\n                [ get_obstacle_x(obstacle), packed_y, get_obstacle_health(obstacle)]\n            }\n        } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n                [ get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_health(obstacle), get_obstacle_type(obstacle)]\n            }\n        } else {\n            quote {\n                assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n            }\n        };\n        q\n    }\n}\n\npub fn is_obstacle_traversible(obstacle: Obstacle) -> bool {\n    (get_obstacle_type(obstacle) >= NON_EMPTY_WALKABLE_TILE_MIN) | (get_obstacle_type(obstacle) == EMPTY)\n}\n\npub fn parse_their_obstacle(id: u8, fld: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> (bool, Obstacle) {\n    comptime {\n        assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n    }\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let mut valid = true;\n    let x_raw = fld[0];\n    let (x_parsed_valid, x_parsed) = their_x_to_mine(x_raw);\n    softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to convert their x to mine of their obstacle {id}: {x_raw}\" });\n    let y = fld[1] & 0x0F;\n    let obstacle_type = (fld[1]) / 0x10;\n    let health = fld[2];\n    let (obstacle_valid, obstacle) = new_obstacle(id, x_parsed, y, health, obstacle_type);\n    softassert!(quote { valid }, quote { obstacle_valid }, quote { f\"Failed to create new obstacle {id}, {x_parsed}, {y}, {health}, {obstacle_type}\" });\n    (valid, obstacle)\n    // let o = Obstacle {\n    //     id: id,\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn parse_obstacle(id: u8, f: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> (bool, Obstacle) {\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let x = f[0];\n    // let mut y = f[1];\n    // let mut obstacle_type = f[1];\n    // comptime {\n    //     let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n    //         quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let y = f[1] & 0x0F;\n                let obstacle_type = (f[1]) / 0x10;\n    //         }\n    //     } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n    //         quote {\n    //             assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n    //             y = f[1];\n    //             obstacle_type = f[3];\n    //         }\n    //     } else {\n    //         quote {\n    //             assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n    //         }\n    //     };\n    //     q\n    // }\n    // let y = f[1]; // & 0x0F;\n    // let obstacle_type = f[3]; //f[1] / 0x10;// (f[1] & 0xF0) / 0x10;\n    let mut health = f[2];\n    //if (obstacle_type == WALL) | (obstacle_type == WATER) {\n        let mut damage = 0;\n        for i in 0..MAX_EVENTS {\n            damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n        }\n        if damage > (health as u16) {\n            health = 0;\n        } else {\n            health -= (damage as u8);\n        }\n    //}\n    new_obstacle(id, x, y, health, obstacle_type)\n    // let o = Obstacle {\n    //     id: id, // + (MAX_CHARACTERS as u8),\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    //     //was_alive: was_alive,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn is_obstacle_valid(obstacle: Obstacle) -> bool {\n    (get_obstacle_x(obstacle) < WIDTH) & (get_obstacle_y(obstacle) < HEIGHT)\n}\n\n#[export]\npub fn parse_their_obstacles(serialized_obstacles: SerializedArenaEnemyObstacles) -> (bool, [Obstacle; MAX_ENEMY_OBSTACLES]) {\n  let (dummy_obstacle_valid, dummy_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n  assert(dummy_obstacle_valid);\n    let mut obstacles: [Obstacle; MAX_ENEMY_OBSTACLES] = [dummy_obstacle; MAX_ENEMY_OBSTACLES];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n            obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j] = obstacle; //s.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    let serialized_obstacle_field = serialized_obstacles[SERIALIZED_OBSTACLES_ARRAY_SIZE].to_be_bytes::<32>();\n    assert(serialized_obstacle_field.len() == 32);\n    for j in 0..MAX_CHARACTERS {\n      let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n      // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n      let id = (MAX_OBSTACLES + j) as u8;\n      let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n      obstacles[MAX_OBSTACLES + j] = obstacle; //s.push_back(obstacle);\n      valid_result = valid_result & valid;\n    }\n    (valid_result, obstacles)\n}\n\npub fn parse_my_obstacles(serialized_obstacles: SerializedArenaObstacles, events: [Event; MAX_EVENTS]) -> (bool, [Obstacle; MAX_OBSTACLES]) {\n    let mut obstacles: [Obstacle] = &[];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    for i in 0..serialized_obstacles.len() {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            //let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_obstacle(id, serialized_obstacle, events);\n            obstacles = obstacles.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    (valid_result, obstacles.as_array())\n}\n\n#[export]\npub fn serialize_my_obstacles_for_me(obstacles: [Obstacle; MAX_OBSTACLES]) -> pub [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            let serialized_obstacle = serialize_obstacle(obstacle);\n            for k in 0..3 {\n                serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\n\npub fn serialize_my_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let serialized_obstacle = serialize_obstacle(obstacle);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\npub fn serialize_their_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) {\n    let mut valid_result = true;\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let parsed_x = their_x_to_mine(get_obstacle_x(obstacle));\n                valid_result = valid_result & parsed_x.0;\n                let mirrored_obstacle = new_obstacle(\n                    get_obstacle_id(obstacle),\n                    parsed_x.1,\n                    get_obstacle_y(obstacle),\n                    get_obstacle_health(obstacle),\n                    get_obstacle_type(obstacle)\n                );\n                valid_result = valid_result & mirrored_obstacle.0;\n                let serialized_obstacle = serialize_obstacle(mirrored_obstacle.1);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    (valid_result, serialized_obstacles)\n}\n\nfn get_x_of_side(side: u1, x: u8) -> u8 {\n    x * ((side as u8 + 1) as u1) as u8 + side as u8 * (WIDTH - 1 - x)\n}\n\n#[test]\nfn test_x() {\n    let x8s0 = get_x_of_side(0, 8);\n    assert(x8s0 == 8, f\"{x8s0} != 8\");\n    let x8s1 = get_x_of_side(1, 8);\n    assert(x8s1 == 23, f\"{x8s1} != 23\");\n}\n\npub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n    // assert(side < 2, f\"Side is too large {side}\");\n    let x = |x| get_x_of_side(side, x); //(((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n    [\n        new_obstacle( 0, x(0), 2, 200, WALL).1,\n        new_obstacle( 1, x(1), 2, 200, WALL).1,\n        new_obstacle( 2, x(3), 2, 200, WALL).1,\n        new_obstacle( 3, x(4), 2, 200, WALL).1,\n        new_obstacle( 4, x(5), 3, 200, WALL).1,\n        new_obstacle( 5, x(5), 4, 200, WALL).1,\n        new_obstacle( 6, x(5), 5, 200, WALL).1,\n        new_obstacle( 7, x(5), 7, 200, WALL).1,\n        new_obstacle( 8, x(4), 7, 200, WALL).1,\n        new_obstacle( 9, x(3), 7, 200, WALL).1,\n        new_obstacle(10, x(1), 7, 200, WALL).1,\n        new_obstacle(11, x(0), 7, 200, WALL).1,\n        new_obstacle(12, x(7), 0, 200, WALL).1,\n        new_obstacle(13, x(7), 1, 200, WALL).1,\n        new_obstacle(14, x(7), 2, 200, WALL).1,\n        new_obstacle(15, x(7), 3, 200, WALL).1,\n        new_obstacle(16, x(7), 4, 200, WALL).1,\n        new_obstacle(17, x(7), 5, 200, WALL).1,\n        new_obstacle(18, x(6), 8, 255, WATER).1,\n        new_obstacle(19, x(7), 8, 255, WATER).1,\n        new_obstacle(20, x(5), 9, 255, WATER).1,\n        new_obstacle(21, x(6), 9, 255, WATER).1,\n        new_obstacle(22, x(7), 9, 255, WATER).1,\n        new_obstacle(23, x(8), 9, 255, WATER).1,\n        // new_obstacle(24, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(25, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(26, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(27, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(28, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(29, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(30, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(31, x(0), 0, 255, EMPTY).1,\n    ]\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/obstacle.nr"},"78":{"source":"use skplg::{softassert, UNREADABLE_BYTES_PER_FIELD, NOWHERE};\nuse skpla::{ACTION_BYTE_SIZE, Action, new_action, get_action_actor, get_action_type, get_action_target_x, get_action_target_y};\nuse crate::SerializedArenaActions;\nuse crate::{MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER};\nuse crate::{WIDTH, HEIGHT};\nuse crate::WAIT;\n\npub global SERIALIZED_ACTION_BYTE_SIZE: u32 = ACTION_BYTE_SIZE;\npub global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4;\npub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n\n// comptime fn get_serialized_actions_array_size() -> u32 {\n//   let needed_usable_bytes = MAX_ACTIONS * ACTION_BYTE_SIZE;\n//   let usable_bytes_per_field = 32 - UNREADABLE_BYTES_PER_FIELD;\n//   let field_count = needed_usable_bytes / usable_bytes_per_field;\n//   if field_count * usable_bytes_per_field == needed_usable_bytes {\n//     field_count\n//   } else {\n//     field_count + 1\n//   }\n// }\n\n\n  pub fn parse_actions(max_actor_id: u8, fields: SerializedArenaActions) -> (bool, [Action; MAX_ACTIONS]) {\n    let mut valid = true;\n    softassert!(quote { valid }, quote { fields.len() == SERIALIZED_ACTIONS_ARRAY_SIZE }, quote { f\"{fields} does not have size {SERIALIZED_ACTIONS_ARRAY_SIZE}\" });\n    comptime {\n      assert(SERIALIZED_ACTION_BYTE_SIZE == 4);\n    }\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n\n      let mut actions: [Action] = &[];\n      assert(fields.len() == 1);\n      // for i in 0..1 {\n      let i = 0;\n          let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n          assert(split.len() == 32);\n          let mut serialized_actions_per_field = SERIALIZED_ACTIONS_PER_FIELD;\n          if serialized_actions_per_field * (i + 1) > MAX_ACTIONS {\n            serialized_actions_per_field = MAX_ACTIONS - serialized_actions_per_field * i;\n          }\n          assert(serialized_actions_per_field == SERIALIZED_ACTIONS_PER_FIELD);\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              let action_type = split[offset];\n              let actor = split[offset + 1];\n              let target_x = split[offset + 2];\n              let target_y = split[offset + 3];\n\n              softassert!(quote { valid }, quote { action_type as u32 <= MAX_ACTIONS_PER_CHARACTER }, quote { f\"Invalid action: action type {action_type} > {MAX_ACTIONS_PER_CHARACTER}\" });\n              softassert!(quote { valid }, quote { actor <= max_actor_id }, quote { f\"Invalid action: action actor {actor} > {max_actor_id}\" });\n              softassert!(quote { valid }, quote { (target_x < WIDTH) | (target_x == NOWHERE) }, quote { f\"Invalid action: action type {target_x} >= {WIDTH} and not {NOWHERE}\" });\n              softassert!(quote { valid }, quote { (target_y < HEIGHT) | (target_y == NOWHERE) }, quote { f\"Invalid action: action type {target_y} >= {HEIGHT} and not {NOWHERE}\" });\n\n              actions = actions.push_back(new_action(\n                  action_type,\n                  actor,\n                  target_x,\n                  target_y\n              ));\n              /*Action {\n                  action: split[offset],\n                  actor: split[offset + 1],\n                  target_x: split[offset + 2],\n                  target_y: split[offset + 3],\n              }*/\n          }\n      // }\n      // println(actions);\n      (valid, actions.as_array())\n  }\n\n  /**\n  * Warning: This function can throw!!!\n  */\n  pub fn serialize_actions(actor_id: u8, actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n      assert(actions.len() <= MAX_ACTIONS);\n\n      let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, actor_id, NOWHERE, NOWHERE); MAX_ACTIONS];\n      for i in 0..actions.len() {\n          actions_stuffed[i] = actions[i];\n      }\n\n      let mut fields: [Field] = &[];\n      for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n          let mut data: [u8; 32] = [0; 32];\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n              let action = actions_stuffed[index];\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              data[offset] = get_action_type(action);\n              data[offset + 1] = get_action_actor(action);\n              data[offset + 2] = get_action_target_x(action);\n              data[offset + 3] = get_action_target_y(action);\n          }\n          fields = fields.push_back(std::field::bytes32_to_field(data));\n      }\n      fields.as_array()\n  }\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/arenalib/src/actionSerDe.nr"},"90":{"source":"use dep::std::{append::Append};\nuse skplg::UNREADABLE_BYTES_PER_FIELD;\n\npub trait ActionDefinitionPartBuilder<T> { fn new() -> T; }\npub type DEF_ROW<T> = (Quoted, u8, T);\npub comptime fn get_def_register_value(register: Quoted, bytes: u32, bits: u8, bitsize: u8) -> Quoted {\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    if bitsize == 8 {\n      quote { $register[$bytes] }\n      // quote { ($register / $multiplier) as u8 }\n    } else {\n      let divisor = 1 << bits;\n      let mask = std::wrapping_sub(1 << bitsize, 1);\n      if bitsize == 1 {\n        // quote { (($register / $multiplier) as u1) == 1 }\n        quote { (($register[$bytes] as u8 & $divisor as u8) != 0 as u8) }\n      } else {\n        quote { (($register[$bytes] as u8 / $divisor as u8) & $mask as u8) }\n        // quote { (($register / $multiplier) as u8) & $mask as u8 }\n      }\n    }\n}\npub comptime fn build_over_def_array<Env, T>(array: [DEF_ROW<T>], base_index: u32, builder: fn[Env] (u32, u8, Quoted, u8, T) -> Quoted) -> Quoted {\n  let mut result = quote {};\n  \n  let mut bits: u8 = 0;\n  let mut bytes: u32 = base_index;\n\n  for i in 0..array.len() {\n    let (varname, bitsize, args) = array[i];\n    assert(bitsize <= 8, f\"Invalid bit size: {bitsize}\");\n    if (bits + bitsize) > 8 {\n      bytes += 1;\n      bits = 0;\n    }\n    assert(bits < 8, f\"bits must not reach 8 or higher: {bits}\");\n\n    let new_result = builder(bytes, bits, varname, bitsize, args);\n    result = quote { $result $new_result };\n\n    bits += bitsize;\n  }\n  result\n}\npub comptime fn derive_action_def_def_builder<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let mut params: [(Quoted, Type)] = &[];\n  let mut last_byte: u32 = 0;\n  let mut result: Quoted = build_over_def_array(array, 0, |bytes, bits, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { u8 }.as_type() } else { quote { u8 }.as_type() };\n    params = params.push_back((varname, t));\n    let mut r = quote {};\n    if bytes != last_byte {\n      r = r.append(quote { , });\n    } else if (bytes + bits as u32) != 0 {\n      r = r.append(quote { + });\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = r.append(quote { $varname  });\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = r.append(quote { $varname as u8 * $multiplier });\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = r.append(quote { (( $varname & $mask ) * $multiplier) });\n      }\n    }\n    last_byte = bytes;\n    r\n  });\n  f.set_parameters(params);\n\n  let return_type = f.return_type();\n\n  f.set_body(quote { $return_type { register: [ $result ] } }.as_expr().unwrap());\n  // println(f.body());\n}\npub comptime fn get_action_def_def_register_size<T>(array: [DEF_ROW<T>]) -> u32 {\n  let mut size = 0;\n  let _ = build_over_def_array(array, 0, |bytes, _, _, _, _|{\n    size = bytes;\n    quote {}\n  });\n  size + 1\n}\npub comptime fn get_action_def_def_register_element_type() -> Type {\n  quote { u8 }.as_type()\n}\npub comptime fn get_action_def_def_register_type<T>(array: [DEF_ROW<T>]) -> Type {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  quote { [$et; $size] }.as_type()\n}\npub comptime fn derive_action_def_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  // let size = get_action_def_requirements_register_size();\n  let fields = s.fields([]);\n  assert(fields.len() == 1);\n  s.set_fields([(fields[0].0, get_action_def_def_register_type(array))]);\n}\npub comptime fn derive_action_def_def_struct_new<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  let t = get_action_def_def_register_type(array);\n  f.set_return_type(t);\n  f.set_body(quote { ActionRequirement { [0 as $et; $size] } }.as_expr().unwrap());\n}\npub comptime fn derive_frontend_action_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  let mut fields: [(Quoted, Type)] = &[];\n  let _ = build_over_def_array(array, UNREADABLE_BYTES_PER_FIELD, |_, _, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    fields = fields.push_back((varname, t));\n    quote {}\n  });\n  s.set_fields(fields);\n}\npub comptime fn derive_frontend_action_def_struct_builder<T>(param_name: Quoted, base_index: u32, array: [DEF_ROW<T>]) -> Quoted {\n  // let mut params: [(Quoted, Type)] = &[];\n  let mut first = true;\n  let mut result: Quoted = build_over_def_array(array, base_index, |bytes, bits, varname, bitsize, _|{\n    // let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    // params = params.push_back((varname, t));\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    let mut r = quote {};\n    if !first {\n      r = quote { , };\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = quote { $r $varname: $param_name[$bytes] };\n      // r = quote { $r $varname: ($param_name / $multiplier) as u8 };\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = quote { $r $varname: ($param_name[$bytes] & $multiplier) != 0 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u1) == 1 };\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = quote { $r $varname: (( $param_name[$bytes] / $multiplier) & $mask ) as u8 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u8) & $mask as u8 };\n      }\n    }\n    first = false;\n    r\n  });\n  // f.set_parameters(params);\n\n  // let return_type = f.return_type();\n  // // f.set_return_type(return_type.as_type());\n  // f.set_return_data();\n  // f.set_return_public(true);\n  // // println(result);\n  // f.\nresult\n  // quote {  $result } };\n}\n\n// pub global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2; // u2\n\n// global YES: u8 = 1;\n// global NO: u8 = 0;\n// global MIN_STATUS: u8 = 0;\n// global MAX_STATUS: u8 = 15;\n\n// // pub type ActionDefinitionRegister = \n// pub fn build_action_def_requirements_none() -> ActionRequirement {\n//   build_action_def_requirements(\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     MIN_STATUS,\n//     MAX_STATUS,\n//     0 as u8,\n//     255 as u8)\n// }\n// pub fn build_action_def_pre_calc_effects_idle() -> ActionPreCalcEffect {\n//   build_action_def_pre_calc_effect(\n//     WAIT,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1)\n// }\n// // comptime fn no_requirements() -> CtString {\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1, \n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         0 as u8,\n// //         NO as u1)\n// // }\n// pub fn build_action_def_result_event_none() -> ActionResultEvent {\n//   build_action_def_result_event(\n//     0,\n//     0,\n//     ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//     NO_EVENT,\n//     NO_EVENT,\n//     0 as u8\n//   )\n// }\n// // comptime fn no_event() -> CtString {\n// //     build_action_event_def(NO_EVENT, NO_EVENT, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 0 as u8)\n// // }\n// pub fn build_wait_action_def() -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements_none(),\n//     build_action_def_pre_calc_effects_idle(),\n//     build_action_def_result_effects(\n//       0 as u8,\n//       0 as u8,\n//       1 as u8,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_wait_action_def() -> CtString {\n// //     build_action_def(\n// //         no_requirements(),\n// //         no_event(),\n// //         no_event(),\n// //         1 as u8,\n// //         0 as u8,\n// //         ACTION_RESULT_COORDINATES_IDX_SELF,\n// //         NO as u1,\n// //         WAIT\n// //     )\n// // }\n// // pub global WAIT_ACTION: ActionDefinition = comptime { let x = build_wait_action_def(); f\"[{x}]\".quoted_contents() };\n// pub fn build_sneak_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0 as u8,\n//       1 as u8),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0 as u8,\n//       0 as u8,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       YES as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_sneak_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     no_event(), // TODO: not sure if on-seen we should not send a move event instead - that way one could sneak and stay hidden, but not sneak while visible\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_move_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       1),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_MOVE,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_move_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_MOVE, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_cast_action(this_action_id: u8, energy: u8, class: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_CAST,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_cast_action(this_action_id: u8, energy: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_CAST, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_ritual_action(cast_action_id: u8, energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       RITUAL_ROUNDS_FOR_WIN,\n//       MAX_STATUS,\n//       0,\n//       255),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_ritual_action(this_action_id: u8, energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         RITUAL_ROUNDS_FOR_WIN,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 255 as u8),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 255 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1), // TODO: Maybe set this to handle friendly fire???\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     cast_action_id)\n// // }\n// pub fn build_search_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_search_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS, // should be max of shoot\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_DRAW,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_DRAW, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       draw_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     draw_action_id)\n// // }\n// pub fn build_disarm_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_disarm_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_set_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         ADD_OBSTACLE,\n//         TRAP,\n//         0),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_set_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         YES as u1),\n// //     no_event(),\n// //     build_action_event_def(ADD_OBSTACLE, TRAP, 0 as u8, 50 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n\n// // pub fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // fn get_action_needs_target_free_space(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// // }\n// // fn get_action_needs_target_is_not_self(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// // }\n// // fn get_action_needs_status_visible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// // }\n// // fn get_action_needs_status_invisible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// // }\n// // fn get_action_needs_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_sets_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_removes_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_max_range(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_MAX_RANGE]\n// // }\n// // fn get_action_needs_min_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MIN_STATUS]\n// // }\n// // fn get_action_needs_max_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MAX_STATUS]\n// // }\n// // fn get_action_needed_energy(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDED_ENERGY]\n// // }\n// // fn get_action_unseen_event_is_internal(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_EVENT_IS_TRAP] == 1\n// // }\n// // fn get_action_result_event_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_event_not_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_not_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_not_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_not_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_not_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_not_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_status_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// // }\n// // fn get_action_move_to_target(action: ActionDefinition) -> u1 {\n// //     action.register[action.base_index + ACTION_MOVE_TO_TARGET] as u1\n// // }\n// // fn get_action_is_continuous(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_IS_CONTINUOUS] == 1\n// // }\n// // fn get_action_needs_previous_action(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_PREVIOUS_ACTION] as u8\n// // }\n\n// // pub global ACTION_DEFINITION_SIZE: u32 = (ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 5) as u32; // 2 bytes for move_to_target and status_multiplier\n// // pub global ACTION_DEFINITION_REGISTER_SIZE: u32 = ACTION_DEFINITION_SIZE * (1 + (MAX_ACTIONS_PER_CHARACTER - 1) * (CLASS_COUNT - 1));\n\n// // fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // pub struct ActionDefinitionRegister {\n// //   register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinitionRegister {\n// //   pub fn new(register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinitionRegister {\n// //     ActionDefinitionRegister {\n// //       register: register\n// //     }\n// //   }\n\n// //   pub fn resolve_action(self, action: Action) -> ActionDefinition {\n// //     ActionDefinition {\n// //       base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //       action: action,\n// //       register: self.register\n// //     }\n// //   }\n// // }\n\n// // pub struct ActionDefinition {\n// //     base_index: u16,\n// //     action: Action,\n// //     register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinition {\n// //     pub fn new(action: Action, register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinition {\n// //         ActionDefinition {\n// //             base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //             action: action,\n// //             register: register\n// //         }\n// //     }\n// // }\n\n// // impl ResolvedAction for ActionDefinition {\n// //     fn get_action_needs_target_free_space(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: ActionDefinition) -> u1 {\n// //         self.register[self.base_index + ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n\n// // pub struct TestActionDefinition {\n// //     pub register: [u8; ACTION_DEFINITION_SIZE],\n// //     pub action: Action,\n// // }\n\n// // impl ResolvedAction for TestActionDefinition {\n// //     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n// //         self.register[ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n// // #[test]\n// // fn test_execute_action() {\n// //     let action = build_test_action_def!(build_move_action(4), quote { 1, 2, 3, 4 }); //new_action(1, 2, 3, 4);\n// //     let my_advance = 10;\n// //     let their_advance = 1;\n// //     let actor = Character {\n// //         id: 2,\n// //         x: 2,\n// //         y: 4,\n// //         target_x: 0,\n// //         target_y: 0,\n// //         health: 255,\n// //         damage_mod: 1,\n// //         last_action: WAIT,\n// //         class: MAGE,\n// //         is_hidden: 0 as u1,\n// //         has_been_seen: true,\n// //         status: 0,\n// //         actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]\n// //     };\n// //     let energy = 15;\n// //     let my_obstacles = get_default_obstacles(0);\n// //     let their_obstacles = get_default_obstacles(1);\n// //     let (valid, event, internal_event, c, result_energy) = execute_action(\n// //         action,\n// //         my_advance,\n// //         their_advance,\n// //         actor,\n// //         energy,\n// //         my_obstacles,\n// //         their_obstacles\n// //     );\n// //     assert(valid, \"valid\");\n// //     assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n// //     assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n// //     assert(event.x == action.get_action_target_x(), f\"{event}.target_x is not action target x\");\n// //     assert(event.y == action.get_action_target_y(), f\"{event}.target_y is not action target y\");\n// //     assert(c.x == event.x, f\"{c}.x is not action target x\");\n// //     assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n// //     assert(result_energy == 11, f\"{result_energy} != 11\");\n// // }\n\n// // #[export]\n// // pub fn build_action_register(actions: [])\n\npub type CharacterActionDefinition = [u8; 32];\npub type CharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [CharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedCharacterActionDefinition = Field;\npub type SerializedCharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedRosterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32, let MAX_CHARACTERS: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS];","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionDefinition.nr"},"91":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionRequirements::{get_action_def_requirements_base_index, get_action_def_requirements_byte_size};\nuse std::append::Append;\n\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_PRE_CALC_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { pre_calc_effect_continues_action }, 3, |continued_action|quote { let continues_action: bool = $continued_action as u8 == actor_last_action; }),\n    action_def_def(quote { pre_calc_effect_is_continuous }, 1, |is_continuous|quote { let is_continuous: bool = $is_continuous as bool; }),\n    action_def_def(quote { pre_calc_effect_interrupts }, 1, |is_interrupting|quote { let is_interrupting: bool = $is_interrupting as bool; }),\n    action_def_def(quote { pre_calc_effect_allow_retargeting }, 1, |allows_retargetting|quote { let not_interrupted_through_retargeting: bool = $allows_retargetting as bool | ((action_target_x == actor_target_x) & (action_target_y == actor_target_y)); })\n];\npub comptime fn get_action_def_pre_calc_base_index() -> u32 {\n  get_action_def_requirements_byte_size()+get_action_def_requirements_base_index()\n}\n\npub comptime fn get_action_def_pre_calc_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_PRE_CALC_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_pre_calc_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n// }\n#[derive_action_def_def_pre_calc_event_struct]\npub struct ActionPreCalcEffect {\n  pub register: [u8; 32]\n}\nimpl ActionPreCalcEffect {\n  #[derive_action_def_pre_calc_effect_struct_new]\n  pub fn new() -> ActionPreCalcEffect {\n    ActionPreCalcEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_pre_calc_effect_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_pre_calc_effect_builder]\npub fn build_action_def_pre_calc_effect() -> pub ActionPreCalcEffect { ActionPreCalcEffect::new() }\n\npub comptime fn apply_action_pre_calc_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_pre_calc_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_PRE_CALC_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  quote {\n    $result\n    is_not_interrupted = (\n      ((!is_continuous) as u8 * (!is_interrupting) as u8) + // that's the ID of the wait action => leave status, but not continuous\n      ((is_continuous) as u8 * continues_action as u8 * not_interrupted_through_retargeting as u8)\n    ) > 0;\n\n    actor_progress *= is_not_interrupted as u8;\n  }\n}\n\npub comptime fn set_action_def_pre_calc_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_pre_calc_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_pre_calc_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_pre_calc_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[derive_frontend_action_def_pre_calc_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefPreCalcEffects {}\n\n\npub comptime fn derive_frontend_action_def_pre_calc_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_pre_calc_base_index(), ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n  quote { FrontendActionDefPreCalcEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionPreCalcEffect.nr"},"92":{"source":"use skplg::{UNREADABLE_BYTES_PER_FIELD, softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse std::append::Append;\nuse crate::{actionDefinition::derive_frontend_action_def_struct, actionDefinition::derive_frontend_action_def_struct_builder};\n\n    // fn get_action_req_target_free_space(self) -> bool;\n    // fn get_action_req_target_is_not_self(self) -> bool;\n    // fn get_action_req_status_visible(self) -> bool;\n    // fn get_action_req_status_invisible(self) -> bool;\n    // fn get_action_req_status_hidden(self) -> bool;\n    // fn get_action_req_max_range(self) -> u8;\n    // fn get_action_req_min_status(self) -> u8;\n    // fn get_action_req_max_status(self) -> u8;\n    // fn get_action_req_energy(self) -> u8;\n    // fn get_action_req_previous_action(self) -> u8;\npub type ActionDefDefRequirementCheck = (Quoted, Quoted);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, expr: Quoted, msg: Quoted) -> DEF_ROW<ActionDefDefRequirementCheck> {\n    (varname, bit_size, (expr, msg))\n}\n// comptime global ACTION_DEF_DEF_FIELD_COUNT: u32 = 11;\nglobal ACTION_DEF_DEF_REQUIREMENTS: [DEF_ROW<ActionDefDefRequirementCheck>] = [\n    action_def_def(quote { action_req_target_free_space }, 1, quote { could_move_to_target }, quote { f\"Target space cannot be moved to {action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" }),\n    action_def_def(quote { action_req_target_is_not_self }, 1, quote { (actor_x != action_target_x) | (actor_y != action_target_y) }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" }),\n    action_def_def(quote { action_req_status_visible }, 1, quote { actor_is_in_view_range & !actor_is_hidden },  quote { f\"Character must be fully visible for action {action_type}: in_view_range: {actor_is_in_view_range} & !hidden {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_invisible }, 1, quote { !actor_is_in_view_range | actor_is_hidden }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {actor_is_in_view_range} || hidden: {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_hidden }, 1, quote { actor_is_hidden }, quote { f\"Character needs to be hidden to perform action {action_type}\" }),\n    // action_def_def(quote { action_req_previous_action }, 3, quote { true }, quote { f\"\" }),\n    action_def_def(quote { action_req_min_progress }, 4, quote { action_req_min_progress as u8 <= actor_progress as u8 }, quote { f\"Character needs min progress {action_req_min_progress} to perform action {action_type}, but only has {actor_progress}\" }),\n    action_def_def(quote { action_req_max_progress }, 4, quote { action_req_max_progress as u8 >= actor_progress as u8 }, quote { f\"Character cannot have a higher progress than {action_req_max_progress} to perform action {action_type}: got {actor_progress}\" }),\n    action_def_def(quote { action_req_status }, 4, quote { (action_req_status as u8 == 0 as u8) | (action_req_status as u8 == actor_progress as u8) }, quote { f\"Character can only perform action {action_type} while having status {action_req_status}. Invalid status {actor_status}\" }),\n    // action_def_def(quote { action_req_required_energy }, 4, quote { action_req_required_energy <= energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_req_required_energy}\" }),\n    action_def_def(quote { action_req_max_range }, 8, quote { distance as u16 <= (action_req_max_range as u16) * (action_req_max_range as u16) }, quote { f\"Character is out of range! Distance: {distance} > {action_req_max_range}: {{{actor_x},{actor_y}}} - {{{action_target_x},{action_target_y}}} with {action_req_max_range}\" }),\n];\npub comptime fn get_action_def_requirements_base_index() -> u32 {\n  UNREADABLE_BYTES_PER_FIELD as u32\n}\n\npub comptime fn get_action_def_requirements_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_REQUIREMENTS)\n}\n\ncomptime fn derive_action_def_def_req_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n// comptime fn derive_action_def_requirements_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_REQUIREMENTS);\n// }\n\n#[derive_action_def_def_req_struct]\npub struct ActionRequirement {\n  pub register: [u8; 32]\n}\nimpl ActionRequirement {\n  #[derive_action_def_requirements_struct_new()]\n  pub fn new() -> ActionRequirement {\n    ActionRequirement { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_req_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[export]\n#[derive_action_def_def_req_builder]\npub fn build_action_def_requirements() -> pub ActionRequirement { ActionRequirement::new() }\n\npub comptime fn validate_action_requirements(valid_varname: Quoted, register: Quoted) -> Quoted {\n  let mut result = build_over_def_array(ACTION_DEF_DEF_REQUIREMENTS, get_action_def_requirements_base_index(), |bytes, bits, varname, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    // let varname = f\"action_requirement_{i}_is_valid\".quoted_contents();\n    let (checkexpr, msg) = args;\n    let check = if bitsize == 1 { quote { !($varname as bool) | ($checkexpr) } } else { quote { $checkexpr } };\n    let sa = softassert(valid_varname, check, msg);\n    quote {\n      let $varname = $expr;\n      $sa\n    }\n  });\n  // println(result);\n  // quote { assert(1==1); }\n  result\n}\n\npub comptime fn set_action_def_requirements_in_action_def(requirements: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_requirements_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_requirements_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $requirements.register[$i]; });\n    // result = quote { $result $action_def += $requirements.register[$i] as Field * $multiplier; };\n    // multiplier *= 2.pow_32(8);\n  }\n  // println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_requirements_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[derive_frontend_action_def_requirements_struct]\n#[derive(Default)]\npub struct FrontendActionDefRequirements {}\n\n\npub comptime fn derive_frontend_action_def_requirements_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_requirements_base_index(), ACTION_DEF_DEF_REQUIREMENTS);\n  // println(content);\n  quote { FrontendActionDefRequirements { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionRequirements.nr"},"93":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse skplg::softassert;\nuse crate::actionPreCalcEffect::{get_action_def_pre_calc_base_index, get_action_def_pre_calc_effects_byte_size};\nuse std::append::Append;\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { action_result_required_energy }, 4, |action_required_energy|{\n      let check = softassert(quote { is_valid }, quote { action_required_energy <= result_energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_required_energy}\" });\n      quote {\n        let action_required_energy = $action_required_energy;\n        $check\n        result_energy = std::wrapping_sub(result_energy, action_required_energy);\n      }\n    }),\n    action_def_def(quote { action_result_progress_increment }, 4, |progress_increment|quote { let action_result_effect_progress_increment: u32 = $progress_increment as u32; }),\n    action_def_def(quote { action_result_progress_multiplier }, 2, |progress_multiplier|quote { let action_result_effect_progress_multiplier: u32 = $progress_multiplier as u32; }),\n    action_def_def(quote { action_result_move_to_target }, 1, |move_to_target|quote { result_coords = coords[$move_to_target as u8]; }),\n    action_def_def(quote { action_result_hide }, 1, |hide|quote { let action_result_effect_hide: bool = $hide as bool; }),\n    action_def_def(quote { action_result_reveal }, 1, |leave_shadows|quote { let action_result_effect_leave_shadows: bool = $leave_shadows as bool; })\n];\npub comptime fn get_action_def_result_effect_base_index() -> u32 {\n  get_action_def_pre_calc_base_index() + get_action_def_pre_calc_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_result_effect_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n// }\n#[derive_action_def_def_result_effect_struct]\npub struct ActionResultEffect {\n  pub register: [u8; 32]\n}\nimpl ActionResultEffect {\n  //#[derive_action_def_result_effects_struct_new]\n  pub fn new() -> ActionResultEffect {\n    ActionResultEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_effects_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_result_effects_builder]\npub fn build_action_def_result_effects() -> pub ActionResultEffect { ActionResultEffect::new() }\n\npub comptime fn apply_action_result_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_effect_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n// println(result);\n  quote {\n    $result\n\n    let result_progress_raw = actor_progress as u32 * action_result_effect_progress_multiplier + action_result_effect_progress_increment;\n    //softassert!(quote { is_valid }, quote { result_progress_raw <= MAX_PROGRESS as u32 }, quote { f\"Invalid result progress: {result_progress_raw} > {MAX_PROGRESS}\" });\n    result_progress = result_progress_raw as u8;\n\n    result_is_hidden = (result_is_hidden & !action_result_effect_leave_shadows) | action_result_effect_hide;\n    result_is_visible = !result_is_hidden & is_visible(enemy_advance, result_coords.0);\n  }\n}\n\npub comptime fn set_action_def_result_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_result_effect_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_result_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[derive_frontend_action_def_result_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEffects {}\n\n\npub comptime fn derive_frontend_action_def_result_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_result_effect_base_index(), ACTION_DEF_DEF_RESULT_EFFECTS);\n  quote { FrontendActionDefResultEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEffect.nr"},"94":{"source":"// pub global ACTION_RESULT_EVENT_TYPE: u8 = 0;\n// pub global ACTION_RESULT_EVENT_SUBTYPE: u8 = 1;\n// pub global ACTION_RESULT_EVENT_VALUE_MULTIPLIER: u8 = 2;\n// pub global ACTION_RESULT_EVENT_VALUE_FIXED_ADDITION: u8 = 3;\n// pub global ACTION_RESULT_EVENT_COORD_IDX: u8 = 4;\n// pub global ACTION_RESULT_EVENT_RADIUS: u8 = 5;\n// pub comptime fn to_action_result_event(event_type: Quoted, subtype: Quoted, val_mul: Quoted, val_add: Quoted, coord_idx: Quoted, radius: Quoted) -> Quoted {\n//     quote { ($event_type, $subtype, $val_mul, $val_add, $coord_idx, $radius)}\n// }\n// pub comptime fn get_type_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_subtype_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_value_multiplier_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_value_addition_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n// pub comptime fn get_coord_idx_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.4 }\n// }\n// pub comptime fn get_radius_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.5 }\n// }\n// pub type ActionResultEventDefinition = (u8, u8, u8, u8, u8, u8);\n\nuse skplg::{softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionResultEffect::{get_action_def_result_effect_base_index, get_action_def_result_effects_byte_size};\n\npub type ActionDefDefResultEventRow = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefResultEventRow> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EVENTS: [DEF_ROW<ActionDefDefResultEventRow>] = [\n    action_def_def(quote { result_event_value_fixed_addition }, 8, |fixed_addition|quote { result_event_value += $fixed_addition as u32; }),\n    action_def_def(quote { result_event_value_scaled_by_progress }, 4, |factor|quote { result_event_value += ($factor as u32) * (actor_progress as u32); }),\n    action_def_def(quote { result_event_coords_idx }, 2, |coords_idx|{\n     let check = softassert(quote { is_valid }, quote { $coords_idx < 3 }, quote { f\"Invalid event coord idx: {result_event_coords_idx} does not fit in u8!\" });\n      quote {\n        let result_event_coords_idx: u8 = $coords_idx;\n        $check\n        result_event_coords = coords[result_event_coords_idx & 3];\n      }\n    }),\n    action_def_def(quote { result_event_type }, 4, |event_type|quote { result_event_type = $event_type; }),\n    action_def_def(quote { result_event_subtype }, 8, |event_subtype|quote { result_event_subtype = $event_subtype; }),\n    action_def_def(quote { result_event_radius }, 6, |event_radius|quote { result_event_radius = $event_radius; })\n];\ncomptime fn get_action_def_result_event_base_index() -> u32 {\n  get_action_def_result_effect_base_index() + get_action_def_result_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_event_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EVENTS)\n}\n\n\ncomptime fn derive_action_def_def_result_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EVENTS);\n// }\n#[derive_action_def_def_result_event_struct]\npub struct ActionResultEvent {\n  pub register: [u8; 32]\n}\nimpl ActionResultEvent {\n  #[derive_action_def_result_event_struct_new]\n  pub fn new() -> ActionResultEvent {\n    ActionResultEvent { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_event_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[export]\n#[derive_action_def_def_result_event_builder]\npub fn build_action_def_result_event() -> pub ActionResultEvent { ActionResultEvent::new() }\n\npub comptime fn build_result_event(event_idx: u32, events_collection_varname: Quoted, valid_varname: Quoted, register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_event_base_index();\n  let event_data_start_idx = base_index + event_idx * get_action_def_result_event_byte_size();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EVENTS, event_data_start_idx, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  //let value_valid_msg = f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\";\n  // let value_valid = softassert(valid_varname, quote { result_event_value <= 255 as u32 }, quote { f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\" });\n  let full_result = quote {\n    let event_idx = $event_idx as u8;\n    let mut result_event_type: u8 = 0;\n    let mut result_event_subtype: u8 = 0;\n    let mut result_event_coords: (u8,u8) = (NOWHERE, NOWHERE);\n    let mut result_event_value: u32 = 0;\n    let mut result_event_radius: u8 = 0;\n    $result\n    // $value_valid\n    if (result_event_value > 255) {\n      result_event_value = 255;\n    }\n\n    $events_collection_varname.push(build_subtype_value_event(\n      result_event_type,\n      actor_id,\n      result_event_coords.0,\n      result_event_coords.1,\n      result_event_value as u8,\n      result_event_subtype,\n      result_event_radius\n    ));\n  };\n  // println(full_result);\n  full_result\n}\n\npub comptime fn set_action_def_result_event_in_action_def(event: Quoted, event_count: u32, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let mut base_index = get_action_def_result_event_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  // println(\"start\");\n  for event_idx in 0..event_count {\n    let idx = event_idx * get_action_def_result_event_byte_size();\n    for i in 0..get_action_def_result_event_byte_size() {\n      let destination_idx = base_index + idx + i;\n      result = quote { $result $action_def[$destination_idx] = $event[$event_idx].register[$i]; };\n      // result = quote { $result $action_def += $event[$event_idx].register[$i] as Field * $multiplier; };\n      // multiplier *= 2;\n    }\n  }\n  //println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_event_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[derive_frontend_action_def_result_event_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEvent {}\n\n\npub comptime fn derive_frontend_action_def_result_event_struct_builder(param_name: Quoted, event_idx: u32) -> Quoted {\n  let idx = get_action_def_result_event_base_index() + event_idx * get_action_def_result_event_byte_size();\n  let content = derive_frontend_action_def_struct_builder(param_name, idx, ACTION_DEF_DEF_RESULT_EVENTS);\n  quote { FrontendActionDefResultEvent { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEvent.nr"}},"names":["turn"],"brillig_names":["directive_invert","directive_to_radix","directive_integer_quotient"]}