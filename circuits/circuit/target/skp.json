{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":1051236900682815443,"abi":{"parameters":[{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"my_chars_input","type":{"kind":"field"},"visibility":"private"},{"name":"my_char_actions","type":{"kind":"array","length":30,"type":{"kind":"field"}},"visibility":"private"},{"name":"my_obstacles_input","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"},{"name":"actions","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"},{"name":"move","type":{"kind":"field"},"visibility":"public"},{"name":"enemy_advance","type":{"kind":"field"},"visibility":"public"},{"name":"enemy_objects","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},{"name":"enemy_events","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"public"},{"name":"my_result_advance","type":{"kind":"field"},"visibility":"public"},{"name":"my_result_objects","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},{"name":"my_result_events","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"public"},{"name":"gamestate_before_hash","type":{"kind":"field"},"visibility":"public"},{"name":"gamestate_after_hash","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"573124631071810673":{"error_kind":"string","string":"Invalid turn"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11167361122731473993":{"error_kind":"fmtstring","length":27,"item_types":[]},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"}}},"bytecode":"","debug_symbols":"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ZqtXlztWV/Vls9Wryx2rq/qy2erV5Q41BXT5stnq1fvuWF3VWLPVl7Fmqy9fNlu9dt8da7b6MtZs9WWs2erLl81Wr7UZY81WX8aarb5822z1yn13rNnqy1iz1ZexZqsvXzZbvXbfHWu2+jLWbPVlrNnqy5fNVq+1GWPNVl/Gmq2+fNts9cp9d6zZ6stYs9WXsWarL182W7123x1rtvoy1mz1ZazZ6suXzVavthljdVVjzVZfvm22euW+O9Zs9WWs2erLWLPVly+brV677441W30Za7b6MtZs9eXLZqvX2oyxZqsvY81WX75ttnrlvjvWbPVlrNnqy1iz1Zcvm61eu++ONVt9GWu2+jLWbPX1y2arV9qMdazZ6utYs9XXb5utrt9310nGWu5QXdU61mz19ctmq1fvu0N1VetYs9XXsWarr182W73WZow1W30da7b6+m2z1Sv33bFmq69jzVZfx5qtvn7ZbPXqfXesrmqs2errWLPV1y+brV5rM8aarb6ONVt9/bbZ6pX77liz1dexZquvY81WX79stnrtvjvWbPV1rNnq61iz1dcvm61eazPGmq2+jjVbff222eqV++5Ys9XXsWarr2PNVl+/bLZ67b471mz1dazZ6utYs9XXL5utXmszxpqtvo41W339ttnqtfvuWF3VWLPV17Fmq69fNlu9dt8da7b6OtZs9XWs2errl81Wr7UZY81WX8earb5+22z12n13rK5qrNnq61iz1dcvm61eu++ONVt9HWu2+jrWbPX1y2ar19qMsWarr2PNVl+/bbZ65b471mz1dazZ6utYs9XXL5utXrvvjjVbfR1rtvo61mz19ctmq9fajLFmq69jzVZfv222euW+O9Zs9XWs2errWLPV1y+brV677441W30da7b6OtZs9fXLZqtX24yxuqqxZquv3zZbvXLfHWu2+jrWbPV1rNnq65fNVq/dd8earb6ONVt9HWu2+vpls9UrbYaMNVtdxpqtLt82W12/78pYs9VlkrGWO9S8Kvmy2eqV+66MNVtdxpqtLmPNVpcvm61eazPGmq0uY81Wl2+brV657441W13Gmq0uY81Wly+brV69747VVY01W13Gmq0uXzZbvdZmjDVbXcaarS7fNlu9ct8da7a6jDVbXcaarS5fNlu9et8dq6saa7a6jDVbXb5stnqtzRhrtrqMNVtdvm22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9Vqu+Fqup6rqtVxPVdVruZ6qqtdyPfWrei3XV1V1+Q7lysv1VVVdvvu58nJ9VVUP663eXO7DqqrWcn1VVQ/rrd5crq+qylVv9dg9rbd647r7tN7qreX6qqpc9VZ/LVdclRlP663eWq6nLqCv5fqqqlz1Vn8t11dV5aq3+mu5vqoqV73VX8v1VVW56q3+Wq6vqspVb/XXcj11AX0t11dV5aq3euxc9VZ/LddTv6rXcn1VVa56q7+WK76W66lf1Wu5vqoqV73VX8v11AX0tVxfVZWr3uqv5fqqqlz1Vn8t11dV5aq3+mu5vqoqV73VX8v1VVW56q3+Wq6nLqCxe1pv9cZ111Vv9ddyfVVVrnqrv5Yrrq67rnqrv5brq6py1Vv9tVxfVZWr3uqxc9Vb/bVcX1WVq97qr+X6qqpc9VZ/LddXVeWqt/prub6qKle91V/L9VVVueqt/lqupy6gr+X6qqpc9VZ/LVd8LddXv6qn9VZvXHdd9VZ/LddXVeWqt3rsntZbvVFmuOqt/lqury6gT+ut3rjuuuqt/lqur6rKVW/113J9VVWuequ/luuqqup99Vbvn9ZbvV5m9L56q/e+eqv3nXi67va+eqv3vnqr9756q/dP663euu76qqp89VbvffVW75/WW71RZvjqrd776q3eP623euO666u3eu+rt3rvq7d6/7Te6o3rrq/e6r2v3uq9r97q/dN6qzfKDF+91XtfvdX7p/VWb1x3ffVW7331Vu999Vbvn9ZbvXHd9dVbvffVW7331Vu9f1pv9UaZ4au3eu+rt3r/tN7qreuur6rKV2/13ldv9f5pvdUb111fvdV7X73Ve1+91fun9VZvlBm+eqv3vnqr90/rrd667vqqqnz1Vu999Vbvn9ZbvXHd9dVbvffVW7331Vu9f1pv9UaZ4au3eu+rt3r/tN7qjeuur97qva/e6r2v3ur903qrN667vnqr9756q/e+eqv3T+ut3igzfPVW7331Vu+f1lu9cd311Vu999VbvffVW71/Wm/1xnXXV2/13ldv9d5Xb/X+ab3VW2WGr6rKV2/1/mG91cOUPssNubTcZ1VVzeU+q6pqLld8LfdZVVXshs9yo/SF5T6rqmou91lVVXO5z6qqmst9VlUV+m5Z7vB7uQ/rrd5c7sOqqtZyfVVVD+ut3lyu+Frus6qq5nJ9VVUP663eXK6vquphvdUbyx0e1lu9UWYMD+ut3lzuw6qq1nJdVVVDJ76W66qqGh7WW725XFdV1fCw3urN5fqqqh7WW725XF9V1cN6qzeX+7CqqrVccXXdfVhv9eZyfVVVD+ut3lyur6rqYb3VW8t9WG/15nKfVVU1l+urqnpYb/XmcsXXcn1VVQ/rrd5crq+q6mG91ZvL9VVVPay3enO5vqqqh/VWby7XV1X1sN7qzeU+rKpqLddXVfWw3urN5fqqqh7WW7213If1Vm9ddx/WW725XF9V1cN6qzeXK67KjIf1Vm8u92FVVWu5vqqqh/VWby7XV1X1sN7qzeX6qqoe1lu9uVxfVdXDeqs3l+urqnpYb/Xmch9WVbWW66uqelhv9dZyH9ZbvblcV/2qhof1Vm9ddx/WW725XPG1XFf9qoaH9VZvlRkP663eXO7DqqrWcn1VVQ/rrd5crq+q6mG91ZvL9VVVPay3enO5vqqqh/VWby7XV1X1sN7qzeW66gI6PKy3euu666u3+uCrt/rgq7f68LDe6q3rrq/e6oOv3uqDr97qw8N6qzfLDF9Vla/e6sPTeqs3rru+eqsPvnqrD756qw8P663euu766q0++OqtPvjqrT48rLd6o8wYffVWH331Vh+f1lu9ft0dffVWHzvxtVxX/arGh/VWb1x3R1+91UdfvdVHX73Vx4f1Vm+VGb56q4++equPT+ut3rju+uqtPvrqrT766q0+Pqy3evO666uq8tVbffTVW318WG/1Vpnhq7f66Ku3+vi03uqN666v3uqjr97qo6/e6uPDeqs3r7u+qipfvdVHX73Vx4f1Vm+VGb56q4++equPT+ut3rju+uqtPvrqrT766q0+Pqy3euu666u3+uirt/roq7f6+LDe6q0yw1dv9dFXb/Xxab3VG9ddX73VR1+91UdfvdXHh/VWb113ffVWH331Vh999VYfH9ZbvVVm+OqtPvrqrT4+rbd667rrq6ry1Vt99NVbfXxYb/XWdddXb/XRV2/10Vdv9fFhvdVbZYav3uqjr97q49N6q7euu76qKl+91UdfvdXHh/VWb113ffVWH331Vh999VYfH9ZbvVVm+OqtPvrqrT4+rbd647rrq7f66Ku3+uirt/r4sN7qreuur97qo6/e6qOv3urjw3qrt8oMX73VR1+91cen9VZvXHd99VYfffVWH331Vh8f1lu9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","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"64":{"source":"// mod action;\n// use action::Action;\n// mod character;\n// use character::Character;\n// use character::parse_characters;\n// mod event;\n// use event::Event;\n// mod obstacle;\n// use obstacle::Obstacle;\n// mod map;\n// use dep::std;\n\n// // MAP\n// global WIDTH_BITS: u8 = 5;\n// global WIDTH_MASK: u8 = (1 << WIDTH_BITS) - 1;\n// global WIDTH: u8 = 1 << WIDTH_BITS;\n// global HEIGHT_BITS: u8 = 4;\n// global HEIGHT_MASK: u8 = (1 << HEIGHT_BITS) - 1;\n// global HEIGHT: u8 = 10;\n// global NOWHERE: u8 = 255;\n\n// // CLASSES\n// global UNKNOWN_CLASS: u8 = 0;\n// global ARCHER: u8 = 1;\n// global RITUALIST: u8 = 2;\n// global ROGUE: u8 = 3;\n// global KNIGHT: u8 = 4;\n// global MAGE: u8 = 5;\n// global CLASS_BITS: u8 = 3;\n// global CLASS_MASK: u8 = (1 << CLASS_BITS) - 1;\n// global CLASS_COUNT: u8 = 6;\n\n// // ACTIONS\n// global WAIT: u8 = 0;\n// global SNEAK: u8 = 1;\n// global MOVE: u8 = 2;          // => SEE_COLUMN (depr: MOVE)\n// global RITUAL: u8 = 3;        // => SEE_RITUAL | WIN\n// global SEARCH: u8 = 4;        // => SEE_SEARCH_TRAP\n// global ATTACK: u8 = 5;        // => RECEIVE_ATTACK | DESTROY // affects my obstacles; TODO: with more attack types might also affect other own characters\n// global SET_TRAP: u8 = 6;\n// global CAST_FIREBALL: u8 = 7; // => SEE_CAST | SEE_SPELL | DESTROY // affects other characters if status == FIREBALL_ROUNDS_FOR_CAST\n// global DRAW: u8 = 8;          // => SEE_DRAW\n// global SHOOT: u8 = 9;         // => RECEIVE_ATTACK\n// //global TRIGGER_TRAP = 9;  // => TRIGGERED_TRAP ?????????\n// global DISARM_TRAP: u8 = 10;  // => DESTROY\n// global ACTION_COUNT: u8 = 11;\n\n// // EVENTS\n// global NO_EVENT: u8 = 0 ;\n// global DESTROY: u8 = 1;          // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //use coordinates to determine tile or trap that got destroyed and update map\n// //global DISCOVER = 2;         // actor_id = their_char or their_object when receive - handle to update enemy positions, got health & class (this is for all chars, not just the active one)\n// //global SEE_COLUMN = 2 ;      // y = the column the player sees => update objects list\n// global SEE_MOVE: u8 = 3 ;        // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //handle to update enemy positions => DISCOVER\n// //global SEE_SPELL = 4 ;       // actor_id = their_char when receive - need to handle effect via coordinates, => RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle my obstacles\n// global SEE_SEARCH_TRAP: u8 = 5 ; // actor_id = their_char when receive - need to create found trap event if there is a trap nearby => FOUND_TRAP\n// global SEE_RITUAL: u8 = 6 ;      // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_CAST: u8 = 7;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_DRAW: u8 = 8;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// //global RECEIVE_DAMAGE = 9;   // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client\n// global RECEIVE_ATTACK: u8 = 10;  // actor_id = 0 when receive - need to handle damage => // no need to events ... health of visible assets gets sent anyway and invisible ones will be updated during discovery //RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle in my obstacles\n// global TRIGGERED_TRAP: u8 = 11;  // actor_id = my_char when receive - need to handle damage (for now, later on we might want to handle other effects as well) => RECEIVE_DAMAGE\n// global FOUND_TRAP: u8 = 12;      // actor_id = my_char when receive - no need to handle, only important to have on-chain for the client\n// global WIN: u8 = 13;\n// global LOSE: u8 = 14;\n// global EVENT_COUNT: u8 = 15;\n\n// // ATTACKS\n// global ATTACK_MELEE: u8 = 0;\n// global ATTACK_RANGED: u8 = 1;\n// global ATTACK_FIREBALL: u8 = 2;\n// global ATTACK_COUNT: u8 = 3;\n// // TODO: instead of enum, use a global array of structs with damage, range, etc.\n\n\n// // TILES\n// global EMPTY: u8 = 0;\n// global WALL: u8 = 6;\n// global WATER: u8 = 7;\n// global UNKNOWN_CLASS_TILE: u8 = 8;\n// global NON_EMPTY_WALKABLE_TILE_MIN: u8 = 9;\n// global FLAG: u8 = 9;\n// global TRAP: u8 = 10;\n// global TRAP_USED: u8 = 11;\n// global TRAP_FOUND: u8 = 12;\n// global BODY: u8 = 13;\n// global BODY_LOOTED: u8 = 14;\n// global FOG: u8 = 15;\n// global TILE_COUNT: u8 = 16;\n\n// // STATUS\n// #[export]\n// global RITUAL_ROUNDS_FOR_WIN: u8 = 16;\n// global FIREBALL_ROUNDS_FOR_CAST: u8 = 3;\n// global DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MIN_DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MAX_DRAW_ROUNDS_FOR_SHOOT: u8 = 3;\n// global STATUS_BITS: u8 = 4;\n// global STATUS_MASK: u8 = (1 << STATUS_BITS) - 1;\n// global STATUS_COUNT: u8 = 16 ; // just to be more in line with the other constants, actually used as a counter\n\n// // GAMEPLAY\n// global VIEW_DISTANCE: u8 = 6;\n// global MAX_TRAPS: Field = 15; // note: only lowest bit of first byte of field is usable! => ! Field = 1 bit + 31 bytes!\n// global TRAPS_BUFFER_SIZE: Field = 16;\n// global TRAPS_BUFFER_MASK: Field = 15; // has to be 2^n - 1\n// global MAX_ACTIONS: u32 = 4;\n// global MAX_EVENTS: u32 = 4; // = MAX_ACTIONS // NO! handle traps in a different way (by passing as argument!)+ 4 (2 FOUND_TRAP + WIN/LOSE + 1 reserved)\n// global MAX_OBSTACLES: u32 = 24;\n// global MAX_CHARACTERS: u32 = 5;\n//global SERIALIZED_OBSTACLE_BYTE_SIZE: u32 = 3;\n//global SERIALIZED_OBSTACLES_ARRAY_SIZE: u32 = 3; // TODO: we take 3 because 3 x 8 = MAX_OBSTACLES ... should assert on this (MAX_OBSTACLES + MAX_CHARACTERS + 7) / 8;\n//global SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE: u32 = SERIALIZED_OBSTACLES_ARRAY_SIZE + 1; // +1 because enemy characters are also serialized as obstacles\n//global SERIALIZED_OBSTACLES_PER_FIELD: u32 = 8; // TODO: need to verify that SERIALIED_OBSTACLES_ARRAY_SIZE * SERIALIZED_OBSTACLES_PER_FIELD = MAX_OBSTACLES!\n//global SERIALIZED_EVENT_BYTE_SIZE: u32 = 7;\n//global SERIALIZED_EVENTS_ARRAY_SIZE: u32 = 1; // MAX_EVENTS / SERIALIZED_EVENTS_PER_FIELD => 4 / 4 = 1\n//global SERIALIZED_EVENTS_PER_FIELD: u32 = 4; // 31 / 7 = 4\n//global SERIALIZED_ACTION_BYTE_SIZE: u32 = 5;\n//global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n//global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4; // could be up to 6, but we only use 4\n// global UNREADABLE_BYTES_PER_FIELD: u32 = 1;\n\n// #[export]\n// fn get_actor_from_move(mut move: u32) -> u8 {\n//     if (move % 2) == 1 {\n//         move -= 1; //((move % 10) - 1) >> 1 // actually not needed ... but clearer this way\n//     }\n//     let single_digit: u32 = (move % 10 as u32) >> 1;\n//     single_digit as u8\n// }\n\nuse skpl::{turn}; //, SERIALIZED_OBSTACLES_ARRAY_SIZE, SERIALIZED_ACTIONS_ARRAY_SIZE, SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE };\nuse skpl::{SerializedArenaActionDefinitions, SerializedArenaActions, SerializedArenaCharacterRoster, SerializedArenaEnemyObstacles, SerializedArenaEvents, SerializedArenaObstacles};\n\n\nfn main(\n    // My Secret State\n    secret: Field,\n    my_chars_input: Field,\n    my_char_actions: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    actions: SerializedArenaActions,\n    // Common Inputs\n    move: pub Field,\n    // Enemy Inputs\n    enemy_advance: pub Field,\n    enemy_objects: pub SerializedArenaEnemyObstacles,\n    enemy_events: pub SerializedArenaEvents, //MAX_EVENTS],\n    // My Results\n    my_result_advance: pub Field, // 1 bit win, 1 bit lose, 1 bit reserved, 5 bits advance\n    my_result_objects: pub SerializedArenaEnemyObstacles,\n    my_result_events: pub SerializedArenaEvents,\n    // Gamestate Hashes\n    gamestate_before_hash: pub Field,\n    gamestate_after_hash: pub Field,\n) {\n    // let x = my_char_actions.map(|y|y.to_be_bytes::<32>());\n    // let mut z = [0; 30];\n    // for i in 0..30 {\n    //   z[i] = std::field::bytes32_to_field(x[i]);\n    // }\n    // let (events_valid, events) = Event::parse_their_events(enemy_events);\n    // assert(events_valid, f\"Failed to parse their events {events}\");\n    // let (valid, my_obstacles_parsed) = parse_my_obstacles(my_obstacles, events);\n    // assert(valid, f\"Failed to parse my obstacles {my_obstacles}\");\n    let valid = turn(secret, my_chars_input, my_char_actions, my_obstacles_input, actions, move as u32, enemy_advance as u8, enemy_objects, enemy_events, my_result_advance as u8, my_result_events, my_result_objects, gamestate_before_hash, gamestate_after_hash);\n    assert(valid, \"Invalid turn\");\n    // // Validate global constants (to make sure one didn't change one without updating dependet ones)\n    // assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n    // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes();\n    // assert(secret_be_bytes.len() == 32);\n    // let my_chars_be_bytes: [u8; 32] = my_chars.to_be_bytes();\n    // assert(my_chars_be_bytes.len() == 32);\n    // let gamestate_before_hash_calculated = get_data_hash(secret_be_bytes, my_chars_be_bytes, my_obstacles);\n    // let gamestate_before_hash_calculated_field = std::field::bytes32_to_field(gamestate_before_hash_calculated);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n\n    // // TODO: Validate map => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    // let events: [Event; MAX_EVENTS] = Event::parse_events(events);\n    \n    // let side = move as u1;\n    // let mut my_chars = parse_characters(my_chars, events, enemy_advance, side);\n\n    // let actor_id = get_actor_from_move(move);\n    // let mut actor = my_chars[actor_id]; //Character::parse(actor_id, my_chars, events);\n    \n    // let actions = Action::parse_actions(actions); // actions.map(|action| Action::from_field(action));\n    \n    // assert(MAX_OBSTACLES == 24);\n    // let mut my_obstacles_parsed = Obstacle::parse_my_obstacles(my_obstacles, events).as_array();\n    // // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    // // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n    // let enemy_objects_parsed = Obstacle::parse_their_obstacles(enemy_objects);\n\n    // let mut energy: u8 = 12;\n    // let mut result_events_calculated: [Event] = &[];\n    // for i in 0..MAX_ACTIONS {\n    //     // TODO: ensure that if actor committed suicide, it is not allowed to do any more actions\n    //     let action = actions[i];\n    //     let result = action.execute(side, enemy_advance, actor, energy, my_obstacles_parsed, enemy_objects_parsed);\n    //     let result_event = result.0;\n    //     actor = result.1;\n    //     energy = result.2;\n        \n    //     my_chars = my_chars.map(|c| wb_apply_damage_to_char(c, result_event, actor));\n    //     my_obstacles_parsed = my_obstacles_parsed.map(|obstacle| update_my_obstacle(obstacle, result_event));\n\n    //     result_events_calculated = result_events_calculated.push_back(result_event);\n    // }\n    // let result_events_calculated = Event::serialize_events(result_events_calculated);\n    // assert(result_events_calculated.len() == SERIALIZED_EVENTS_ARRAY_SIZE);\n    // for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n    //     let result_event_calculated = result_events_calculated[i];\n    //     let result_event_should = my_result_events[i];\n    //     assert(result_event_should == result_event_calculated, f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\");\n    // }\n\n    // // send death events => no need\n\n    // // determine view range\n    // let mut my_advance_calculated = 0;\n    // if side == 0 {\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x > my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated += VIEW_DISTANCE;\n    // } else {\n    //     my_advance_calculated = WIDTH - 1;\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x < my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated -= VIEW_DISTANCE;\n    // }\n    // assert(my_advance == my_advance_calculated, f\"{my_advance} != {my_advance_calculated}\");\n\n    // // validate result\n    // let serialized_characters = serialize_chars(my_chars);\n    // let serialized_obstacles: [Field] = Obstacle::serialize_obstacles(side, enemy_advance, my_obstacles_parsed);\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // // println(secret);\n    // // println(serialized_characters);\n    // // println(serialized_obstacles);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    // let new_hash_bytes = get_data_hash(secret_be_bytes, serialized_characters_be_bytes, serialized_obstacles.as_array());\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    // let serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1] = serialized_obstacles.push_back(serialize_chars_as_obstacles(my_chars)).as_array();\n    // for i in 0..my_result_objects.len() {\n    //     let my_result_object = my_result_objects[i];\n    //     let serialized_obstacle = serialized_obstacles[i];\n    //     assert(my_result_object == serialized_obstacle, f\"{i}: {my_result_object} != {serialized_obstacle}\");\n    // }\n    // assert(new_hash == gamestate_after_hash, f\"{new_hash} != {gamestate_after_hash}\");\n}\n\n// fn wb_apply_damage_to_char(mut c: Character, event: Event, actor: Character) -> Character {\n//     if c.id == actor.id {\n//         c = actor;\n//     }\n//     apply_damage_to_char(c, event)\n// }\n\n// fn apply_damage_to_char(c: Character, event: Event) -> Character {\n//     let dmg = event.get_applied_damage_to_my_asset(c.x, c.y, c.class);\n//     Character {\n//         id: c.id,\n//         x: c.x,\n//         y: c.y,\n//         class: c.class,\n//         health: safe_subtract_dmg(c.health, dmg),\n//         status: c.status,\n//         target_x: c.target_x,\n//         target_y: c.target_y,\n//         has_been_seen: c.has_been_seen,\n//         is_hidden: c.is_hidden,\n//         damage_mod: c.damage_mod,\n//     }\n// }\n// fn update_my_obstacle(obstacle: Obstacle, event: Event) -> Obstacle {\n//     let dmg = event.get_applied_damage_to_my_asset(obstacle.x, obstacle.y, obstacle.obstacle_type);\n//     Obstacle {\n//         health: safe_subtract_dmg(obstacle.health, dmg),\n//         id: obstacle.id,\n//         x: obstacle.x,\n//         y: obstacle.y,\n//         obstacle_type: obstacle.obstacle_type,\n//     }\n// }\n\n// fn get_data_hash(secret: [u8], characters: [u8], obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> [u8; 32] {\n//     assert(secret.len() == 32);\n//     assert(characters.len() == 32);\n\n//     let mut data: [u8; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32] = [0; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32];\n//     for i in 0..32 {\n//         data[i] = secret[i];\n//         data[i + 32] = characters[i];\n//     }\n//     let offset = 32 + 32;\n//     for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//         let obstacle: [u8; 32] = obstacles[i].to_be_bytes();\n//         assert(obstacle.len() == 32);\n//         for j in 0..32 {\n//             data[offset + i * 32 + j] = obstacle[j];\n//         }\n//     }\n//     // let offset = WIDTH * HEIGHT + 32 * 3;\n//     // for i in 0..10 {\n//     //     data[offset + i * 4] = (searched_traps[i] & 255) as u8;\n//     //     data[offset + i * 4 + 1] = ((searched_traps[i] >> 8) & 255) as u8;\n//     //     data[offset + i * 4 + 2] = ((searched_traps[i] >> 16) & 255) as u8;\n//     //     data[offset + i * 4 + 3] = ((searched_traps[i] >> 24) & 255) as u8;\n//     // }\n//     std::hash::blake3(data)\n// }\n\n// fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> Field {\n//     assert(MAX_CHARACTERS <= 5);\n//     let mut result: [u8; 32] = [0; 32];\n//     for i in 0..MAX_CHARACTERS {\n//         let serialized = chars[i].serialize();\n//         for j in 0..6 {\n//             result[2 + i * 6 + j] = serialized[j];\n//         }\n//     }\n//     std::field::bytes32_to_field(result)\n// }\n\n// fn serialize_chars_as_obstacles(chars: [Character; MAX_CHARACTERS]) -> Field {\n//     let mut result: [u8; 32] = [0; 32];\n//     for i in 0..MAX_CHARACTERS {\n//         let char_as_obstacle = chars[i].to_obstacle();\n//         let serialized = char_as_obstacle.serialize();\n//         result[2 + i * 3] = serialized[0];\n//         result[2 + i * 3 + 1] = serialized[1];\n//         result[2 + i * 3 + 2] = serialized[2];\n//     }\n//     std::field::bytes32_to_field(result)\n// }\n\n// fn safe_subtract_dmg(a: u8, b: u16) -> u8 {\n//     let mut result = 0;\n//     if (a as u16) > b {\n//         result = a - (b as u8);\n//     }\n//     result\n// }\n\n// fn test_result_object_builder(chars: [Character; MAX_CHARACTERS], obs: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1] {\n//     let mut result: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1];\n//     for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//         result[i] = obs[i];\n//     }\n//     result[SERIALIZED_OBSTACLES_ARRAY_SIZE] = serialize_chars_as_obstacles(chars);\n//     result\n// }\n\n// fn test_helper_roster(actor: Character, mut chars: [Character; MAX_CHARACTERS]) -> [Character; MAX_CHARACTERS] {\n//     chars[actor.id] = actor;\n//     chars\n// }\n\n// fn test_helper_execute_move(move: u32, actor: Character, advances: [u8; 2], secret: [Field; 2], last_hashes: [Field; 2], chars: [[Character; MAX_CHARACTERS]; 2], obs: [[Obstacle; MAX_OBSTACLES]; 2], actions: [Action], my_events: [Event], their_events: [Event]) -> (u32, [Character; MAX_CHARACTERS], Field) {\n//     let side = move as u1;\n//     let other_side = (side as u8 + 1) as u1;\n//     let chars_after = test_helper_roster(actor, chars[side]);\n//     let my_obstacles_serialized = Obstacle::serialize_obstacles(side, advances[other_side], obs[side]);\n//     let secret_be_bytes: [u8; 32] = secret[side].to_be_bytes();\n//     assert(secret_be_bytes.len() == 32);\n//     let serialized_chars_after = serialize_chars(chars_after);\n//     let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes();\n//     assert(serialized_chars_after_be_bytes.len() == 32);\n//     let current_hash = std::field::bytes32_to_field(get_data_hash(secret_be_bytes, serialized_chars_after_be_bytes, my_obstacles_serialized)); \n\n//     main(\n//         secret[side],\n//         character::serialize_chars(chars[side]),\n//         my_obstacles_serialized,\n//         Action::serialize_actions(actions),\n//         move,\n//         advances[other_side],\n//         test_result_object_builder(chars[other_side], Obstacle::serialize_obstacles(other_side, advances[side], obs[other_side])),\n//         Event::serialize_events(their_events).as_array(),\n//         advances[side],\n//         Event::serialize_events(my_events).as_array(),\n//         test_result_object_builder(chars_after, my_obstacles_serialized),\n//         last_hashes[side],\n//         current_hash\n//     );\n\n//     (move + 1, chars_after, current_hash)\n// }\n\n// // #[test]\n// // fn test_main() {\n// //     let secrets = [123456789, 9876543210];\n// //     let mut chars = [ character::get_default_characters(0), character::get_default_characters(1) ];\n// //     let mut obs = [ Obstacle::get_default_obstacles(0), Obstacle::get_default_obstacles(1) ];\n// //     let actions = &[\n// //         Action { action: MOVE, actor: 0, target_x: 2, target_y: 1 },\n// //         Action { action: MOVE, actor: 0, target_x: 3, target_y: 1 },\n// //         Action { action: MOVE, actor: 0, target_x: 4, target_y: 1 },\n// //         Action { action: MOVE, actor: 0, target_x: 5, target_y: 1 },\n// //     ];\n// //     let their_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n// //     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n// //     let mut move = 0;\n// //     let mut actor = chars[0][0].move(5, 1);\n// //     let mut last_hashes = [ 0x12b8f97907a05ec6a77da3f70368fa3b02e166c74edab8ea0695d6f406146559, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n// //     let mut advances = [2 + VIEW_DISTANCE, 29 - VIEW_DISTANCE];\n// //     advances[0] = 5 + VIEW_DISTANCE;\n\n// //     let mut side = move % 2;\n// //     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n// //     move = result.0;\n// //     chars[side] = result.1;\n// //     last_hashes[side] = result.2;\n\n// //     side = move % 2;\n// //     let actions = &[\n// //         Action { action: MOVE, actor: 0, target_x: 29, target_y: 1 },\n// //         Action { action: MOVE, actor: 0, target_x: 28, target_y: 1 },\n// //         Action { action: MOVE, actor: 0, target_x: 28, target_y: 0 },\n// //         Action { action: MOVE, actor: 0, target_x: 27, target_y: 0 },\n// //     ];\n// //     let their_events = my_events;\n// //     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n// //     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(27, 0);\n// //     advances[side] = 27 - VIEW_DISTANCE;\n// //     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n// //     move = result.0;\n// //     chars[side] = result.1;\n// //     last_hashes[side] = result.2;\n\n// //     side = move % 2;\n// //     let actions = &[\n// //         Action { action: MOVE, actor: 1, target_x: 1, target_y: 3 },\n// //         Action { action: MOVE, actor: 1, target_x: 0, target_y: 3 },\n// //         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n// //         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n// //     ];\n// //     let their_events = my_events;\n// //     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n// //     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(0, 3);\n// //     //advances[side] = 27 - VIEW_DISTANCE;\n// //     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n// //     move = result.0;\n// //     chars[side] = result.1;\n// //     last_hashes[side] = result.2;\n\n// //     side = move % 2;\n// //     let actions = &[\n// //         Action { action: MOVE, actor: 1, target_x: 29, target_y: 2 },\n// //         Action { action: MOVE, actor: 1, target_x: 29, target_y: 1 },\n// //         Action { action: MOVE, actor: 1, target_x: 28, target_y: 1 },\n// //         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n// //     ];\n// //     let their_events = my_events;\n// //     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n// //     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(28, 1);\n// //     //advances[side] = 27 - VIEW_DISTANCE;\n// //     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n// //     move = result.0;\n// //     chars[side] = result.1;\n// //     last_hashes[side] = result.2;\n// // }\n\n// #[test]\n// fn test_main_fireball_ff() {\n//     let secrets = [123456789, 9876543210];\n//     let mut chars = [\n//         [\n//             Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, status: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0 },\n//             Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0 },\n//             Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0 },\n//             Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0 },\n//             Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, status: 2, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10 },\n//         ], [\n//             Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, status: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0 },\n//             Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0 },\n//             Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0 },\n//             Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0 },\n//             Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, status: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0 },\n//         ]\n//     ];\n//     let mut obs = [ Obstacle::get_default_obstacles(0), Obstacle::get_default_obstacles(1) ];\n//     let actions = &[\n//         Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n//         Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n//         Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n//         Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events: [Event] = &[\n//         Event { event: RECEIVE_ATTACK, actor_id: 3, x: 11, y: 3, subtype: ATTACK_RANGED, value: 50 },\n//         Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0 },\n//         Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0 },\n//         Event { event: NO_EVENT, actor_id: 3, x: 0, y: 0, subtype: 0, value: 0 },\n//     ];\n//     let my_events: [Event] = &[\n//         Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 110 },\n//         Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0 },\n//         Event { event: NO_EVENT, actor_id: 4, x: 0, y: 0, subtype: 0, value: 0 },\n//         Event { event: NO_EVENT, actor_id: 4, x: 0, y: 0, subtype: 0, value: 0 },\n//     ];\n//     let mut move = 8;\n//     let mut actor = chars[0][4].move(9, 7).set_status(0);\n//     let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n//     let mut advances = [12 + VIEW_DISTANCE, 11 - VIEW_DISTANCE];\n\n//     let side = move as u1;\n//     let other_side = (side as u8 + 1) as u1;\n//     let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 55), chars[side][2].take_damage(ATTACK_FIREBALL, 55), chars[side][3].take_damage(ATTACK_FIREBALL, 55), actor ];\n//     let my_obstacles_serialized = Obstacle::serialize_obstacles(side, advances[other_side], obs[side]);\n//     let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes();\n//     assert(secret_be_bytes.len() == 32);\n//     let serialized_chars_after = serialize_chars(chars_after);\n//     let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes();\n//     assert(serialized_chars_after_be_bytes.len() == 32);\n//     let current_hash = std::field::bytes32_to_field(get_data_hash(secret_be_bytes, serialized_chars_after_be_bytes, my_obstacles_serialized)); \n\n//     println(secrets[side]);\n//     println(character::serialize_chars(chars[side]));\n//     println(my_obstacles_serialized);\n//     println(Action::serialize_actions(actions));\n//     println(move);\n//     println(advances[other_side]);\n//     println(test_result_object_builder(chars[other_side], Obstacle::serialize_obstacles(other_side, advances[side], obs[other_side])));\n//     println(Event::serialize_events(their_events));\n//     println(advances[side]);\n//     println(Event::serialize_events(my_events));\n//     println(test_result_object_builder(chars_after, my_obstacles_serialized));\n//     println(last_hashes[side]);\n//     println(f\"Current hash: {current_hash}\");\n//     main(\n//         secrets[side],\n//         character::serialize_chars(chars[side]),\n//         my_obstacles_serialized,\n//         Action::serialize_actions(actions),\n//         move,\n//         advances[other_side],\n//         test_result_object_builder(chars[other_side], Obstacle::serialize_obstacles(other_side, advances[side], obs[other_side])),\n//         Event::serialize_events(their_events).as_array(),\n//         advances[side],\n//         Event::serialize_events(my_events).as_array(),\n//         test_result_object_builder(chars_after, my_obstacles_serialized),\n//         last_hashes[side],\n//         current_hash\n//     );\n// }\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/circuit/src/main.nr"},"68":{"source":"// use crate::{ HEIGHT, WIDTH };\nuse arenalib::{ NO_EVENT, WAIT, SEE_MOVE, WIDTH };\nuse arenalib::{ MAX_ACTIONS, MAX_OBSTACLES };\nuse arenalib::{ SERIALIZED_ACTION_BYTE_SIZE, SERIALIZED_ACTIONS_ARRAY_SIZE, SERIALIZED_ACTIONS_PER_FIELD, VIEW_DISTANCE };\nuse skplg::{softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD};\nuse arenalib::{Action, get_action_actor, get_action_target_x, get_action_target_y, get_action_type, new_action};\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\nuse crate::character::Character;\nuse crate::event::Event;\nuse crate::event::{ build_subtype_value_event }; // , build_value_event\nuse crate::map::{ is_visible, get_distance, can_move_to };\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::{ get_default_obstacles };\nuse arenalib::{MAGE};\nuse arenalib::{MAX_ACTIONS_PER_CHARACTER, MAX_ENEMY_OBSTACLES};\n// use crate::ResolvedAction::ResolvedAction;\n// use crate::actionDefinition::{ build_move_action };\nuse arenalib::{apply_action_result_effects, apply_action_pre_calc_effects, validate_action_requirements, build_result_event};\nuse arenalib::arena_action_def_builder;\nuse super::obstacle::new_obstacle;\n\n// use crate::{ACTION_RESULT_COORDINATES_IDX_SELF, ACTION_RESULT_COORDINATES_IDX_TARGET, ACTION_RESULT_COORDINATES_IDX_INVISIBLE};\n// use crate::{SEE_CAST, SEE_DRAW, SEE_RITUAL, SEE_SEARCH_TRAP, RECEIVE_ATTACK, DISARMED_TRAP, ADD_OBSTACLE, WIN};\n// use crate::action_builder;\n\n\n\n// global ACTION_TYPE: u8 = 0;\n// global ACTION_ACTOR: u8 = 1;\n// global ACTION_TARGET_X: u8 = 2;\n// global ACTION_TARGET_Y: u8 = 3;\n\nglobal SEEN_EVENT_IDX: u32 = 1;\nglobal UNSEEN_EVENT_IDX: u32 = 0;\nglobal WORLD_EVENT_IDX: u32 = 2;\nglobal SELF_EVENT_IDX: u32 = 3;\n\npub fn execute_action(\n    action: Action,\n    enemy_advance: u8,\n    actor: Character,\n    mut energy: u8,\n    my_obstacles: [Obstacle; MAX_OBSTACLES],\n    their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]\n) -> (bool, Event, Event, Event, Character, u8) /*where T: ResolvedAction */{\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    //let action_def = c.resolve_action(action.register[action.base_index + ACTION_TYPE]);\n        //let mut result_event: Event = build_std_event(NO_EVENT, c.id, 0, 0);\n        //let mut result_char = c;\n        //let mut required_energy = 0;\n        let mut is_valid = true;\n        //let action_def = c.resolve_action(get_action_type(action));\n        // let mut result_valid = true;\n\n        // let need_sneak = get_action_type(action) == SNEAK;\n        //let can_sneak = c.can_sneak();\n        // let need_move = get_action_type(action) == MOVE | get_action_type(action) == SNEAK;\n        // let can_move = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles);\n        // let need_target_is_neighbor = get_action_type(action) == SNEAK | get_action_type(action) == MOVE | get_action_type(action) == ATTACK | get_action_type(action) == SEARCH | get_action_type(action) == DISARM_TRAP;\n        //let target_is_neighbor = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        // let need_target_is_not_self = get_action_type(action) == ATTACK | get_action_type(action) == SHOOT;\n        // let target_is_not_self = (c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action));\n        // let need_ritual = get_action_type(action) == RITUAL;\n        //let can_ritual = c.can_ritual();\n        // let need_search = get_action_type(action) == SEARCH;\n        //let can_search = c.can_search();\n        //let can_attack = is_neighbor & not_self;\n        // let need_can_cast_fireball = get_action_type(action) == CAST_FIREBALL;\n        // let min_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if get_action_type(action) == SHOOT {\n        //     MIN_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let max_rounds_to_finish = if get_action_type(action) == CAST_FIREBALL {\n        //     FIREBALL_ROUNDS_FOR_CAST\n        // } else if get_action_type(action) == RITUAL {\n        //     RITUAL_ROUNDS_FOR_WIN\n        // } else if (get_action_type(action) == DRAW) | (get_action_type(action) == SHOOT) {\n        //     MAX_DRAW_ROUNDS_FOR_SHOOT\n        // } else {\n        //     0\n        // };\n        // let need_check_status = get_action_type(action) == CAST_FIREBALL | get_action_type(action) == RITUAL | get_action_type(action) == DRAW | get_action_type(action) == SHOOT;\n        // let can_cast_fireball = c.can_cast_fireball(); // & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        // let can_draw = c.can_shoot(); // & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_shoot = c.can_shoot(); // & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        // let can_disarm = c.can_disarm();\n        // let is_valid =\n        //     (get_action_type(action) == WAIT) |\n        //     ((get_action_type(action) == SNEAK) & can_sneak & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == MOVE) & can_move & target_is_neighbor) |\n        //     ((get_action_type(action) == RITUAL) & can_ritual) |\n        //     ((get_action_type(action) == SEARCH) & can_search & target_is_neighbor) |\n        //     ((get_action_type(action) == ATTACK) & target_is_neighbor & target_is_not_self) |\n        //     ((get_action_type(action) == CAST_FIREBALL) & can_cast_fireball & result_char.status <= max_rounds_to_finish) |\n        //     ((get_action_type(action) == DRAW) & can_draw) |\n        //     ((get_action_type(action) == SHOOT) & can_shoot & target_is_not_self) |\n        //     ((get_action_type(action) == DISARM_TRAP) & can_disarm & target_is_neighbor);\n\n\n\n\n        // need to adapt status first in case of action interruption!\n\n    //let action_type = action.get_action_type(action);\n    //let action_def = c.resolve_action(action_type);\n    let action_type = get_action_type(action);\n\n    let actor_id = actor.get_id();\n    let actor_x = actor.get_x();\n    let actor_y = actor.get_y();\n    let actor_target_x = actor.get_target_x();\n    let actor_target_y = actor.get_target_y();\n    let actor_last_action = actor.get_last_action();\n    let (action_def_valid, action_def) = actor.get_action(action_type);\n    softassert!(quote { is_valid }, quote { action_def_valid }, quote { f\"Failed to fetch action def of {action_type}\" });\n\n    let action_target_x = get_action_target_x(action);\n    let action_target_y = get_action_target_y(action);\n    let distance = get_distance(actor_x, actor_y, action_target_x, action_target_y);\n\n    // let is_continuous = action.get_action_is_continuous();\n    // let is_not_interrupted = (\n    //     ((!is_continuous) & (action.get_action_result_status_multiplier() != 0)) | // that's the ID of the wait action => leave status, but not continuous\n    //     ((is_continuous) & (action.get_action_req_previous_action() == c.last_action) & (action_target_x == c.get_target_x()) & (action_target_y == c.get_target_y()))\n    // );\n\n\n    let mut actor_progress = actor.get_progress();\n    let mut actor_is_hidden = actor.get_is_hidden() == 1;\n    let actor_is_in_view_range = is_visible(enemy_advance, actor_x);\n    // let max_range_part = get_action_req_max_range(action) as u16;\n    // let mut actor_max_range = max_range_part * max_range_part;\n    let mut is_not_interrupted = true;\n    let mut actor_damage_mod = actor.get_damage_mod();\n    let mut actor_status = actor.get_status();\n    // ~200 gates\n    apply_action_pre_calc_effects!(quote { action_def });\n\n\n///////////////////////////\n    // ~4000 gates\n    validate_action_requirements!(quote { is_valid }, quote { action_def });\n    // // pub global ACTION_NEEDS_TARGET_FREE_SPACE: u8 = 0;  // u1\n    // let target_is_free_space_valid = !action.get_action_req_target_free_space() | can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles);\n    // softassert!(quote { is_valid }, quote { target_is_free_space_valid }, quote { f\"Target space ({action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" });\n    \n    // // pub global ACTION_NEEDS_TARGET_IS_NOT_SELF: u8 = 1; // u1\n    // let target_is_not_self_valid = !action.get_action_req_target_is_not_self() | (c_x != action_target_x) | (c_y != action_target_y);\n    // softassert!(quote { is_valid }, quote { target_is_not_self_valid }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" });\n\n    // // pub global ACTION_NEEDS_STATUS_HIDDEN: u8 = 4; // u1\n    // let char_is_hidden = c.is_hidden == 1;\n    // let char_is_hidden_valid = !action.get_action_req_status_hidden() | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_is_hidden_valid }, quote { f\"Character needs to be hidden to perform action {action_type}\" });\n    \n    // // pub global ACTION_NEEDS_STATUS_VISIBLE: u8 = 2; // u1\n    // let char_is_in_view_range = is_visible(enemy_advance, c_x);\n    // let char_is_fully_visible = char_is_in_view_range & !char_is_hidden;\n    // let char_is_fully_visible_valid = !action.get_action_req_status_visible() | char_is_fully_visible;\n    // softassert!(quote { is_valid }, quote { char_is_fully_visible_valid }, quote { f\"Character must be fully visible for action {action_type}: in_view_range: {char_is_in_view_range} & !hidden {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_NEEDS_STATUS_INVISIBLE: u8 = 3; // u1\n    // let char_invisible_valid = !action.get_action_req_status_invisible() | !char_is_in_view_range | char_is_hidden;\n    // softassert!(quote { is_valid }, quote { char_invisible_valid }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {char_is_in_view_range} || hidden: {char_is_hidden} for enemy_advance {enemy_advance} @ {c_x}\" });\n\n    // // pub global ACTION_MAX_RANGE: u8 = 7; // u6 // TODO: max_range!\n    // let max_range_part = action.get_action_req_max_range() as u16;\n    // let max_range = max_range_part * max_range_part;\n    // let max_range_valid  = distance <= max_range;\n    // softassert!(quote { is_valid }, quote { max_range_valid }, quote { f\"Character is out of range! Distance: {distance} > {max_range}: {{{c_x},{c_y}}} - {{{action_target_x},{action_target_y}}} with {max_range_part}\" });\n\n    // // pub global ACTION_NEEDS_MIN_STATUS: u8 = 8; // u4\n    // let min_status = action.get_action_req_min_status();\n    // let min_status_valid = min_status <= status;\n    // softassert!(quote { is_valid }, quote { min_status_valid }, quote { f\"Character needs min status {min_status} to perform action {action_type}, but only has {status}\" });\n\n    // // pub global ACTION_NEEDS_MAX_STATUS: u8 = 9; // u4\n    // let max_status = action.get_action_req_max_status();\n    // let max_status_valid = max_status >= status;\n    // softassert!(quote { is_valid }, quote { max_status_valid }, quote { f\"Character cannot have a higher status than {max_status} to perform action {action_type}: got {status}\" });\n\n    // // pub global ACTION_NEEDED_ENERGY: u8 = 10;    // u4\n    // let required_energy = action.get_action_req_energy();\n    // let energy_valid = required_energy <= energy;\n    // softassert!(quote { is_valid }, quote { energy_valid }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {required_energy}\" });\n    //////////////////////\n    \n\n        let coords = [\n            (actor_x, actor_y),\n            (action_target_x, action_target_y),\n            (NOWHERE, NOWHERE),\n        ];\n\n    // pub global ACTION_RESULT_STATUS_MULTIPLIER: u8 =     ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT;     // u1\n    // pub global ACTION_RESULT_STATUS_FIXED_ADDITION: u8 = ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 1; // u4\n    // pub global ACTION_MOVE_TO_TARGET: u8 =               ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 2; // u1\n    // pub global ACTION_SETS_STATUS_HIDDEN: u8 = 5; // u1\n    // pub global ACTION_REMOVES_STATUS_HIDDEN: u8 = 6; // u1\n\n        // CALCULATE EVENTS\n        comptime {\n          assert(SEEN_EVENT_IDX == 1);\n          assert(UNSEEN_EVENT_IDX == 0);\n        }\n        //let result_event_idx = is_visible as u32;\n        let mut events: BoundedVec<Event, 4> = BoundedVec::new();\n        // 19000 gates\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        // events.push(build_subtype_value_event(0, 0, 0, 0, 0, 0, 0));\n        build_result_event!(0 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(1 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(2 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        build_result_event!(3 as u32, quote { events }, quote { is_valid }, quote { action_def });\n        assert(events.len() == 4);\n\n        // let seen_event_value = status as u32 * action.get_action_result_event_seen_value_status_multiplier() as u32 + action.get_action_result_event_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { seen_event_value <= 255 as u32 }, quote { f\"Invalid event value (seen): {seen_event_value} does not fit in u8!\" });\n\n        // let unseen_event_value = status as u32 * action.get_action_result_event_not_seen_value_status_multiplier() as u32 + action.get_action_result_event_not_seen_value_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { unseen_event_value <= 255 as u32 }, quote { f\"Invalid event value (unseen): {unseen_event_value} does not fit in u8!\" });\n\n        // let seen_event_coords_idx = action.get_action_result_event_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { seen_event_coords_idx < 4 }, quote { f\"Invalid seen event coord idx: {seen_event_coords_idx} > 3\" });\n\n        // let seen_event_coords = coords[seen_event_coords_idx & 3];\n\n        // let unseen_event_coords_idx = action.get_action_result_event_not_seen_coord_idx();\n        // softassert!(quote { is_valid }, quote { unseen_event_coords_idx < 4 }, quote { f\"Invalid unseen event coord idx: {unseen_event_coords_idx} > 3\" });\n\n        // let unseen_event_coords = coords[unseen_event_coords_idx & 3];\n\n        // //let events = [\n        // let dummy_event =    build_subtype_value_event(NO_EVENT, c.get_id(), coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].0, coords[ACTION_RESULT_COORDINATES_IDX_INVISIBLE].1, 0 as u8, 0 as u8, 0 as u8);\n        // let unseen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_not_seen_type(),\n        //         c.get_id(), \n        //         unseen_event_coords.0,\n        //         unseen_event_coords.1,\n        //         unseen_event_value as u8,\n        //         action.get_action_result_event_not_seen_subtype(),\n        //         action.get_action_result_event_not_seen_radius()\n        //     );\n        // let seen_event =    build_subtype_value_event(\n        //         action.get_action_result_event_seen_type(),\n        //         c.get_id(), \n        //         seen_event_coords.0,\n        //         seen_event_coords.1,\n        //         seen_event_value as u8,\n        //         action.get_action_result_event_seen_subtype(),\n        //         action.get_action_result_event_seen_radius()\n        //     );\n        //];\n\n\n        // APPLY EFFECTS ON SELF\n        let mut result_energy = energy;\n        let mut result_coords = coords[0];\n        let mut result_progress = actor_progress;\n        let mut result_is_hidden = actor_is_hidden;\n        let mut result_is_visible = actor_is_in_view_range;\n        let mut result_damage_mod = actor_damage_mod;\n        let mut result_health = actor.get_health();\n        let mut result_status = actor_status;\n\n\n        // let energy = std::wrapping_sub(energy, action.get_action_req_energy());\n        // let status = actor_progress as u32 * action.get_action_result_status_multiplier() as u32 + action.get_action_result_status_fixed_addition() as u32;\n        // softassert!(quote { is_valid }, quote { status <= MAX_STATUS as u32 }, quote { f\"Invalid result status: {status} > {MAX_STATUS}\" });\n\n        // let final_coords = coords[action.get_action_move_to_target() as u8];\n        // // debug!(quote { println(f\"final_coords:{final_coords}\"); });\n        // let is_hidden = ((c.is_hidden == 1) & !action.get_action_result_effect_removes_status_hidden()) | action.get_action_result_effect_sets_status_hidden();\n        // let is_visible = !is_hidden & is_visible(enemy_advance, final_coords.0);\n        // 200 gates\n        apply_action_result_effects!(quote { action_def });\n\n// let result_coord_src = action_def[6] as u8;\n// let result_coord_src_fixed = result_coord_src & 4 as u8;\n// let result_coord = result_coord_src_fixed != 0 as u8;\n// let result_coord_cast = result_coord as u8;\n// println(f\"result coords: {result_coord_src} {result_coord_src_fixed} {result_coord} {result_coord_cast}\");\n// result_coords = coords[((action_def[6]as u8 / 4 as u8) == 1 as u8)as u8];\n        // let target_coords = [\n        //     (target_x, target_y),\n        //     (c.get_target_x(), c.get_target_y())\n        // ];\n\n        (\n            is_valid,\n            if result_is_visible { events.get_unchecked(SEEN_EVENT_IDX) } else { events.get_unchecked(UNSEEN_EVENT_IDX) },//events[1 + (is_visible as u8)],\n            events.get_unchecked(WORLD_EVENT_IDX),\n            events.get_unchecked(SELF_EVENT_IDX),//events[get_action_unseen_event_is_internal(action_def) as u8],\n            Character {\n                id: actor_id,\n                x: result_coords.0,\n                y: result_coords.1,\n                progress: result_progress, // status as u8,\n                is_hidden: result_is_hidden as u1, //is_hidden as u1,\n                has_been_seen: result_is_visible, //is_visible,\n                last_action: is_not_interrupted as u8 * actor.get_last_action() + (!is_not_interrupted) as u8 * action_type,\n                target_x: is_not_interrupted as u8 * actor.get_target_x() + (!is_not_interrupted) as u8 * action_target_x, // if is_not_interrupted { c.get_target_x() } else { get_action_target_x(action) };\n                target_y: is_not_interrupted as u8 * actor.get_target_y() + (!is_not_interrupted) as u8 * action_target_y,\n                class: actor.class,\n                damage_mod: result_damage_mod,\n                health: result_health,\n                status: result_status,\n                actions: actor.actions,\n            },\n            result_energy\n        )\n\n        // if get_action_type(action) == SNEAK {\n        //     //assert(c.can_sneak());\n        //     if !can_sneak { let actor_id = c.id; println(f\"Failed to execute action: Character {actor_id} cannot sneak\"); }\n        //     //assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     //assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_sneak() & can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);  \n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_sneak();\n        // }\n        // if get_action_type(action) == MOVE {\n        //     // assert(can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles));\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = can_move_to(get_action_target_x(action), get_action_target_y(action), my_obstacles_parsed, their_obstacles) & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.x = get_action_target_x(action);\n        //     result_char.y = get_action_target_y(action);\n        //     result_char.status = 0;\n        //     required_energy = c.get_energy_per_move();\n        //     result_char.has_been_seen = is_visible(enemy_advance, result_char.x);\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_MOVE, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        // }\n        // if get_action_type(action) == RITUAL {\n        //     //assert(c.can_ritual());\n        //     // result_valid = c.can_ritual();\n        //     result_char.status += 1;\n        //     if result_char.status >= RITUAL_ROUNDS_FOR_WIN {\n        //         result_event = build_std_event(WIN, c.id, 0, 0);\n        //     } else {\n        //         result_event = build_std_event(SEE_RITUAL, c.id, 0, 0);\n        //     }\n        //     required_energy = c.get_energy_per_ritual();\n        // }\n        // if get_action_type(action) == SEARCH {\n        //     // assert(c.can_search());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_search() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(SEE_SEARCH_TRAP, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_search();\n        // }\n        // if get_action_type(action) == ATTACK {\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_MELEE), ATTACK_MELEE);\n        //     required_energy = c.get_energy_per_attack();\n        // }\n        // // TODO: global SET_TRAP = 6 as u8;\n        // if get_action_type(action) == CAST_FIREBALL {\n        //     // assert(c.can_cast_fireball());\n        //     result_char.status += 1;\n        //     // assert(result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     // result_valid = c.can_cast_fireball() & (result_char.status <= FIREBALL_ROUNDS_FOR_CAST);\n        //     if result_char.status >= FIREBALL_ROUNDS_FOR_CAST {\n        //         // TODO: handle friendly fire and destruction of own walls and own traps\n        //         result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_FIREBALL), ATTACK_FIREBALL);\n        //     } else {\n        //         if c.get_has_been_seen() {\n        //             result_event = build_subtype_value_event(SEE_CAST, c.id, get_action_target_x(action), get_action_target_y(action), 0, ATTACK_FIREBALL);\n        //         }\n        //     }\n        //     required_energy = c.get_energy_per_cast();\n        // }\n        // if get_action_type(action) == DRAW {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     // result_valid = c.can_shoot() & (c.status < MAX_DRAW_ROUNDS_FOR_SHOOT);\n        //     result_char.status += 1;\n        //     if c.get_has_been_seen() {\n        //         result_event = build_std_event(SEE_DRAW, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     }\n        //     required_energy = c.get_energy_per_draw();\n        // }\n        // if get_action_type(action) == SHOOT {\n        //     // assert(c.can_shoot());\n        //     // assert(c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT);\n        //     // assert((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     // result_valid = c.can_shoot() & (c.status >= MIN_DRAW_ROUNDS_FOR_SHOOT) & ((c.x != get_action_target_x(action)) | (c.y != get_action_target_y(action)));\n        //     result_char.status = 0;\n        //     // TODO: check distance! abs(c.x - get_action_target_x(action)) + abs(c.y - get_action_target_y(action)) <= c.get_shoot_range()\n        //     result_event = build_subtype_value_event(RECEIVE_ATTACK, c.id, get_action_target_x(action), get_action_target_y(action), c.get_damage(ATTACK_RANGED), ATTACK_RANGED);\n        //     required_energy = c.get_energy_per_shoot();\n\n        // }\n        // // TODO: SET_TRAP\n        // if get_action_type(action) == DISARM_TRAP {\n        //     // assert(c.can_disarm());\n        //     // assert(is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action)));\n        //     // result_valid = c.can_disarm() & is_neighbor(c.x, c.y, get_action_target_x(action), get_action_target_y(action));\n        //     result_char.status = 0;\n        //     result_event = build_std_event(DESTROY, c.id, get_action_target_x(action), get_action_target_y(action));\n        //     required_energy = c.get_energy_per_disarm();\n        // }\n        \n        // // assert(energy >= required_energy);\n        // let result_valid = is_valid & (energy >= required_energy);\n        // if result_valid {\n        //     energy -= required_energy;\n        // }\n        // // energy -= required_energy;\n        // (result_valid, result_event, result_char, energy)\n    }\n//}\n\n//global test_actions: [TestActionDefinition; 1] = [\n    // build_test_action_def!(build_wait_action_def(), quote { 0, 1, 3, 4 }),\n    //TestActionDefinition { register: build_test_action_def!(build_wait_action_def()), action: new_action(0, 1, 3, 4) },\n    // build_move_action(class_energy_per_move[ARCHER]),\n    //     build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n    //     build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n    //     build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n    //     build_wait_action_def(),\n    //     ,\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[RITUALIST]),\n    //     build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n    //     build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n    //     build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[ROGUE]),\n    //     build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n    //     build_sneak_action(class_energy_per_sneak[ROGUE]),\n    //     build_search_action(class_energy_per_search[ROGUE], 1),\n    //     build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n    //     build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[KNIGHT]),\n    //     build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    //     build_wait_action_def(),\n    // ],\n    // [\n    //     build_move_action(class_energy_per_move[MAGE]),\n    //     build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n    //     build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n    //     build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n    //     build_wait_action_def(),\n    //     build_wait_action_def()\n    // ]\n// ]\n\n// pub fn create_test_action(action: Action) -> TestActionDefinition {\n//     TestActionDefinition {\n//         register: \n//     }\n// }\n\n// pub struct TestActionDefinition {\n//     pub register: [u8; ACTION_DEFINITION_SIZE],\n//     pub action: Action,\n// }\n\n// impl ResolvedAction for TestActionDefinition {\n//     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n//     }\n//     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n//     }\n//     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n//     }\n//     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n//     }\n//     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n//     }\n//     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_MAX_RANGE]\n//     }\n//     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MIN_STATUS]\n//     }\n//     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_MAX_STATUS]\n//     }\n//     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDED_ENERGY]\n//     }\n//     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_EVENT_IS_TRAP] == 1\n//     }\n//     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n//     }\n//     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n//     }\n//     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n//     }\n//     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n//     }\n//     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n//     }\n//     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n//     }\n//     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n//     }\n//     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n//         self.register[ACTION_MOVE_TO_TARGET] as u1\n//     }\n//     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n//         self.register[ACTION_IS_CONTINUOUS] == 1\n//     }\n//     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n//         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n//     }\n\n//     fn get_action_target_x(self) -> u8 {\n//         get_action_target_x(self.action)\n//     }\n//     fn get_action_target_y(self) -> u8 {\n//         get_action_target_y(self.action)\n//     }\n//     fn get_action_type(self) -> u8 {\n//         get_action_type(self.action)\n//     }\n// }\n\n#[test]\nfn test_execute_action() {\n  // global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder = get_arena_action_def_builder();\n    let action_def = arena_action_def_builder.build_move_action(4); //, quote { 1, 2, 3, 4 }; //new_action(1, 2, 3, 4);\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let action = new_action(1, 2, 3, 4);\n    let their_advance = 30;\n    let mut actions = [[0; 32]; MAX_ACTIONS_PER_CHARACTER + 1];\n    actions[1] = action_def;\n    let actor = Character {\n        id: 2,\n        x: 2,\n        y: 4,\n        target_x: 0,\n        target_y: 0,\n        health: 255,\n        damage_mod: 1,\n        last_action: WAIT,\n        class: MAGE,\n        is_hidden: 0 as u1,\n        has_been_seen: true,\n        progress: 0,\n        status: 0,\n        actions: actions\n    };\n    let energy = 15;\n    let my_obstacles = get_default_obstacles(0);\n    let (no_obstacle_valid, no_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n    assert(no_obstacle_valid);\n    let their_obstacles = get_default_obstacles(1).as_slice().push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle).push_back(no_obstacle);\n    let (valid, event, _, internal_event, c, result_energy) = execute_action(\n        action,\n        their_advance,\n        actor,\n        energy,\n        my_obstacles,\n        their_obstacles.as_array()\n    );\n    assert(valid, \"valid\");\n    assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n    assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n    assert(event.x == get_action_target_x(action), f\"{event}.target_x is not action target x\");\n    assert(event.y == get_action_target_y(action), f\"{event}.target_y is not action target y\");\n    assert(c.x == event.x, f\"{c}.x is not event {event}.x\");\n    assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n    assert(result_energy == 11, f\"{result_energy} != 11\");\n}\n\n\n\npub fn parse_actions(fields: [Field; SERIALIZED_ACTIONS_ARRAY_SIZE]) -> [Action; MAX_ACTIONS] {\n    comptime {\n        assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n        assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n        assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n    }\n\n    let mut actions: [Action] = &[];\n    for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n        let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n        //assert(split.len() == 32);\n        for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n            let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n            actions = actions.push_back(new_action(\n                split[offset],\n                split[offset + 1],\n                split[offset + 2],\n                split[offset + 3],\n            ));\n            /*Action {\n                action: split[offset],\n                actor: split[offset + 1],\n                target_x: split[offset + 2],\n                target_y: split[offset + 3],\n            }*/\n        }\n    }\n    actions.as_array()\n}\n\n/**\n* Warning: This function can throw!!!\n*/\n// pub fn serialize_actions(actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n//     comptime {\n//         assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n//         assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n//         assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n//     }\n\n//     assert(actions.len() <= MAX_ACTIONS);\n\n//     let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, 0, 0, 0); MAX_ACTIONS];\n//     for i in 0..actions.len() {\n//         actions_stuffed[i] = actions[i];\n//     }\n\n//     let mut fields: [Field] = &[];\n//     for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n//         let mut data: [u8; 32] = [0; 32];\n//         for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n//             let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n//             let action = actions_stuffed[index];\n//             let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n//             data[offset] = get_action_type(action);\n//             data[offset + 1] = get_action_actor(action);\n//             data[offset + 2] = get_action_target_x(action);\n//             data[offset + 3] = get_action_target_y(action);\n//         }\n//         fields = fields.push_back(std::field::bytes32_to_field(data));\n//     }\n//     fields.as_array()\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/action.nr"},"79":{"source":"\nuse arenalib::ARCHER;\nuse arenalib::KNIGHT;\nuse arenalib::MAGE;\nuse arenalib::RITUALIST;\nuse arenalib::ROGUE;\nuse arenalib::WIDTH;\nuse arenalib::HEIGHT;\nuse arenalib::{ CLASS_COUNT, PROGRESS_COUNT };\nuse arenalib::{ WAIT }; //, ATTACK_MELEE, ATTACK_FIREBALL, ATTACK_RANGED, MAX_FIREBALL_ROUNDS_FOR_CAST, MIN_FIREBALL_ROUNDS_FOR_CAST, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES, MAX_ACTIONS_PER_CHARACTER };\nuse arenalib::{ WIDTH_MASK, HEIGHT_MASK, CLASS_MASK, PROGRESS_MASK };\nuse arenalib::{ WIDTH_BITS, HEIGHT_BITS, CLASS_BITS, PROGRESS_BITS };\nuse crate::event::Event;\nuse crate::map::is_visible;\nuse crate::obstacle::Obstacle;\nuse crate::obstacle::new_obstacle;\nuse skplg::{NOWHERE, debug, softassert};\nuse arenalib::{ActionDefinition};\nuse arenalib::{SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, SerializedArenaCharacterActionDefinitions, SerializedArenaCharacterActionDefinition};\n// use arenalib::{TRAP, ADD_OBSTACLE, WIN_BY_RITUAL, RITUAL_ROUNDS_FOR_WIN};\nuse arenalib::get_test_action_register;\nuse crate::event::{build_subtype_value_event, serialize_events};\nuse arenalib::NO_EVENT;\nuse arenalib::get_wait_action_def;\n\n\npub global SERIALIZED_CHARACTER_BYTES: u32 = 6;\npub type SerializedCharacter = [u8; SERIALIZED_CHARACTER_BYTES];\n\n// use skplam::{build_wait_action_def, build_shoot_action, build_draw_action, build_move_action, build_attack_action, build_cast_action, build_evocation_action, build_search_action, build_set_trap_action, build_sneak_action, build_ritual_action, build_disarm_trap_action};\n\n// this should be more efficient: for all the following: order is: UNKNOWN_CLASS, ARCHER, RITUALIST, ROGUE, KNIGHT, MAGE\nglobal class_damage_melee: [u8; 6] = [ 0, 32, 8, 24, 40, 16 ];\nglobal class_damage_ranged: [u8; 6] = [ 0, 24, 40, 16, 32, 8 ];\nglobal class_damage_fireball: [u8; 6] = [ 0, 0, 100, 50, 0, 100 ];\nglobal class_damage: [[u8; 6]; 3] = [ class_damage_melee, class_damage_ranged, class_damage_fireball ];\nglobal class_energy_per_attack: [u8; 6] = [ 0, 7, 7, 7, 6, 7 ];\nglobal class_energy_per_cast: [u8; 6] = [ 0, 255, 12, 255, 255, 6 ];\nglobal class_energy_per_disarm: [u8; 6] = [ 0, 255, 255, 12, 255, 255 ];\nglobal class_energy_per_move: [u8; 6] = [ 0, 3, 4, 3, 4, 4 ];\nglobal class_energy_per_ritual: [u8; 6] = [ 0, 255, 12, 255, 255, 255 ];\nglobal class_energy_per_search: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_sneak: [u8; 6] = [ 0, 255, 255, 6, 255, 255 ];\nglobal class_energy_per_draw: [u8; 6] = [ 0, 9, 255, 255, 255, 255 ];\nglobal class_energy_per_shoot: [u8; 6] = [ 0, 6, 255, 255, 255, 255 ];\nglobal resistances: [u16; 8 * 3] = [\n     0,  75, 100, 85,  50, 100, 20,  0, //,  255, 255, 0, 0, 0, 255, 255, 255 ], // Melee vs dummy, archer, ritualist, thief, knight, mage, wall, water, unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n     0,  80, 100, 90,  25, 100,  5,  0, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Ranged vs dummy, archer, ritualist, thief, knight, mage, wall, water\n     0,  80, 100, 90, 100,  90, 60, 50, // 255, 255, 0, 0, 0, 255, 255, 255 ], // Fireball vs dummy, archer, ritualist, thief, knight, mage, wall, water\n];\n\nglobal trap_resistances: [u16; 8] = [ 0,  75, 100, 50,  75, 90, 5, 0]; //,  255, 255, 255, 255, 255, 255, 255, 255 ]; // Trap vs dummy, archer, ritualist, thief, knight, mage\n\n\n//global x: ActionDefinition = build_set_trap_action(1 as u8, 1 as u8);\n// TODO: move to character!\n// global ARCHER: u8 = 1;    WAIT, MOVE, ATTACK, DRAW, SHOOT\n// global RITUALIST: u8 = 2; WAIT, MOVE, ATTACK, CAST, RITUAL\n// global ROGUE: u8 = 3;     WAIT, MOVE, ATTACK, SNEAK, SEARCH, DISARM_TRAP, SET_TRAP\n// global KNIGHT: u8 = 4;    WAIT, MOVE, ATTACK\n// global MAGE: u8 = 5;      WAIT, MOVE, ATTACK, CAST, CAST_FIREBALL\n// global ACTION_DEFINITIONS: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER * CLASS_COUNT] = [\n//     // [[0 as u8; ACTION_DEFINITION_SIZE]; MAX_ACTIONS_PER_CHARACTER], // 0 for no action\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n//     [0 as u8; ACTION_DEFINITION_SIZE],\n    \n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ARCHER]),\n//         build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//         build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//         build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[RITUALIST]),\n//         build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//         build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//         build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[ROGUE]),\n//         build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//         build_sneak_action(class_energy_per_sneak[ROGUE]),\n//         build_search_action(class_energy_per_search[ROGUE], 1),\n//         build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[KNIGHT]),\n//         build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//         WAIT_ACTION,\n//     // ],\n//     // [\n//         WAIT_ACTION,\n//         build_move_action(class_energy_per_move[MAGE]),\n//         build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//         build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//         build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, FIREBALL_ROUNDS_FOR_CAST, FIREBALL_ROUNDS_FOR_CAST),\n//         WAIT_ACTION,\n//         WAIT_ACTION\n//     // ]\n// ];\n// global \n// pub fn get_test_action_register() -> [u8; ACTION_DEFINITION_REGISTER_SIZE] {\n//     build_action_def_reg!([\n//         [\n//             build_move_action(class_energy_per_move[ARCHER]),\n//             build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER]),\n//             build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER),\n//             build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT), // archer\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[RITUALIST]),\n//             build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST]),\n//             build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST),\n//             build_ritual_action(3, class_energy_per_ritual[RITUALIST]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[ROGUE]),\n//             build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE]),\n//             build_sneak_action(class_energy_per_sneak[ROGUE]),\n//             build_search_action(class_energy_per_search[ROGUE], 1),\n//             build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1),\n//             build_set_trap_action(class_energy_per_disarm[ROGUE], 1),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[KNIGHT]),\n//             build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT]),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//             build_wait_action_def(),\n//         ],\n//         [\n//             build_move_action(class_energy_per_move[MAGE]),\n//             build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE]),\n//             build_cast_action(3, class_energy_per_cast[MAGE], MAGE),\n//             build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST),\n//             build_wait_action_def(),\n//             build_wait_action_def()\n//         ]\n//     ])\n// }\n// pub fn get_test_action_register() -> SerializedArenaActionDefinitions {\n//   let action_builder = arena_action_def_builder;\n//      [\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ARCHER], ATTACK_MELEE, 1, class_damage[0][ARCHER])),\n//             std::field::bytes32_to_field(action_builder.build_draw_action(3, class_energy_per_draw[ARCHER], 10, ARCHER)),\n//             std::field::bytes32_to_field(action_builder.build_shoot_action(3, class_energy_per_shoot[ARCHER], ATTACK_RANGED, 8, class_damage[1][ARCHER], 2, MIN_DRAW_ROUNDS_FOR_SHOOT, MAX_DRAW_ROUNDS_FOR_SHOOT)), // arche),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n            \n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[RITUALIST], ATTACK_MELEE, 1, class_damage[0][RITUALIST])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[RITUALIST], RITUALIST, 255)),\n//             std::field::bytes32_to_field(action_builder.build_ritual_action(3, class_energy_per_ritual[RITUALIST], RITUAL_ROUNDS_FOR_WIN, WIN_BY_RITUAL)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[ROGUE], ATTACK_MELEE, 1, class_damage[0][ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_sneak_action(class_energy_per_sneak[ROGUE])),\n//             std::field::bytes32_to_field(action_builder.build_search_action(class_energy_per_search[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_disarm_trap_action(class_energy_per_disarm[ROGUE], 1)),\n//             std::field::bytes32_to_field(action_builder.build_set_trap_action(class_energy_per_disarm[ROGUE], 1, ADD_OBSTACLE, TRAP)),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[KNIGHT])),\n//            std::field::bytes32_to_field( action_builder.build_attack_action(class_energy_per_attack[KNIGHT], ATTACK_MELEE, 1, class_damage[0][KNIGHT])),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n\n//             std::field::bytes32_to_field(action_builder.build_move_action(class_energy_per_move[MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_attack_action(class_energy_per_attack[MAGE], ATTACK_MELEE, 1, class_damage[0][MAGE])),\n//             std::field::bytes32_to_field(action_builder.build_cast_action(3, class_energy_per_cast[MAGE], MAGE, 7)),\n//             std::field::bytes32_to_field(action_builder.build_evocation_action(3, class_energy_per_cast[MAGE], ATTACK_FIREBALL, 6, 1,class_damage[2][MAGE], 5, MIN_FIREBALL_ROUNDS_FOR_CAST, MAX_FIREBALL_ROUNDS_FOR_CAST)),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def()),\n//             std::field::bytes32_to_field(action_builder.build_wait_action_def())\n//         ]\n// }\n\n// struct CharacterClass {\n//     class: u8,\n//     damage: u8,\n//     energy_per_attack: u8,\n//     energy_per_cast: u8,\n//     energy_per_disarm: u8,\n//     energy_per_move: u8,\n//     energy_per_ritual: u8,\n//     energy_per_search: u8,\n//     energy_per_sneak: u8,\n// }\n\npub struct Character {\n    pub id: u8,\n    pub x: u8, // 5 bit\n    pub y: u8, // 4 bit\n    pub class: u8, // 3 bit\n    pub progress: u8, // 0 = idle, 1-15 = continuing action => 4 bit\n    pub health: u8,\n    pub has_been_seen: bool,\n    pub is_hidden: u1,\n    pub target_x: u8,\n    pub target_y: u8,\n    pub damage_mod: u8,\n    pub last_action: u8,\n    pub status: u8,\n    // pub wait_action: ActionDefinition,\n    pub actions: [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1], // BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER>,\n}\n\n// pub fn resolve_action(action: u8, class: u8) -> ActionDefinition {\n//     let mut idx = class as u32 * MAX_ACTIONS_PER_CHARACTER + action as u32;\n//     if idx >= (ACTION_DEFINITIONS.len()) {\n//         idx = 0;\n//     }\n//     // assert(action as u32 < MAX_ACTIONS_PER_CHARACTER);\n//     // assert(class as u32 < CLASS_COUNT);\n//     ACTION_DEFINITIONS[idx]\n// }\n//     pub fn resolve_action(action: Action) -> ActionDefinition {\n//         // let idx = get_action_base_index(self.get_id(), action);\n//         ActionDefinition::new(action, ACTION_DEFINITIONS)\n// //        (idx, ACTION_DEFINITIONS)\n//         //resolve_action(action, self.class)\n//         // let mut a = action as u32;\n//         // if a >= self.actions.len() { a = 0; }\n//         // self.actions[a] //.get_unchecked(a)\n//     }\n//global wait_action: ActionDefinition = buld_wait_action_def();\n\n// global wait_action: ActionDefinition = action_builder.build_wait_action_def();\n\nimpl Character {\n    // pub fn new(id: u8 x: u8, y: u8, class: u8, status: u8, health: u8, has_been_seen: u8)\n    /// May throw\n\n\n    pub fn get_id(self) -> u8 {\n        self.id\n    }\n\n    pub fn get_x(self) -> u8 {\n        self.x\n    }\n\n    pub fn get_y(self) -> u8 {\n        self.y\n    }\n\n    pub fn get_class(self) -> u8 {\n        self.class\n    }\n\n    pub fn get_progress(self) -> u8 {\n        self.progress\n    }\n\n    pub fn get_status(self) -> u8 {\n        self.status\n    }\n\n    pub fn get_health(self) -> u8 {\n        self.health\n    }\n\n    pub fn get_has_been_seen(self) -> bool {\n        self.has_been_seen\n    }\n\n    pub fn get_target_x(self) -> u8 {\n        self.target_x\n    }\n\n    pub fn get_target_y(self) -> u8 {\n        self.target_y\n    }\n\n    pub fn get_is_hidden(self) -> u1 {\n      self.is_hidden\n    }\n\n    pub fn get_damage_mod(self) -> u8 {\n      self.damage_mod\n    }\n\n    pub fn get_action(self, action_idx: u8) -> (bool, ActionDefinition) {\n      /*if action_idx == 0 {\n        (true, self.wait_action)\n      } else */if action_idx <= MAX_ACTIONS_PER_CHARACTER as u8 {\n        (true, self.actions[action_idx])\n      } else {\n        (false, self.actions[0])\n      }\n    }\n\n    // pub fn get_energy_per_attack(self) -> u8 {\n    //     class_energy_per_attack[self.class]\n    // }\n\n    // pub fn get_energy_per_cast(self) -> u8 {\n    //     class_energy_per_cast[self.class]\n    // }\n\n    // pub fn get_energy_per_disarm(self) -> u8 {\n    //     class_energy_per_disarm[self.class]\n    // }\n\n    // pub fn get_energy_per_move(self) -> u8 {\n    //     class_energy_per_move[self.class]\n    // }\n\n    // pub fn get_energy_per_ritual(self) -> u8 {\n    //     class_energy_per_ritual[self.class]\n    // }\n\n    // pub fn get_energy_per_search(self) -> u8 {\n    //     class_energy_per_search[self.class]\n    // }\n\n    // pub fn get_energy_per_sneak(self) -> u8 {\n    //     class_energy_per_sneak[self.class]\n    // }\n\n    // pub fn get_energy_per_draw(self) -> u8 {\n    //     class_energy_per_draw[self.class]\n    // }\n\n    // pub fn get_energy_per_shoot(self) -> u8 {\n    //     class_energy_per_shoot[self.class]\n    // }\n\n    // pub fn get_damage(self, attack_type: u8) -> u8 {\n    //     self.damage_mod + class_damage[attack_type][self.class]\n    // }\n\n    pub fn get_last_action(self) -> u8 {\n      self.last_action\n    }\n\n    // pub fn can_sneak(self) -> bool {\n    //     class_energy_per_sneak[self.class] != 255\n    // }\n\n    // pub fn can_ritual(self) -> bool {\n    //     class_energy_per_ritual[self.class] != 255\n    // }\n\n    // pub fn can_cast_fireball(self) -> bool {\n    //     class_energy_per_cast[self.class] != 255\n    // }\n\n    pub fn can_shoot(self) -> bool {\n        self.class == ARCHER\n    }\n    // pub fn can_disarm(self) -> bool {\n    //     class_energy_per_disarm[self.class] != 255\n    // }\n\n    // pub fn can_search(self) -> bool {\n    //     class_energy_per_search[self.class] != 255\n    // }\n\n    fn is_pos_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_target_valid(x: u8, y: u8) -> bool { ((x < WIDTH) & (y < HEIGHT)) | ((x == 255) & (y == 255)) }\n    fn is_class_valid(class: u8) -> bool { class as u32 <= CLASS_COUNT }\n    fn is_status_valid(status: u8) -> bool { status < PROGRESS_COUNT }\n\n    pub fn is_valid(self) -> bool {\n        Character::is_pos_valid(self.x, self.y) &\n        Character::is_target_valid(self.target_x, self.target_y) &\n        Character::is_class_valid(self.class) &\n        Character::is_status_valid(self.progress)\n    }\n\n    pub fn serialize(self) -> (SerializedCharacter, SerializedArenaCharacterActionDefinitions) {\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n        assert(self.is_valid());\n        let packed_x = self.x + (self.class << WIDTH_BITS);\n        let packed_y = self.y + (self.progress << HEIGHT_BITS);\n        let packed_target_x = (self.target_x & WIDTH_MASK) + ((self.is_hidden as u8) << WIDTH_BITS);\n        let packed_target_y = (self.target_y & HEIGHT_MASK) + ((self.last_action as u8) << HEIGHT_BITS);\n\n        // let serialized_action_defs = self.actions.map(|a|std::field::bytes32_to_field(a));\n        let serialized_action_defs = [\n          std::field::bytes32_to_field(self.actions[1]),\n          std::field::bytes32_to_field(self.actions[2]),\n          std::field::bytes32_to_field(self.actions[3]),\n          std::field::bytes32_to_field(self.actions[4]),\n          std::field::bytes32_to_field(self.actions[5]),\n          std::field::bytes32_to_field(self.actions[6])\n        ];\n        \n        ([packed_x, packed_y, self.health, packed_target_x, packed_target_y, self.damage_mod], serialized_action_defs)\n    }\n\n    pub fn to_obstacle(self) -> (bool, Obstacle) {\n        comptime {\n            assert(MAX_CHARACTERS < (255 - MAX_OBSTACLES));\n        }\n        assert(self.is_valid());\n        new_obstacle(self.id + (MAX_OBSTACLES as u8), self.x, self.y, self.health, self.class)\n        // Obstacle {\n        //     id: self.id + (MAX_CHARACTERS as u8),\n        //     x: self.x,\n        //     y: self.y,\n        //     obstacle_type: self.class,\n        //     health: self.health,\n        //     //was_alive: \n        // }\n    }\n\n    pub fn move(self, x: u8, y: u8) -> Character {\n        let mut c = self;\n        c.x = x;\n        c.y = y;\n        c\n    }\n\n    pub fn take_damage(self, attack_type: u8, dmg: u8) -> Character {\n        let damage_after_resistances = get_attack_damage_to_tile(attack_type, dmg as u16, self.class);\n        let mut c = self;\n        if damage_after_resistances > (c.health as u16) {\n            c.health = 0;\n        } else {\n            c.health -= (damage_after_resistances as u8);\n        }\n        c\n    }\n\n    pub fn set_status(self, status: u8) -> Character {\n        assert(status < PROGRESS_COUNT);\n        let mut c = self;\n        c.progress = status;\n        c\n    }\n\n    pub fn create_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n        // let mut actions: BoundedVec<ActionDefinition, 6> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..6 {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions.push(ACTION_DEFINITIONS[idx + i]);\n        //     }\n        // }\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: 0,\n            health: 0,\n            has_been_seen: false,\n            is_hidden: 0,\n            target_x: 255,\n            target_y: 255,\n            damage_mod: 0,//: class_damage[class],\n            last_action: WAIT,\n            status: 0, // TODO: status\n            actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1]// BoundedVec::new()\n        };\n        assert(c.is_valid());\n        c\n    }\n\n    pub fn parse(id: u8, data: Field, actions_data: SerializedArenaActionDefinitions, wait_action: ActionDefinition, events: [Event; MAX_EVENTS], enemy_advance: u8) -> (bool, Character) {\n        // these asserts could be disabled for production\n        comptime {\n            assert(WIDTH <= WIDTH_MASK + 1);\n            assert(HEIGHT <= HEIGHT_MASK + 1);\n            assert(CLASS_COUNT <= (CLASS_MASK + 1) as u32);\n            assert(PROGRESS_COUNT <= PROGRESS_MASK + 1);\n            assert(WIDTH_BITS + CLASS_BITS <= 8);\n            assert(HEIGHT_BITS + PROGRESS_BITS <= 8);\n            assert(WIDTH_BITS + 1 <= 8);\n        }\n\n        let mut is_valid = true;\n\n        let split: [u8; 32] = data.to_be_bytes::<32>();\n        assert(split.len() == 32);\n        let x_packed = split[2 + id * 6]; // 5 bit x, 3 bit class\n        let y_packed = split[2 + id * 6 + 1]; // 4 bit y, 4 bit status\n        let mut health = split[2 + id * 6 + 2] as u16;\n        let target_x_packed = split[2 + id * 6 + 3]; // 5 bit target x, 1 bit hidden, 1 bit has target, 1 bit unused\n        let target_y_packed = split[2 + id * 6 + 4]; // 4 bit target y, 4 bit last action\n        let damage_mod = split[2 + id * 6 + 5]; // last byte: for the moment, use to save damage_mod (buffs, etc)\n\n        let x = x_packed & WIDTH_MASK;\n        let y = y_packed & HEIGHT_MASK;\n        let mut class = (x_packed >> WIDTH_BITS) & CLASS_MASK;\n        if !Character::is_class_valid(class) {\n            debug!(quote { println(f\"Invalid class {class}\"); });\n            class = 0;\n            is_valid = false;\n        }\n\n        let progress = (y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n        softassert!(quote { is_valid }, quote { Character::is_status_valid(progress) }, quote { f\"Invalid status {progress} during character parsing {id}\" });\n\n        let target_x = target_x_packed & WIDTH_MASK;\n        let target_y = target_y_packed & HEIGHT_MASK;\n        let last_action = (target_y_packed >> HEIGHT_BITS) & PROGRESS_MASK;\n\n        let is_visible = is_visible(enemy_advance, x); //((target_x_packed >> 5) & 1) as u1;\n        let is_hidden = ((target_x_packed >> WIDTH_BITS) & 1) as u1;\n\n        let mut damage: u16 = 0;\n        for i in 0..MAX_EVENTS {\n            let event = events[i];\n            damage += event.get_applied_damage_to_my_asset(x, y, class);\n            // if events[i].actor_id == id {\n            //     let event = events[i];\n            //     if event.actor_id == id {\n            //         damage += event.get_applied_damage_to_my_asset(x, y, class);\n            //     }\n            // }\n        }\n        if damage > health {\n            health = 0;\n        } else {\n            health -= damage;\n        }\n\n        // let mut actions = [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]; //: BoundedVec<ActionDefinition, MAX_ACTIONS_PER_CHARACTER> = BoundedVec::new();\n        // let idx = class as u32 * MAX_ACTIONS_PER_CHARACTER;\n        // for i in 1..MAX_ACTIONS_PER_CHARACTER {\n        //     if (ACTION_DEFINITIONS[idx + i][ACTION_IS_CONTINUOUS] != 0) | (ACTION_DEFINITIONS[idx + 1][ACTION_RESULT_STATUS_MULTIPLIER] != 1) {\n        //         actions[i] = ACTION_DEFINITIONS[idx + i];\n        //     }\n        // }\n\n        let c = Character {\n            id: id,\n            x: x,\n            y: y,\n            class: class,\n            progress: progress,\n            health: health as u8,\n            has_been_seen: is_visible, // TODO \n            is_hidden: is_hidden,\n            target_x: target_x,\n            target_y: target_y,\n            damage_mod: damage_mod,\n            last_action: last_action,\n            actions: [\n              wait_action,\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 1].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 2].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 3].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 4].to_be_bytes::<32>(),\n              actions_data[id * MAX_ACTIONS_PER_CHARACTER as u8 + 5].to_be_bytes::<32>()\n            ],\n            status: 0 // TODO: status\n        };\n        assert(c.is_valid());\n        (is_valid, c)\n    }\n}\n\n// unconstrained fn create_character_unconstrained(\n//   id: u8,\n//   x: u8,\n//   y: u8,\n//   class: u8,\n//   progress: u8,\n//   health: u8,\n//   has_been_seen: u8\n// )\n\nfn select_action_defs_of_character(actions: SerializedArenaActionDefinitions, char_id: u32) -> [ActionDefinition; MAX_ACTIONS_PER_CHARACTER + 1] {\n  let mut result: [SerializedArenaCharacterActionDefinition] = &[std::field::bytes32_to_field(get_wait_action_def())];\n  let offset = char_id * MAX_ACTIONS_PER_CHARACTER;\n  for i in 0..MAX_ACTIONS_PER_CHARACTER {\n    result = result.push_back(actions[offset + i]);\n  }\n  result.as_array().map(|f|f.to_be_bytes())\n}\n\npub fn get_default_characters(side: u8) -> [Character; MAX_CHARACTERS] {\n    assert(side < 2, f\"Side is too large {side}\");\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n    let default_actions = get_test_action_register();\n\n    let x = |x| x * ((side + 1) % 2) + (WIDTH - 1 - x) * side;\n    [\n        Character { id: 0, x: x(2), y: 2, class: ARCHER, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 1), status: 0 },\n        Character { id: 1, x: x(2), y: 3, class: RITUALIST, health: 60, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 2), status: 0 },\n        Character { id: 2, x: x(2), y: 4, class: ROGUE, health: 80, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 3), status: 0 },\n        Character { id: 3, x: x(2), y: 5, class: KNIGHT, health: 120, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 4), status: 0 },\n        Character { id: 4, x: x(2), y: 6, class: MAGE, health: 40, progress: 0, target_x: 0, target_y: 0, has_been_seen: false, damage_mod: 0, is_hidden: 0, last_action: WAIT, actions: select_action_defs_of_character(default_actions, 5), status: 0 },\n    ]\n}\n\n#[export]\npub fn parse_characters(data: SerializedArenaCharacterRoster, actions_data: SerializedArenaActionDefinitions, events: [Event; MAX_EVENTS], enemy_advance: u8) -> pub (bool, [Character; MAX_CHARACTERS]) {\n    comptime { assert(MAX_CHARACTERS == 5); }\n\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut is_valid = true;\n\n    let wait_action = get_wait_action_def();\n\n    // no need to optimize, compiler automatically rolls this out\n    // let mut result: [Character; MAX_CHARACTERS] = [Character::create_character(0, 0, 0, 0), Character::create_character(1, 0, 0, 0), Character::create_character(2, 0, 0, 0), Character::create_character(3, 0, 0, 0), Character::create_character(4, 0, 0, 0)];\n    // for i in 0..(MAX_CHARACTERS as u8) {\n    //     let (curr_valid, curr_c) = Character::parse(i, data, actions_data, wait_action, events, enemy_advance);\n    //     is_valid &= curr_valid;\n    //     result[i] = curr_c;\n    // }\n\n        let (curr_valid, curr_c0) = Character::parse(0, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[0] = curr_c0;\n        let (curr_valid, curr_c1) = Character::parse(1, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[1] = curr_c1;\n        let (curr_valid, curr_c2) = Character::parse(2, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[2] = curr_c2;\n        let (curr_valid, curr_c3) = Character::parse(3, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[3] = curr_c3;\n        let (curr_valid, curr_c4) = Character::parse(4, data, actions_data, wait_action, events, enemy_advance);\n        is_valid &= curr_valid;\n        // result[4] = curr_c4;\n    let result = [curr_c0, curr_c1, curr_c2, curr_c3, curr_c4];\n    (is_valid, result)\n}\n\npub fn get_test_my_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    // let wait_action = arena_action_def_builder.build_wait_action_def();\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 100,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\npub fn get_test_their_character(id: u8, x: u8, y: u8, class: u8) -> Character {\n    assert(id < 5);\n    assert(class as u32 < CLASS_COUNT);\n    assert(x < WIDTH);\n    assert(y < HEIGHT);\n\n    Character {\n        id: id,\n        x: x,\n        y: y,\n        class: class,\n        progress: 0,\n        health: 255,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 255,\n        target_y: 255,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    }\n}\n\n#[test]\nfn test_serialize_character() {\n    let mut character = Character {\n        id: 4,\n        x: 21,\n        y: 9,\n        class: 5,\n        progress: 9,\n        health: 129,\n        has_been_seen: false,\n        is_hidden: 0,\n        target_x: 31,\n        target_y: 9,\n        damage_mod: 0,\n        last_action: WAIT,\n        actions: [[0 as u8; 32]; MAX_ACTIONS_PER_CHARACTER + 1],\n        status: 0\n    };\n    let (field, _) = character.serialize();\n    assert(field[0] == (21 | (5 << 5)));\n    assert(field[1] == (9 | (9 << 4)));\n    assert(field[2] == 129);\n    assert(field[3] == 31); // TODO: why?\n    assert(field[4] == 9);\n    assert(field[5] == 0);\n}\n\n#[test]\nfn test_parse_character() {\n    let dummy_events = Event::get_test_dummy_events();\n    let data_array: [u8; 32] = [\n        0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n        191 as u8, 249 as u8, 255 as u8, 255 as u8, 9 as u8, 255 as u8,\n        181 as u8, 153 as u8, 129 as u8, 127 as u8, 9 as u8, 0 as u8,\n        0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8, 0 as u8,\n    ];\n    let data: Field = std::field::bytes32_to_field(data_array);\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    println(data);\n    assert(data == 0xbff9ffff09ffb599817f0900000000000000, f\"Failed assumption: data: {data} != 0xbff9ffff09ffb599817f0900000000000000\");\n    let (character_valid, character) = Character::parse(3, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_valid);\n    assert(character.get_id() == 3);\n    assert(character.get_x() == 21);\n    assert(character.get_y() == 9);\n    assert(character.get_class() == 5);\n    assert(character.get_progress() == 9);\n    assert(character.get_health() == 129);\n    assert(character.get_has_been_seen());\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n\n    let (character_max_valid, character_max) = Character::parse(2, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_max_valid);\n    assert(character_max.get_id() == 2);\n    assert(character_max.get_x() == 31);\n    assert(character_max.get_y() == 9);\n    assert(character_max.get_class() == 5);\n    assert(character_max.get_progress() == 15);\n    assert(character_max.get_health() == 255);\n    assert(character_max.get_has_been_seen());\n    assert(character_max.get_target_x() == 31);\n    assert(character_max.get_target_y() == 9);\n\n    let (character_min_valid, character_min) = Character::parse(0, data, dummy_actions, wait_action, dummy_events, 20);\n    assert(character_min_valid);\n    assert(character_min.get_id() == 0);\n    assert(character_min.get_x() == 0);\n    assert(character_min.get_y() == 0);\n    assert(character_min.get_class() == 0);\n    assert(character_min.get_progress() == 0);\n    assert(character_min.get_health() == 0);\n    assert(character_min.get_has_been_seen() == false);\n    assert(character_min.get_target_x() == 0);\n    assert(character_min.get_target_y() == 0);\n}\n\n#[test]\nfn test_parse_character_as_in_game() {\n    let wait_action = get_wait_action_def();\n    let dummy_actions = [wait_action; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS].map(|x|std::field::bytes32_to_field(x));\n    let data: Field = 0x1602ff1f09001603ff1f0f001604ff1f0f001605ff1f0f001606ff1f0f00;\n    let (character_valid, character) = Character::parse(0, data, dummy_actions, wait_action, Event::get_test_dummy_events(), 20);\n    assert(character_valid);\n    assert(character.get_id() == 0);\n    assert(character.get_x() == 22, character.get_x());\n    assert(character.get_y() == 2, character.get_y());\n    assert(character.get_class() == 0, character.get_class());\n    assert(character.get_progress() == 0, character.get_progress());\n    assert(character.get_health() == 255);\n    assert(character.get_has_been_seen() == true);\n    assert(character.get_target_x() == 31);\n    assert(character.get_target_y() == 9);\n}\n\n#[export]\npub fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> pub (Field, SerializedArenaActionDefinitions) {\n    let mut result: [u8; 32] = [0; 32];\n    let mut actions: SerializedArenaActionDefinitions = [0; 30]; //&[].as_array();\n    for i in 0..MAX_CHARACTERS {\n        let (serialized_char_bytes, serialized_actions) = chars[i].serialize();\n        for j in 0..6 {\n            result[2 + i * 6 + j] = serialized_char_bytes[j];\n        }\n        for k in 0..MAX_ACTIONS_PER_CHARACTER {\n          actions[i * MAX_ACTIONS_PER_CHARACTER + k] = serialized_actions[k];\n        }\n    }\n    \n    (std::field::bytes32_to_field(result), actions)\n}\n\n/**\n* For now we will only take class into account.\n*/\npub fn get_attack_damage_to_tile(attack_type: u8, damage: u16, class: u8) -> u16 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * resistances[attack_type * 8 + (class & 7)] / 100) as u16\n}\n\npub fn get_trap_damage_to_tile(damage: u16, class: u8) -> u16 {\n    debug!(quote { assert(class <= arenalib::MAX_DAMAGEABLE_TILE); });\n    (damage * trap_resistances[class & 7] / 100) as u16\n}\n\n#[test]\nfn test_parse_character_round0() {\n  // let actions_data = .map(|f|f.to_be_bytes::<32>()).map(|f|std::field::bytes32_to_field(f));\n  let data = 0x2912640000004b03190000006c04142000008a0464000000aa47640b340a;\n  let enemy_advance = 0x00;\n  let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 0, NO_EVENT, 0)\n  ];\n  let serialized_events = serialize_events(events);\n   println(f\"events: {serialized_events}\");\n\n  let parsed = parse_characters(data, [\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071020100a000020100a00000020000000002000000000000000,\n    0x02f0000a3b1901002000000000000801000020000000002000000000000000,\n    0x023100081b161118120a010018120a01000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071008100a000008100a00000020000000002000000000000000,\n    0xf0003f1b1c11002000000000000702000020000000002000000000000000,\n    0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300314002000000000100300000020000000002000000000000000,\n    0x02f0000110071018100a000018100a00000020000000002000000000000000,\n    0x09f0000130060c002000000000200000000020000000002000000000000000,\n    0xf00001100610001005000100100500010020000000002000000000000000,\n    0xf00001301c0100100d000000100d00000020000000002000000000000000,\n    0x0bf00001100c00002000000000200000000010040a00002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110061028100a000028100a00000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0x03f00001300414002000000000100300000020000000002000000000000000,\n    0x02f0000110071010100a000010100a00000020000000002000000000000000,\n    0xf000071b1611002000000000000705000020000000002000000000000000,\n    0x6300061b161164150a020164150a02010020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000,\n    0xf0003f000001002000000000200000000020000000002000000000000000\n], events, enemy_advance);\n\n  assert(parsed.0);\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/character.nr"},"81":{"source":"use arenalib::{ NO_EVENT, SEE_MOVE, RECEIVE_ATTACK, TRIGGERED_TRAP }; //, SEE_RITUAL, SEE_CAST, SEE_DRAW, SEE_SEARCH_TRAP, FOUND_TRAP\n// use crate::{ EMPTY, WALL };\nuse arenalib::{ EVENT_COUNT };\nuse arenalib::{ ATTACK_FIREBALL };\nuse arenalib::{ SERIALIZED_EVENT_BYTE_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD };\nuse arenalib::{ WIDTH };\nuse arenalib::{ MAX_CHARACTERS, MAX_EVENTS }; //, MAX_TRAPS\nuse arenalib::SerializedArenaEvents;\n// use crate::TRAPS_BUFFER_MASK;\nuse crate::map::get_distance;\n// use crate::character::Character;\nuse crate::character::{ get_attack_damage_to_tile, get_trap_damage_to_tile };\nuse crate::map::their_x_to_mine;\nuse skplg::{ debug, softassert, NOWHERE, UNREADABLE_BYTES_PER_FIELD };\n\npub struct Event {\n    pub event: u8,\n    pub actor_id: u8,\n    pub subtype: u8,\n    pub x: u8,\n    pub y: u8,\n    pub value: u8,\n    pub radius: u8,\n}\n\n\n    #[export]\n    pub fn parse_their_events(fields: SerializedArenaEvents) -> pub (bool, [Event; MAX_EVENTS]) {\n        comptime {\n            assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENT_BYTE_SIZE <= 32);\n            assert(SERIALIZED_EVENTS_ARRAY_SIZE * SERIALIZED_EVENTS_PER_FIELD == MAX_EVENTS);\n            assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n        }\n\n        let mut valid = true;\n        let mut events: [Event; MAX_EVENTS] = [Event::empty(0); MAX_EVENTS];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let split: [u8; 32] = fields[i].to_be_bytes::<32>(); //.to_be_bytes<32>();\n            //assert(split.len() == 32);\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                let raw_x = split[offset + 2];\n                let (x_parsed_valid, x_parsed) = their_x_to_mine(raw_x);\n                softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to calculate their_x_to_mine: {raw_x}\" });\n                events[i * SERIALIZED_EVENTS_PER_FIELD + j] = Event {\n                    event: split[offset],\n                    actor_id: split[offset + 1],\n                    x: x_parsed,\n                    y: split[offset + 3],\n                    value: split[offset + 4],\n                    subtype: split[offset + 5],\n                    radius: split[offset + 6],\n                };\n            }\n        }\n        (valid, events)\n    }\n    \n    #[export]\n    pub fn serialize_events(events: [Event; MAX_EVENTS]) -> pub SerializedArenaEvents {\n        assert(events.len() == MAX_EVENTS);\n        assert(MAX_EVENTS % SERIALIZED_EVENTS_PER_FIELD == 0);\n        assert(SERIALIZED_EVENT_BYTE_SIZE >= 6);\n\n        let mut fields: [Field] = &[];\n        for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n            let mut data: [u8; 32] = [0; 32];\n            for j in 0..SERIALIZED_EVENTS_PER_FIELD {\n                let index = i * SERIALIZED_EVENTS_PER_FIELD + j;\n                let event = events[index];\n                let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_EVENT_BYTE_SIZE;\n                data[offset] = event.event;\n                data[offset + 1] = event.actor_id;\n                data[offset + 2] = event.x;\n                data[offset + 3] = event.y;\n                data[offset + 4] = event.value;\n                data[offset + 5] = event.subtype;\n                data[offset + 6] = event.radius;\n            }\n            fields = fields.push_back(std::field::bytes32_to_field(data));\n        }\n        fields.as_array()\n    }\n    \n#[test]\nfn test_event_serde() {\n    let events = [\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 5, NO_EVENT, 1),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 6, NO_EVENT, 2),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 7, NO_EVENT, 3),\n    build_subtype_value_event(NO_EVENT, 4, NOWHERE, NOWHERE, 8, NO_EVENT, 4)\n  ];\n\n  let serialized = serialize_events(events);\n  let (result_valid, result) = parse_their_events(serialized);\n  assert(result_valid);\n  assert(result[0].event == events[0].event);\n  assert(result[1].event == events[1].event);\n  assert(result[2].event == events[2].event);\n  assert(result[3].event == events[3].event);\n  assert(result[0].actor_id == events[0].actor_id);\n  assert(result[1].actor_id == events[1].actor_id);\n  assert(result[2].actor_id == events[2].actor_id);\n  assert(result[3].actor_id == events[3].actor_id);\n  assert(result[0].x == events[0].x);\n  assert(result[1].x == events[1].x);\n  assert(result[2].x == events[2].x);\n  assert(result[3].x == events[3].x);\n  assert(result[0].y == events[0].y);\n  assert(result[1].y == events[1].y);\n  assert(result[2].y == events[2].y);\n  assert(result[3].y == events[3].y);\n  assert(result[0].value == events[0].value);\n  assert(result[1].value == events[1].value);\n  assert(result[2].value == events[2].value);\n  assert(result[3].value == events[3].value);\n  assert(result[0].subtype == events[0].subtype);\n  assert(result[1].subtype == events[1].subtype);\n  assert(result[2].subtype == events[2].subtype);\n  assert(result[3].subtype == events[3].subtype);\n  assert(result[0].radius == events[0].radius);\n  assert(result[1].radius == events[1].radius);\n  assert(result[2].radius == events[2].radius);\n  assert(result[3].radius == events[3].radius);\n}\n    // fn affects_my_character(self, x: u8, y: u8) -> bool {\n    //     let distance = get_distance(self.x, self.y, x, y);\n    //     ((self.x == x) & (self.y == y)) | ((self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y))\n    // }\nimpl Event {\n    fn affects_my_obstacle(self, x: u8, y: u8) -> bool {\n        (self.x == x) & (self.y == y)\n    }\n\n    fn may_affect_my_other_characters(self) -> bool {\n        (self.event == RECEIVE_ATTACK) & (self.subtype == ATTACK_FIREBALL)\n    }\n\n    fn may_affect_my_obstacles(self) -> bool {\n        self.event == RECEIVE_ATTACK\n    }\n\n    /**\n    * For now we will only take class into account.\n    */\n    pub fn get_applied_damage_to_my_asset(self, x: u8, y: u8, tile: u8) -> u16 {\n        let mut damage = 0;\n        let radius = self.radius as u16;\n        let radius = radius * radius;\n    \n        if self.event == RECEIVE_ATTACK {\n            let distance = get_distance(self.x, self.y, x, y);\n            debug!(quote {\n                        // let event = self.event;\n                        // let actor = self.actor_id;\n                        // let self_x = self.x;\n                        // let self_y = self.y;\n                        // let val = self.value;\n                        // println(f\"GetAppliedDamageToMyAsset: Event({event}:{val} from {actor}@{self_x}|{self_y})@{x}|{y}: {distance} <= {radius}\");\n                    });\n            if distance <= radius {\n                let damage_raw = get_attack_damage_to_tile(self.subtype, self.value as u16, tile) as u16;\n                damage = damage_raw * (1 + radius - distance) / (radius + 1) as u16;\n                debug!(quote { println(f\"Deal damage: {damage_raw} * (1 + {radius} - {distance}) / ({radius} + 1) = {damage}\"); });\n            }\n            // if (self.x == x) & (self.y == y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile);\n            // } else if (self.subtype == ATTACK_FIREBALL) & is_neighbor(self.x, self.y, x, y) {\n            //     damage = get_attack_damage_to_tile(self.subtype, self.value as u16, tile) / 2;\n            // }\n        }\n        if self.event == TRIGGERED_TRAP {\n            damage = get_trap_damage_to_tile(self.value as u16, tile);\n        }\n        damage as u16\n    }\n\n    pub fn empty(actor_id: u8) -> Event {\n        Event {\n            event: NO_EVENT,\n            actor_id: actor_id,\n            x: 0,\n            y: 0,\n            value: 0,\n            subtype: 0,radius: 0\n        }\n    }\n\n    pub fn get_dummy_events() -> [Field; MAX_EVENTS] {\n        [0; MAX_EVENTS]\n    }\n\n    pub fn get_test_dummy_events() -> [Event; MAX_EVENTS] {\n        [Event::empty(0); MAX_EVENTS]\n    }\n}\n\npub fn build_std_event(event: u8, actor_id: u8, x: u8, y: u8) -> Event {\n    assert(event < EVENT_COUNT);\n    assert((actor_id as u32) < MAX_CHARACTERS);\n    assert((x < WIDTH) | (x == NOWHERE));\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: 0,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\n#[test]\nfn test_build_std_event() {\n    let event = build_std_event(SEE_MOVE, 1, 2, 3);\n    assert(event.event == SEE_MOVE);\n    assert(event.actor_id == 1);\n    assert(event.x == 2);\n    assert(event.y == 3);\n}\n\n#[test(should_fail)]\nfn test_build_std_event_fail() {\n    let event = build_std_event(EVENT_COUNT, 1, 2, 3);\n    assert(event.event == EVENT_COUNT);\n}\n\npub fn build_value_event(event: u8, actor_id: u8, x: u8, y: u8, value: u8) -> Event {\n    Event {\n        event: event,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: 0,\n        radius: 0,\n    }\n}\n\npub fn build_subtype_value_event(event_type: u8, actor_id: u8, x: u8, y: u8, value: u8, event_subtype: u8, radius: u8) -> Event {\n    Event {\n        event: event_type,\n        actor_id: actor_id,\n        x: x,\n        y: y,\n        value: value,\n        subtype: event_subtype,\n        radius: radius,\n    }\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/event.nr"},"82":{"source":"mod common;\n// mod actionPreCalcEffect;\n// mod actionResultEvent;\n// mod actionResultEffect;\n// mod actionRequirements;\nmod action;\n// mod actionDefinitionRegister;\nmod bugs;\nuse arenalib::{ new_action };\npub use action::execute_action;\n// mod actionDefinition;\nmod character;\nuse character::{ Character };\nuse character::parse_characters;\nmod event;\nuse event::Event;\npub use event::{serialize_events, parse_their_events};\nmod obstacle;\nuse obstacle::Obstacle;\npub use obstacle::{ new_obstacle, parse_my_obstacles, parse_their_obstacles, get_obstacle_x, get_obstacle_y, get_obstacle_id, get_obstacle_type, get_obstacle_health, serialize_my_obstacles, get_default_obstacles };\nmod map;\nuse dep::std;\nuse obstacle::serialize_obstacle;\nuse obstacle::serialize_their_obstacles;\n// use action::ACTION_TARGET_X;\n// use action::ACTION_TARGET_Y;\n// use action::ACTION_TYPE;\nuse arenalib::{get_action_target_y, get_action_target_x, get_action_type};\nuse obstacle::serialize_my_obstacles_for_me;\nuse map::is_visible;\npub use arenalib::{SerializedArenaActionDefinitions, SerializedArenaActions, SerializedArenaCharacterRoster, SerializedArenaEnemyObstacles, SerializedArenaEvents, SerializedArenaObstacles};\nuse arenalib::arena_test_action_def_register;\nuse character::serialize_chars;\nuse skplg::{softassert, debug};\nuse arenalib::{serialize_actions, parse_actions};\n\nuse arenalib::{SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_EVENTS_ARRAY_SIZE, SERIALIZED_EVENTS_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLE_BYTE_SIZE};\nuse arenalib::{WIDTH};\nuse arenalib::{MAX_ACTIONS, MAX_CHARACTERS, MAX_EVENTS, MAX_OBSTACLES};\nuse arenalib::{VIEW_DISTANCE};\nuse arenalib::{ARCHER, KNIGHT, ROGUE, MAGE, RITUALIST};\nuse arenalib::{MIN_FIREBALL_ROUNDS_FOR_CAST};\nuse arenalib::{SEE_MOVE, RECEIVE_ATTACK, NO_EVENT};\nuse arenalib::{ATTACK_FIREBALL, ATTACK_RANGED};\nuse arenalib::{WAIT};\nuse arenalib::get_wait_action_def;\n\n// mod ResolvedAction;\n\n\n\n// #[export]\n// pub fn ext_can_move_to(x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle]) -> bool {\n//     assert(MAX_OBSTACLES == 24);\n//     let mut my_obstacles_parsed = Obstacle::parse_my_obstacles(my_obstacles, events).as_array();\n//     // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n//     // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n//     let enemy_objects_parsed = Obstacle::parse_their_obstacles(enemy_objects);\n\n//     let mut can = true;\n//     for i in 0..MAX_OBSTACLES {\n//         if !obstacles[i].is_traversible() & (obstacles[i].x == x) & (obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     for i in 0..their_obstacles.len() {\n//         if !their_obstacles[i].is_traversible() & (their_obstacles[i].x == x) & (their_obstacles[i].y == y) {\n//             can = false;\n//         }\n//     }\n//     can\n// }\n\n// pub comptime global DEBUG: bool = false;\n// pub comptime fn debug(stmt: Quoted) -> Quoted {\n//     let debug_result = if DEBUG {\n//         stmt\n//     } else { quote {} };\n//     debug_result\n// }\n// pub comptime fn debugmsg<T>(msg: T) -> Quoted {\n//     debug!(quote { println($msg); })\n// }\n// pub comptime fn softassert(varname: Quoted, check: Quoted, msg: Quoted) -> Quoted {\n//     let result = if DEBUG {\n//         quote {\n//             $varname &= $check;\n//             if !($check) {\n//                 println($msg);\n//             }\n//         }\n//     } else {\n//         quote {\n//             $varname &= $check;\n//         }\n//     };\n//     result\n// }\n\n// // MAP\n// global WIDTH_BITS: u8 = 5;\n// global WIDTH_MASK: u8 = (1 << WIDTH_BITS) - 1;\n// global WIDTH: u8 = 1 << WIDTH_BITS;\n// global HEIGHT_BITS: u8 = 4;\n// global HEIGHT_MASK: u8 = (1 << HEIGHT_BITS) - 1;\n// global HEIGHT: u8 = 10;\n// // global NOWHERE: u8 = 255;\n\n// // CLASSES\n// //global UNKNOWN_CLASS: u8 = 0;\n// global ARCHER: u8 = 1;\n// global RITUALIST: u8 = 2;\n// global ROGUE: u8 = 3;\n// global KNIGHT: u8 = 4;\n// global MAGE: u8 = 5;\n// global CLASS_BITS: u8 = 3;\n// global CLASS_MASK: u8 = (1 << CLASS_BITS) - 1;\n// global CLASS_COUNT: u32 = 6;\n// global MAX_ACTIONS_PER_CHARACTER: u32 = 6;\n\n// // ACTIONS\n// global WAIT: u8 = 0;\n// //global SNEAK: u8 = 1;\n// //global MOVE: u8 = 2;          // => SEE_COLUMN (depr: MOVE)\n// //global RITUAL: u8 = 3;        // => SEE_RITUAL | WIN\n// //global SEARCH: u8 = 4;        // => SEE_SEARCH_TRAP\n// //global ATTACK: u8 = 5;        // => RECEIVE_ATTACK | DESTROY // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST: u8 = 6;          // => SEE_CAST // affects my obstacles; TODO: with more attack types might also affect other own characters\n// //global CAST_FIREBALL: u8 = 7; // => RECEIVE_ATTACK // affects other characters if status == FIREBALL_ROUNDS_FOR_CAST\n// //global DRAW: u8 = 8;          // => SEE_DRAW\n// //global SHOOT: u8 = 9;         // => RECEIVE_ATTACK\n// //global TRIGGER_TRAP = 9;  // => TRIGGERED_TRAP ?????????\n// //global DISARM_TRAP: u8 = 10;  // => DESTROY\n// //global SET_TRAP: u8 = 11;\n// global ACTION_COUNT: u32 = 12;\n// pub global ACTION_RESULT_EVENT_COUNT: u32 = 4;\n// global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0;\n// global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1;\n// global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2;\n\n// // EVENTS\n// global NO_EVENT: u8 = 0 ;\n// // global DESTROY: u8 = 1;          // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //use coordinates to determine tile or trap that got destroyed and update map\n// //global DISCOVER = 2;         // actor_id = their_char or their_object when receive - handle to update enemy positions, got health & class (this is for all chars, not just the active one)\n// //global SEE_COLUMN = 2 ;      // y = the column the player sees => update objects list\n// global SEE_MOVE: u8 = 3 ;        // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client //handle to update enemy positions => DISCOVER\n// //global SEE_SPELL = 4 ;       // actor_id = their_char when receive - need to handle effect via coordinates, => RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle my obstacles\n// global SEE_SEARCH_TRAP: u8 = 5 ; // actor_id = their_char when receive - need to create found trap event if there is a trap nearby => FOUND_TRAP\n// global SEE_RITUAL: u8 = 6 ;      // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_CAST: u8 = 7;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// global SEE_DRAW: u8 = 8;         // actor_id = their_char when receive - no need to handle, only important to have on-chain for the client\n// //global RECEIVE_DAMAGE = 9;   // actor_id = their_char or their_object when receive - no need to handle, only important to have on-chain for the client\n// global RECEIVE_ATTACK: u8 = 10;  // actor_id = 0 when receive - need to handle damage => // no need to events ... health of visible assets gets sent anyway and invisible ones will be updated during discovery //RECEIVE_DAMAGE | DESTROY | LOSE // also need to handle in my obstacles\n// global TRIGGERED_TRAP: u8 = 11;  // actor_id = my_char when receive - need to handle damage (for now, later on we might want to handle other effects as well) => RECEIVE_DAMAGE\n// // global FOUND_TRAP: u8 = 12;      // actor_id = my_char when receive - no need to handle, only important to have on-chain for the client\n// global DISARMED_TRAP: u8 = 13;      // actor_id = their-char when receive - need to remove my trap from the map\n// global WIN: u8 = 14;\n// // global LOSE: u8 = 15;\n// global ADD_OBSTACLE: u8 = 4;\n// global EVENT_COUNT: u8 = 16;\n\n// // SUBTYPES:\n// global WIN_BY_RITUAL: u8 = 1;\n\n// // ATTACKS\n// global ATTACK_MELEE: u8 = 0;\n// global ATTACK_RANGED: u8 = 1;\n// global ATTACK_FIREBALL: u8 = 2;\n// // global ATTACK_COUNT: u8 = 3;\n// // TODO: instead of enum, use a global array of structs with damage, range, etc.\n\n\n// // TILES\n// global EMPTY: u8 = 0;\n// global WALL: u8 = 6;\n// global WATER: u8 = 7;\n// // global UNKNOWN_CLASS_TILE: u8 = 8;\n// global NON_EMPTY_WALKABLE_TILE_MIN: u8 = 9;\n// // global FLAG: u8 = 9;\n// global TRAP: u8 = 10;\n// // global TRAP_USED: u8 = 11;\n// // global TRAP_FOUND: u8 = 12;\n// // global BODY: u8 = 13;\n// // global BODY_LOOTED: u8 = 14;\n// // global FOG: u8 = 15;\n// global MAX_OBSTACLE_TYPE: u8 = 0x0f;\n// // global TILE_COUNT: u8 = 16;\n// // unknown_class, flag, trap, trap_used, trap_found, body, body_looted, fog\n// // STATUS\n// global RITUAL_ROUNDS_FOR_WIN: u8 = 15;\n// global MIN_FIREBALL_ROUNDS_FOR_CAST: u8 = 3;\n// global MAX_FIREBALL_ROUNDS_FOR_CAST: u8 = 6;\n// // global DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MIN_DRAW_ROUNDS_FOR_SHOOT: u8 = 1;\n// global MAX_DRAW_ROUNDS_FOR_SHOOT: u8 = 3;\n// global PROGRESS_BITS: u8 = 4;\n// global PROGRESS_MASK: u8 = (1 << PROGRESS_BITS) - 1;\n// global PROGRESS_COUNT: u8 = 16 ; // just to be more in line with the other constants, actually used as a counter\n// global MAX_HEALTH: u8 = 255;\n\n// // GAMEPLAY\n// global VIEW_DISTANCE: u8 = 6;\n// // global MAX_TRAPS: u32 = 8; // note: only lowest bit of first byte of field is usable! => ! Field = 1 bit + 31 bytes!\n// // global TRAPS_BUFFER_SIZE: Field = 16;\n// // global TRAPS_BUFFER_MASK: Field = 15; // has to be 2^n - 1\n// global MAX_ACTIONS: u32 = 4;\n// global MAX_EVENTS: u32 = 4; // = MAX_ACTIONS // NO! handle traps in a different way (by passing as argument!)+ 4 (2 FOUND_TRAP + WIN/LOSE + 1 reserved)\n// global MAX_OBSTACLES: u32 = 24; // leave traps for now + MAX_TRAPS; // 24 + 8 player placeables\n// pub global MAX_CHARACTERS: u32 = 5;\n// global MIN_PROGRESS: u8 = 0;\n// pub global MAX_PROGRESS: u8 = PROGRESS_COUNT - 1;\n// global SERIALIZED_OBSTACLE_BYTE_SIZE: u32 = 3;//3\n// pub global SERIALIZED_OBSTACLES_ARRAY_SIZE: u32 = 3;//3 // TODO: we take 3 because 3 x 8 = MAX_OBSTACLES ... should assert on this (MAX_OBSTACLES + MAX_CHARACTERS + 7) / 8;\n// pub global SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE: u32 = SERIALIZED_OBSTACLES_ARRAY_SIZE + 1; // +1 because enemy characters are also serialized as obstacles\n// global SERIALIZED_OBSTACLES_PER_FIELD: u32 = 8;//8 // TODO: need to verify that SERIALIZED_OBSTACLES_ARRAY_SIZE * SERIALIZED_OBSTACLES_PER_FIELD = MAX_OBSTACLES!\n// global SERIALIZED_EVENT_BYTE_SIZE: u32 = 7;\n// pub global SERIALIZED_EVENTS_ARRAY_SIZE: u32 = 1; // MAX_EVENTS / SERIALIZED_EVENTS_PER_FIELD => 4 / 4 = 1\n// global SERIALIZED_EVENTS_PER_FIELD: u32 = 4; // 31 / 7 = 4\n// global SERIALIZED_ACTION_BYTE_SIZE: u32 = 5;\n// pub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n// global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4; // could be up to 6, but we only use 4\n\n\n// pub type SerializedArenaActionDefinitions = SerializedRosterActionDefinitions<MAX_ACTIONS_PER_CHARACTER, MAX_CHARACTERS>;\n// pub type SerializedArenaCharacterActionDefinitions = SerializedCharacterActionDefinitions<MAX_ACTIONS_PER_CHARACTER>;\n// pub type SerializedArenaCharacterActionDefinition = SerializedCharacterActionDefinition;\n// #[export]\n// fn tf(x: Field) -> (u32, [u8;32]) {\n//     let mut result: [u8;32] = [0;32];\n//     let bts = x.to_be_bytes::<32>();\n//     for j in 0..31 {\n//         result[j] = 2*j;//bts[j];\n//     }\n//     (32 , result)\n// }\n// i,\n// 20, 0 -> 25,\n// 25 -> 0, \n// x, 0, 0, d0,\n// x, 0, 0, 9d, 1, 0,\n// x, 0, 0, 1, 0, b4, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 91, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 23, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, d4, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, 66, 1, 0, 1, 1, \n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 50, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b9, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, c5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 55, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, b2, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, e8, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, de, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2a, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, cb, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 9b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 5c, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, a6, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 86, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, d5, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 38, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 2b, 1, 0, 1, 1,\n// x, 0, 0, 1, 0, 8e, 1, 0, 0, 1,\n// 0, 32, 1, 0, 1, 1, x, 0, 0, 1,\n// x, 0, 0, 1, x, 0, 0, 1, 0, 1, 1\n\n// i,\n// 20, 0, 1e -> 0, 0 -> 1e, 0\n// x, 0, 0, d0,\n// x, 0, 0, ba, 1, 0,\n// x, 0, 0, 1, 0, cf, 1, 0, 1, 1,\n\nfn get_actor_from_move(mut move: u32) -> u8 {\n    if (move % 2) == 1 {\n        move -= 1; //((move % 10) - 1) >> 1 // actually not needed ... but clearer this way\n    }\n    let single_digit: u32 = (move % 10 as u32) >> 1;\n    single_digit as u8\n}\n// 3, 1, 1, 1, 0, 1, 2, 0, 2, 8, 1, 0, 0, 1\n// 4, 2, 2, 0, x, 0, 0, 0, 4, a, 2, 0, 0, 2\n\n#[export]\npub fn hash_serialized_private_state(my_chars: SerializedArenaCharacterRoster, my_char_actions: SerializedArenaActionDefinitions, my_obstacles: SerializedArenaObstacles, secret: Field) -> pub Field {\n    // let my_chars_be_bytes: [u8; 32] = my_chars.to_be_bytes::<32>();\n    // assert(my_chars_be_bytes.len() == 32);\n    let gamestate_before_hash_calculated = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n    //let gamestate_before_hash_calculated_field = std::field::bytes32_to_field(gamestate_before_hash_calculated);\n    gamestate_before_hash_calculated\n}\n\n#[test]\nfn test_hash_match() {\n  let my_chars = 12345678901234567890;\n  let my_char_actions = [\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,\n    12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890,12345678901234567890\n  ];\n  let my_obstacles = [\n    12345678901234567890, 12345678901234567890, 12345678901234567890\n  ];\n  let secret = 12345678901234567890;\n\n  let hash1 = get_data_hash(secret, my_chars, my_char_actions, my_obstacles);\n  let valid = hash_serialized_private_state(my_chars, my_char_actions, my_obstacles, secret);\n\n  assert(hash1 == valid, f\"{hash1} != {valid}\");\n}\n\n#[export]\nfn get_serialized_obstacle(id: u8, x: u8, y: u8, obstacle_type: u8) -> pub Field {\n    let mut result: [u8; 32] = [0; 32];\n    result[0] = id;\n    result[1] = x;\n    result[2] = y;\n    result[3] = obstacle_type;\n    std::field::bytes32_to_field(result)\n}\n\n// global action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// global action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n\n\n#[export]\npub fn calculate_turn(\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions_input: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //mut my_obstacles_parsed: [[u8; 5]; 24],\n    actions_input: SerializedArenaActions,\n    // Common Inputs\n    move_input: u32, //pub\n    // Enemy Inputs\n    enemy_advance_input: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects_input: SerializedArenaEnemyObstacles, // pub\n    enemy_events_input: SerializedArenaEvents, // pub //MAX_EVENTS],\n\n) -> pub (bool, SerializedArenaCharacterRoster, SerializedArenaActionDefinitions, [Obstacle; 24], u8, SerializedArenaEvents, SerializedArenaEnemyObstacles) {\n    let mut success = true;\n    \n// let action_serde: ActionSerDe = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n// let action_builder: ActionDefinitionBuilder = ActionDefinitionBuilder::new(\n//   WAIT,\n//   MIN_PROGRESS,\n//   MAX_PROGRESS,\n//   ACTION_RESULT_COORDINATES_IDX_SELF,\n//   ACTION_RESULT_COORDINATES_IDX_TARGET,\n//   ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//   NO_EVENT,\n//   RECEIVE_ATTACK,\n//   SEE_CAST,\n//   SEE_DRAW,\n//   SEE_MOVE,\n//   SEE_RITUAL,\n//   SEE_SEARCH_TRAP,\n//   DISARMED_TRAP,\n//   ADD_OBSTACLE,\n//   WIN\n// );\n    //let actionRegister = ActionDefinitionRegister::new(my_char_actions_input);\n    // calculate enemy advance in our coordinates and shadow\n    // let (enemy_advance_valid, enemy_advance) = their_x_to_mine(enemy_advance);\n\n    // // more efficient to do this here, BUT leads to bad side effects for frontend (and it is not THAT costly)\n    // let enemy_advance = if enemy_advance_input >= WIDTH { 0 } else { WIDTH - enemy_advance_input - 1 };\n\n\n    // TODO: Validate map => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    let (events_valid, events) = parse_their_events(enemy_events_input);\n    softassert!(quote { success }, quote { events_valid }, quote { f\"Failed to parse their events {events}\" });\n\n    // let side = move as u1;\n    let (my_chars_valid, mut my_chars) = parse_characters(my_chars_input, my_char_actions_input, events, enemy_advance_input);\n    softassert!(quote { success }, quote { my_chars_valid }, quote { f\"Failed to parse my characters {my_chars}\" });\n\n    let actor_id = get_actor_from_move(move_input);\n    let mut actor = my_chars[actor_id]; //Character::parse(actor_id, my_chars, events);\n    \n    comptime {\n        assert(MAX_OBSTACLES == 24);\n    }\n\n    let (valid, my_obstacles_parsed) = parse_my_obstacles(my_obstacles_input, events);\n    softassert!(quote { success }, quote { valid }, quote { f\"Failed to parse my obstacles {my_obstacles_input}\" });\n    let mut my_obstacles_parsed: [Obstacle; MAX_OBSTACLES] = my_obstacles_parsed;\n\n    let (actions_valid, actions) = parse_actions(MAX_CHARACTERS as u8, actions_input); // actions.map(|action| Action::from_field(action));\n    softassert!(quote { success }, quote { actions_valid }, quote { f\"Failed to parse actions {actions_input}\" });\n    // let mut my_obstacles_parsed = my_obstacles_parsed.as_array();\n//    let (valid, mut my_obstacles_parsed) = parse_my_obstacles(my_obstacles, events).as_array();\n    // TODO: validate obstacles => check that initial setup is ok => unique ids and no coordination overlaps!\n\n    // Note: no need to validate enemy obstacles => opponent proof verifies that they are correct already!\n    let (enemy_objects_parsed_valid, enemy_objects_parsed) = parse_their_obstacles(enemy_objects_input);\n    softassert!(quote { success }, quote { enemy_objects_parsed_valid }, quote { f\"Failed to parse their obstacles {enemy_objects_input}\" });\n\n    let mut energy: u8 = 12;\n    let mut result_events_calculated: [Event] = &[];\n    for i in 0..MAX_ACTIONS {\n        // TODO: ensure that if actor committed suicide, it is not allowed to do any more actions\n        let action = actions[i];\n        //let resolved_action = actionRegister.resolve_action(action); //resolve_action(action);\n        let result = execute_action(action, enemy_advance_input, actor, energy, my_obstacles_parsed, enemy_objects_parsed);\n        //assert(result.0);\n        success &= result.0;\n        let result_event = result.1;\n        let internal_event = result.2;\n        actor = result.4;\n        energy = result.5;\n        \n        // 4461 / 5 = 892,2\n        my_chars = my_chars.map(|c| wb_apply_damage_to_char(c, result_event, actor));\n        // 16800 / 24 = 700\n        my_obstacles_parsed = my_obstacles_parsed.map(|obstacle| {\n            let (updated_obstacle_valid, updated_obstacle) = update_my_obstacle(obstacle, result_event);\n            //success = success & updated_obstacle_valid;\n            softassert!(quote { success }, quote { updated_obstacle_valid }, quote { f\"Failed to update my obstacle {obstacle}, {result_event}\" });\n            updated_obstacle\n        });\n\n        result_events_calculated = result_events_calculated.push_back(result_event);\n    }\n    let result_events_calculated = serialize_events(result_events_calculated.as_array());\n    assert(result_events_calculated.len() == SERIALIZED_EVENTS_ARRAY_SIZE);\n\n    // send death events => no need\n\n    // determine view range\n    let mut my_advance_calculated = 0;\n    for i in 0..MAX_CHARACTERS {\n        if my_chars[i].x > my_advance_calculated {\n            my_advance_calculated = my_chars[i].x;\n        }\n    }\n    my_advance_calculated += VIEW_DISTANCE;\n\n    let (serialized_characters, serialized_action_defs) = serialize_chars(my_chars);\n    let serialized_obstacles: [Field] = serialize_my_obstacles(enemy_advance_input, my_obstacles_parsed);\n    let (serialized_chars_as_obstacles_valid, serialized_chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance_input, my_chars);\n    // success = success & serialized_chars_as_obstacles_valid;\n    softassert!(quote { success }, quote { serialized_chars_as_obstacles_valid }, quote { f\"Failed to serialize chars as obstacles: {my_chars}\" });\n    let serialized_obstacles_for_enemy: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE] = serialized_obstacles.push_back(serialized_chars_as_obstacles).as_array();\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles_parsed);\n\n    (success, serialized_characters, serialized_action_defs, my_obstacles_parsed, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy)\n}\n\n\n\n#[export]\npub fn turn(\n    // verification_key: pub [Field; 114],\n    // proof: pub [Field; 93],\n    // public_inputs: pub [Field; 1 ],//+ 2 * SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE + 2 * SERIALIZED_EVENTS_ARRAY_SIZE],\n    // key_hash: pub Field,\n    // last_move: pub u32,\n    // last_enemy_advance: pub u8,\n    // last_enemy_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // last_events: pub [Field, SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_advance: pub u8,\n    // last_my_result_events: pub [Field; SERIALIZED_EVENTS_ARRAY_SIZE],\n    // last_my_result_objects: pub [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE],\n    // Gamestate Hashes\n    // gamestate_before_hash: pub Field,\n    // gamestate_after_hash: pub Field,\n    // My Secret State\n    secret: Field,\n    my_chars_input: SerializedArenaCharacterRoster,\n    my_char_actions: SerializedArenaActionDefinitions,\n    my_obstacles_input: SerializedArenaObstacles,\n    //my_obstacles: [[u8; 5]; 24],\n    actions: SerializedArenaActions,\n    // Common Inputs\n    move: u32, //pub\n    // Enemy Inputs\n    enemy_advance: u8, // pub // from enemy point of view => starting from 0\n    enemy_objects: SerializedArenaEnemyObstacles, // pub\n    enemy_events: SerializedArenaEvents, // pub //MAX_EVENTS],\n    // My Results\n    my_result_advance: u8, // pub // 1 bit win, 1 bit lose, 1 bit reserved, 5 bits advance\n    my_result_events: SerializedArenaEvents, // pub\n    my_result_objects: SerializedArenaEnemyObstacles, // pub\n    // Gamestate Hashes\n    gamestate_before_hash: Field, // pub\n    gamestate_after_hash: Field, // pub\n) -> pub bool {\n    // Validate global constants (to make sure one didn't change one without updating dependet ones)\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    //let my_char_actions = arena_test_action_def_register;// get_test_action_register();\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(my_chars_input, my_char_actions, my_obstacles_input, secret);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    softassert!(quote { success }, quote { gamestate_before_hash == gamestate_before_hash_calculated_field }, quote { f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\" });\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        my_chars_input,\n        my_char_actions,\n        my_obstacles_input,\n        actions,\n        move,\n        enemy_advance,\n        enemy_objects,\n        enemy_events\n    );\n    softassert!(quote { success }, quote { turn_calc_valid }, quote { f\"Tun calculation failed\" });\n\n    // if side == 0 {\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x > my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated += VIEW_DISTANCE;\n    // } else {\n    //     my_advance_calculated = WIDTH - 1;\n    //     for i in 0..MAX_CHARACTERS {\n    //         if my_chars[i].x < my_advance_calculated {\n    //             my_advance_calculated = my_chars[i].x;\n    //         }\n    //     }\n    //     my_advance_calculated -= VIEW_DISTANCE;\n    // }\n    softassert!(quote { success }, quote { my_result_advance == my_advance_calculated }, quote { f\"Invalid result advance: {my_result_advance} != {my_advance_calculated}\" });\n\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        softassert!(quote { success }, quote { result_event_should == result_event_calculated }, quote { f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\" });\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    assert(my_result_objects.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE {\n        let my_result_object = my_result_objects[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        softassert!(quote { success }, quote { my_result_object == serialized_obstacle }, quote { f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\" });\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secret, serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    softassert!(quote { success }, quote { new_hash_bytes == gamestate_after_hash }, quote { f\"Invalid result hash: {new_hash_bytes} != {gamestate_after_hash}\" });\n    success\n}\n\nfn wb_apply_damage_to_char(mut c: Character, event: Event, actor: Character) -> Character {\n    if c.id == actor.id {\n        c = actor;\n    }\n    apply_damage_to_char(c, event)\n}\n\nfn apply_damage_to_char(c: Character, event: Event) -> Character {\n    let dmg = event.get_applied_damage_to_my_asset(c.x, c.y, c.class);\n    Character {\n        id: c.id,\n        x: c.x,\n        y: c.y,\n        class: c.class,\n        health: safe_subtract_dmg(c.health, dmg),\n        progress: c.progress,\n        target_x: c.target_x,\n        target_y: c.target_y,\n        has_been_seen: c.has_been_seen,\n        is_hidden: c.is_hidden,\n        damage_mod: c.damage_mod,\n        last_action: c.last_action,\n        actions: c.actions,\n        status: 0\n    }\n}\nfn update_my_obstacle(obstacle: Obstacle, event: Event) -> (bool, Obstacle) {\n    let dmg =\n        // event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle)) +\n        event.get_applied_damage_to_my_asset(get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_type(obstacle));\n    new_obstacle(get_obstacle_id(obstacle), get_obstacle_x(obstacle), get_obstacle_y(obstacle), safe_subtract_dmg(get_obstacle_health(obstacle), dmg), get_obstacle_type(obstacle))\n    // Obstacle {\n    //     health: safe_subtract_dmg(obstacle.health, dmg),\n    //     id: obstacle.id,\n    //     x: obstacle.x,\n    //     y: obstacle.y,\n    //     obstacle_type: obstacle.obstacle_type,\n    // }\n}\n\nfn get_data_hash(secret: Field, characters: Field, character_actions: SerializedArenaActionDefinitions, obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> Field {\n  assert(character_actions.len() == 30);\n  assert(obstacles.len() == 3);\n  std::hash::poseidon2::Poseidon2::hash([\n    secret,\n    characters,\n    character_actions[0],\n    character_actions[1],\n    character_actions[2],\n    character_actions[3],\n    character_actions[4],\n    character_actions[5],\n    character_actions[6],\n    character_actions[7],\n    character_actions[8],\n    character_actions[9],\n    character_actions[10],\n    character_actions[11],\n    character_actions[12],\n    character_actions[13],\n    character_actions[14],\n    character_actions[15],\n    character_actions[16],\n    character_actions[17],\n    character_actions[18],\n    character_actions[19],\n    character_actions[20],\n    character_actions[21],\n    character_actions[22],\n    character_actions[23],\n    character_actions[24],\n    character_actions[25],\n    character_actions[26],\n    character_actions[27],\n    character_actions[28],\n    character_actions[29],\n    obstacles[0],\n    obstacles[1],\n    obstacles[2]\n  ], 2 + 30 + 3)\n}\n// fn get_data_hash(secret: [u8], characters: [u8], character_actions: [u8; ACTION_DEFINITION_REGISTER_SIZE], obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> [u8; 32] {\n//     assert(secret.len() == 32);\n//     assert(characters.len() == 32);\n\n//     let mut data: [u8; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE] = [0; 32 + 32 + SERIALIZED_OBSTACLES_ARRAY_SIZE * 32 + ACTION_DEFINITION_REGISTER_SIZE];\n//     for i in 0..32 {\n//         data[i] = secret[i];\n//         data[i + 32] = characters[i];\n//     }\n//     let offset = 32 + 32;\n//     for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//         let obstacle: [u8; 32] = obstacles[i].to_be_bytes::<32>();\n//         assert(obstacle.len() == 32);\n//         for j in 0..32 {\n//             data[offset + i * 32 + j] = obstacle[j];\n//         }\n//     }\n//     let offset = 32 + 32 + 32 * SERIALIZED_OBSTACLES_ARRAY_SIZE;\n//     for i in 0..ACTION_DEFINITION_REGISTER_SIZE {\n//         data[offset + i] = character_actions[i];\n//     }\n//     // let offset = WIDTH * HEIGHT + 32 * 3;\n//     // for i in 0..10 {\n//     //     data[offset + i * 4] = (searched_traps[i] & 255) as u8;\n//     //     data[offset + i * 4 + 1] = ((searched_traps[i] >> 8) & 255) as u8;\n//     //     data[offset + i * 4 + 2] = ((searched_traps[i] >> 16) & 255) as u8;\n//     //     data[offset + i * 4 + 3] = ((searched_traps[i] >> 24) & 255) as u8;\n//     // }\n//     std::hash::blake3(data)\n// }\n\n// fn serialize_chars(chars: [Character; MAX_CHARACTERS]) -> Field {\n//     comptime {\n//         assert(MAX_CHARACTERS <= 5);\n//     }\n//     let mut result: [u8; 32] = [0; 32];\n//     for i in 0..MAX_CHARACTERS {\n//         let serialized = chars[i].serialize();\n//         for j in 0..6 {\n//             result[2 + i * 6 + j] = serialized[j];\n//         }\n//     }\n//     std::field::bytes32_to_field(result)\n// }\n\nfn serialize_chars_as_obstacles(enemy_advance: u8, chars: [Character; MAX_CHARACTERS]) -> (bool, Field) {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut result: [u8; 32] = [0; 32];\n    let mut valid_result = true;\n    for i in 0..MAX_CHARACTERS {\n        if (chars[i].is_hidden == 0) & is_visible(enemy_advance, chars[i].get_x()) {\n            let (valid, char_as_obstacle) = chars[i].to_obstacle();\n            let serialized = serialize_obstacle(char_as_obstacle);\n            valid_result = valid_result & valid;\n            result[2 + i * 3] = serialized[0];\n            result[2 + i * 3 + 1] = serialized[1];\n            result[2 + i * 3 + 2] = serialized[2];\n        }\n    }\n    (valid_result, std::field::bytes32_to_field(result))\n}\n\nfn safe_subtract_dmg(a: u8, b: u16) -> u8 {\n    let mut result = 0;\n    if (a as u16) > b {\n        result = a - (b as u8);\n    }\n    result\n}\n\nfn test_result_object_builder(enemy_advance: u8, chars: [Character; MAX_CHARACTERS], obs: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1]) {\n    let mut result: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE + 1];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        result[i] = obs[i];\n    }\n    let (valid, chars_as_obstacles) = serialize_chars_as_obstacles(enemy_advance, chars);\n    result[SERIALIZED_OBSTACLES_ARRAY_SIZE] = chars_as_obstacles;\n    (valid, result)\n}\n\n// fn test_helper_roster(actor: Character, mut chars: [Character; MAX_CHARACTERS]) -> [Character; MAX_CHARACTERS] {\n//     chars[actor.id] = actor;\n//     chars\n// }\n\n// fn test_helper_execute_move(move: u32, actor: Character, advances: [u8; 2], secret: [Field; 2], last_hashes: [Field; 2], chars: [[Character; MAX_CHARACTERS]; 2], obs: [[Obstacle; MAX_OBSTACLES]; 2], actions: [Action], my_events: [Event], their_events: [Event]) -> (u32, [Character; MAX_CHARACTERS], Field) {\n//     let side = move as u1;\n//     let other_side = (side as u8 + 1) as u1;\n//     let chars_after = test_helper_roster(actor, chars[side]);\n//     let my_obstacles_serialized = serialize_obstacles(advances[other_side], obs[side]);\n//     let secret_be_bytes: [u8; 32] = secret[side].to_be_bytes();\n//     assert(secret_be_bytes.len() == 32);\n//     let serialized_chars_after = serialize_chars(chars_after);\n//     let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes();\n//     assert(serialized_chars_after_be_bytes.len() == 32);\n//     let current_hash = std::field::bytes32_to_field(get_data_hash(secret_be_bytes, serialized_chars_after_be_bytes, my_obstacles_serialized)); \n\n//     let (enemy_objects_valid, enemy_objects) = test_result_object_builder(chars[other_side], serialize_obstacles(other_side, advances[side], obs[other_side]));\n//     assert(enemy_objects_valid, \"Invalid enemy objects\");\n//     let (my_result_objects_valid, my_result_objects) = test_result_object_builder(chars_after, my_obstacles_serialized);\n//     assert(my_result_objects_valid, \"Invalid my result objects\");\n\n//     let result = turn(\n//         secret[side],\n//         character::serialize_chars(chars[side]),\n//         my_obstacles_serialized,\n//         serialize_actions(actions),\n//         move,\n//         advances[other_side],\n//         enemy_objects,\n//         Event::serialize_events(their_events).as_array(),\n//         advances[side],\n//         Event::serialize_events(my_events).as_array(),\n//         my_result_objects,\n//         last_hashes[side],\n//         current_hash\n//     );\n//     assert(result, \"Invalid result\");\n\n//     (move + 1, chars_after, current_hash)\n// }\n\n// #[test]\n// fn test_main() {\n//     let secrets = [123456789, 9876543210];\n//     let mut chars = [ character::get_default_characters(0), character::get_default_characters(1) ];\n//     let mut obs = [ Obstacle::get_default_obstacles(0), Obstacle::get_default_obstacles(1) ];\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 2, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 3, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 4, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 5, target_y: 1 },\n//     ];\n//     let their_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let mut move = 0;\n//     let mut actor = chars[0][0].move(5, 1);\n//     let mut last_hashes = [ 0x12b8f97907a05ec6a77da3f70368fa3b02e166c74edab8ea0695d6f406146559, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n//     let mut advances = [2 + VIEW_DISTANCE, 29 - VIEW_DISTANCE];\n//     advances[0] = 5 + VIEW_DISTANCE;\n\n//     let mut side = move % 2;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 0, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 1 },\n//         Action { action: MOVE, actor: 0, target_x: 28, target_y: 0 },\n//         Action { action: MOVE, actor: 0, target_x: 27, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(0); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(27, 0);\n//     advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 1, target_y: 3 },\n//         Action { action: MOVE, actor: 1, target_x: 0, target_y: 3 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(0, 3);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n\n//     side = move % 2;\n//     let actions = &[\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 2 },\n//         Action { action: MOVE, actor: 1, target_x: 29, target_y: 1 },\n//         Action { action: MOVE, actor: 1, target_x: 28, target_y: 1 },\n//         Action { action: WAIT, actor: 1, target_x: 0, target_y: 0 },\n//     ];\n//     let their_events = my_events;\n//     let my_events: [Event] = &[Event::empty(1); MAX_EVENTS];\n//     let actor = chars[side][((move as u64 / 2) % MAX_CHARACTERS)].move(28, 1);\n//     //advances[side] = 27 - VIEW_DISTANCE;\n//     let result = test_helper_execute_move(move, actor, advances, secrets, last_hashes, chars, obs, actions, my_events, their_events);\n//     move = result.0;\n//     chars[side] = result.1;\n//     last_hashes[side] = result.2;\n// }\n\n#[test]\nfn test_main_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions = arena_test_action_def_register.map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x07a86579c9d2236bd1c02ced0660e9280e1d9a73146a0c9c8e4d8e27d64d6565, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    println(secrets[side]);\n    println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    println(my_obstacles_serialized_for_me);\n    println(serialize_actions(actor.id, actions));\n    println(move);\n    println(advances[other_side]);\n    println(test_result_object_other_chars);\n    println(serialize_events(their_events));\n    println(advances[side]);\n    println(serialize_events(my_events));\n    println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let result = turn(\n        secrets[side],\n        serialized_chars_input,\n        serialized_char_actions_input,\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events),\n        advances[side],\n        serialize_events(my_events),\n        test_result_object_chars_after,\n        last_hashes[side],\n        current_hash\n    );\n    assert(result, \"Turn failed\");\n}\n\n\n#[test]\nfn test_calc_fireball_ff() {\n  // let action_serde = ActionSerDe::new(MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER as u8, WIDTH, HEIGHT, WAIT);\n  let wait_action = get_wait_action_def();\n    let secrets = [123456789, 9876543210];\n    let test_actions = [0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071020100a000020100a00000020000000002000000000000000, 0x02f0000a3b1901002000000000000801000020000000002000000000000000, 0x023100081b161118120a010018120a01000020000000002000000000000000, 0xf0003f000001002000000000200000000020000000002000000000000000, 0xf0003f000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071008100a000008100a00000020000000002000000000000000, 0xf0003f1b1c11002000000000000702000020000000002000000000000000, 0xff003f1b1c1100200e013f00000e013f0020000000002000000000000000, 0xf0003f000001002000000000200000000020000000002000000000000000, 0xf0003f000001002000000000200000000020000000002000000000000000, 0x03f00001300314002000000000100300000020000000002000000000000000, 0x02f0000110071018100a000018100a00000020000000002000000000000000, 0x09f0000130060c002000000000200000000020000000002000000000000000, 0xf00001100610001005000100100500010020000000002000000000000000, 0xf00001301c0100100d000000100d00000020000000002000000000000000, 0x0bf00001100c00002000000000200000000010040a00002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110061028100a000028100a00000020000000002000000000000000, 0xf0003f000001002000000000200000000020000000002000000000000000, 0xf0003f000001002000000000200000000020000000002000000000000000, 0xf0003f000001002000000000200000000020000000002000000000000000, 0xf0003f000001002000000000200000000020000000002000000000000000, 0x03f00001300414002000000000100300000020000000002000000000000000, 0x02f0000110071010100a000010100a00000020000000002000000000000000, 0xf000071b1611002000000000000705000020000000002000000000000000, 0x6300061b161164150a020164150a02010020000000002000000000000000, 0xf0003f000001002000000000200000000020000000002000000000000000, 0xf0003f000001002000000000200000000020000000002000000000000000].map(|a|a.to_be_bytes());\n    let mut chars = [\n        [\n            Character { id: 0, class: ARCHER, x: 9, y: 2, health: 100, progress: 1, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0, },\n            Character { id: 1, class: RITUALIST, x: 11, y: 3, health: 25, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: ROGUE, x: 12, y: 4, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: KNIGHT, x: 10, y: 4, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: MAGE, x: 10, y: 7, health: 100, progress: MIN_FIREBALL_ROUNDS_FOR_CAST + 1, target_x: 11, target_y: 4, has_been_seen: true, is_hidden: 0, damage_mod: 10, last_action: 3, actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ], [\n            Character { id: 0, class: MAGE, x: 13, y: 2, health: 100, progress: 2, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[0], test_actions[1], test_actions[2], test_actions[3], test_actions[4], test_actions[5]], status: 0,  },\n            Character { id: 1, class: ROGUE, x: 14, y: 6, health: 0, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 1, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[6], test_actions[7], test_actions[8], test_actions[9], test_actions[10], test_actions[11]], status: 0,  },\n            Character { id: 2, class: RITUALIST, x: 16, y: 3, health: 20, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[12], test_actions[13], test_actions[14], test_actions[15], test_actions[16], test_actions[17]], status: 0,  },\n            Character { id: 3, class: ARCHER, x: 16, y: 6, health: 100, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT, actions: [wait_action, test_actions[18], test_actions[19], test_actions[20], test_actions[21], test_actions[22], test_actions[23]], status: 0,  },\n            Character { id: 4, class: KNIGHT, x: 11, y: 4, health: 30, progress: 0, target_x: 0, target_y: 0, has_been_seen: true, is_hidden: 0, damage_mod: 0, last_action: WAIT,actions: [wait_action, test_actions[24], test_actions[25], test_actions[26], test_actions[27], test_actions[28], test_actions[29]], status: 0,  },\n        ]\n    ];\n// x, y & type, health\n// 0x091264 0b2300 0c3400 0a442d 095764 000000000000000000000000000000 // direct\n// 0x091264 0b2319 0c3414 0a4464 095764 000000000000000000000000000000 // turn\n    let mut obs = [ get_default_obstacles(0), get_default_obstacles(1) ];\n    let actions = &[\n        new_action(4, 4, 11, 4), //Action { action: CAST_FIREBALL, actor: 4, target_x: 11, target_y: 4 },\n        new_action(1, 4, 9, 7), //Action { action: MOVE, actor: 4, target_x: 9, target_y: 7 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n        new_action(WAIT, 4, 0, 0), //Action { action: WAIT, actor: 4, target_x: 0, target_y: 0 },\n    ];\n    let their_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 3, x: 20, y: 3, subtype: ATTACK_RANGED, value: 50, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 5, subtype: 0, value: 0, radius: 0 },\n        Event { event: SEE_MOVE, actor_id: 3, x: 16, y: 6, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 3, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    let my_events: [Event; MAX_EVENTS] = [\n        Event { event: RECEIVE_ATTACK, actor_id: 4, x: 11, y: 4, subtype: ATTACK_FIREBALL, value: 0x78, radius: 1 },\n        Event { event: SEE_MOVE, actor_id: 4, x: 9, y: 7, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n        Event { event: NO_EVENT, actor_id: 4, x: 255, y: 255, subtype: 0, value: 0, radius: 0 },\n    ];\n    // event actor x y value subt rad\n    // 0x091264 0b2300 0c3400 0a4428 0b5464 000000000000000000000000000000\n    // 0x0a040b04780201 03040907000000 0004000000000000040000000000000000\n    // 0x0a040b04780201 03040907000000 0004ffff0000000004ffff000000000000\n    // 0x091264 0b2300 0c3400 0a4428 095764000000000000000000000000000000\n    let mut move = 8;\n    let mut actor = Character { //chars[0][4].move(9, 7).set_status(0);\n        id: chars[0][4].id,\n        class: chars[0][4].class,\n        x: get_action_target_x(actions[1]),\n        y: get_action_target_y(actions[1]),\n        target_x: get_action_target_x(actions[1]), // TODO\n        target_y: get_action_target_y(actions[1]),\n        has_been_seen: chars[0][4].has_been_seen,\n        is_hidden: 0 as u1,\n        health: chars[0][4].health,\n        damage_mod: chars[0][4].damage_mod,\n        last_action: get_action_type(actions[1]),\n        progress: 0,\n        status: 0,\n        actions: chars[0][4].actions\n    };\n    //let mut last_hashes = [ 0x090a46a65d4c7c05f3c98b25c2639539d91c1542fd78e9c9c837f96de08c6a84, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut last_hashes = [ 0x07a86579c9d2236bd1c02ced0660e9280e1d9a73146a0c9c8e4d8e27d64d6565, 0x2bca22f32b0b864574d0509ba146be256d2186fc490311756f541e1b5f8e391f ];\n    let mut advances = [12 + VIEW_DISTANCE, 18 + VIEW_DISTANCE];\n\n    let side = move as u1;\n    let other_side = (side as u8 + 1) as u1;\n    let chars_after = [ chars[side][0], chars[side][1].take_damage(ATTACK_RANGED, 50).take_damage(ATTACK_FIREBALL, 60), chars[side][2].take_damage(ATTACK_FIREBALL, 54), chars[side][3].take_damage(ATTACK_FIREBALL, 60), actor ];\n    let my_obstacles_serialized_for_enemy = serialize_my_obstacles(advances[other_side], obs[side]);\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(obs[side]);\n    let secret_be_bytes: [u8; 32] = secrets[side].to_be_bytes::<32>();\n    assert(secret_be_bytes.len() == 32);\n    let (serialized_chars_after, serialized_char_actions_after) = serialize_chars(chars_after);\n    // let serialized_chars_after_be_bytes: [u8; 32] = serialized_chars_after.to_be_bytes::<32>();\n    // assert(serialized_chars_after_be_bytes.len() == 32);\n    let current_hash = get_data_hash(secrets[side], serialized_chars_after, serialized_char_actions_after, my_obstacles_serialized_for_me);\n\n    // turn:  0x2912640000004b03000000006c04002000008a0428000000a9076400000a\n    // calc:  0x2912640000004b03000000006c04002000008a0428000000a907640b340a\n    let (test_result_object_chars_after_valid, test_result_object_chars_after) = test_result_object_builder(advances[other_side], chars_after, my_obstacles_serialized_for_enemy);\n    let test_result_object_other_side_result = serialize_their_obstacles(advances[side], obs[other_side]);\n    let test_result_object_other_side = test_result_object_other_side_result.1;\n    let (test_result_object_other_chars_valid, test_result_object_other_chars) = test_result_object_builder(advances[side], chars[other_side], test_result_object_other_side);\n    println(\"Test-Inputs:\");\n    println(secrets[side]);\n    println(character::serialize_chars(chars[side]));\n    // println(get_test_action_register());\n    println(my_obstacles_serialized_for_me);\n    println(serialize_actions(actor.id, actions));\n    println(move);\n    println(advances[other_side]);\n    println(test_result_object_other_chars);\n    println(serialize_events(their_events));\n    println(advances[side]);\n    println(serialize_events(my_events));\n    println(test_result_object_chars_after);\n    println(last_hashes[side]);\n    println(current_hash);\n    println(\"Test-Inputs done\");\n    assert(test_result_object_chars_after_valid, \"Invalid test result object chars after\");\n    assert(test_result_object_other_chars_valid, \"Invalid test result object other chars\");\n\n    let (serialized_chars_input, serialized_char_actions_input) = serialize_chars(chars[side]);\n\n\n\n    comptime {\n        assert((SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLE_BYTE_SIZE) < 32);\n        assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE >= MAX_OBSTACLES);\n        assert(SERIALIZED_EVENTS_PER_FIELD * SERIALIZED_EVENTS_ARRAY_SIZE == MAX_EVENTS);\n        // assert(SERIALIZED_OBSTACLES_PER_FIELD * SERIALIZED_OBSTACLES_ARRAY_SIZE == MAX_OBSTACLES);\n    }\n\n    let my_char_actions = arena_test_action_def_register; //get_test_action_register();\n    println(\"my_char_actions\");\n    println(my_char_actions);\n    println(\"serialized_char_actions_input\");\n    println(serialized_char_actions_input);\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n    // [0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071020100a000020100a0000002000000000200000000000000000, 0x02f0000a3b190100200000000000080100002000000000200000000000000000, 0x023100081b161118120a010018120a0100002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071008100a000008100a0000002000000000200000000000000000, 0xf0003f1b1c1100200000000000070200002000000000200000000000000000, 0xff003f1b1c1100200e013f00000e013f002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130031400200000000010030000002000000000200000000000000000, 0x02f0000110071018100a000018100a0000002000000000200000000000000000, 0x09f0000130060c00200000000020000000002000000000200000000000000000, 0xf0000110061000100500010010050001002000000000200000000000000000, 0xf00001301c0100100d000000100d0000002000000000200000000000000000, 0x0bf00001100c00002000000000200000000010040a0000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110061028100a000028100a0000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0x03f0000130041400200000000010030000002000000000200000000000000000, 0x02f0000110071010100a000010100a0000002000000000200000000000000000, 0xf000071b161100200000000000070500002000000000200000000000000000, 0x6300061b161164150a020164150a0201002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000, 0xf0003f00000100200000000020000000002000000000200000000000000000]\n\n    let mut success = true;\n    // let secret_be_bytes: [u8; 32] = secret.to_be_bytes::<32>();\n    // assert(secret_be_bytes.len() == 32);\n\n    let gamestate_before_hash = last_hashes[side];\n    // let serialized_obstacles_for_me = serialize_my_obstacles_for_me(my_obstacles);\n    let gamestate_before_hash_calculated_field = hash_serialized_private_state(serialized_chars_input, my_char_actions, my_obstacles_serialized_for_me, secrets[side]);\n    // assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"{gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    assert(gamestate_before_hash == gamestate_before_hash_calculated_field, f\"Invalid pre-hash: {gamestate_before_hash} != {gamestate_before_hash_calculated_field}\");\n    // std::verify_proof(verification_key, proof, public_inputs, key_hash);\n    // let (serialized_actions_valid, serialized_actions_input) = ;\n    let  (turn_calc_valid, serialized_characters, my_char_actions_after, serialized_obstacles, my_advance_calculated, result_events_calculated, serialized_obstacles_for_enemy) = calculate_turn(\n        serialized_chars_input,\n        serialized_char_actions_input,\n        // get_test_action_register(),\n        my_obstacles_serialized_for_me, //obs[side],\n        serialize_actions(actor.id, actions),\n        move,\n        advances[other_side],\n        test_result_object_other_chars,\n        serialize_events(their_events)\n    );\n    assert(turn_calc_valid, f\"Tun calculation failed\");\n    assert(advances[side] == my_advance_calculated, f\"Invalid result advance:  != {my_advance_calculated}\");\n\nlet my_result_events: [Field; SERIALIZED_EVENTS_ARRAY_SIZE] = serialize_events(my_events);\n    // validate result\n    for i in 0..SERIALIZED_EVENTS_ARRAY_SIZE {\n        let result_event_calculated = result_events_calculated[i];\n        let result_event_should = my_result_events[i];\n        assert(result_event_should == result_event_calculated, f\"Invalid result event {i}: {result_event_should} != {result_event_calculated}\");\n    }\n    // assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    // let serialized_characters_be_bytes: [u8; 32] = serialized_characters.to_be_bytes::<32>();\n    // assert(serialized_characters_be_bytes.len() == 32);\n    debug!(quote {\n        println(f\"serialized_obstacles: {serialized_obstacles}\");\n        println(f\"serialized_obstacles_for_enemy: {serialized_obstacles_for_enemy}\");\n        println(f\"serialized_characters: {serialized_characters}\");\n        // println(f\"serialized_characters_be_bytes: {serialized_characters_be_bytes}\");\n    });\n    // let new_hash = std::field::bytes32_to_field(new_hash_bytes);\n    for i in 0..test_result_object_chars_after.len() {\n        let my_result_object = test_result_object_chars_after[i];\n        let serialized_obstacle = serialized_obstacles_for_enemy[i];\n        assert(my_result_object == serialized_obstacle, f\"Invalid result obstacle row {i}: {my_result_object} != {serialized_obstacle}\");\n    }\n    let my_obstacles_serialized_for_me = serialize_my_obstacles_for_me(serialized_obstacles);\n    let new_hash_bytes = get_data_hash(secrets[side], serialized_characters, my_char_actions_after, my_obstacles_serialized_for_me);\n    assert(new_hash_bytes == current_hash, f\"Invalid result hash: {new_hash_bytes} != {current_hash}\");\n}\n\n// #[export]\n// pub fn setup_obstacles(\n    \n// )","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/lib.nr"},"83":{"source":"use arenalib::{ WIDTH, WIDTH_MASK, VIEW_DISTANCE, MAX_OBSTACLES, MAX_ENEMY_OBSTACLES };\nuse crate::obstacle::{ Obstacle, get_obstacle_y, get_obstacle_x, is_obstacle_traversible };\nuse skplg::NOWHERE;\n\n// pub fn is_neighbor(curr_x: u8, curr_y: u8, x: u8, y: u8) -> bool {\n//     // assert(curr_x < WIDTH);\n//     // assert(curr_y < HEIGHT);\n//     // assert(x < WIDTH);\n//     // assert(y < HEIGHT);\n//     // validating coordinates is not the job of this function\n//     // only avoid overflows!\n\n\n//     let shifted_curr_x = std::wrapping_add(curr_x, 1);\n//     let shifted_curr_y = std::wrapping_add(curr_y, 1);\n//     let shifted_x = std::wrapping_add(x, 1);\n//     let shifted_y = std::wrapping_add(y, 1);\n\n//     ((shifted_curr_x == shifted_x) & (std::wrapping_add(shifted_curr_y, 1) >= shifted_y) & (shifted_curr_y <= std::wrapping_add(shifted_y, 1))) |\n//     ((shifted_curr_y == shifted_y) & (std::wrapping_add(shifted_curr_x, 1) >= shifted_x) & (shifted_curr_x <= std::wrapping_add(shifted_x, 1)))\n// }\n\n// global DISTANCE_TABLE_HEIGHT: u32 = HEIGHT as u32;\n// global DISTANCE_TABLE_WIDTH: u32 = WIDTH as u32;\n\n// unconstrained fn distance_sqrt(x: u32) -> u32 {\n//     let mut result: u32 = 0;\n//     for i in 0..DISTANCE_TABLE_WIDTH {\n//         if i * i == x {\n//             result = i;\n//             break;\n//         }\n//     }\n//     result\n// }\n\n// fn d(a: u8, b: u8) -> u8 {\n//     let d = a as i32 - b as i32;\n//     let d2 = d * d;\n//     assert(d2 >= 0);\n//     let d2u = d2 as u32;\n//     let result = unsafe {\n//         let sq = distance_sqrt(d2u);\n//         assert(sq * sq == d2u);\n//         sq\n//     };\n//     assert(result < DISTANCE_TABLE_WIDTH);\n//     comptime { assert(DISTANCE_TABLE_WIDTH <= 256) };\n//     result as u8\n// }\n// global DISTANCE_TABLE: [[u8; DISTANCE_TABLE_WIDTH]; DISTANCE_TABLE_HEIGHT] = [\n//     [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 1,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],\n//     [ 2,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ],\n//     [ 3,  3,  3,  4,  4,  5,  6,  7,  8,  9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ],\n// ]\n\npub fn get_distance(curr_x: u8, curr_y: u8, x: u8, y: u8) -> u16 {\n    // assert(curr_x < WIDTH);\n    // assert(curr_y < HEIGHT);\n    // assert(x < WIDTH);\n    // assert(y < HEIGHT);\n    // validating coordinates is not the job of this function\n    // only avoid overflows!\n\n    // let dx = unsafe {\n    //     let diff_\n    //     distance_sqrt(x)\n    // }\n\n    let dx = if curr_x > x { curr_x - x } else { x - curr_x } as u16;\n    let dy = if curr_y > y { curr_y - y } else { y - curr_y } as u16;\n\n    // let dx = curr_x as i16 - x as i16;\n    // let dy = curr_y as i16 - y as i16;\n\n    (dx * dx + dy * dy) as u16\n}\n\n\npub fn is_visible(enemy_advance: u8, x: u8) -> bool {\n    //(x >= enemy_advance) == (side == 0)\n    x >= enemy_advance\n}\n\n// TODO: This is for the future - fireballs, etc. only if we have line of sight\n// pub fn is_visible(curr_x: u8, curr_y: u8, x: u8, y: u8, map: &Map) -> bool {\n//     assert(curr_x < WIDTH);\n//     assert(curr_y < HEIGHT);\n//     assert(x < WIDTH);\n//     assert(y < HEIGHT);\n\n//     let mut x = curr_x as f32;\n//     let mut y = curr_y as f32;\n//     let x2 = x + 0.5;\n//     let y2 = y + 0.5;\n//     let dx = x2 - x;\n//     let dy = y2 - y;\n//     let mut t = 0.0;\n//     let mut max_t = 1.0;\n//     let mut x = x;\n//     let mut y = y;\n\n//     while t < max_t {\n//         let x = x + dx * t;\n//         let y = y + dy * t;\n//         let x = x as u8;\n//         let y = y as u8;\n\n//         if map.is_wall(x, y) {\n//             return false;\n//         }\n\n//         t += 0.1;\n//     }\n\n//     true\n// }\n\npub fn their_x_to_mine(x: u8) -> (bool, u8) {\n    if x == NOWHERE {\n        (true, NOWHERE)\n    } else {\n        (x < WIDTH, std::wrapping_sub(WIDTH - 1, x) & WIDTH_MASK)\n    }\n}\n\npub fn can_move_to(distance: u16, x: u8, y: u8, obstacles: [Obstacle; MAX_OBSTACLES], their_obstacles: [Obstacle; MAX_ENEMY_OBSTACLES]) -> bool {\n    let mut can = distance <= (VIEW_DISTANCE as u16 * VIEW_DISTANCE as u16); //x <= advance;\n\n    for i in 0..MAX_OBSTACLES {\n        if !is_obstacle_traversible(obstacles[i]) & (get_obstacle_x(obstacles[i]) == x) & (get_obstacle_y(obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    for i in 0..MAX_ENEMY_OBSTACLES {\n        if !is_obstacle_traversible(their_obstacles[i]) & (get_obstacle_x(their_obstacles[i]) == x) & (get_obstacle_y(their_obstacles[i]) == y) {\n            can = false;\n        }\n    }\n    can\n}\n// pub fn their_x_to_mine(side: u1, x: i8) -> i8 {\n//     let mul = side as i8;\n//     mul * 31 + 16 + x\n// }\n\n// x * s -16 + y = 0 if s == 0 => y = 16\n// x * s -16 + y = 31 if s == 1 => x = 31\n// y = 31 * s + 16 + x\n// s = 0:\n// x = -16 => y = 0\n// x = 15 => y = 31\n// s = 1:\n// x = -16 => y = 31\n// x = 15 => y = 0\n\n// pub fn serialize_x(x: i8) -> (bool, u8) {\n//     let valid = (x >= -(WIDTH / 2) as i8) & (x < (WIDTH / 2) as i8);\n//     (valid, (x + (WIDTH / 2) as i8) as u8)\n// }\n\n// pub fn deserialize_x(x: u8) -> (bool, i8) {\n//     let valid = x < WIDTH;\n//     (valid, x as i8 - (WIDTH / 2) as i8)\n// }","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/map.nr"},"84":{"source":"// use crate::MAX_OBSTACLES;\n// use crate::{ HEIGHT, WIDTH };\n// use crate::{ EMPTY, WALL, WATER };\n// use crate::{ MAX_EVENTS }; // MAX_CHARACTERS\n// // use crate::{ RECEIVE_ATTACK };\n// // use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\n// use crate::{ SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\n// use crate::NON_EMPTY_WALKABLE_TILE_MIN;\n// use crate::event::Event;\n// use crate::map::{ is_visible }; //is_neighbor\n// use dep::std;\n\n// pub struct Obstacle {\n//     pub id: u8,\n//     pub x: u8,             // 5 bit\n//     pub y: u8,             // 4 bit\n//     pub health: u8,        // 8 bit\n//     pub obstacle_type: u8, // 4 bit\n// }\n\n// pub impl Obstacle {\n//     pub fn serialize(self) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         assert(self.y < 0x10, f\"Obstacle y is too large\");\n//         assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n\n//         let packed_y = self.obstacle_type * 0x10 + self.y;\n//         [ self.x, packed_y, self.health]\n//     }\n\n//     pub fn is_obstacle_traversible(self) -> bool {\n//         (self.obstacle_type >= NON_EMPTY_WALKABLE_TILE_MIN) | (self.obstacle_type == EMPTY)\n//     }\n\n//     pub fn parse_their_obstacles(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let health = field[2];\n//         let o = Obstacle {\n//             id: id,\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn parse_obstacle(id: u8, field: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> Obstacle {\n//         assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n//         //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n//         let x = field[0];\n//         let y = field[1] & 0x0F;\n//         let obstacle_type = (field[1] & 0xF0) / 0x10;\n//         let mut health = field[2];\n//         if (obstacle_type == WALL) | (obstacle_type == WATER) {\n//             let mut damage = 0;\n//             for i in 0..MAX_EVENTS {\n//                 damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n//             }\n//             if damage > (health as u16) {\n//                 health = 0;\n//             } else {\n//                 health -= (damage as u8);\n//             }\n//         }\n//         let o = Obstacle {\n//             id: id, // + (MAX_CHARACTERS as u8),\n//             x: x,\n//             y: y,\n//             health: health,\n//             obstacle_type: obstacle_type,\n//             //was_alive: was_alive,\n//         };\n//         assert(o.is_valid());\n//         o\n//     }\n\n//     pub fn is_valid(self) -> bool {\n//         (self.x < WIDTH) & (self.y < HEIGHT)\n//     }\n\n//     pub fn parse_their_obstacles(serialized_obstacles: [Field; SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_their_obstacles(id, serialized_obstacle));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn parse_my_obstacles(serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE], events: [Event; MAX_EVENTS]) -> [Obstacle] {\n//         let mut obstacles: [Obstacle] = &[];\n//         for i in 0..serialized_obstacles.len() {\n//             let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes();\n//             assert(serialized_obstacle_field.len() == 32);\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n//                 let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n//                 obstacles = obstacles.push_back(Obstacle::parse_obstacle(id, serialized_obstacle, events));\n//             }\n//         }\n//         obstacles\n//     }\n\n//     pub fn serialize_obstacles(side: u1, enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n//         let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n//         for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n//             let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n//             for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n//                 let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n//                 if is_visible(side, enemy_advance, obstacle.x) {\n//                     let serialized_obstacle = obstacle.serialize();\n//                     for k in 0..3 {\n//                         serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n//                     }\n//                 }\n//             }\n//             serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n//         }\n//         serialized_obstacles\n//     }\n\n//     pub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n//         // assert(side < 2, f\"Side is too large {side}\");\n//         let x = |x| x * (((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n//         [\n//             new_obstacle( 0, x(0), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 1, x(1), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 2, x(3), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 3, x(4), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle( 4, x(5), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle( 5, x(5), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle( 6, x(5), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle( 7, x(5), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 8, x(4), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle( 9, x(3), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(10, x(1), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(11, x(0), y: 7, obstacle_type: 200, WALL),\n//             new_obstacle(12, x(7), y: 0, obstacle_type: 200, WALL),\n//             new_obstacle(13, x(7), y: 1, obstacle_type: 200, WALL),\n//             new_obstacle(14, x(7), y: 2, obstacle_type: 200, WALL),\n//             new_obstacle(15, x(7), y: 3, obstacle_type: 200, WALL),\n//             new_obstacle(16, x(7), y: 4, obstacle_type: 200, WALL),\n//             new_obstacle(17, x(7), y: 5, obstacle_type: 200, WALL),\n//             new_obstacle(18, x(6), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(19, x(7), y: 8, obstacle_type: 255, WATER),\n//             new_obstacle(20, x(5), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(21, x(6), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(22, x(7), y: 9, obstacle_type: 255, WATER),\n//             new_obstacle(23, x(8), y: 9, obstacle_type: 255, WATER),\n//         ]\n//     }\n// }\n\n\nuse arenalib::MAX_OBSTACLES;\nuse arenalib::{ HEIGHT, WIDTH };\nuse arenalib::{ EMPTY, WALL, WATER };\nuse arenalib::{ MAX_EVENTS, MAX_HEALTH, MAX_OBSTACLE_TYPE, MAX_ENEMY_OBSTACLES }; // MAX_CHARACTERS\n// use crate::{ RECEIVE_ATTACK };\n// use crate::{ ATTACK_MELEE, ATTACK_RANGED, ATTACK_FIREBALL };\nuse arenalib::{ SerializedArenaEnemyObstacles, SERIALIZED_OBSTACLE_BYTE_SIZE, SERIALIZED_OBSTACLES_PER_FIELD, SERIALIZED_OBSTACLES_ARRAY_SIZE };\nuse arenalib::NON_EMPTY_WALKABLE_TILE_MIN;\nuse arenalib::SerializedArenaObstacles;\nuse crate::event::Event;\nuse crate::map::{ is_visible, their_x_to_mine }; //is_neighbor\nuse dep::std;\nuse skplg::{softassert, NOWHERE};\nuse arenalib::SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE;\nuse arenalib::MAX_CHARACTERS;\n\n// pub type Obstacle = [u8; 5];\npub struct Obstacle {\n    pub id: u8,\n    pub x: u8,             // 5 bit\n    pub y: u8,             // 4 bit\n    pub health: u8,        // 8 bit\n    pub obstacle_type: u8, // 4 bit\n}\npub fn get_obstacle_id(obstacle: Obstacle) -> u8 {\n    obstacle.id //obstacle[0]\n}\npub fn get_obstacle_x(obstacle: Obstacle) -> u8 {\n    obstacle.x //[1]\n}\npub fn get_obstacle_y(obstacle: Obstacle) -> u8 {\n    obstacle.y //[2]\n}\npub fn get_obstacle_health(obstacle: Obstacle) -> u8 {\n    obstacle.health //[3]\n}\npub fn get_obstacle_type(obstacle: Obstacle) -> u8 {\n    obstacle.obstacle_type //[4]\n}\n\n#[export]\npub fn new_obstacle(id: u8, x: u8, y: u8, health: u8, obstacle_type: u8) -> pub (bool, Obstacle) {\n    let mut valid = true;\n    softassert!(quote { valid }, quote { (x < WIDTH) | (x == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid x: {x} >= {WIDTH}\" });\n    softassert!(quote { valid }, quote { (y < HEIGHT) | (y == NOWHERE) }, quote { f\"Cannot create Obstacle: Invalid y: {y} >= {HEIGHT}\" });\n    softassert!(quote { valid }, quote { health <= MAX_HEALTH }, quote { f\"Cannot create Obstacle: Invalid health: {health} > {MAX_HEALTH}\" });\n    softassert!(quote { valid }, quote { obstacle_type <= MAX_OBSTACLE_TYPE }, quote { f\"Cannot create Obstacle: Invalid obstacle type: {obstacle_type} > {MAX_OBSTACLE_TYPE}\" }); //TODO: not sure if this or is_valid???\n    // (valid, [ id, x, y, health, obstacle_type ])\n    (valid, Obstacle { id: id, x: x, y: y, health: health, obstacle_type: obstacle_type })\n}\n\n// #[export]\n// pub struct FrontendObstacle {\n//   pub id: u8,\n//   pub x: u8,\n//   pub y: u8,\n\n// }\n\npub fn serialize_obstacle(obstacle: Obstacle) -> [u8; SERIALIZED_OBSTACLE_BYTE_SIZE] {\n    // we could assert here, since obstacles can only be create with new_obstacle?!\n    // assert(self.y < 0x10, f\"Obstacle y is too large\");\n    // assert(self.obstacle_type < 0x10, f\"Obstacle type is too large\");\n    comptime {\n        let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let packed_y = get_obstacle_type(obstacle) * 0x10 + get_obstacle_y(obstacle);\n                [ get_obstacle_x(obstacle), packed_y, get_obstacle_health(obstacle)]\n            }\n        } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n            quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n                [ get_obstacle_x(obstacle), get_obstacle_y(obstacle), get_obstacle_health(obstacle), get_obstacle_type(obstacle)]\n            }\n        } else {\n            quote {\n                assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n            }\n        };\n        q\n    }\n}\n\npub fn is_obstacle_traversible(obstacle: Obstacle) -> bool {\n    (get_obstacle_type(obstacle) >= NON_EMPTY_WALKABLE_TILE_MIN) | (get_obstacle_type(obstacle) == EMPTY)\n}\n\npub fn parse_their_obstacle(id: u8, fld: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE]) -> (bool, Obstacle) {\n    comptime {\n        assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n    }\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let mut valid = true;\n    let x_raw = fld[0];\n    let (x_parsed_valid, x_parsed) = their_x_to_mine(x_raw);\n    softassert!(quote { valid }, quote { x_parsed_valid }, quote { f\"Failed to convert their x to mine of their obstacle {id}: {x_raw}\" });\n    let y = fld[1] & 0x0F;\n    let obstacle_type = (fld[1]) / 0x10;\n    let health = fld[2];\n    let (obstacle_valid, obstacle) = new_obstacle(id, x_parsed, y, health, obstacle_type);\n    softassert!(quote { valid }, quote { obstacle_valid }, quote { f\"Failed to create new obstacle {id}, {x_parsed}, {y}, {health}, {obstacle_type}\" });\n    (valid, obstacle)\n    // let o = Obstacle {\n    //     id: id,\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn parse_obstacle(id: u8, f: [u8; SERIALIZED_OBSTACLE_BYTE_SIZE], events: [Event; MAX_EVENTS]) -> (bool, Obstacle) {\n    //assert((id as u64) >= MAX_CHARACTERS, f\"Obstacle id is lower than minimum {id}\");\n    let x = f[0];\n    // let mut y = f[1];\n    // let mut obstacle_type = f[1];\n    // comptime {\n    //     let q = if SERIALIZED_OBSTACLE_BYTE_SIZE == 3 {\n    //         quote {\n                assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 3, f\"Obstacle byte size is not 3\");\n                let y = f[1] & 0x0F;\n                let obstacle_type = (f[1]) / 0x10;\n    //         }\n    //     } else if SERIALIZED_OBSTACLE_BYTE_SIZE == 4 {\n    //         quote {\n    //             assert(SERIALIZED_OBSTACLE_BYTE_SIZE == 4, f\"Obstacle byte size is not 4\");\n    //             y = f[1];\n    //             obstacle_type = f[3];\n    //         }\n    //     } else {\n    //         quote {\n    //             assert((SERIALIZED_OBSTACLE_BYTE_SIZE == 3) | (SERIALIZED_OBSTACLE_BYTE_SIZE == 4), f\"Invalid obstacle byte size {SERIALIZED_OBSTACLE_BYTE_SIZE}\");\n    //         }\n    //     };\n    //     q\n    // }\n    // let y = f[1]; // & 0x0F;\n    // let obstacle_type = f[3]; //f[1] / 0x10;// (f[1] & 0xF0) / 0x10;\n    let mut health = f[2];\n    //if (obstacle_type == WALL) | (obstacle_type == WATER) {\n        let mut damage = 0;\n        for i in 0..MAX_EVENTS {\n            damage += events[i].get_applied_damage_to_my_asset(x, y, obstacle_type);\n        }\n        if damage > (health as u16) {\n            health = 0;\n        } else {\n            health -= (damage as u8);\n        }\n    //}\n    new_obstacle(id, x, y, health, obstacle_type)\n    // let o = Obstacle {\n    //     id: id, // + (MAX_CHARACTERS as u8),\n    //     x: x,\n    //     y: y,\n    //     health: health,\n    //     obstacle_type: obstacle_type,\n    //     //was_alive: was_alive,\n    // };\n    // assert(o.is_valid());\n    // o\n}\n\npub fn is_obstacle_valid(obstacle: Obstacle) -> bool {\n    (get_obstacle_x(obstacle) < WIDTH) & (get_obstacle_y(obstacle) < HEIGHT)\n}\n\npub fn parse_their_obstacles(serialized_obstacles: SerializedArenaEnemyObstacles) -> (bool, [Obstacle; MAX_ENEMY_OBSTACLES]) {\n  let (dummy_obstacle_valid, dummy_obstacle) = new_obstacle(0, NOWHERE, NOWHERE, 255, 0);\n  assert(dummy_obstacle_valid);\n    let mut obstacles: [Obstacle; MAX_ENEMY_OBSTACLES] = [dummy_obstacle; MAX_ENEMY_OBSTACLES];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_ENEMY_OBSTACLES_ARRAY_SIZE);\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n            obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j] = obstacle; //s.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    let serialized_obstacle_field = serialized_obstacles[SERIALIZED_OBSTACLES_ARRAY_SIZE].to_be_bytes::<32>();\n    assert(serialized_obstacle_field.len() == 32);\n    for j in 0..MAX_CHARACTERS {\n      let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n      // let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n      let id = (MAX_OBSTACLES + j) as u8;\n      let (valid, obstacle) = parse_their_obstacle(id, serialized_obstacle);\n      obstacles[MAX_OBSTACLES + j] = obstacle; //s.push_back(obstacle);\n      valid_result = valid_result & valid;\n    }\n    (valid_result, obstacles)\n}\n\npub fn parse_my_obstacles(serialized_obstacles: SerializedArenaObstacles, events: [Event; MAX_EVENTS]) -> (bool, [Obstacle; MAX_OBSTACLES]) {\n    let mut obstacles: [Obstacle] = &[];\n    let mut valid_result = true;\n    assert(serialized_obstacles.len() == SERIALIZED_OBSTACLES_ARRAY_SIZE);\n    for i in 0..serialized_obstacles.len() {\n        let serialized_obstacle_field: [u8; 32] = serialized_obstacles[i].to_be_bytes::<32>();\n        assert(serialized_obstacle_field.len() == 32);\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2]];\n            //let serialized_obstacle = [serialized_obstacle_field[2 + j * 3], serialized_obstacle_field[2 + j * 3 + 1], serialized_obstacle_field[2 + j * 3 + 2], serialized_obstacle_field[2 + j * 3 + 2]];\n            let id = (i * SERIALIZED_OBSTACLES_PER_FIELD + j) as u8;\n            let (valid, obstacle) = parse_obstacle(id, serialized_obstacle, events);\n            obstacles = obstacles.push_back(obstacle);\n            valid_result = valid_result & valid;\n        }\n    }\n    (valid_result, obstacles.as_array())\n}\n\n#[export]\npub fn serialize_my_obstacles_for_me(obstacles: [Obstacle; MAX_OBSTACLES]) -> pub [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            let serialized_obstacle = serialize_obstacle(obstacle);\n            for k in 0..3 {\n                serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\n\npub fn serialize_my_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] {\n  let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let serialized_obstacle = serialize_obstacle(obstacle);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    serialized_obstacles\n}\npub fn serialize_their_obstacles(enemy_advance: u8, obstacles: [Obstacle; MAX_OBSTACLES]) -> (bool, [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE]) {\n    let mut valid_result = true;\n    let enemy_advance = if enemy_advance >= WIDTH { 0 } else { WIDTH - enemy_advance - 1 };\n    let mut serialized_obstacles: [Field; SERIALIZED_OBSTACLES_ARRAY_SIZE] = [0; SERIALIZED_OBSTACLES_ARRAY_SIZE];\n    for i in 0..SERIALIZED_OBSTACLES_ARRAY_SIZE {\n        let mut serialized_obstacle_field: [u8; 32] = [0; 32];\n        for j in 0..SERIALIZED_OBSTACLES_PER_FIELD {\n            let obstacle = obstacles[i * SERIALIZED_OBSTACLES_PER_FIELD + j];\n            if is_visible(enemy_advance, get_obstacle_x(obstacle)) {\n                let parsed_x = their_x_to_mine(get_obstacle_x(obstacle));\n                valid_result = valid_result & parsed_x.0;\n                let mirrored_obstacle = new_obstacle(\n                    get_obstacle_id(obstacle),\n                    parsed_x.1,\n                    get_obstacle_y(obstacle),\n                    get_obstacle_health(obstacle),\n                    get_obstacle_type(obstacle)\n                );\n                valid_result = valid_result & mirrored_obstacle.0;\n                let serialized_obstacle = serialize_obstacle(mirrored_obstacle.1);\n                for k in 0..3 {\n                    serialized_obstacle_field[2 + j * 3 + k] = serialized_obstacle[k];\n                }\n            }\n        }\n        serialized_obstacles[i] = std::field::bytes32_to_field(serialized_obstacle_field);\n    }\n    (valid_result, serialized_obstacles)\n}\n\nfn get_x_of_side(side: u1, x: u8) -> u8 {\n    x * ((side as u8 + 1) as u1) as u8 + side as u8 * (WIDTH - 1 - x)\n}\n\n#[test]\nfn test_x() {\n    let x8s0 = get_x_of_side(0, 8);\n    assert(x8s0 == 8, f\"{x8s0} != 8\");\n    let x8s1 = get_x_of_side(1, 8);\n    assert(x8s1 == 23, f\"{x8s1} != 23\");\n}\n\npub fn get_default_obstacles(side: u1) -> [Obstacle; MAX_OBSTACLES] {\n    // assert(side < 2, f\"Side is too large {side}\");\n    let x = |x| get_x_of_side(side, x); //(((side as u8) + 1) % 2) + (WIDTH - 1 - x) * (side as u8);\n    [\n        new_obstacle( 0, x(0), 2, 200, WALL).1,\n        new_obstacle( 1, x(1), 2, 200, WALL).1,\n        new_obstacle( 2, x(3), 2, 200, WALL).1,\n        new_obstacle( 3, x(4), 2, 200, WALL).1,\n        new_obstacle( 4, x(5), 3, 200, WALL).1,\n        new_obstacle( 5, x(5), 4, 200, WALL).1,\n        new_obstacle( 6, x(5), 5, 200, WALL).1,\n        new_obstacle( 7, x(5), 7, 200, WALL).1,\n        new_obstacle( 8, x(4), 7, 200, WALL).1,\n        new_obstacle( 9, x(3), 7, 200, WALL).1,\n        new_obstacle(10, x(1), 7, 200, WALL).1,\n        new_obstacle(11, x(0), 7, 200, WALL).1,\n        new_obstacle(12, x(7), 0, 200, WALL).1,\n        new_obstacle(13, x(7), 1, 200, WALL).1,\n        new_obstacle(14, x(7), 2, 200, WALL).1,\n        new_obstacle(15, x(7), 3, 200, WALL).1,\n        new_obstacle(16, x(7), 4, 200, WALL).1,\n        new_obstacle(17, x(7), 5, 200, WALL).1,\n        new_obstacle(18, x(6), 8, 255, WATER).1,\n        new_obstacle(19, x(7), 8, 255, WATER).1,\n        new_obstacle(20, x(5), 9, 255, WATER).1,\n        new_obstacle(21, x(6), 9, 255, WATER).1,\n        new_obstacle(22, x(7), 9, 255, WATER).1,\n        new_obstacle(23, x(8), 9, 255, WATER).1,\n        // new_obstacle(24, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(25, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(26, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(27, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(28, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(29, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(30, x(0), 0, 255, EMPTY).1,\n        // new_obstacle(31, x(0), 0, 255, EMPTY).1,\n    ]\n}\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skpl/src/obstacle.nr"},"85":{"source":"use skplg::{softassert, UNREADABLE_BYTES_PER_FIELD, NOWHERE};\nuse skpla::{ACTION_BYTE_SIZE, Action, new_action, get_action_actor, get_action_type, get_action_target_x, get_action_target_y};\nuse crate::SerializedArenaActions;\nuse crate::{MAX_ACTIONS, MAX_ACTIONS_PER_CHARACTER};\nuse crate::{WIDTH, HEIGHT};\nuse crate::WAIT;\n\npub global SERIALIZED_ACTION_BYTE_SIZE: u32 = ACTION_BYTE_SIZE;\npub global SERIALIZED_ACTIONS_PER_FIELD: u32 = 4;\npub global SERIALIZED_ACTIONS_ARRAY_SIZE: u32 = 1;\n\n// comptime fn get_serialized_actions_array_size() -> u32 {\n//   let needed_usable_bytes = MAX_ACTIONS * ACTION_BYTE_SIZE;\n//   let usable_bytes_per_field = 32 - UNREADABLE_BYTES_PER_FIELD;\n//   let field_count = needed_usable_bytes / usable_bytes_per_field;\n//   if field_count * usable_bytes_per_field == needed_usable_bytes {\n//     field_count\n//   } else {\n//     field_count + 1\n//   }\n// }\n\n\n  pub fn parse_actions(max_actor_id: u8, fields: SerializedArenaActions) -> (bool, [Action; MAX_ACTIONS]) {\n    let mut valid = true;\n    softassert!(quote { valid }, quote { fields.len() == SERIALIZED_ACTIONS_ARRAY_SIZE }, quote { f\"{fields} does not have size {SERIALIZED_ACTIONS_ARRAY_SIZE}\" });\n    comptime {\n      assert(SERIALIZED_ACTION_BYTE_SIZE == 4);\n    }\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n\n      let mut actions: [Action] = &[];\n      assert(fields.len() == 1);\n      // for i in 0..1 {\n      let i = 0;\n          let split: [u8; 32] = fields[i].to_be_bytes::<32>();\n          assert(split.len() == 32);\n          let mut serialized_actions_per_field = SERIALIZED_ACTIONS_PER_FIELD;\n          if serialized_actions_per_field * (i + 1) > MAX_ACTIONS {\n            serialized_actions_per_field = MAX_ACTIONS - serialized_actions_per_field * i;\n          }\n          assert(serialized_actions_per_field == SERIALIZED_ACTIONS_PER_FIELD);\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              let action_type = split[offset];\n              let actor = split[offset + 1];\n              let target_x = split[offset + 2];\n              let target_y = split[offset + 3];\n\n              softassert!(quote { valid }, quote { action_type as u32 <= MAX_ACTIONS_PER_CHARACTER }, quote { f\"Invalid action: action type {action_type} > {MAX_ACTIONS_PER_CHARACTER}\" });\n              softassert!(quote { valid }, quote { actor <= max_actor_id }, quote { f\"Invalid action: action actor {actor} > {max_actor_id}\" });\n              softassert!(quote { valid }, quote { (target_x < WIDTH) | (target_x == NOWHERE) }, quote { f\"Invalid action: action type {target_x} >= {WIDTH} and not {NOWHERE}\" });\n              softassert!(quote { valid }, quote { (target_y < HEIGHT) | (target_y == NOWHERE) }, quote { f\"Invalid action: action type {target_y} >= {HEIGHT} and not {NOWHERE}\" });\n\n              actions = actions.push_back(new_action(\n                  action_type,\n                  actor,\n                  target_x,\n                  target_y\n              ));\n              /*Action {\n                  action: split[offset],\n                  actor: split[offset + 1],\n                  target_x: split[offset + 2],\n                  target_y: split[offset + 3],\n              }*/\n          }\n      // }\n      // println(actions);\n      (valid, actions.as_array())\n  }\n\n  /**\n  * Warning: This function can throw!!!\n  */\n  pub fn serialize_actions(actor_id: u8, actions: [Action]) -> [Field; SERIALIZED_ACTIONS_ARRAY_SIZE] {\n      comptime {\n          assert(UNREADABLE_BYTES_PER_FIELD + SERIALIZED_ACTIONS_PER_FIELD * SERIALIZED_ACTION_BYTE_SIZE <= 32);\n          assert(SERIALIZED_ACTIONS_ARRAY_SIZE * SERIALIZED_ACTIONS_PER_FIELD == MAX_ACTIONS);\n          assert(SERIALIZED_ACTION_BYTE_SIZE >= 4);\n      }\n      assert(actions.len() <= MAX_ACTIONS);\n\n      let mut actions_stuffed: [Action; MAX_ACTIONS] = [new_action(WAIT, actor_id, NOWHERE, NOWHERE); MAX_ACTIONS];\n      for i in 0..actions.len() {\n          actions_stuffed[i] = actions[i];\n      }\n\n      let mut fields: [Field] = &[];\n      for i in 0..SERIALIZED_ACTIONS_ARRAY_SIZE {\n          let mut data: [u8; 32] = [0; 32];\n          for j in 0..SERIALIZED_ACTIONS_PER_FIELD {\n              let index = i * SERIALIZED_ACTIONS_PER_FIELD + j;\n              let action = actions_stuffed[index];\n              let offset = UNREADABLE_BYTES_PER_FIELD + j * SERIALIZED_ACTION_BYTE_SIZE;\n              data[offset] = get_action_type(action);\n              data[offset + 1] = get_action_actor(action);\n              data[offset + 2] = get_action_target_x(action);\n              data[offset + 3] = get_action_target_y(action);\n          }\n          fields = fields.push_back(std::field::bytes32_to_field(data));\n      }\n      fields.as_array()\n  }\n","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/arenalib/src/actionSerDe.nr"},"97":{"source":"use dep::std::{append::Append};\nuse skplg::UNREADABLE_BYTES_PER_FIELD;\n\npub trait ActionDefinitionPartBuilder<T> { fn new() -> T; }\npub type DEF_ROW<T> = (Quoted, u8, T);\npub comptime fn get_def_register_value(register: Quoted, bytes: u32, bits: u8, bitsize: u8) -> Quoted {\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    if bitsize == 8 {\n      quote { $register[$bytes] }\n      // quote { ($register / $multiplier) as u8 }\n    } else {\n      let divisor = 1 << bits;\n      let mask = std::wrapping_sub(1 << bitsize, 1);\n      if bitsize == 1 {\n        // quote { (($register / $multiplier) as u1) == 1 }\n        quote { (($register[$bytes] as u8 & $divisor as u8) != 0 as u8) }\n      } else {\n        quote { (($register[$bytes] as u8 / $divisor as u8) & $mask as u8) }\n        // quote { (($register / $multiplier) as u8) & $mask as u8 }\n      }\n    }\n}\npub comptime fn build_over_def_array<Env, T>(array: [DEF_ROW<T>], base_index: u32, builder: fn[Env] (u32, u8, Quoted, u8, T) -> Quoted) -> Quoted {\n  let mut result = quote {};\n  \n  let mut bits: u8 = 0;\n  let mut bytes: u32 = base_index;\n\n  for i in 0..array.len() {\n    let (varname, bitsize, args) = array[i];\n    assert(bitsize <= 8, f\"Invalid bit size: {bitsize}\");\n    if (bits + bitsize) > 8 {\n      bytes += 1;\n      bits = 0;\n    }\n    assert(bits < 8, f\"bits must not reach 8 or higher: {bits}\");\n\n    let new_result = builder(bytes, bits, varname, bitsize, args);\n    result = quote { $result $new_result };\n\n    bits += bitsize;\n  }\n  result\n}\npub comptime fn derive_action_def_def_builder<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let mut params: [(Quoted, Type)] = &[];\n  let mut last_byte: u32 = 0;\n  let mut result: Quoted = build_over_def_array(array, 0, |bytes, bits, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { u8 }.as_type() } else { quote { u8 }.as_type() };\n    params = params.push_back((varname, t));\n    let mut r = quote {};\n    if bytes != last_byte {\n      r = r.append(quote { , });\n    } else if (bytes + bits as u32) != 0 {\n      r = r.append(quote { + });\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = r.append(quote { $varname  });\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = r.append(quote { $varname as u8 * $multiplier });\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = r.append(quote { (( $varname & $mask ) * $multiplier) });\n      }\n    }\n    last_byte = bytes;\n    r\n  });\n  f.set_parameters(params);\n\n  let return_type = f.return_type();\n\n  f.set_body(quote { $return_type { register: [ $result ] } }.as_expr().unwrap());\n  // println(f.body());\n}\npub comptime fn get_action_def_def_register_size<T>(array: [DEF_ROW<T>]) -> u32 {\n  let mut size = 0;\n  let _ = build_over_def_array(array, 0, |bytes, _, _, _, _|{\n    size = bytes;\n    quote {}\n  });\n  size + 1\n}\npub comptime fn get_action_def_def_register_element_type() -> Type {\n  quote { u8 }.as_type()\n}\npub comptime fn get_action_def_def_register_type<T>(array: [DEF_ROW<T>]) -> Type {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  quote { [$et; $size] }.as_type()\n}\npub comptime fn derive_action_def_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  // let size = get_action_def_requirements_register_size();\n  let fields = s.fields([]);\n  assert(fields.len() == 1);\n  s.set_fields([(fields[0].0, get_action_def_def_register_type(array))]);\n}\npub comptime fn derive_action_def_def_struct_new<T>(f: FunctionDefinition, array: [DEF_ROW<T>]) {\n  let size = get_action_def_def_register_size(array);\n  let et = get_action_def_def_register_element_type();\n  let t = get_action_def_def_register_type(array);\n  f.set_return_type(t);\n  f.set_body(quote { ActionRequirement { [0 as $et; $size] } }.as_expr().unwrap());\n}\npub comptime fn derive_frontend_action_def_struct<T>(s: StructDefinition, array: [DEF_ROW<T>]) {\n  let mut fields: [(Quoted, Type)] = &[];\n  let _ = build_over_def_array(array, UNREADABLE_BYTES_PER_FIELD, |_, _, varname, bitsize, _|{\n    let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    fields = fields.push_back((varname, t));\n    quote {}\n  });\n  s.set_fields(fields);\n}\npub comptime fn derive_frontend_action_def_struct_builder<T>(param_name: Quoted, base_index: u32, array: [DEF_ROW<T>]) -> Quoted {\n  // let mut params: [(Quoted, Type)] = &[];\n  let mut first = true;\n  let mut result: Quoted = build_over_def_array(array, base_index, |bytes, bits, varname, bitsize, _|{\n    // let t = if bitsize == 1 { quote { bool }.as_type() } else { quote { u8 }.as_type() };\n    // params = params.push_back((varname, t));\n    // let pos = (bytes * 8 + bits as u32) as Field;\n    // let multiplier = 2.pow_32(pos);\n    let mut r = quote {};\n    if !first {\n      r = quote { , };\n    }\n    assert(bitsize > 0);\n    assert(bitsize <= 8);\n    if bitsize == 8 {\n      r = quote { $r $varname: $param_name[$bytes] };\n      // r = quote { $r $varname: ($param_name / $multiplier) as u8 };\n    } else {\n      let multiplier = 1 << bits;\n      if bitsize == 1 {\n        r = quote { $r $varname: ($param_name[$bytes] & $multiplier) != 0 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u1) == 1 };\n      } else {\n        let mask = std::wrapping_sub(1 << bitsize, 1);\n        r = quote { $r $varname: (( $param_name[$bytes] / $multiplier) & $mask ) as u8 };\n        // r = quote { $r $varname: (($param_name / $multiplier) as u8) & $mask as u8 };\n      }\n    }\n    first = false;\n    r\n  });\n  // f.set_parameters(params);\n\n  // let return_type = f.return_type();\n  // // f.set_return_type(return_type.as_type());\n  // f.set_return_data();\n  // f.set_return_public(true);\n  // // println(result);\n  // f.\nresult\n  // quote {  $result } };\n}\n\n// pub global ACTION_RESULT_COORDINATES_IDX_SELF: u8 = 0; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_TARGET: u8 = 1; // u2\n// pub global ACTION_RESULT_COORDINATES_IDX_INVISIBLE: u8 = 2; // u2\n\n// global YES: u8 = 1;\n// global NO: u8 = 0;\n// global MIN_STATUS: u8 = 0;\n// global MAX_STATUS: u8 = 15;\n\n// // pub type ActionDefinitionRegister = \n// pub fn build_action_def_requirements_none() -> ActionRequirement {\n//   build_action_def_requirements(\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1,\n//     MIN_STATUS,\n//     MAX_STATUS,\n//     0 as u8,\n//     255 as u8)\n// }\n// pub fn build_action_def_pre_calc_effects_idle() -> ActionPreCalcEffect {\n//   build_action_def_pre_calc_effect(\n//     WAIT,\n//     NO as u1,\n//     NO as u1,\n//     NO as u1)\n// }\n// // comptime fn no_requirements() -> CtString {\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1, \n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         0 as u8,\n// //         NO as u1)\n// // }\n// pub fn build_action_def_result_event_none() -> ActionResultEvent {\n//   build_action_def_result_event(\n//     0,\n//     0,\n//     ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//     NO_EVENT,\n//     NO_EVENT,\n//     0 as u8\n//   )\n// }\n// // comptime fn no_event() -> CtString {\n// //     build_action_event_def(NO_EVENT, NO_EVENT, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 0 as u8)\n// // }\n// pub fn build_wait_action_def() -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements_none(),\n//     build_action_def_pre_calc_effects_idle(),\n//     build_action_def_result_effects(\n//       0 as u8,\n//       0 as u8,\n//       1 as u8,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_wait_action_def() -> CtString {\n// //     build_action_def(\n// //         no_requirements(),\n// //         no_event(),\n// //         no_event(),\n// //         1 as u8,\n// //         0 as u8,\n// //         ACTION_RESULT_COORDINATES_IDX_SELF,\n// //         NO as u1,\n// //         WAIT\n// //     )\n// // }\n// // pub global WAIT_ACTION: ActionDefinition = comptime { let x = build_wait_action_def(); f\"[{x}]\".quoted_contents() };\n// pub fn build_sneak_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0 as u8,\n//       1 as u8),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0 as u8,\n//       0 as u8,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       YES as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_sneak_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     no_event(), // TODO: not sure if on-seen we should not send a move event instead - that way one could sneak and stay hidden, but not sneak while visible\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_move_action(energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       1),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_TARGET as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_MOVE,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_move_action(energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         1 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_MOVE, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     no_event(),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_TARGET,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_cast_action(this_action_id: u8, energy: u8, class: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_CAST,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_cast_action(this_action_id: u8, energy: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_CAST, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_ritual_action(cast_action_id: u8, energy: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       RITUAL_ROUNDS_FOR_WIN,\n//       MAX_STATUS,\n//       0,\n//       255),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_INVISIBLE,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         WIN,\n//         WIN_BY_RITUAL,\n//         255),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_ritual_action(this_action_id: u8, energy: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         255 as u8,\n// //         RITUAL_ROUNDS_FOR_WIN,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 255 as u8),\n// //     build_action_event_def(WIN, WIN_BY_RITUAL, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_INVISIBLE, 255 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       cast_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         evocation_type,\n//         radius),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_evocation_action(cast_action_id: u8, energy: u8, evocation_type: u8, range: u8, radius: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1), // TODO: Maybe set this to handle friendly fire???\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     build_action_event_def(RECEIVE_ATTACK, evocation_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, radius),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     cast_action_id)\n// // }\n// pub fn build_search_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         SEE_SEARCH_TRAP,\n//         0,\n//         1),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_search_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     build_action_event_def(SEE_SEARCH_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 1 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_attack_action(energy: u8, damage_type: u8, range: u8, damage: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, 0 as u8, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS, // should be max of shoot\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       this_action_id,\n//       YES as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_SELF,\n//         SEE_DRAW,\n//         class,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_draw_action(this_action_id: u8, energy: u8, range: u8, class: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(SEE_DRAW, class, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_SELF, 0 as u8),\n// //     no_event(),\n// //     1 as u8,\n// //     1 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     this_action_id)\n// // }\n// pub fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       min_cast_time,\n//       max_cast_time,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       draw_action_id,\n//       YES as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       YES as u1),\n//     [\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event(\n//         damage,\n//         damage_upcast,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         RECEIVE_ATTACK,\n//         damage_type,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_shoot_action(draw_action_id: u8, energy: u8, damage_type: u8, range: u8, damage: u8, damage_upcast: u8, min_cast_time: u8, max_cast_time: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         range,\n// //         min_cast_time,\n// //         max_cast_time,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(RECEIVE_ATTACK, damage_type, damage_upcast, damage, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     YES as u1,\n// //     draw_action_id)\n// // }\n// pub fn build_disarm_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       YES as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       1,\n//       1,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         DISARMED_TRAP,\n//         0,\n//         0),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_disarm_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         NO as u1),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     build_action_event_def(DISARMED_TRAP, NO as u1, 0 as u8, 0 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n// pub fn build_set_trap_action(energy: u8, range: u8) -> ActionDefinition {\n//   build_action_definition(\n//     build_action_def_requirements(\n//       YES as u1,\n//       YES as u1,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1,\n//       MIN_STATUS,\n//       MAX_STATUS,\n//       0,\n//       range),\n//     build_action_def_pre_calc_effect(\n//       0,\n//       NO as u1,\n//       YES as u1,\n//       NO as u1),\n//     build_action_def_result_effects(\n//       energy,\n//       0,\n//       0,\n//       ACTION_RESULT_COORDINATES_IDX_SELF as u1,\n//       NO as u1,\n//       NO as u1),\n//     [\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event_none(),\n//       build_action_def_result_event(\n//         0,\n//         0,\n//         ACTION_RESULT_COORDINATES_IDX_TARGET,\n//         ADD_OBSTACLE,\n//         TRAP,\n//         0),\n//       build_action_def_result_event_none()\n//     ])\n// }\n// // pub comptime fn build_set_trap_action(energy: u8, range: u8) -> CtString { build_action_def(\n// //     build_action_requirements_def(\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         YES as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         NO as u1,\n// //         range,\n// //         MIN_STATUS,\n// //         MAX_STATUS,\n// //         energy,\n// //         YES as u1),\n// //     no_event(),\n// //     build_action_event_def(ADD_OBSTACLE, TRAP, 0 as u8, 50 as u8, ACTION_RESULT_COORDINATES_IDX_TARGET, 0 as u8),\n// //     0 as u8,\n// //     0 as u8,\n// //     ACTION_RESULT_COORDINATES_IDX_SELF,\n// //     NO as u1,\n// //     WAIT)\n// // }\n\n// // pub fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // fn get_action_needs_target_free_space(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// // }\n// // fn get_action_needs_target_is_not_self(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// // }\n// // fn get_action_needs_status_visible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// // }\n// // fn get_action_needs_status_invisible(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// // }\n// // fn get_action_needs_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_sets_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_removes_status_hidden(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// // }\n// // fn get_action_max_range(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_MAX_RANGE]\n// // }\n// // fn get_action_needs_min_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MIN_STATUS]\n// // }\n// // fn get_action_needs_max_status(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_MAX_STATUS]\n// // }\n// // fn get_action_needed_energy(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDED_ENERGY]\n// // }\n// // fn get_action_unseen_event_is_internal(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_EVENT_IS_TRAP] == 1\n// // }\n// // fn get_action_result_event_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_event_not_seen_type(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// // }\n// // fn get_action_result_event_not_seen_subtype(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// // }\n// // fn get_action_result_event_not_seen_value_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_event_not_seen_value_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// // }\n// // fn get_action_result_event_not_seen_coord_idx(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// // }\n// // fn get_action_result_event_not_seen_radius(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// // }\n// // fn get_action_result_status_multiplier(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// // }\n// // fn get_action_result_status_fixed_addition(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// // }\n// // fn get_action_move_to_target(action: ActionDefinition) -> u1 {\n// //     action.register[action.base_index + ACTION_MOVE_TO_TARGET] as u1\n// // }\n// // fn get_action_is_continuous(action: ActionDefinition) -> bool {\n// //     action.register[action.base_index + ACTION_IS_CONTINUOUS] == 1\n// // }\n// // fn get_action_needs_previous_action(action: ActionDefinition) -> u8 {\n// //     action.register[action.base_index + ACTION_NEEDS_PREVIOUS_ACTION] as u8\n// // }\n\n// // pub global ACTION_DEFINITION_SIZE: u32 = (ACTION_REQUIREMENTS_FIELD_COUNT + 2 * ACTION_RESULT_EVENT_FIELD_COUNT + 5) as u32; // 2 bytes for move_to_target and status_multiplier\n// // pub global ACTION_DEFINITION_REGISTER_SIZE: u32 = ACTION_DEFINITION_SIZE * (1 + (MAX_ACTIONS_PER_CHARACTER - 1) * (CLASS_COUNT - 1));\n\n// // fn get_action_base_index(actor_id: u8, action_idx: u8) -> u16 {\n// //     if (action_idx == 0) | (action_idx as u32 >= MAX_ACTIONS_PER_CHARACTER) | (actor_id as u32 >= MAX_CHARACTERS) {\n// //         0 as u16\n// //     } else {\n// //         (actor_id as u16 * (MAX_ACTIONS_PER_CHARACTER - 1) as u16 + action_idx as u16) * ACTION_DEFINITION_SIZE as u16\n// //     }\n// // }\n\n// // pub struct ActionDefinitionRegister {\n// //   register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinitionRegister {\n// //   pub fn new(register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinitionRegister {\n// //     ActionDefinitionRegister {\n// //       register: register\n// //     }\n// //   }\n\n// //   pub fn resolve_action(self, action: Action) -> ActionDefinition {\n// //     ActionDefinition {\n// //       base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //       action: action,\n// //       register: self.register\n// //     }\n// //   }\n// // }\n\n// // pub struct ActionDefinition {\n// //     base_index: u16,\n// //     action: Action,\n// //     register: [u8; ACTION_DEFINITION_REGISTER_SIZE]\n// // }\n\n// // impl ActionDefinition {\n// //     pub fn new(action: Action, register: [u8; ACTION_DEFINITION_REGISTER_SIZE]) -> ActionDefinition {\n// //         ActionDefinition {\n// //             base_index: get_action_base_index(get_action_actor(action), get_action_type(action)),\n// //             action: action,\n// //             register: register\n// //         }\n// //     }\n// // }\n\n// // impl ResolvedAction for ActionDefinition {\n// //     fn get_action_needs_target_free_space(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: ActionDefinition) -> u1 {\n// //         self.register[self.base_index + ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: ActionDefinition) -> bool {\n// //         self.register[self.base_index + ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: ActionDefinition) -> u8 {\n// //         self.register[self.base_index + ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n\n// // pub struct TestActionDefinition {\n// //     pub register: [u8; ACTION_DEFINITION_SIZE],\n// //     pub action: Action,\n// // }\n\n// // impl ResolvedAction for TestActionDefinition {\n// //     fn get_action_needs_target_free_space(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_FREE_SPACE] == 1\n// //     }\n// //     fn get_action_needs_target_is_not_self(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_TARGET_IS_NOT_SELF] == 1\n// //     }\n// //     fn get_action_needs_status_visible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_VISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_invisible(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_INVISIBLE] == 1\n// //     }\n// //     fn get_action_needs_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_NEEDS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_sets_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_SETS_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_removes_status_hidden(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_REMOVES_STATUS_HIDDEN] == 1\n// //     }\n// //     fn get_action_max_range(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_MAX_RANGE]\n// //     }\n// //     fn get_action_needs_min_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MIN_STATUS]\n// //     }\n// //     fn get_action_needs_max_status(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_MAX_STATUS]\n// //     }\n// //     fn get_action_needed_energy(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDED_ENERGY]\n// //     }\n// //     fn get_action_unseen_event_is_internal(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_EVENT_IS_TRAP] == 1\n// //     }\n// //     fn get_action_result_event_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_event_not_seen_type(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_TYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_subtype(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_SUBTYPE]\n// //     }\n// //     fn get_action_result_event_not_seen_value_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_event_not_seen_value_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_VALUE_FIXED_ADDITION]\n// //     }\n// //     fn get_action_result_event_not_seen_coord_idx(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_COORD_IDX]\n// //     }\n// //     fn get_action_result_event_not_seen_radius(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_EVENT_NOT_SEEN_RADIUS]\n// //     }\n// //     fn get_action_result_status_multiplier(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_MULTIPLIER]\n// //     }\n// //     fn get_action_result_status_fixed_addition(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_RESULT_STATUS_FIXED_ADDITION]\n// //     }\n// //     fn get_action_move_to_target(self: TestActionDefinition) -> u1 {\n// //         self.register[ACTION_MOVE_TO_TARGET] as u1\n// //     }\n// //     fn get_action_is_continuous(self: TestActionDefinition) -> bool {\n// //         self.register[ACTION_IS_CONTINUOUS] == 1\n// //     }\n// //     fn get_action_needs_previous_action(self: TestActionDefinition) -> u8 {\n// //         self.register[ACTION_NEEDS_PREVIOUS_ACTION]\n// //     }\n\n// //     fn get_action_target_x(self) -> u8 {\n// //         get_action_target_x(self.action)\n// //     }\n// //     fn get_action_target_y(self) -> u8 {\n// //         get_action_target_y(self.action)\n// //     }\n// //     fn get_action_type(self) -> u8 {\n// //         get_action_type(self.action)\n// //     }\n// // }\n\n// // #[test]\n// // fn test_execute_action() {\n// //     let action = build_test_action_def!(build_move_action(4), quote { 1, 2, 3, 4 }); //new_action(1, 2, 3, 4);\n// //     let my_advance = 10;\n// //     let their_advance = 1;\n// //     let actor = Character {\n// //         id: 2,\n// //         x: 2,\n// //         y: 4,\n// //         target_x: 0,\n// //         target_y: 0,\n// //         health: 255,\n// //         damage_mod: 1,\n// //         last_action: WAIT,\n// //         class: MAGE,\n// //         is_hidden: 0 as u1,\n// //         has_been_seen: true,\n// //         status: 0,\n// //         actions: [[0 as u8; 29]; MAX_ACTIONS_PER_CHARACTER]\n// //     };\n// //     let energy = 15;\n// //     let my_obstacles = get_default_obstacles(0);\n// //     let their_obstacles = get_default_obstacles(1);\n// //     let (valid, event, internal_event, c, result_energy) = execute_action(\n// //         action,\n// //         my_advance,\n// //         their_advance,\n// //         actor,\n// //         energy,\n// //         my_obstacles,\n// //         their_obstacles\n// //     );\n// //     assert(valid, \"valid\");\n// //     assert(event.actor_id == actor.id, f\"{event}.actorid is not {actor}.id\");\n// //     assert(event.event == SEE_MOVE, f\"{event} is not {SEE_MOVE}\");\n// //     assert(event.x == action.get_action_target_x(), f\"{event}.target_x is not action target x\");\n// //     assert(event.y == action.get_action_target_y(), f\"{event}.target_y is not action target y\");\n// //     assert(c.x == event.x, f\"{c}.x is not action target x\");\n// //     assert(internal_event.event == NO_EVENT, f\"expected no internal event, got {internal_event}\");\n// //     assert(result_energy == 11, f\"{result_energy} != 11\");\n// // }\n\n// // #[export]\n// // pub fn build_action_register(actions: [])\n\npub type CharacterActionDefinition = [u8; 32];\npub type CharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [CharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedCharacterActionDefinition = Field;\npub type SerializedCharacterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER];\npub type SerializedRosterActionDefinitions<let MAX_ACTIONS_PER_CHARACTER: u32, let MAX_CHARACTERS: u32> = [SerializedCharacterActionDefinition; MAX_ACTIONS_PER_CHARACTER * MAX_CHARACTERS];","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionDefinition.nr"},"98":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionRequirements::{get_action_def_requirements_base_index, get_action_def_requirements_byte_size};\nuse std::append::Append;\n\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_PRE_CALC_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { pre_calc_effect_continues_action }, 3, |continued_action|quote { let continues_action: bool = $continued_action as u8 == actor_last_action; }),\n    action_def_def(quote { pre_calc_effect_is_continuous }, 1, |is_continuous|quote { let is_continuous: bool = $is_continuous as bool; }),\n    action_def_def(quote { pre_calc_effect_interrupts }, 1, |is_interrupting|quote { let is_interrupting: bool = $is_interrupting as bool; }),\n    action_def_def(quote { pre_calc_effect_allow_retargeting }, 1, |allows_retargetting|quote { let not_interrupted_through_retargeting: bool = $allows_retargetting as bool | ((action_target_x == actor_target_x) & (action_target_y == actor_target_y)); })\n];\npub comptime fn get_action_def_pre_calc_base_index() -> u32 {\n  get_action_def_requirements_byte_size()+get_action_def_requirements_base_index()\n}\n\npub comptime fn get_action_def_pre_calc_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_PRE_CALC_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_pre_calc_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n// }\n#[derive_action_def_def_pre_calc_event_struct]\npub struct ActionPreCalcEffect {\n  pub register: [u8; 32]\n}\nimpl ActionPreCalcEffect {\n  #[derive_action_def_pre_calc_effect_struct_new]\n  pub fn new() -> ActionPreCalcEffect {\n    ActionPreCalcEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_pre_calc_effect_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_pre_calc_effect_builder]\npub fn build_action_def_pre_calc_effect() -> pub ActionPreCalcEffect { ActionPreCalcEffect::new() }\n\npub comptime fn apply_action_pre_calc_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_pre_calc_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_PRE_CALC_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  quote {\n    $result\n    is_not_interrupted = (\n      ((!is_continuous) as u8 * (!is_interrupting) as u8) + // that's the ID of the wait action => leave status, but not continuous\n      ((is_continuous) as u8 * continues_action as u8 * not_interrupted_through_retargeting as u8)\n    ) > 0;\n\n    actor_progress *= is_not_interrupted as u8;\n  }\n}\n\npub comptime fn set_action_def_pre_calc_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_pre_calc_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_pre_calc_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_pre_calc_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n}\n#[derive_frontend_action_def_pre_calc_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefPreCalcEffects {}\n\n\npub comptime fn derive_frontend_action_def_pre_calc_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_pre_calc_base_index(), ACTION_DEF_DEF_PRE_CALC_EFFECTS);\n  quote { FrontendActionDefPreCalcEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionPreCalcEffect.nr"},"99":{"source":"use skplg::{UNREADABLE_BYTES_PER_FIELD, softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse std::append::Append;\nuse crate::{actionDefinition::derive_frontend_action_def_struct, actionDefinition::derive_frontend_action_def_struct_builder};\n\n    // fn get_action_req_target_free_space(self) -> bool;\n    // fn get_action_req_target_is_not_self(self) -> bool;\n    // fn get_action_req_status_visible(self) -> bool;\n    // fn get_action_req_status_invisible(self) -> bool;\n    // fn get_action_req_status_hidden(self) -> bool;\n    // fn get_action_req_max_range(self) -> u8;\n    // fn get_action_req_min_status(self) -> u8;\n    // fn get_action_req_max_status(self) -> u8;\n    // fn get_action_req_energy(self) -> u8;\n    // fn get_action_req_previous_action(self) -> u8;\npub type ActionDefDefRequirementCheck = (Quoted, Quoted);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, expr: Quoted, msg: Quoted) -> DEF_ROW<ActionDefDefRequirementCheck> {\n    (varname, bit_size, (expr, msg))\n}\n// comptime global ACTION_DEF_DEF_FIELD_COUNT: u32 = 11;\nglobal ACTION_DEF_DEF_REQUIREMENTS: [DEF_ROW<ActionDefDefRequirementCheck>] = [\n    action_def_def(quote { action_req_target_free_space }, 1, quote { can_move_to(distance, action_target_x, action_target_y, my_obstacles, their_obstacles) }, quote { f\"Target space cannot be moved to {action_target_x},{action_target_y}) cannot be moved to: {VIEW_DISTANCE},{my_obstacles},{their_obstacles}\" }),\n    action_def_def(quote { action_req_target_is_not_self }, 1, quote { (actor_x != action_target_x) | (actor_y != action_target_y) }, quote { f\"Target cannot be self ({action_target_x},{action_target_y})\" }),\n    action_def_def(quote { action_req_status_visible }, 1, quote { actor_is_in_view_range & !actor_is_hidden },  quote { f\"Character must be fully visible for action {action_type}: in_view_range: {actor_is_in_view_range} & !hidden {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_invisible }, 1, quote { !actor_is_in_view_range | actor_is_hidden }, quote { f\"Character must not be visible to perform action {action_type}: !in_view_range: {actor_is_in_view_range} || hidden: {actor_is_hidden} for enemy_advance {enemy_advance} @ {actor_x}\" }),\n    action_def_def(quote { action_req_status_hidden }, 1, quote { actor_is_hidden }, quote { f\"Character needs to be hidden to perform action {action_type}\" }),\n    // action_def_def(quote { action_req_previous_action }, 3, quote { true }, quote { f\"\" }),\n    action_def_def(quote { action_req_min_progress }, 4, quote { action_req_min_progress as u8 <= actor_progress as u8 }, quote { f\"Character needs min progress {action_req_min_progress} to perform action {action_type}, but only has {actor_progress}\" }),\n    action_def_def(quote { action_req_max_progress }, 4, quote { action_req_max_progress as u8 >= actor_progress as u8 }, quote { f\"Character cannot have a higher progress than {action_req_max_progress} to perform action {action_type}: got {actor_progress}\" }),\n    action_def_def(quote { action_req_status }, 4, quote { (action_req_status as u8 == 0 as u8) | (action_req_status as u8 == actor_progress as u8) }, quote { f\"Character can only perform action {action_type} while having status {action_req_status}. Invalid status {actor_status}\" }),\n    // action_def_def(quote { action_req_required_energy }, 4, quote { action_req_required_energy <= energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_req_required_energy}\" }),\n    action_def_def(quote { action_req_max_range }, 6, quote { distance as u16 <= (action_req_max_range as u16) * (action_req_max_range as u16) }, quote { f\"Character is out of range! Distance: {distance} > {action_req_max_range}: {{{actor_x},{actor_y}}} - {{{action_target_x},{action_target_y}}} with {action_req_max_range}\" }),\n];\npub comptime fn get_action_def_requirements_base_index() -> u32 {\n  UNREADABLE_BYTES_PER_FIELD as u32\n}\n\npub comptime fn get_action_def_requirements_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_REQUIREMENTS)\n}\n\ncomptime fn derive_action_def_def_req_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n// comptime fn derive_action_def_requirements_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_REQUIREMENTS);\n// }\n\n#[derive_action_def_def_req_struct]\npub struct ActionRequirement {\n  pub register: [u8; 32]\n}\nimpl ActionRequirement {\n  #[derive_action_def_requirements_struct_new()]\n  pub fn new() -> ActionRequirement {\n    ActionRequirement { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_req_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[export]\n#[derive_action_def_def_req_builder]\npub fn build_action_def_requirements() -> pub ActionRequirement { ActionRequirement::new() }\n\npub comptime fn validate_action_requirements(valid_varname: Quoted, register: Quoted) -> Quoted {\n  let mut result = build_over_def_array(ACTION_DEF_DEF_REQUIREMENTS, get_action_def_requirements_base_index(), |bytes, bits, varname, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    // let varname = f\"action_requirement_{i}_is_valid\".quoted_contents();\n    let (checkexpr, msg) = args;\n    let check = if bitsize == 1 { quote { !($varname as bool) | ($checkexpr) } } else { quote { $checkexpr } };\n    let sa = softassert(valid_varname, check, msg);\n    quote {\n      let $varname = $expr;\n      $sa\n    }\n  });\n  // println(result);\n  // quote { assert(1==1); }\n  result\n}\n\npub comptime fn set_action_def_requirements_in_action_def(requirements: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_requirements_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_requirements_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $requirements.register[$i]; });\n    // result = quote { $result $action_def += $requirements.register[$i] as Field * $multiplier; };\n    // multiplier *= 2.pow_32(8);\n  }\n  // println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_requirements_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_REQUIREMENTS);\n}\n#[derive_frontend_action_def_requirements_struct]\n#[derive(Default)]\npub struct FrontendActionDefRequirements {}\n\n\npub comptime fn derive_frontend_action_def_requirements_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_requirements_base_index(), ACTION_DEF_DEF_REQUIREMENTS);\n  // println(content);\n  quote { FrontendActionDefRequirements { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionRequirements.nr"},"100":{"source":"// pub type ActionResultEffects = (bool, bool, bool, bool);\n// pub comptime fn to_action_result_effect(set_hidden: bool, remove_hidden: bool, move_to_target: bool, continuous: bool) -> Quoted {\n//     quote { ($set_hidden, $remove_hidden, $move_to_target, $continuous ) }\n// }\n\n// pub comptime fn get_sets_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_removes_status_hidden_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_move_to_target_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_is_continuous_of_action_result_effect(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse skplg::softassert;\nuse crate::actionPreCalcEffect::{get_action_def_pre_calc_base_index, get_action_def_pre_calc_effects_byte_size};\nuse std::append::Append;\n\npub type ActionDefDefPreCalcEffect = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefPreCalcEffect> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EFFECTS: [DEF_ROW<ActionDefDefPreCalcEffect>] = [\n    action_def_def(quote { action_result_required_energy }, 4, |action_required_energy|{\n      let check = softassert(quote { is_valid }, quote { action_required_energy <= result_energy }, quote { f\"Character has insufficient energy left to perform action {action_type}: {energy} < {action_required_energy}\" });\n      quote {\n        let action_required_energy = $action_required_energy;\n        $check\n        result_energy = std::wrapping_sub(result_energy, action_required_energy);\n      }\n    }),\n    action_def_def(quote { action_result_progress_increment }, 4, |progress_increment|quote { let action_result_effect_progress_increment: u32 = $progress_increment as u32; }),\n    action_def_def(quote { action_result_progress_multiplier }, 2, |progress_multiplier|quote { let action_result_effect_progress_multiplier: u32 = $progress_multiplier as u32; }),\n    action_def_def(quote { action_result_move_to_target }, 1, |move_to_target|quote { result_coords = coords[$move_to_target as u8]; }),\n    action_def_def(quote { action_result_hide }, 1, |hide|quote { let action_result_effect_hide: bool = $hide as bool; }),\n    action_def_def(quote { action_result_reveal }, 1, |leave_shadows|quote { let action_result_effect_leave_shadows: bool = $leave_shadows as bool; })\n];\npub comptime fn get_action_def_result_effect_base_index() -> u32 {\n  get_action_def_pre_calc_base_index() + get_action_def_pre_calc_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_effects_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EFFECTS)\n}\n\ncomptime fn derive_action_def_def_result_effect_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n// }\n#[derive_action_def_def_result_effect_struct]\npub struct ActionResultEffect {\n  pub register: [u8; 32]\n}\nimpl ActionResultEffect {\n  //#[derive_action_def_result_effects_struct_new]\n  pub fn new() -> ActionResultEffect {\n    ActionResultEffect { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_effects_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[export]\n#[derive_action_def_def_result_effects_builder]\npub fn build_action_def_result_effects() -> pub ActionResultEffect { ActionResultEffect::new() }\n\npub comptime fn apply_action_result_effects(register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_effect_base_index();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EFFECTS, base_index, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n// println(result);\n  quote {\n    $result\n\n    let result_progress_raw = actor_progress as u32 * action_result_effect_progress_multiplier + action_result_effect_progress_increment;\n    //softassert!(quote { is_valid }, quote { result_progress_raw <= MAX_PROGRESS as u32 }, quote { f\"Invalid result progress: {result_progress_raw} > {MAX_PROGRESS}\" });\n    result_progress = result_progress_raw as u8;\n\n    result_is_hidden = (result_is_hidden & !action_result_effect_leave_shadows) | action_result_effect_hide;\n    result_is_visible = !result_is_hidden & is_visible(enemy_advance, result_coords.0);\n  }\n}\n\npub comptime fn set_action_def_result_effects_in_action_def(effects: Quoted, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let base_index = get_action_def_result_effect_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  for i in 0..get_action_def_result_effects_byte_size() {\n    result = result.append(quote { $action_def[$base_index + $i] = $effects.register[$i]; });\n    // result = quote { $result $action_def += $effects.register[$i] as Field * $multiplier; };\n    // multiplier *= 2;\n  }\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_effects_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EFFECTS);\n}\n#[derive_frontend_action_def_result_effects_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEffects {}\n\n\npub comptime fn derive_frontend_action_def_result_effects_struct_builder(param_name: Quoted) -> Quoted {\n  let content = derive_frontend_action_def_struct_builder(param_name, get_action_def_result_effect_base_index(), ACTION_DEF_DEF_RESULT_EFFECTS);\n  quote { FrontendActionDefResultEffects { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEffect.nr"},"101":{"source":"// pub global ACTION_RESULT_EVENT_TYPE: u8 = 0;\n// pub global ACTION_RESULT_EVENT_SUBTYPE: u8 = 1;\n// pub global ACTION_RESULT_EVENT_VALUE_MULTIPLIER: u8 = 2;\n// pub global ACTION_RESULT_EVENT_VALUE_FIXED_ADDITION: u8 = 3;\n// pub global ACTION_RESULT_EVENT_COORD_IDX: u8 = 4;\n// pub global ACTION_RESULT_EVENT_RADIUS: u8 = 5;\n// pub comptime fn to_action_result_event(event_type: Quoted, subtype: Quoted, val_mul: Quoted, val_add: Quoted, coord_idx: Quoted, radius: Quoted) -> Quoted {\n//     quote { ($event_type, $subtype, $val_mul, $val_add, $coord_idx, $radius)}\n// }\n// pub comptime fn get_type_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.0 }\n// }\n// pub comptime fn get_subtype_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.1 }\n// }\n// pub comptime fn get_value_multiplier_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.2 }\n// }\n// pub comptime fn get_value_addition_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.3 }\n// }\n// pub comptime fn get_coord_idx_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.4 }\n// }\n// pub comptime fn get_radius_of_action_result_event_type(varname: Quoted) -> Quoted {\n//     quote { $varname.5 }\n// }\n// pub type ActionResultEventDefinition = (u8, u8, u8, u8, u8, u8);\n\nuse skplg::{softassert};\nuse crate::actionDefinition::{DEF_ROW, build_over_def_array, derive_action_def_def_struct, derive_action_def_def_builder, get_def_register_value, get_action_def_def_register_size};\nuse crate::actionDefinition::{derive_frontend_action_def_struct, derive_frontend_action_def_struct_builder};\nuse crate::actionResultEffect::{get_action_def_result_effect_base_index, get_action_def_result_effects_byte_size};\n\npub type ActionDefDefResultEventRow = (fn (Quoted) -> Quoted,);\ncomptime fn action_def_def(varname: Quoted, bit_size: u8, handler: fn (Quoted) -> Quoted) -> DEF_ROW<ActionDefDefResultEventRow> {\n    (varname, bit_size, (handler,))\n}\nglobal ACTION_DEF_DEF_RESULT_EVENTS: [DEF_ROW<ActionDefDefResultEventRow>] = [\n    action_def_def(quote { result_event_value_fixed_addition }, 8, |fixed_addition|quote { result_event_value += $fixed_addition as u32; }),\n    action_def_def(quote { result_event_value_scaled_by_progress }, 4, |factor|quote { result_event_value += ($factor as u32) * (actor_progress as u32); }),\n    action_def_def(quote { result_event_coords_idx }, 2, |coords_idx|{\n     let check = softassert(quote { is_valid }, quote { $coords_idx < 3 }, quote { f\"Invalid event coord idx: {result_event_coords_idx} does not fit in u8!\" });\n      quote {\n        let result_event_coords_idx: u8 = $coords_idx;\n        $check\n        result_event_coords = coords[result_event_coords_idx & 3];\n      }\n    }),\n    action_def_def(quote { result_event_type }, 4, |event_type|quote { result_event_type = $event_type; }),\n    action_def_def(quote { result_event_subtype }, 8, |event_subtype|quote { result_event_subtype = $event_subtype; }),\n    action_def_def(quote { result_event_radius }, 6, |event_radius|quote { result_event_radius = $event_radius; })\n];\ncomptime fn get_action_def_result_event_base_index() -> u32 {\n  get_action_def_result_effect_base_index() + get_action_def_result_effects_byte_size()\n}\n\npub comptime fn get_action_def_result_event_byte_size() -> u32 {\n  get_action_def_def_register_size(ACTION_DEF_DEF_RESULT_EVENTS)\n}\n\n\ncomptime fn derive_action_def_def_result_event_struct(s: StructDefinition) {\n  derive_action_def_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n// comptime fn derive_action_def_result_event_struct_new(f: FunctionDefinition) {\n//   derive_action_def_def_struct_new(f, ACTION_DEF_DEF_RESULT_EVENTS);\n// }\n#[derive_action_def_def_result_event_struct]\npub struct ActionResultEvent {\n  pub register: [u8; 32]\n}\nimpl ActionResultEvent {\n  #[derive_action_def_result_event_struct_new]\n  pub fn new() -> ActionResultEvent {\n    ActionResultEvent { register: &[].as_array() }\n  }\n}\n\ncomptime fn derive_action_def_def_result_event_builder(f: FunctionDefinition) {\n  derive_action_def_def_builder(f, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[export]\n#[derive_action_def_def_result_event_builder]\npub fn build_action_def_result_event() -> pub ActionResultEvent { ActionResultEvent::new() }\n\npub comptime fn build_result_event(event_idx: u32, events_collection_varname: Quoted, valid_varname: Quoted, register: Quoted) -> Quoted {\n  let base_index = get_action_def_result_event_base_index();\n  let event_data_start_idx = base_index + event_idx * get_action_def_result_event_byte_size();\n  let mut result = build_over_def_array(ACTION_DEF_DEF_RESULT_EVENTS, event_data_start_idx, |bytes, bits, _, bitsize, args|{\n    let expr = get_def_register_value(register, bytes, bits, bitsize);\n    \n    //let varname = f\"${varname}${event_idx}\".quoted_contents();\n    // let (checkexpr, msg) = args;\n    let (handler) = args;\n    \n    handler(expr)\n  });\n\n  //let value_valid_msg = f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\";\n  let value_valid = softassert(valid_varname, quote { result_event_value <= 255 as u32 }, quote { f\"Invalid event value ({event_idx}): result_event_value does not fit in u8!\" });\n  let full_result = quote {\n    let event_idx = $event_idx as u8;\n    let mut result_event_type: u8 = 0;\n    let mut result_event_subtype: u8 = 0;\n    let mut result_event_coords: (u8,u8) = (NOWHERE, NOWHERE);\n    let mut result_event_value: u32 = 0;\n    let mut result_event_radius: u8 = 0;\n    $result\n    $value_valid\n\n    $events_collection_varname.push(build_subtype_value_event(\n      result_event_type,\n      actor_id,\n      result_event_coords.0,\n      result_event_coords.1,\n      result_event_value as u8,\n      result_event_subtype,\n      result_event_radius\n    ));\n  };\n  // println(full_result);\n  full_result\n}\n\npub comptime fn set_action_def_result_event_in_action_def(event: Quoted, event_count: u32, action_def: Quoted) -> Quoted {\n  let mut result = quote {};\n  let mut base_index = get_action_def_result_event_base_index();\n  // let mut multiplier = 2.pow_32(base_index as Field * 8);\n  // println(\"start\");\n  for event_idx in 0..event_count {\n    let idx = event_idx * get_action_def_result_event_byte_size();\n    for i in 0..get_action_def_result_event_byte_size() {\n      let destination_idx = base_index + idx + i;\n      result = quote { $result $action_def[$destination_idx] = $event[$event_idx].register[$i]; };\n      // result = quote { $result $action_def += $event[$event_idx].register[$i] as Field * $multiplier; };\n      // multiplier *= 2;\n    }\n  }\n  //println(result);\n  result\n}\n\ncomptime fn derive_frontend_action_def_result_event_struct(s: StructDefinition) {\n  derive_frontend_action_def_struct(s, ACTION_DEF_DEF_RESULT_EVENTS);\n}\n#[derive_frontend_action_def_result_event_struct]\n#[derive(Default)]\npub struct FrontendActionDefResultEvent {}\n\n\npub comptime fn derive_frontend_action_def_result_event_struct_builder(param_name: Quoted, event_idx: u32) -> Quoted {\n  let idx = get_action_def_result_event_base_index() + event_idx * get_action_def_result_event_byte_size();\n  let content = derive_frontend_action_def_struct_builder(param_name, idx, ACTION_DEF_DEF_RESULT_EVENTS);\n  quote { FrontendActionDefResultEvent { $content } }\n}","path":"/home/andreas/git_repositories/heroes-of-penta-arena/circuits/skplam/src/actionResultEvent.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert","directive_to_radix"]}